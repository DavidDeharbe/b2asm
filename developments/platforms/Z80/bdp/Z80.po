THEORY ProofList IS
  _f(1) & _f(2) & _f(15) & _f(142) & ext_RESET.6,(_f(521) => _f(12));
  _f(1) & _f(2) & _f(15) & _f(142) & ext_RESET.5,(_f(567) => _f(10));
  _f(1) & _f(2) & _f(15) & _f(142) & ext_RESET.4,(_f(460) => _f(701));
  _f(1) & _f(2) & _f(15) & _f(142) & ext_RESET.3,(_f(333) => _f(8));
  _f(1) & _f(2) & _f(15) & _f(142) & ext_RESET.2,(_f(148) => _f(700));
  _f(1) & _f(2) & _f(15) & _f(142) & ext_RESET.1,(_f(148) => _f(699));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.40,(_f(697) & _f(333) => _f(698));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.39,(_f(696) & _f(144) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.38,(_f(695) & _f(144) => _f(666));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.37,(_f(695) & _f(144) => _f(665));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.36,(_f(693) & _f(333) => _f(694));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.35,(_f(692) & _f(144) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.34,(_f(691) & _f(144) => _f(666));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.33,(_f(691) & _f(144) => _f(665));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.32,(_f(690) & _f(333) => _f(669));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.31,(_f(689) & _f(144) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.30,(_f(688) & _f(144) => _f(666));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.29,(_f(688) & _f(144) => _f(665));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.28,(_f(687) & _f(333) => _f(669));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.27,(_f(686) & _f(144) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.26,(_f(685) & _f(144) => _f(666));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.25,(_f(685) & _f(144) => _f(665));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.24,(_f(684) & _f(333) => _f(669));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.23,(_f(683) & _f(144) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.22,(_f(682) & _f(144) => _f(666));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.21,(_f(682) & _f(144) => _f(665));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.20,(_f(681) & _f(333) => _f(669));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.19,(_f(680) & _f(144) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.18,(_f(679) & _f(144) => _f(666));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.17,(_f(679) & _f(144) => _f(665));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.16,(_f(678) & _f(333) => _f(669));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.15,(_f(677) & _f(144) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.14,(_f(676) & _f(144) => _f(666));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.13,(_f(676) & _f(144) => _f(665));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.12,(_f(675) & _f(333) => _f(669));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.11,(_f(674) & _f(144) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.10,(_f(673) & _f(144) => _f(666));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.9,(_f(673) & _f(144) => _f(665));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.8,(_f(672) & _f(333) => _f(669));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.7,(_f(671) & _f(144) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.6,(_f(670) & _f(144) => _f(666));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.5,(_f(670) & _f(144) => _f(665));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.4,(_f(668) & _f(333) => _f(669));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.3,(_f(667) & _f(157) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.2,(_f(664) & _f(157) => _f(666));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(663) & ext_INT.1,(_f(664) & _f(157) => _f(665));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(656) & ext_NMI.5,(_f(661) & _f(521) => _f(12));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(656) & ext_NMI.4,(_f(661) & _f(333) => _f(662));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(656) & ext_NMI.3,(_f(660) & _f(157) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(656) & ext_NMI.2,(_f(657) & _f(157) => _f(659));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(656) & ext_NMI.1,(_f(657) & _f(157) => _f(658));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(653) & LDDR.5,(_f(655) & _f(148) => _f(648));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(653) & LDDR.4,(_f(655) & _f(148) => _f(647));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(653) & LDDR.3,(_f(654) & _f(148) => _f(648));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(653) & LDDR.2,(_f(654) & _f(148) => _f(647));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(653) & LDDR.1,(_f(651) & _f(157) => _f(559));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(650) & LDD.3,(_f(652) & _f(148) => _f(644));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(650) & LDD.2,(_f(652) & _f(148) => _f(643));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(650) & LDD.1,(_f(651) & _f(157) => _f(559));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(645) & LDIR.5,(_f(649) & _f(148) => _f(648));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(645) & LDIR.4,(_f(649) & _f(148) => _f(647));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(645) & LDIR.3,(_f(646) & _f(148) => _f(648));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(645) & LDIR.2,(_f(646) & _f(148) => _f(647));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(645) & LDIR.1,(_f(641) & _f(157) => _f(559));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(640) & LDI.3,(_f(642) & _f(148) => _f(644));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(640) & LDI.2,(_f(642) & _f(148) => _f(643));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(640) & LDI.1,(_f(641) & _f(157) => _f(559));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(636) & EX_9SP0_IY.4,(_f(639) & _f(457) => _f(635));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(636) & EX_9SP0_IY.3,(_f(638) & _f(157) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(636) & EX_9SP0_IY.2,(_f(637) & _f(157) => _f(632));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(636) & EX_9SP0_IY.1,(_f(637) & _f(157) => _f(631));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(629) & EX_9SP0_IX.4,(_f(634) & _f(454) => _f(635));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(629) & EX_9SP0_IX.3,(_f(633) & _f(157) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(629) & EX_9SP0_IX.2,(_f(630) & _f(157) => _f(632));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(629) & EX_9SP0_IX.1,(_f(630) & _f(157) => _f(631));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(622) & EX_9SP0_HL.5,(_f(626) & _f(148) => _f(628));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(622) & EX_9SP0_HL.4,(_f(626) & _f(148) => _f(627));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(622) & EX_9SP0_HL.3,(_f(625) & _f(157) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(622) & EX_9SP0_HL.2,(_f(157) => _f(624));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(622) & EX_9SP0_HL.1,(_f(157) => _f(623));
  _f(1) & _f(2) & _f(15) & _f(142) & EXX.2,(_f(148) => _f(621));
  _f(1) & _f(2) & _f(15) & _f(142) & EXX.1,(_f(148) => _f(620));
  _f(1) & _f(2) & _f(15) & _f(142) & EX_AF_AF_.2,(_f(148) => _f(619));
  _f(1) & _f(2) & _f(15) & _f(142) & EX_AF_AF_.1,(_f(148) => _f(618));
  _f(1) & _f(2) & _f(15) & _f(142) & EX_DE_HL.2,(_f(148) => _f(617));
  _f(1) & _f(2) & _f(15) & _f(142) & EX_DE_HL.1,(_f(148) => _f(616));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(612) & POP_qq.2,(_f(613) & _f(148) => _f(615));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(612) & POP_qq.1,(_f(613) & _f(148) => _f(614));
  _f(1) & _f(2) & _f(15) & _f(142) & PUSH_IY.1,(_f(611) & _f(157) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & PUSH_IX.1,(_f(610) & _f(157) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(608) & PUSH_qq.1,(_f(609) & _f(157) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(603) & LD_9nn0_IY.3,(_f(607) & _f(157) => _f(588));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(603) & LD_9nn0_IY.2,(_f(604) & _f(157) => _f(606));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(603) & LD_9nn0_IY.1,(_f(604) & _f(157) => _f(605));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(598) & LD_9nn0_IX.3,(_f(602) & _f(157) => _f(588));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(598) & LD_9nn0_IX.2,(_f(599) & _f(157) => _f(601));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(598) & LD_9nn0_IX.1,(_f(599) & _f(157) => _f(600));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(589) & LD_9nn0_dd.6,(_f(597) & _f(144) => _f(588));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(589) & LD_9nn0_dd.5,(_f(594) & _f(144) => _f(596));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(589) & LD_9nn0_dd.4,(_f(594) & _f(144) => _f(595));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(589) & LD_9nn0_dd.3,(_f(593) & _f(157) => _f(588));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(589) & LD_9nn0_dd.2,(_f(590) & _f(157) => _f(592));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(589) & LD_9nn0_dd.1,(_f(590) & _f(157) => _f(591));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(584) & LD_9nn0_HL.3,(_f(587) & _f(157) => _f(588));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(584) & LD_9nn0_HL.2,(_f(157) => _f(586));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(584) & LD_9nn0_HL.1,(_f(157) => _f(585));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(583) & LD_IY_9nn0.1,(_f(457) => _f(580));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(582) & LD_IX_9nn0.1,(_f(454) => _f(580));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(579) & LD_dd_9nn0.3,(_f(581) & _f(148) => _f(573));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(579) & LD_dd_9nn0.2,(_f(581) & _f(148) => _f(572));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(579) & LD_dd_9nn0.1,(_f(570) & _f(460) => _f(580));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(576) & LD_HL_9nn0.2,(_f(148) => _f(578));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(576) & LD_HL_9nn0.1,(_f(148) => _f(577));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(575) & LD_IY_nn.1,(_f(457) => _f(561));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(574) & LD_IX_nn.1,(_f(454) => _f(561));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(569) & LD_dd_nn.3,(_f(571) & _f(148) => _f(573));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(569) & LD_dd_nn.2,(_f(571) & _f(148) => _f(572));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(569) & LD_dd_nn.1,(_f(570) & _f(460) => _f(561));
  _f(1) & _f(2) & _f(15) & _f(142) & LD_R_A.1,(_f(568) => _f(556));
  _f(1) & _f(2) & _f(15) & _f(142) & LD_I_A.1,(_f(567) => _f(556));
  _f(1) & _f(2) & _f(15) & _f(142) & LD_A_R.2,(_f(148) => _f(566));
  _f(1) & _f(2) & _f(15) & _f(142) & LD_A_R.1,(_f(148) => _f(565));
  _f(1) & _f(2) & _f(15) & _f(142) & LD_A_I.2,(_f(148) => _f(564));
  _f(1) & _f(2) & _f(15) & _f(142) & LD_A_I.1,(_f(148) => _f(563));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(560) & LD_9nn0_A.3,(_f(157) => _f(562));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(560) & LD_9nn0_A.2,(_f(157) => _f(556));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(560) & LD_9nn0_A.1,(_f(157) => _f(561));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(558) & LD_9DE0_A.2,(_f(157) => _f(559));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(558) & LD_9DE0_A.1,(_f(157) => _f(556));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(555) & LD_9BC0_A.2,(_f(157) => _f(557));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(555) & LD_9BC0_A.1,(_f(157) => _f(556));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(552) & LD_A_9nn0.2,(_f(148) => _f(554));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(552) & LD_A_9nn0.1,(_f(148) => _f(553));
  _f(1) & _f(2) & _f(15) & _f(142) & LD_A_9DE0.2,(_f(148) => _f(551));
  _f(1) & _f(2) & _f(15) & _f(142) & LD_A_9DE0.1,(_f(148) => _f(550));
  _f(1) & _f(2) & _f(15) & _f(142) & LD_A_9BC0.2,(_f(148) => _f(549));
  _f(1) & _f(2) & _f(15) & _f(142) & LD_A_9BC0.1,(_f(148) => _f(548));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(547) & LD_9IY_d0_n.3,(_f(157) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(547) & LD_9IY_d0_n.2,(_f(157) => _f(545));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(547) & LD_9IY_d0_n.1,(_f(157) => _f(214));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(546) & LD_9IX_d0_n.3,(_f(157) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(546) & LD_9IX_d0_n.2,(_f(157) => _f(545));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(546) & LD_9IX_d0_n.1,(_f(157) => _f(207));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(544) & LD_9HL0_n.2,(_f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(544) & LD_9HL0_n.1,(_f(157) => _f(545));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(543) & LD_9IY_d0_r.3,(_f(157) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(543) & LD_9IY_d0_r.2,(_f(157) => _f(541));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(543) & LD_9IY_d0_r.1,(_f(157) => _f(214));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(542) & LD_9IX_d0_r.3,(_f(157) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(542) & LD_9IX_d0_r.2,(_f(157) => _f(541));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(542) & LD_9IX_d0_r.1,(_f(157) => _f(207));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(540) & LD_9HL0_r.2,(_f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(540) & LD_9HL0_r.1,(_f(157) => _f(541));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(537) & LD_r_9IY_d0.2,(_f(148) => _f(539));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(537) & LD_r_9IY_d0.1,(_f(148) => _f(538));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(534) & LD_r_9IX_d0.2,(_f(148) => _f(536));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(534) & LD_r_9IX_d0.1,(_f(148) => _f(535));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(530) & LD_r_9HL0.2,(_f(531) & _f(148) => _f(533));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(530) & LD_r_9HL0.1,(_f(531) & _f(148) => _f(532));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(527) & LD_r_n_.2,(_f(148) => _f(529));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(527) & LD_r_n_.1,(_f(148) => _f(528));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(524) & LD_r_r_.2,(_f(148) => _f(526));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(524) & LD_r_r_.1,(_f(148) => _f(525));
  _f(1) & _f(2) & _f(15) & _f(142) & IM2.1,(_f(523) => _f(522));
  _f(1) & _f(2) & _f(15) & _f(142) & IM1.2,(_f(523) => _f(522));
  _f(1) & _f(2) & _f(15) & _f(142) & IM1.1,(_f(523) => _f(12));
  _f(1) & _f(2) & _f(15) & _f(142) & IM0.1,(_f(523) => _f(12));
  _f(1) & _f(2) & _f(15) & _f(142) & EI.1,(_f(521) => _f(522));
  _f(1) & _f(2) & _f(15) & _f(142) & DI.1,(_f(521) => _f(12));
  _f(1) & _f(2) & _f(15) & _f(142) & SCF.2,(_f(148) => _f(520));
  _f(1) & _f(2) & _f(15) & _f(142) & SCF.1,(_f(148) => _f(519));
  _f(1) & _f(2) & _f(15) & _f(142) & CCF.2,(_f(148) => _f(518));
  _f(1) & _f(2) & _f(15) & _f(142) & CCF.1,(_f(148) => _f(517));
  _f(1) & _f(2) & _f(15) & _f(142) & NEG.2,(_f(516) & _f(148) => _f(492));
  _f(1) & _f(2) & _f(15) & _f(142) & NEG.1,(_f(516) & _f(148) => _f(491));
  _f(1) & _f(2) & _f(15) & _f(142) & CPL.2,(_f(513) & _f(148) => _f(515));
  _f(1) & _f(2) & _f(15) & _f(142) & CPL.1,(_f(513) & _f(148) => _f(514));
  _f(1) & _f(2) & _f(15) & _f(142) & DAA.2,(_f(510) & _f(148) => _f(512));
  _f(1) & _f(2) & _f(15) & _f(142) & DAA.1,(_f(510) & _f(148) => _f(511));
  _f(1) & _f(2) & _f(15) & _f(142) & CPDR.4,(_f(508) & _f(148) => _f(506));
  _f(1) & _f(2) & _f(15) & _f(142) & CPDR.3,(_f(508) & _f(148) => _f(505));
  _f(1) & _f(2) & _f(15) & _f(142) & CPDR.2,(_f(509) & _f(148) => _f(506));
  _f(1) & _f(2) & _f(15) & _f(142) & CPDR.1,(_f(509) & _f(148) => _f(505));
  _f(1) & _f(2) & _f(15) & _f(142) & CPD.2,(_f(508) & _f(148) => _f(506));
  _f(1) & _f(2) & _f(15) & _f(142) & CPD.1,(_f(508) & _f(148) => _f(505));
  _f(1) & _f(2) & _f(15) & _f(142) & CPIR.4,(_f(504) & _f(148) => _f(506));
  _f(1) & _f(2) & _f(15) & _f(142) & CPIR.3,(_f(504) & _f(148) => _f(505));
  _f(1) & _f(2) & _f(15) & _f(142) & CPIR.2,(_f(507) & _f(148) => _f(506));
  _f(1) & _f(2) & _f(15) & _f(142) & CPIR.1,(_f(507) & _f(148) => _f(505));
  _f(1) & _f(2) & _f(15) & _f(142) & CPI.2,(_f(504) & _f(148) => _f(506));
  _f(1) & _f(2) & _f(15) & _f(142) & CPI.1,(_f(504) & _f(148) => _f(505));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(503) & SBC_A_9IY_d0.2,(_f(502) & _f(148) => _f(492));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(503) & SBC_A_9IY_d0.1,(_f(502) & _f(148) => _f(491));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(501) & SBC_A_9IX_d0.2,(_f(502) & _f(148) => _f(492));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(501) & SBC_A_9IX_d0.1,(_f(502) & _f(148) => _f(491));
  _f(1) & _f(2) & _f(15) & _f(142) & SBC_A_9HL0.2,(_f(500) & _f(148) => _f(492));
  _f(1) & _f(2) & _f(15) & _f(142) & SBC_A_9HL0.1,(_f(500) & _f(148) => _f(491));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(498) & SBC_A_n.2,(_f(499) & _f(148) => _f(492));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(498) & SBC_A_n.1,(_f(499) & _f(148) => _f(491));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(496) & SBC_A_r.2,(_f(497) & _f(148) => _f(492));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(496) & SBC_A_r.1,(_f(497) & _f(148) => _f(491));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(495) & SUB_A_9IY_d0.2,(_f(409) & _f(148) => _f(492));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(495) & SUB_A_9IY_d0.1,(_f(409) & _f(148) => _f(491));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(494) & SUB_A_9IX_d0.2,(_f(407) & _f(148) => _f(492));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(494) & SUB_A_9IX_d0.1,(_f(407) & _f(148) => _f(491));
  _f(1) & _f(2) & _f(15) & _f(142) & SUB_A_9HL0.2,(_f(405) & _f(148) => _f(492));
  _f(1) & _f(2) & _f(15) & _f(142) & SUB_A_9HL0.1,(_f(405) & _f(148) => _f(491));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(493) & SUB_A_n.2,(_f(404) & _f(148) => _f(492));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(493) & SUB_A_n.1,(_f(404) & _f(148) => _f(491));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(490) & SUB_A_r.2,(_f(400) & _f(148) => _f(492));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(490) & SUB_A_r.1,(_f(400) & _f(148) => _f(491));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(488) & ADC_A_9IY_d0.2,(_f(489) & _f(148) => _f(473));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(488) & ADC_A_9IY_d0.1,(_f(489) & _f(148) => _f(472));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(486) & ADC_A_9IX_d0.2,(_f(487) & _f(148) => _f(473));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(486) & ADC_A_9IX_d0.1,(_f(487) & _f(148) => _f(472));
  _f(1) & _f(2) & _f(15) & _f(142) & ADC_A_9HL0.2,(_f(485) & _f(148) => _f(473));
  _f(1) & _f(2) & _f(15) & _f(142) & ADC_A_9HL0.1,(_f(485) & _f(148) => _f(472));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(483) & ADC_A_n.2,(_f(484) & _f(148) => _f(473));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(483) & ADC_A_n.1,(_f(484) & _f(148) => _f(472));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(481) & ADC_A_r.2,(_f(482) & _f(148) => _f(473));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(481) & ADC_A_r.1,(_f(482) & _f(148) => _f(472));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(479) & ADD_A_9IY_d0.2,(_f(480) & _f(148) => _f(473));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(479) & ADD_A_9IY_d0.1,(_f(480) & _f(148) => _f(472));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(477) & ADD_A_9IX_d0.2,(_f(478) & _f(148) => _f(473));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(477) & ADD_A_9IX_d0.1,(_f(478) & _f(148) => _f(472));
  _f(1) & _f(2) & _f(15) & _f(142) & ADD_A_9HL0.2,(_f(476) & _f(148) => _f(473));
  _f(1) & _f(2) & _f(15) & _f(142) & ADD_A_9HL0.1,(_f(476) & _f(148) => _f(472));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(474) & ADD_A_n.2,(_f(475) & _f(148) => _f(473));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(474) & ADD_A_n.1,(_f(475) & _f(148) => _f(472));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(470) & ADD_A_r.2,(_f(471) & _f(148) => _f(473));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(470) & ADD_A_r.1,(_f(471) & _f(148) => _f(472));
  _f(1) & _f(2) & _f(15) & _f(142) & DEC_IY.1,(_f(454) => _f(469));
  _f(1) & _f(2) & _f(15) & _f(142) & DEC_IX.1,(_f(454) => _f(469));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(467) & DEC_ss.3,(_f(468) & _f(148) => _f(464));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(467) & DEC_ss.2,(_f(468) & _f(148) => _f(463));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(467) & DEC_ss.1,(_f(459) & _f(460) => _f(461));
  _f(1) & _f(2) & _f(15) & _f(142) & INC_IY.1,(_f(457) => _f(466));
  _f(1) & _f(2) & _f(15) & _f(142) & INC_IX.1,(_f(454) => _f(465));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(458) & INC_ss.3,(_f(462) & _f(148) => _f(464));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(458) & INC_ss.2,(_f(462) & _f(148) => _f(463));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(458) & INC_ss.1,(_f(459) & _f(460) => _f(461));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(456) & ADD_IY_ss.3,(_f(442) & _f(457) => _f(455));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(456) & ADD_IY_ss.2,(_f(442) & _f(148) => _f(453));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(456) & ADD_IY_ss.1,(_f(442) & _f(148) => _f(452));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(451) & ADD_IX_ss.3,(_f(442) & _f(454) => _f(455));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(451) & ADD_IX_ss.2,(_f(442) & _f(148) => _f(453));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(451) & ADD_IX_ss.1,(_f(442) & _f(148) => _f(452));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(449) & SBC_HL_ss.2,(_f(450) & _f(148) => _f(448));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(449) & SBC_HL_ss.1,(_f(450) & _f(148) => _f(447));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(445) & ADC_HL_ss.2,(_f(446) & _f(148) => _f(448));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(445) & ADC_HL_ss.1,(_f(446) & _f(148) => _f(447));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(441) & ADD_HL_ss.2,(_f(442) & _f(148) => _f(444));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(441) & ADD_HL_ss.1,(_f(442) & _f(148) => _f(443));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(438) & DEC_9IY_d0.5,(_f(440) & _f(148) => _f(434));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(438) & DEC_9IY_d0.4,(_f(440) & _f(148) => _f(433));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(438) & DEC_9IY_d0.3,(_f(439) & _f(157) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(438) & DEC_9IY_d0.2,(_f(439) & _f(157) => _f(416));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(438) & DEC_9IY_d0.1,(_f(439) & _f(157) => _f(214));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(435) & DEC_9IX_d0.5,(_f(437) & _f(148) => _f(434));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(435) & DEC_9IX_d0.4,(_f(437) & _f(148) => _f(433));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(435) & DEC_9IX_d0.3,(_f(436) & _f(157) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(435) & DEC_9IX_d0.2,(_f(436) & _f(157) => _f(416));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(435) & DEC_9IX_d0.1,(_f(436) & _f(157) => _f(207));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(430) & DEC_9HL0.4,(_f(432) & _f(148) => _f(434));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(430) & DEC_9HL0.3,(_f(432) & _f(148) => _f(433));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(430) & DEC_9HL0.2,(_f(431) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(430) & DEC_9HL0.1,(_f(431) & _f(157) => _f(416));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(426) & DEC_r.2,(_f(427) & _f(148) => _f(429));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(426) & DEC_r.1,(_f(427) & _f(148) => _f(428));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(423) & INC_9IY_d0.5,(_f(425) & _f(148) => _f(419));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(423) & INC_9IY_d0.4,(_f(425) & _f(148) => _f(418));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(423) & INC_9IY_d0.3,(_f(424) & _f(157) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(423) & INC_9IY_d0.2,(_f(424) & _f(157) => _f(416));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(423) & INC_9IY_d0.1,(_f(424) & _f(157) => _f(214));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(420) & INC_9IX_d0.5,(_f(422) & _f(148) => _f(419));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(420) & INC_9IX_d0.4,(_f(422) & _f(148) => _f(418));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(420) & INC_9IX_d0.3,(_f(421) & _f(157) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(420) & INC_9IX_d0.2,(_f(421) & _f(157) => _f(416));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(420) & INC_9IX_d0.1,(_f(421) & _f(157) => _f(207));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(414) & INC_9HL0.4,(_f(417) & _f(148) => _f(419));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(414) & INC_9HL0.3,(_f(417) & _f(148) => _f(418));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(414) & INC_9HL0.2,(_f(415) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(414) & INC_9HL0.1,(_f(415) & _f(157) => _f(416));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(410) & INC_r.2,(_f(411) & _f(148) => _f(413));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(410) & INC_r.1,(_f(411) & _f(148) => _f(412));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(408) & CP_A_9IY_d0.2,(_f(409) & _f(148) => _f(402));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(408) & CP_A_9IY_d0.1,(_f(409) & _f(148) => _f(401));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(406) & CP_A_9IX_d0.2,(_f(407) & _f(148) => _f(402));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(406) & CP_A_9IX_d0.1,(_f(407) & _f(148) => _f(401));
  _f(1) & _f(2) & _f(15) & _f(142) & CP_A_9HL0.2,(_f(405) & _f(148) => _f(402));
  _f(1) & _f(2) & _f(15) & _f(142) & CP_A_9HL0.1,(_f(405) & _f(148) => _f(401));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(403) & CP_A_n.2,(_f(404) & _f(148) => _f(402));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(403) & CP_A_n.1,(_f(404) & _f(148) => _f(401));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(399) & CP_A_r.2,(_f(400) & _f(148) => _f(402));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(399) & CP_A_r.1,(_f(400) & _f(148) => _f(401));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(397) & XOR_A_9IY_d0.2,(_f(398) & _f(148) => _f(373));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(397) & XOR_A_9IY_d0.1,(_f(398) & _f(148) => _f(372));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(395) & XOR_A_9IX_d0.2,(_f(396) & _f(148) => _f(373));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(395) & XOR_A_9IX_d0.1,(_f(396) & _f(148) => _f(372));
  _f(1) & _f(2) & _f(15) & _f(142) & XOR_A_9HL0.2,(_f(394) & _f(148) => _f(373));
  _f(1) & _f(2) & _f(15) & _f(142) & XOR_A_9HL0.1,(_f(394) & _f(148) => _f(372));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(392) & XOR_A_n.2,(_f(393) & _f(148) => _f(373));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(392) & XOR_A_n.1,(_f(393) & _f(148) => _f(372));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(390) & XOR_A_r.2,(_f(391) & _f(148) => _f(373));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(390) & XOR_A_r.1,(_f(391) & _f(148) => _f(372));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(388) & OR_A_9IY_d0.2,(_f(389) & _f(148) => _f(373));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(388) & OR_A_9IY_d0.1,(_f(389) & _f(148) => _f(372));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(386) & OR_A_9IX_d0.2,(_f(387) & _f(148) => _f(373));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(386) & OR_A_9IX_d0.1,(_f(387) & _f(148) => _f(372));
  _f(1) & _f(2) & _f(15) & _f(142) & OR_A_9HL0.2,(_f(385) & _f(148) => _f(373));
  _f(1) & _f(2) & _f(15) & _f(142) & OR_A_9HL0.1,(_f(385) & _f(148) => _f(372));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(383) & OR_A_n.2,(_f(384) & _f(148) => _f(373));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(383) & OR_A_n.1,(_f(384) & _f(148) => _f(372));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(381) & OR_A_r.2,(_f(382) & _f(148) => _f(373));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(381) & OR_A_r.1,(_f(382) & _f(148) => _f(372));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(379) & AND_A_9IY_d0.2,(_f(380) & _f(148) => _f(373));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(379) & AND_A_9IY_d0.1,(_f(380) & _f(148) => _f(372));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(377) & AND_A_9IX_d0.2,(_f(378) & _f(148) => _f(373));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(377) & AND_A_9IX_d0.1,(_f(378) & _f(148) => _f(372));
  _f(1) & _f(2) & _f(15) & _f(142) & AND_A_9HL0.2,(_f(376) & _f(148) => _f(373));
  _f(1) & _f(2) & _f(15) & _f(142) & AND_A_9HL0.1,(_f(376) & _f(148) => _f(372));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(374) & AND_A_n.2,(_f(375) & _f(148) => _f(373));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(374) & AND_A_n.1,(_f(375) & _f(148) => _f(372));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(370) & AND_A_r.2,(_f(371) & _f(148) => _f(373));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(370) & AND_A_r.1,(_f(371) & _f(148) => _f(372));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(363) & RST_p.4,(_f(368) & _f(333) => _f(369));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(363) & RST_p.3,(_f(367) & _f(157) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(363) & RST_p.2,(_f(364) & _f(157) => _f(366));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(363) & RST_p.1,(_f(364) & _f(157) => _f(365));
  _f(1) & _f(2) & _f(15) & _f(142) & RETN.1,(_f(333) => _f(360));
  _f(1) & _f(2) & _f(15) & _f(142) & RETI.1,(_f(333) => _f(360));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(361) & RET_cc.1,(_f(362) & _f(333) => _f(360));
  _f(1) & _f(2) & _f(15) & _f(142) & RET.1,(_f(333) => _f(360));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(357) & CALL_cc_nn.3,(_f(359) & _f(157) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(357) & CALL_cc_nn.2,(_f(358) & _f(157) => _f(354));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(357) & CALL_cc_nn.1,(_f(358) & _f(157) => _f(353));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(351) & CALL_nn.3,(_f(355) & _f(157) => _f(356));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(351) & CALL_nn.2,(_f(352) & _f(157) => _f(354));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(351) & CALL_nn.1,(_f(352) & _f(157) => _f(353));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(346) & DJNZ_e.5,(_f(350) & _f(333) => _f(334));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(346) & DJNZ_e.4,(_f(350) & _f(148) => _f(349));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(346) & DJNZ_e.3,(_f(350) & _f(148) => _f(348));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(346) & DJNZ_e.2,(_f(347) & _f(148) => _f(349));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(346) & DJNZ_e.1,(_f(347) & _f(148) => _f(348));
  _f(1) & _f(2) & _f(15) & _f(142) & JP_IY.1,(_f(333) => _f(345));
  _f(1) & _f(2) & _f(15) & _f(142) & JP_IX.1,(_f(333) => _f(344));
  _f(1) & _f(2) & _f(15) & _f(142) & JP_HL.1,(_f(333) => _f(343));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(341) & JR_NZ_e.1,(_f(342) & _f(333) => _f(334));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(339) & JR_Z_e.1,(_f(340) & _f(333) => _f(334));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(337) & JR_NC_e.1,(_f(338) & _f(333) => _f(334));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(335) & JR_C_e.1,(_f(336) & _f(333) => _f(334));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(332) & JR_e.1,(_f(333) => _f(334));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(330) & RES_b_9IY_d0.3,(_f(157) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(330) & RES_b_9IY_d0.2,(_f(157) => _f(331));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(330) & RES_b_9IY_d0.1,(_f(157) => _f(214));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(328) & RES_b_9IX_d0.3,(_f(157) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(328) & RES_b_9IX_d0.2,(_f(157) => _f(329));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(328) & RES_b_9IX_d0.1,(_f(157) => _f(207));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(326) & RES_b_9HL0.2,(_f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(326) & RES_b_9HL0.1,(_f(157) => _f(327));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(323) & RES_b_r.2,(_f(148) => _f(325));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(323) & RES_b_r.1,(_f(148) => _f(324));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(321) & SET_b_9IY_d0.3,(_f(157) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(321) & SET_b_9IY_d0.2,(_f(157) => _f(322));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(321) & SET_b_9IY_d0.1,(_f(157) => _f(214));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(319) & SET_b_9IX_d0.3,(_f(157) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(319) & SET_b_9IX_d0.2,(_f(157) => _f(320));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(319) & SET_b_9IX_d0.1,(_f(157) => _f(207));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(317) & SET_b_9HL0.2,(_f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(317) & SET_b_9HL0.1,(_f(157) => _f(318));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(314) & SET_b_r.2,(_f(148) => _f(316));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(314) & SET_b_r.1,(_f(148) => _f(315));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(311) & BIT_b_9IY_d0.2,(_f(148) => _f(313));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(311) & BIT_b_9IY_d0.1,(_f(148) => _f(312));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(308) & BIT_b_9IX_d0.2,(_f(148) => _f(310));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(308) & BIT_b_9IX_d0.1,(_f(148) => _f(309));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(305) & BIT_b_9HL0.2,(_f(148) => _f(307));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(305) & BIT_b_9HL0.1,(_f(148) => _f(306));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(302) & BIT_b_rr.2,(_f(148) => _f(304));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(302) & BIT_b_rr.1,(_f(148) => _f(303));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(299) & RRD.3,(_f(301) & _f(148) => _f(298));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(299) & RRD.2,(_f(301) & _f(148) => _f(297));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(299) & RRD.1,(_f(300) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(294) & RLD.3,(_f(296) & _f(148) => _f(298));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(294) & RLD.2,(_f(296) & _f(148) => _f(297));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(294) & RLD.1,(_f(295) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(289) & SRL_9IY_d0.4,(_f(291) & _f(148) => _f(293));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(289) & SRL_9IY_d0.3,(_f(291) & _f(148) => _f(292));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(289) & SRL_9IY_d0.2,(_f(290) & _f(157) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(289) & SRL_9IY_d0.1,(_f(290) & _f(157) => _f(214));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(284) & SRL_9IX_d0.4,(_f(286) & _f(148) => _f(288));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(284) & SRL_9IX_d0.3,(_f(286) & _f(148) => _f(287));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(284) & SRL_9IX_d0.2,(_f(285) & _f(157) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(284) & SRL_9IX_d0.1,(_f(285) & _f(157) => _f(207));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(279) & SRL_9HL0.3,(_f(281) & _f(148) => _f(283));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(279) & SRL_9HL0.2,(_f(281) & _f(148) => _f(282));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(279) & SRL_9HL0.1,(_f(280) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(275) & SRL_r.2,(_f(276) & _f(148) => _f(278));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(275) & SRL_r.1,(_f(276) & _f(148) => _f(277));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(272) & SRA_9IY_d0.4,(_f(274) & _f(148) => _f(248));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(272) & SRA_9IY_d0.3,(_f(274) & _f(148) => _f(247));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(272) & SRA_9IY_d0.2,(_f(273) & _f(157) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(272) & SRA_9IY_d0.1,(_f(273) & _f(157) => _f(207));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(269) & SRA_9IX_d0.4,(_f(271) & _f(148) => _f(243));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(269) & SRA_9IX_d0.3,(_f(271) & _f(148) => _f(242));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(269) & SRA_9IX_d0.2,(_f(270) & _f(157) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(269) & SRA_9IX_d0.1,(_f(270) & _f(157) => _f(207));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(266) & SRA_9HL0.3,(_f(268) & _f(148) => _f(238));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(266) & SRA_9HL0.2,(_f(268) & _f(148) => _f(237));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(266) & SRA_9HL0.1,(_f(267) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(264) & SRA_r.2,(_f(265) & _f(148) => _f(233));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(264) & SRA_r.1,(_f(265) & _f(148) => _f(232));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(263) & SLA_9IY_d0.4,(_f(259) & _f(148) => _f(218));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(263) & SLA_9IY_d0.3,(_f(259) & _f(148) => _f(217));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(263) & SLA_9IY_d0.2,(_f(258) & _f(157) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(263) & SLA_9IY_d0.1,(_f(258) & _f(157) => _f(214));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(262) & SLA_9IX_d0.4,(_f(256) & _f(148) => _f(211));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(262) & SLA_9IX_d0.3,(_f(256) & _f(148) => _f(210));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(262) & SLA_9IX_d0.2,(_f(255) & _f(157) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(262) & SLA_9IX_d0.1,(_f(255) & _f(157) => _f(207));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(261) & SLA_9HL.3,(_f(253) & _f(148) => _f(204));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(261) & SLA_9HL.2,(_f(253) & _f(148) => _f(203));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(261) & SLA_9HL.1,(_f(252) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(260) & SLA_r.2,(_f(250) & _f(148) => _f(199));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(260) & SLA_r.1,(_f(250) & _f(148) => _f(198));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(257) & RR_9IY_d0.4,(_f(259) & _f(148) => _f(248));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(257) & RR_9IY_d0.3,(_f(259) & _f(148) => _f(247));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(257) & RR_9IY_d0.2,(_f(258) & _f(157) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(257) & RR_9IY_d0.1,(_f(258) & _f(157) => _f(214));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(254) & RR_9IX_d0.4,(_f(256) & _f(148) => _f(243));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(254) & RR_9IX_d0.3,(_f(256) & _f(148) => _f(242));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(254) & RR_9IX_d0.2,(_f(255) & _f(157) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(254) & RR_9IX_d0.1,(_f(255) & _f(157) => _f(207));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(251) & RR_9HL.3,(_f(253) & _f(148) => _f(238));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(251) & RR_9HL.2,(_f(253) & _f(148) => _f(237));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(251) & RR_9HL.1,(_f(252) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(249) & RR_r.2,(_f(250) & _f(148) => _f(233));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(249) & RR_r.1,(_f(250) & _f(148) => _f(232));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(244) & RRC_9IY_d0.4,(_f(246) & _f(148) => _f(248));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(244) & RRC_9IY_d0.3,(_f(246) & _f(148) => _f(247));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(244) & RRC_9IY_d0.2,(_f(245) & _f(157) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(244) & RRC_9IY_d0.1,(_f(245) & _f(157) => _f(214));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(239) & RRC_9IX_d0.4,(_f(241) & _f(148) => _f(243));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(239) & RRC_9IX_d0.3,(_f(241) & _f(148) => _f(242));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(239) & RRC_9IX_d0.2,(_f(240) & _f(157) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(239) & RRC_9IX_d0.1,(_f(240) & _f(157) => _f(207));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(234) & RRC_9HL0.3,(_f(236) & _f(148) => _f(238));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(234) & RRC_9HL0.2,(_f(236) & _f(148) => _f(237));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(234) & RRC_9HL0.1,(_f(235) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(230) & RRC_r.2,(_f(231) & _f(148) => _f(233));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(230) & RRC_r.1,(_f(231) & _f(148) => _f(232));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(227) & RL_9IY_d0.4,(_f(229) & _f(148) => _f(218));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(227) & RL_9IY_d0.3,(_f(229) & _f(148) => _f(217));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(227) & RL_9IY_d0.2,(_f(228) & _f(157) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(227) & RL_9IY_d0.1,(_f(228) & _f(157) => _f(214));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(224) & RL_9IX_d0.4,(_f(226) & _f(148) => _f(211));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(224) & RL_9IX_d0.3,(_f(226) & _f(148) => _f(210));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(224) & RL_9IX_d0.2,(_f(225) & _f(157) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(224) & RL_9IX_d0.1,(_f(225) & _f(157) => _f(207));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(221) & RL_9HL.3,(_f(223) & _f(148) => _f(204));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(221) & RL_9HL.2,(_f(223) & _f(148) => _f(203));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(221) & RL_9HL.1,(_f(222) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(219) & RL_r.2,(_f(220) & _f(148) => _f(199));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(219) & RL_r.1,(_f(220) & _f(148) => _f(198));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(212) & RLC_9IY_d0.4,(_f(216) & _f(148) => _f(218));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(212) & RLC_9IY_d0.3,(_f(216) & _f(148) => _f(217));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(212) & RLC_9IY_d0.2,(_f(213) & _f(157) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(212) & RLC_9IY_d0.1,(_f(213) & _f(157) => _f(214));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(205) & RLC_9IX_d0.4,(_f(209) & _f(148) => _f(211));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(205) & RLC_9IX_d0.3,(_f(209) & _f(148) => _f(210));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(205) & RLC_9IX_d0.2,(_f(206) & _f(157) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(205) & RLC_9IX_d0.1,(_f(206) & _f(157) => _f(207));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(200) & RLC_9HL0.3,(_f(202) & _f(148) => _f(204));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(200) & RLC_9HL0.2,(_f(202) & _f(148) => _f(203));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(200) & RLC_9HL0.1,(_f(201) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(196) & RLC_r.2,(_f(197) & _f(148) => _f(199));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(196) & RLC_r.1,(_f(197) & _f(148) => _f(198));
  _f(1) & _f(2) & _f(15) & _f(142) & RRA.2,(_f(148) => _f(195));
  _f(1) & _f(2) & _f(15) & _f(142) & RRA.1,(_f(148) => _f(194));
  _f(1) & _f(2) & _f(15) & _f(142) & RRCA.2,(_f(148) => _f(193));
  _f(1) & _f(2) & _f(15) & _f(142) & RRCA.1,(_f(148) => _f(192));
  _f(1) & _f(2) & _f(15) & _f(142) & RLA.2,(_f(148) => _f(191));
  _f(1) & _f(2) & _f(15) & _f(142) & RLA.1,(_f(148) => _f(190));
  _f(1) & _f(2) & _f(15) & _f(142) & RLCA.2,(_f(148) => _f(189));
  _f(1) & _f(2) & _f(15) & _f(142) & RLCA.1,(_f(148) => _f(188));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.9,(_f(187) & _f(144) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.8,(_f(187) & _f(144) => _f(180));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.7,(_f(187) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.6,(_f(187) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.5,(_f(186) & _f(144) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.4,(_f(186) & _f(144) => _f(180));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.3,(_f(186) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.2,(_f(186) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.1,(_f(184) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTD.5,(_f(185) & _f(144) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTD.4,(_f(185) & _f(144) => _f(180));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTD.3,(_f(185) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTD.2,(_f(185) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTD.1,(_f(184) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.9,(_f(183) & _f(144) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.8,(_f(183) & _f(144) => _f(180));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.7,(_f(183) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.6,(_f(183) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.5,(_f(182) & _f(144) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.4,(_f(182) & _f(144) => _f(180));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.3,(_f(182) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.2,(_f(182) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.1,(_f(178) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTI.5,(_f(179) & _f(144) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTI.4,(_f(179) & _f(144) => _f(180));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTI.3,(_f(179) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTI.2,(_f(179) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTI.1,(_f(178) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(175) & OUT_9C0_r.2,(_f(144) => _f(177));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(175) & OUT_9C0_r.1,(_f(144) => _f(176));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(172) & OUT_9n0_A.2,(_f(144) => _f(174));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(172) & OUT_9n0_A.1,(_f(144) => _f(173));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(169) & INDR.5,(_f(171) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(169) & INDR.4,(_f(171) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(169) & INDR.3,(_f(170) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(169) & INDR.2,(_f(170) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(169) & INDR.1,(_f(167) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(166) & IND.3,(_f(168) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(166) & IND.2,(_f(168) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(166) & IND.1,(_f(167) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(162) & INIR.5,(_f(165) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(162) & INIR.4,(_f(165) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(162) & INIR.3,(_f(164) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(162) & INIR.2,(_f(164) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(162) & INIR.1,(_f(163) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(155) & INI.3,(_f(159) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(155) & INI.2,(_f(159) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(155) & INI.1,(_f(156) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(151) & IN_r_9C0.2,(_f(152) & _f(148) => _f(154));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(151) & IN_r_9C0.1,(_f(152) & _f(148) => _f(153));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(147) & IN_A_9n0.2,(_f(148) => _f(150));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(147) & IN_A_9n0.1,(_f(148) => _f(149));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(143) & ext_update_io_ports.2,(_f(144) => _f(146));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(143) & ext_update_io_ports.1,(_f(144) => _f(145));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.62,(_f(140) => _f(141));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.61,(_f(138) => _f(139));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.60,(_f(136) => _f(137));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.59,(_f(134) => _f(135));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.58,(_f(132) => _f(133));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.57,(_f(130) => _f(131));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.56,(_f(128) => _f(129));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.55,(_f(126) => _f(127));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.54,(_f(123) & _f(124) => _f(125));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.53,(_f(119) & _f(120) => _f(122));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.52,(_f(119) & _f(120) => _f(121));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.51,(_f(115) & _f(116) => _f(118));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.50,(_f(115) & _f(116) => _f(117));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.49,(_f(111) & _f(112) => _f(114));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.48,(_f(111) & _f(112) => _f(113));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.47,(_f(107) & _f(108) => _f(110));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.46,(_f(107) & _f(108) => _f(109));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.45,(_f(103) & _f(104) => _f(106));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.44,(_f(103) & _f(104) => _f(105));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.43,(_f(99) & _f(100) => _f(102));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.42,(_f(99) & _f(100) => _f(101));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.41,(_f(95) & _f(96) => _f(98));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.40,(_f(95) & _f(96) => _f(97));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.39,(_f(91) & _f(92) => _f(94));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.38,(_f(91) & _f(92) => _f(93));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.37,(_f(89) => _f(90));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.36,(_f(78) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.35,(_f(78) & _f(85) => _f(86));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.34,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.33,(_f(78) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.32,(_f(78) & _f(79) => _f(80));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.31,(_f(76) => _f(77));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.30,(_f(74) => _f(75));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.29,(_f(72) => _f(73));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.28,(_f(70) => _f(71));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.27,(_f(68) => _f(69));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.26,(_f(66) => _f(67));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.25,(_f(64) => _f(65));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.24,(_f(62) => _f(63));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.23,(_f(60) => _f(61));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.22,(_f(58) => _f(59));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.21,(_f(56) => _f(57));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.20,(_f(54) => _f(55));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.19,(_f(52) => _f(53));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.18,(_f(50) => _f(51));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.17,(_f(48) => _f(49));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.16,(_f(46) => _f(47));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.15,(_f(44) => _f(45));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.14,(_f(42) => _f(43));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.13,(_f(40) => _f(41));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.12,(_f(38) => _f(39));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.11,(_f(36) => _f(37));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.10,(_f(34) => _f(35));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.9,(_f(32) => _f(33));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.8,(_f(30) => _f(31));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.7,(_f(28) => _f(29));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.6,(_f(26) => _f(27));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.5,(_f(24) => _f(25));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.4,(_f(22) => _f(23));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.3,(_f(20) => _f(21));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.2,(_f(18) => _f(19));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.1,(_f(16) => _f(17));
  _f(1) & _f(2) & Initialisation.6,(_f(3) & _f(13) => _f(14));
  _f(1) & _f(2) & Initialisation.5,(_f(3) & _f(11) => _f(12));
  _f(1) & _f(2) & Initialisation.4,(_f(3) & _f(9) => _f(10));
  _f(1) & _f(2) & Initialisation.3,(_f(3) & _f(7) => _f(8));
  _f(1) & _f(2) & Initialisation.2,(_f(3) & _f(4) => _f(6));
  _f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & abs: INT +-> INT & dom(abs) = INT & abs = %nn.(nn: INTEGER & nn<=2147483647 & -2147483647<=nn & 0<=nn | nn)\/%nn.(nn: INTEGER & nn<=2147483647 & -2147483647<=nn & nn+1<=0 | -nn) & is_zero16USHORT: USHORT +-> BIT & dom(is_zero16USHORT) = USHORT & is_zero16USHORT = %nat1.(nat1: USHORT | bool_bit(bool(nat1 = 0))) & is_negative: BYTE +-> BIT & dom(is_negative) = BYTE & is_negative = %w1.(w1: BYTE | w1(7)) & half8UCHAR: UCHAR +-> UCHAR & dom(half8UCHAR) = UCHAR & half8UCHAR = %ww.(ww: UCHAR | ww mod 16) & inc: BYTE +-> BYTE & dom(inc) = BYTE & inc = %w1.(w1: BYTE | uchar_byte((byte_uchar(w1)+1) mod 256)) & dec: BYTE +-> BYTE & dom(dec) = BYTE & dec = %w1.(w1: BYTE | uchar_byte(abs(byte_uchar(w1)-1) mod 256)) & simple_add8UCHAR: UCHAR*UCHAR +-> UCHAR & dom(simple_add8UCHAR) = UCHAR*UCHAR & simple_add8UCHAR = %(w1,w2).(w1: UCHAR & w2: UCHAR | (w1+w2) mod 256) & add8UCHAR: BIT*UCHAR*UCHAR +-> UCHAR*BIT*BIT*BIT*BIT & dom(add8UCHAR) = BIT*UCHAR*UCHAR & add8UCHAR = %(carry,w1,w2).(carry: BIT & w1: UCHAR & w2: UCHAR | (carry+w1+w2) mod 256,bool_bit(bool(carry+uchar_schar(w1)+uchar_schar(w2)+1<=0)),bool_bit(bool(UCHAR_MAX+1<=carry+w1+w2)),bool_bit(bool(16<=carry+half8UCHAR(w1)+half8UCHAR(w2))),bool_bit(bool((carry+w1+w2) mod 256 = 0))) & substract8UCHAR: BIT*UCHAR*UCHAR +-> UCHAR*BIT*BIT*BIT*BIT & dom(substract8UCHAR) = BIT*UCHAR*UCHAR & substract8UCHAR = %(carry,w1,w2).(carry: BIT & w1: UCHAR & w2: UCHAR | (carry+w1-w2) mod 256,bool_bit(bool(carry+uchar_schar(w1)-uchar_schar(w2)+1<=0)),bool_bit(bool(UCHAR_MAX+1<=carry+w1-w2)),bool_bit(bool(16<=carry+half8UCHAR(w1)-half8UCHAR(w2))),bool_bit(bool((carry+w1-w2) mod 256 = 0))) & add16USHORT: BIT*USHORT*USHORT +-> USHORT & dom(add16USHORT) = BIT*USHORT*USHORT & add16USHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | (b1+w1+w2) mod 65536) & add_carryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(add_carryUSHORT) = BIT*USHORT*USHORT & add_carryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(65537<=b1+w1+w2))) & add_halfcarryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(add_halfcarryUSHORT) = BIT*USHORT*USHORT & add_halfcarryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(4097<=b1+w1 mod 4096+w2 mod 4096))) & sub16USHORT: BIT*USHORT*USHORT +-> USHORT & dom(sub16USHORT) = BIT*USHORT*USHORT & sub16USHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | (w1-w2-b1) mod 65536) & sub_carryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(sub_carryUSHORT) = BIT*USHORT*USHORT & sub_carryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(65537<=w1-w2-b1))) & sub_halfcarryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(sub_halfcarryUSHORT) = BIT*USHORT*USHORT & sub_halfcarryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(4097<=w1 mod 4096-w2 mod 4096-b1))) & inc_BV16: BV16 +-> BV16 & dom(inc_BV16) = BV16 & inc_BV16 = %w1.(w1: BV16 | ushort_bv16((bv16_ushort(w1)+1) mod 65536)) & dec_BV16: BV16 +-> BV16 & dom(dec_BV16) = BV16 & dec_BV16 = %w1.(w1: BV16 | ushort_bv16(abs(bv16_ushort(w1)-1) mod 65536)) & update_refresh_reg: BYTE +-> BYTE & dom(update_refresh_reg) = BYTE & update_refresh_reg = %v0.(v0: BYTE | uchar_byte(128*v0(7)+(64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) mod 128)) & instruction_next: USHORT +-> USHORT & dom(instruction_next) = USHORT & instruction_next = %w1.(w1: USHORT | (w1+1) mod 65536) & instruction_jump: USHORT*(-126..129) +-> USHORT & dom(instruction_jump) = USHORT*(-126..129) & instruction_jump = %(p0,e0).(p0: USHORT & e0: -126..129 | (p0+e0) mod 65536) & daa_function: BIT*BIT*BIT*BYTE +-> BYTE*BIT*BIT & dom(daa_function) = BIT*BIT*BIT*BYTE & !(zn,c0,h0,value).(zn: BIT & c0: BIT & h0: BIT & value: BYTE => (zn = 0 & c0 = 0 & get_upper_digit(value): 0..9 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,h0,value) = (value,0)|->0) & (zn = 0 & c0 = 0 & get_upper_digit(value): 0..8 & h0 = 0 & get_lower_digit(value): 10..15 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),6)),0)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(6)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 0..9 & h0 = 1 & get_lower_digit(value): 0..3 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),6)),0)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(6)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 10..15 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),96)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(96)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 9..15 & h0 = 0 & get_lower_digit(value): 10..15 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),102)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(102)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 10..15 & h0 = 1 & get_lower_digit(value): 0..3 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),102)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(102)))) & (zn = 0 & c0 = 1 & get_upper_digit(value): 0..2 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),96)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(96)))) & (zn = 0 & c0 = 1 & get_upper_digit(value): 0..2 & h0 = 0 & get_lower_digit(value): 10..15 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),102)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(102)))) & (zn = 0 & c0 = 1 & get_upper_digit(value): 0..3 & h0 = 1 & get_lower_digit(value): 0..3 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),102)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(102)))) & (zn = 1 & c0 = 0 & get_upper_digit(value): 0..9 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,h0,value) = (value,0)|->0) & (zn = 1 & c0 = 0 & get_upper_digit(value): 0..8 & h0 = 1 & get_lower_digit(value): 6..15 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),250)),0)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(250)))) & (zn = 1 & c0 = 1 & get_upper_digit(value): 7..15 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),160)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(160)))) & (zn = 1 & c0 = 1 & get_upper_digit(value): 6..7 & h0 = 1 & get_lower_digit(value): 6..15 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),154)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(154))))) & BIT = 0..1 & bit_not: BIT +-> BIT & dom(bit_not) = BIT & bit_not = %bb.(bb: BIT | 1-bb) & bit_and: BIT*BIT +-> BIT & dom(bit_and) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_and(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_and(b1,b2) = 1) & b2 = 1) & bit_or: BIT*BIT +-> BIT & dom(bit_or) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_or(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_or(b1,b2) = 1) or b2 = 1) & bit_xor: BIT*BIT +-> BIT & dom(bit_xor) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_xor(b1,b2) = 1 => not(b1 = b2)) & (not(b1 = b2) => bit_xor(b1,b2) = 1)) & bool_bit: BOOL +-> BIT & dom(bool_bit) = BOOL & bool_bit = {TRUE|->1}\/{FALSE|->0} & BIT_VECTOR = seq(BIT)-{{}} & bv_size: BIT_VECTOR +-> NATURAL-{0} & dom(bv_size) = BIT_VECTOR & bv_size = %bv.(bv: BIT_VECTOR | size(bv)) & bv_catenate: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_catenate) = BIT_VECTOR*BIT_VECTOR & bv_catenate = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR | v1^v2) & phys_bv_index: BIT_VECTOR +-> POW(NATURAL) & dom(phys_bv_index) = BIT_VECTOR & phys_bv_index = %v1.(v1: BIT_VECTOR | 0..bv_size(v1)-1) & bv_sub: BIT_VECTOR*NATURAL*NATURAL +-> BIT_VECTOR & dom(bv_sub) = BIT_VECTOR*NATURAL*NATURAL & bv_sub = %(bv,low,high).(bv: BIT_VECTOR & low: 0..bv_size(bv)-1 & high: low..bv_size(bv)-1 | %i0.(i0: 1..high-low+1 | bv(i0+low))) & bv_zero: NATURAL-{0} +-> BIT_VECTOR & dom(bv_zero) = NATURAL-{0} & bv_zero = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{0}) & bv_one: NATURAL-{0} +-> BIT_VECTOR & dom(bv_one) = NATURAL-{0} & bv_one = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{1}) & bv_not: BIT_VECTOR +-> BIT_VECTOR & dom(bv_not) = BIT_VECTOR & bv_not = %v1.(v1: BIT_VECTOR | %idx.(idx: 1..bv_size(v1) | bit_not(v1(idx)))) & bv_and: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_and) = BIT_VECTOR*BIT_VECTOR & bv_and = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_and(v1(idx),v2(idx)))) & bv_or: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_or) = BIT_VECTOR*BIT_VECTOR & bv_or = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_or(v1(idx),v2(idx)))) & bv_xor: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_xor) = BIT_VECTOR*BIT_VECTOR & bv_xor = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_xor(v1(idx),v2(idx)))) & bv_clear: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_clear) = BIT_VECTOR*NATURAL & bv_clear = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1<+{idx+1|->0}) & bv_set: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_set) = BIT_VECTOR*NATURAL & bv_set = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1<+{idx+1|->1}) & bv_get: BIT_VECTOR*NATURAL +-> BIT & dom(bv_get) = BIT_VECTOR*NATURAL & bv_get = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1(idx+1)) & bv_put: BIT_VECTOR*NATURAL*BIT +-> BIT_VECTOR & dom(bv_put) = BIT_VECTOR*NATURAL*BIT & bv_put = %(v1,idx,bit).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 & bit: BIT | v1<+{idx+1|->bit}) & BYTE_INDEX = 1..8 & PHYS_BYTE_INDEX = 0..7 & BYTE = SET(bt).(bt: BIT_VECTOR & bv_size(bt) = 8) & BYTE_ZERO: BYTE & BYTE_ZERO = BYTE_INDEX*{0} & is_zero: BYTE +-> BIT & dom(is_zero) = BYTE & is_zero = %w1.(w1: BYTE | bool_bit(bool(w1(1)+w1(2)+w1(3)+w1(4)+w1(5)+w1(6)+w1(7)+w1(8) = 0))) & parity_even: BYTE +-> BIT & dom(parity_even) = BYTE & parity_even = %bv.(bv: BYTE | 1-(bv(1)+bv(2)+bv(3)+bv(4)+bv(5)+bv(6)+bv(7)+bv(8) mod 2)) & and: BYTE*BYTE +-> BYTE & dom(and) = BYTE*BYTE & and = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_and(bt1,bt2)) & ior: BYTE*BYTE +-> BYTE & dom(ior) = BYTE*BYTE & ior = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_or(bt1,bt2)) & xor: BYTE*BYTE +-> BYTE & dom(xor) = BYTE*BYTE & xor = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_xor(bt1,bt2)) & bitget: BYTE*PHYS_BYTE_INDEX +-> BIT & dom(bitget) = BYTE*PHYS_BYTE_INDEX & bitget = %(bt1,ii).(bt1: BYTE & ii: PHYS_BYTE_INDEX | bt1(ii+1)) & bitset: BYTE*PHYS_BYTE_INDEX +-> BYTE & dom(bitset) = BYTE*PHYS_BYTE_INDEX & bitset = %(bt1,ii).(bt1: BYTE & ii: PHYS_BYTE_INDEX | bv_set(bt1,ii)) & bitclear: BYTE*PHYS_BYTE_INDEX +-> BYTE & dom(bitclear) = BYTE*PHYS_BYTE_INDEX & !(ww,ii,bb).(ww: BYTE & ii: PHYS_BYTE_INDEX & bb: BIT => bitclear(ww,ii) = bv_clear(ww,ii)) & complement: BYTE +-> BYTE & dom(complement) = BYTE & complement = %bt.(bt: BYTE | bv_not(bt)) & swap: BYTE +-> BYTE & dom(swap) = BYTE & swap = %bt.(bt: BYTE | {1|->bt(5)}\/{2|->bt(6)}\/{3|->bt(7)}\/{4|->bt(8)}\/{5|->bt(1)}\/{6|->bt(2)}\/{7|->bt(3)}\/{8|->bt(4)}) & rotateleft: BYTE +-> BYTE & dom(rotateleft) = BYTE & rotateleft = %bv.(bv: BYTE | {1|->bv(8)}\/{2|->bv(1)}\/{3|->bv(2)}\/{4|->bv(3)}\/{5|->bv(4)}\/{6|->bv(5)}\/{7|->bv(6)}\/{8|->bv(7)}) & rotateright: BYTE +-> BYTE & dom(rotateright) = BYTE & rotateright = %bv.(bv: BYTE | {1|->bv(2)}\/{2|->bv(3)}\/{3|->bv(4)}\/{4|->bv(5)}\/{5|->bv(6)}\/{6|->bv(7)}\/{7|->bv(8)}\/{8|->bv(1)}) & get_upper_digit = %by.(by: BYTE | 8*by(8)+4*by(7)+2*by(6)+by(5)) & get_lower_digit = %by.(by: BYTE | 8*by(4)+4*by(3)+2*by(2)+by(1)) & BV16_INDX = 1..16 & PHYS_BV16_INDEX = 0..15 & BV16 = SET(bt).(bt: BIT_VECTOR & bv_size(bt) = 16) & BV16_ZERO = BV16_INDX*{0} & bv16_byte: BV16 +-> BYTE*BYTE & dom(bv16_byte) = BV16 & bv16_byte = %bv.(bv: BV16 | {1|->bv(9)}\/{2|->bv(10)}\/{3|->bv(11)}\/{4|->bv(12)}\/{5|->bv(13)}\/{6|->bv(14)}\/{7|->bv(15)}\/{8|->bv(16)},{1|->bv(1)}\/{2|->bv(2)}\/{3|->bv(3)}\/{4|->bv(4)}\/{5|->bv(5)}\/{6|->bv(6)}\/{7|->bv(7)}\/{8|->bv(8)}) & byte_bv16: BYTE*BYTE +-> BV16 & dom(byte_bv16) = BYTE*BYTE & byte_bv16 = bv16_byte~ & bv16_bit_get: BV16*PHYS_BV16_INDEX +-> BIT & dom(bv16_bit_get) = BV16*PHYS_BV16_INDEX & bv16_bit_get = %(bt,ind).(bt: BV16 & ind: PHYS_BV16_INDEX | bt(ind+1)) & UCHAR_MAX = 255 & UCHAR_MIN = 0 & UCHAR = UCHAR_MIN..UCHAR_MAX & byte_uchar: BYTE +-> UCHAR & dom(byte_uchar) = BYTE & byte_uchar = %v0.(v0: BYTE | 128*bitget(v0,7)+64*bitget(v0,6)+32*bitget(v0,5)+16*bitget(v0,4)+8*bitget(v0,3)+4*bitget(v0,2)+2*bitget(v0,1)+128*bitget(v0,0)) & uchar_byte: UCHAR +-> BYTE & dom(uchar_byte) = UCHAR & uchar_byte = byte_uchar~ & SCHAR_MAX = 127 & SCHAR_MIN = -128 & SCHAR = SCHAR_MIN..SCHAR_MAX & byte_schar: BYTE +-> SCHAR & dom(byte_schar) = BYTE & byte_schar = %v0.(v0: BYTE | (-128)*bitget(v0,7)+64*bitget(v0,6)+32*bitget(v0,5)+16*bitget(v0,4)+8*bitget(v0,3)+4*bitget(v0,2)+2*bitget(v0,1)+bitget(v0,0)) & schar_byte: SCHAR +-> BYTE & dom(schar_byte) = SCHAR & schar_byte = byte_schar~ & uchar_schar: UCHAR +-> SCHAR & dom(uchar_schar) = UCHAR & uchar_schar = %v1.(v1: UCHAR & v1<=SCHAR_MAX | v1) & uchar_schar = %v1.(v1: UCHAR & not(v1<=SCHAR_MAX) | v1-UCHAR_MAX+1) & schar_uchar: SCHAR +-> UCHAR & dom(schar_uchar) = SCHAR & schar_uchar = uchar_schar~ & SSHORT_MIN = -32768 & SSHORT_MAX = 32767 & SSHORT = SSHORT_MIN..SSHORT_MAX & bv16_sshort: BV16 +-> SSHORT & dom(bv16_sshort) = BV16 & bv16_sshort = %v0.(v0: BV16 | (-32768)*v0(16)+16384*v0(15)+8192*v0(14)+4096*v0(13)+2048*v0(12)+1024*v0(11)+512*v0(10)+256*v0(9)+128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)) & sshort_bv16: SSHORT +-> BV16 & dom(sshort_bv16) = SSHORT & sshort_bv16 = bv16_sshort~ & schar_sshort: SCHAR*SCHAR +-> SSHORT & dom(schar_sshort) = SCHAR*SCHAR & schar_sshort = %(w1,w2).(w1: SCHAR & w2: SCHAR | bv16_sshort(byte_bv16(schar_byte(w1),schar_byte(w2)))) & sshort_schar: SSHORT +-> SCHAR*SCHAR & dom(sshort_schar) = SSHORT & sshort_schar = schar_sshort~ & USHORT_MAX = 65535 & USHORT_MIN = 0 & USHORT = USHORT_MIN..USHORT_MAX & bv16_ushort: BV16 +-> USHORT & dom(bv16_ushort) = BV16 & bv16_ushort = %v0.(v0: BV16 | 32768*bv16_bit_get(v0,15)+16384*bv16_bit_get(v0,14)+8192*bv16_bit_get(v0,13)+4096*bv16_bit_get(v0,12)+2048*bv16_bit_get(v0,11)+1024*bv16_bit_get(v0,10)+512*bv16_bit_get(v0,9)+256*bv16_bit_get(v0,8)+128*bv16_bit_get(v0,7)+64*bv16_bit_get(v0,6)+32*bv16_bit_get(v0,5)+16*bv16_bit_get(v0,4)+8*bv16_bit_get(v0,3)+4*bv16_bit_get(v0,2)+2*bv16_bit_get(v0,1)+bv16_bit_get(v0,0)) & ushort_bv16: USHORT +-> BV16 & dom(ushort_bv16) = USHORT & ushort_bv16 = bv16_ushort~ & uchar_ushort: UCHAR*UCHAR +-> USHORT & dom(uchar_ushort) = UCHAR*UCHAR & uchar_ushort = %(w1,w2).(w1: UCHAR & w2: UCHAR | bv16_ushort(byte_bv16(uchar_byte(w1),uchar_byte(w2)))) & ushort_uchar: USHORT +-> UCHAR*UCHAR & dom(ushort_uchar) = USHORT & ushort_uchar = uchar_ushort~ & "`Component properties'" & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & dom(get_bv_reg16) = BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) & !(sp_,rgs8_,r1).(sp_: BV16 & (rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8}) & r1: (1..5)*{id_reg_16} => (r1 = 1|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_bv16(rgs8_(5|->id_reg_8),rgs8_(6|->id_reg_8))) & (r1 = 2|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_bv16(rgs8_(9|->id_reg_8),rgs8_(10|->id_reg_8))) & (r1 = 3|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_bv16(rgs8_(13|->id_reg_8),rgs8_(14|->id_reg_8))) & (r1 = 4|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = sp_) & (r1 = 5|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_bv16(rgs8_(1|->id_reg_8),rgs8_(2|->id_reg_8)))) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & dom(REG16_TO_REG8) = (1..5)*{id_reg_16} & REG16_TO_REG8(1|->id_reg_16) = 5|->id_reg_8|->(6|->id_reg_8) & REG16_TO_REG8(2|->id_reg_16) = 9|->id_reg_8|->(10|->id_reg_8) & REG16_TO_REG8(3|->id_reg_16) = 13|->id_reg_8|->(14|->id_reg_8) & REG16_TO_REG8(5|->id_reg_16) = 1|->id_reg_8|->(2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = REG16_TO_REG8~ & update_flag_reg: BIT*BIT*BIT*BIT*BIT*BIT +-> {2|->id_reg_8}*BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & bv_ireg_plus_d: BV16*SCHAR +-> BV16 & dom(bv_ireg_plus_d) = BV16*SCHAR & bv_ireg_plus_d = %(ix_iy,desloc).(ix_iy: BV16 & desloc: SCHAR | ushort_bv16((bv16_ushort(ix_iy)+desloc) mod 65536)) & bv_9ireg_plus_d0: (BV16 --> BYTE)*BV16*SCHAR +-> BYTE & dom(bv_9ireg_plus_d0) = (BV16 --> BYTE)*BV16*SCHAR & bv_9ireg_plus_d0 = %(mem,ix_iy,desloc).(mem: BV16 +-> BYTE & dom(mem) = BV16 & ix_iy: BV16 & desloc: SCHAR | mem(bv_ireg_plus_d(ix_iy,desloc))) & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & dom(cc_get) = ((1..16)*{id_reg_8} --> BYTE)*(0..8) & !rgs8_.(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} => cc_get(rgs8_,0) = 1-bitget(rgs8_(2|->id_reg_8),6) & cc_get(rgs8_,1) = bitget(rgs8_(2|->id_reg_8),6) & cc_get(rgs8_,2) = 1-bitget(rgs8_(2|->id_reg_8),0) & cc_get(rgs8_,3) = bitget(rgs8_(2|->id_reg_8),0) & cc_get(rgs8_,4) = 1-bitget(rgs8_(2|->id_reg_8),2) & cc_get(rgs8_,5) = bitget(rgs8_(2|->id_reg_8),2) & cc_get(rgs8_,6) = 1-bitget(rgs8_(2|->id_reg_8),7) & cc_get(rgs8_,7) = bitget(rgs8_(2|->id_reg_8),7)) & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}));
  ("`Included,imported and extended machines properties'" & PROGRAM_R_ADR = USHORT & DATA_R_ADR = USHORT & STACK_R_ADR = USHORT & "`Included,imported and extended machines invariants'" & mem: BV16 +-> BYTE & dom(mem) = BV16 & "`Included,imported and extended machines assertions'" & ran(mem): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{address|->value}: BV16 +-> BYTE & dom(mem<+{address|->value}) = BV16) & "`Seen and used machines assertions'" & dom(is_zero16USHORT) = USHORT & ran(is_zero16USHORT) = BIT & dom(is_negative) = BYTE & ran(is_negative) = BIT & dom(half8UCHAR) = UCHAR & ran(half8UCHAR) = UCHAR & dom(inc) = BYTE & ran(inc) = BYTE & dom(dec) = BYTE & ran(dec) = BYTE & dom(simple_add8UCHAR) = UCHAR*UCHAR & ran(simple_add8UCHAR) = UCHAR & dom(add8UCHAR) = BIT*UCHAR*UCHAR & ran(add8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT) & dom(substract8UCHAR) = BIT*UCHAR*UCHAR & ran(substract8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT) & dom(add16USHORT) = BIT*USHORT*USHORT & ran(add16USHORT) = USHORT & dom(add_carryUSHORT) = BIT*USHORT*USHORT & ran(add_carryUSHORT) = BIT & dom(add_halfcarryUSHORT) = BIT*USHORT*USHORT & ran(add_halfcarryUSHORT) = BIT & dom(sub16USHORT) = BIT*USHORT*USHORT & ran(sub16USHORT) = USHORT & dom(sub_carryUSHORT) = BIT*USHORT*USHORT & ran(sub_carryUSHORT) = BIT & dom(sub_halfcarryUSHORT) = BIT*USHORT*USHORT & ran(sub_halfcarryUSHORT) = BIT & dom(inc_BV16) = BV16 & ran(inc_BV16) = BV16 & dom(dec_BV16) = BV16 & ran(dec_BV16) = BV16 & dom(update_refresh_reg) = BYTE & ran(update_refresh_reg) = BYTE & dom(instruction_next) = USHORT & ran(instruction_next) = USHORT & dom(instruction_jump) = USHORT*(-126..129) & ran(instruction_jump) = USHORT & dom(daa_function) = BIT*BIT*BIT*BYTE & ran(daa_function): POW(BYTE*BIT*BIT) & dom(abs) = INT & ran(abs) = INT & 0 = schar_sshort(0,0) & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & 512 = 2**9 & 1024 = 2**10 & 2048 = 2**11 & 4096 = 2**12 & 8192 = 2**13 & 16384 = 2**14 & 32768 = 2**15 & 65536 = 2**16 & !bb.(bb: BIT => bit_not(bb) = 1-bb) & dom(bit_and) = BIT*BIT & ran(bit_not) = BIT & bit_not(0) = 1 & bit_not(1) = 0 & !bb.(bb: BIT => bit_not(bit_not(bb)) = bb) & ran(bit_and) = BIT & bit_and(0,0) = 0 & bit_and(0,1) = 0 & bit_and(1,0) = 0 & bit_and(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 1 => bit_and(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 0 => bit_and(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3)) & !b1.(b1: BIT => bit_and(b1,1) = b1) & !b1.(b1: BIT => bit_and(b1,0) = 0) & dom(bit_or) = BIT*BIT & ran(bit_or) = BIT & bit_or(0,0) = 0 & bit_or(0,1) = 1 & bit_or(1,0) = 1 & bit_or(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 1 => bit_or(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 0 => bit_or(b2,b1) = 0) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 1 => b1 = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 0 => b1 = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3)) & !b1.(b1: BIT => bit_or(b1,1) = 1) & !b1.(b1: BIT => bit_or(b1,0) = b1) & !b1.(b1: BIT => bit_or(1,b1) = 1) & !b1.(b1: BIT => bit_or(0,b1) = b1) & dom(bit_xor) = BIT*BIT & ran(bit_xor) = BIT & bit_xor(0,0) = 0 & bit_xor(0,1) = 1 & bit_xor(1,0) = 1 & bit_xor(1,1) = 0 & !(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 1 => bit_xor(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 0 => bit_xor(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3)) & !bb.(bb: BIT => bit_xor(bb,bb) = 0) & dom(bool_bit) = BOOL & bool_bit(TRUE) = 1 & bool_bit(FALSE) = 0 & !bb.(bb: BIT => bb = 0 or bb = 1) & !bb.(bb: BIT & not(bb = 0) => bb = 1) & !bb.(bb: BIT & not(bb = 1) => bb = 0) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_xor(bv,bv),indx) = bv_get(bv_zero(bv_size(bv)),indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 0..bv_size(v1)-1 => bv_get(bv_xor(v1,v2),indx) = bv_get(bv_xor(v2,v1),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v2)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_or(bv,bv_zero(bv_size(bv))),indx) = bv_get(bv,indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_or(bv,bv_one(bv_size(bv))),indx) = bv_get(bv_one(bv_size(bv)),indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: 0..bv_size(v1)-1 => bv_get(bv_or(v1,bv_or(v2,v3)),indx) = bv_get(bv_or(bv_or(v1,v2),v3),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v2)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 0..bv_size(v1)-1 => bv_get(bv_or(v1,v2),indx) = bv_get(bv_or(v2,v1),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_and(bv,bv_one(bv_size(bv))),indx) = bv_get(bv,indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_and(bv,bv_zero(bv_size(bv))),indx) = bv_get(bv_zero(bv_size(bv)),indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: 0..bv_size(v1)-1 => bv_get(bv_and(v1,bv_and(v2,v3)),indx) = bv_get(bv_and(bv_and(v1,v2),v3),indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 0..bv_size(v1)-1 => bv_get(bv_and(v1,v2),indx) = bv_get(bv_and(v2,v1),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_and(v1,v2)) = bv_size(v2)) & !(bv,low,high).(bv: BIT_VECTOR & low: 0..bv_size(bv)-1 & high: 0..bv_size(bv)-1 & low<=high => bv_size(bv_sub(bv,low,high)) = high-low) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR => bv_size(bv_catenate(v1,v2)) = bv_size(v1)+bv_size(v2)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_not(bv_not(bv)),indx) = bv_get(bv,indx)) & !bv.(bv: BIT_VECTOR => bv_size(bv_not(bv)) = bv_size(bv)) & size(BYTE_ZERO) = 8 & BYTE: POW(BIT_VECTOR) & BYTE_ZERO: BIT_VECTOR & first(BYTE_ZERO) = 0 & !bt.(bt: BYTE => bv_size(bt) = size(bt) & bv_size(bt) = 8 & (bt: seq(BIT) & not(bt = {}))) & 8: INTEGER & dom(is_zero) = BYTE & ran(is_zero) = BIT & dom(parity_even) = BYTE & ran(parity_even) = BIT & dom(and) = BYTE*BYTE & ran(and) = BYTE & dom(ior) = BYTE*BYTE & ran(ior) = BYTE & dom(xor) = BYTE*BYTE & ran(xor) = BYTE & dom(bitget) = BYTE*PHYS_BYTE_INDEX & ran(bitget) = BIT & dom(bitset) = BYTE*PHYS_BYTE_INDEX & ran(bitset) = BYTE & dom(bitclear) = BYTE*PHYS_BYTE_INDEX & ran(bitclear) = BYTE & dom(complement) = BYTE & ran(complement) = BYTE & dom(swap) = BYTE & ran(swap) = BYTE & dom(rotateleft) = BYTE & ran(rotateleft) = BYTE & dom(rotateright) = BYTE & ran(rotateright) = BYTE & dom(get_upper_digit) = BYTE & ran(get_upper_digit) = 0..15 & dom(get_lower_digit) = BYTE & ran(get_lower_digit) = 0..15 & [1,1,1,1,1,1,1,1]: BYTE & [0,0,0,0,0,0,0,0]: BYTE & BV16_ZERO: BV16 & BV16: POW(BIT_VECTOR) & !bt.(bt: BV16 => bv_size(bt) = size(bt) & bv_size(bt) = 16 & (bt: seq(BIT) & not(bt = {}))) & dom(bv16_byte) = BV16 & ran(bv16_byte) = BYTE*BYTE & dom(byte_bv16) = BYTE*BYTE & ran(byte_bv16) = BV16 & dom(bv16_bit_get) = BV16*PHYS_BV16_INDEX & ran(bv16_bit_get) = BIT & [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]: BV16 & [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]: BV16 & UCHAR_MAX: INTEGER & UCHAR_MIN: INTEGER & dom(byte_uchar) = BYTE & ran(byte_uchar) = UCHAR & dom(uchar_byte) = UCHAR & ran(uchar_byte) = BYTE & SCHAR_MAX: INTEGER & SCHAR_MIN: INTEGER & dom(byte_schar) = BYTE & ran(byte_schar) = SCHAR & dom(schar_byte) = SCHAR & ran(schar_byte) = BYTE & dom(uchar_schar) = UCHAR & ran(uchar_schar) = SCHAR & dom(schar_uchar) = SCHAR & ran(schar_uchar) = UCHAR & SSHORT_MIN: SSHORT & SSHORT_MAX: SSHORT & dom(bv16_sshort) = BV16 & ran(bv16_sshort) = SSHORT & dom(sshort_bv16) = SSHORT & ran(sshort_bv16) = BV16 & dom(schar_sshort) = SCHAR*SCHAR & ran(schar_sshort) = SSHORT & dom(sshort_schar) = SSHORT & ran(sshort_schar) = SCHAR*SCHAR & USHORT_MAX: INTEGER & USHORT_MIN: INTEGER & dom(bv16_ushort) = BV16 & ran(bv16_ushort) = USHORT & dom(ushort_bv16) = USHORT & ran(ushort_bv16) = BV16 & dom(uchar_ushort) = UCHAR*UCHAR & ran(uchar_ushort) = USHORT & dom(ushort_uchar) = USHORT & ran(ushort_uchar) = UCHAR*UCHAR & 2**16 = 65536 & 2**15 = 32768 & 2**14 = 16384 & 2**13 = 8192 & 2**12 = 4096 & 2**11 = 2048 & 2**10 = 1024 & 2**9 = 512 & 2**8 = 256 & (-2)**7 = -128 & 2**7 = 128 & 2**6 = 64 & 2**5 = 32 & 2**4 = 16 & 2**3 = 8 & 2**2 = 4 & 2**1 = 2 & 2**0 = 1);
  ("`Local hypotheses'" & mem$0: BV16 +-> BYTE & dom(mem$0) = BV16 & io_ports$0: BYTE +-> {[0,0,0,0,0,0,0,0]} & dom(io_ports$0) = BYTE & ran(mem$0): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem$0<+{address|->value}: BV16 +-> BYTE & dom(mem$0<+{address|->value}) = BV16));
  "`Check that the invariant (rgs8: id_reg_8 --> BYTE) is established by the initialisation - ref 3.3'";
  ({1|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{2|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{3|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{4|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{5|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{6|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{7|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{8|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{9|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{10|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{11|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{12|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{13|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{14|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{15|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{16|->id_reg_8|->[1,1,1,1,1,1,1,1]}: (1..16)*{id_reg_8} +-> BYTE);
  (dom({1|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{2|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{3|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{4|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{5|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{6|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{7|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{8|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{9|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{10|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{11|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{12|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{13|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{14|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{15|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{16|->id_reg_8|->[1,1,1,1,1,1,1,1]}) = (1..16)*{id_reg_8});
  "`Check that the invariant (pc: USHORT) is established by the initialisation - ref 3.3'";
  (0: USHORT);
  "`Check that the invariant (i_: BYTE) is established by the initialisation - ref 3.3'";
  (uchar_byte(0): BYTE);
  "`Check that the invariant (iff1: BIT) is established by the initialisation - ref 3.3'";
  (0: BIT);
  "`Check that the invariant (io_ports: BYTE --> BYTE) is established by the initialisation - ref 3.3'";
  (io_ports$0: BYTE +-> BYTE);
  ("`Component invariant'" & rgs8: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8) = (1..16)*{id_reg_8} & pc: USHORT & sp: BV16 & ix: BV16 & iy: BV16 & i_: BYTE & r_: BYTE & iff1: BIT & iff2: BIT & im: BIT*BIT & io_ports: BYTE +-> BYTE & dom(io_ports) = BYTE);
  "`Check assertion (dec(rgs8(b0)): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (dec(rgs8(5|->id_reg_8)): BYTE);
  "`Check assertion (io_ports(rgs8(c0)): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (io_ports(rgs8(6|->id_reg_8)): BYTE);
  "`Check assertion (bitget(rgs8(f0),0): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),0): BIT);
  "`Check assertion (bitget(rgs8(f0),1): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),1): BIT);
  "`Check assertion (bitget(rgs8(f0),2): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),2): BIT);
  "`Check assertion (bitget(rgs8(f0),3): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),3): BIT);
  "`Check assertion (bitget(rgs8(f0),4): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),4): BIT);
  "`Check assertion (bitget(rgs8(f0),5): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),5): BIT);
  "`Check assertion (bitget(rgs8(f0),6): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),6): BIT);
  "`Check assertion (bitget(rgs8(f0),7): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),7): BIT);
  "`Check assertion (ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16);
  "`Check assertion (ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16);
  "`Check assertion (ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16);
  "`Check assertion (ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16);
  "`Check assertion (dec_BV16(byte_bv16(rgs8(h0),rgs8(l0))): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16);
  "`Check assertion (inc_BV16(byte_bv16(rgs8(h0),rgs8(l0))): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16);
  "`Check assertion (inc_BV16(byte_bv16(rgs8(d0),rgs8(e0))): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
  "`Check assertion (dec_BV16(byte_bv16(rgs8(d0),rgs8(e0))): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
  "`Check assertion (inc_BV16(byte_bv16(rgs8(b0),rgs8(c0))): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
  "`Check assertion (dec_BV16(byte_bv16(rgs8(b0),rgs8(c0))): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
  "`Check assertion (mem(iy): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(iy): BYTE);
  "`Check assertion (mem(ix): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(ix): BYTE);
  "`Check assertion (mem(sp): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(sp): BYTE);
  "`Check assertion (mem(byte_bv16(rgs8(a0),rgs8(f0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
  "`Check assertion (mem(byte_bv16(rgs8(h0),rgs8(l0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
  "`Check assertion (mem(byte_bv16(rgs8(d0),rgs8(e0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
  "`Check assertion (mem(byte_bv16(rgs8(b0),rgs8(c0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
  "`Check assertion (byte_bv16(rgs8(a0),rgs8(f0)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
  "`Check assertion (byte_bv16(rgs8(d0),rgs8(e0)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16);
  "`Check assertion (byte_bv16(rgs8(h0),rgs8(l0)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16);
  "`Check assertion (byte_bv16(rgs8(b0),rgs8(c0)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16);
  ("`Local hypotheses'" & dd: SCHAR);
  "`Check assertion (!dd.(dd: SCHAR => bv_9ireg_plus_d0(mem,iy,dd): BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_9ireg_plus_d0(mem,iy,dd): BYTE);
  "`Check assertion (!dd.(dd: SCHAR => bv_9ireg_plus_d0(mem,ix,dd): BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_9ireg_plus_d0(mem,ix,dd): BYTE);
  "`Check assertion (ran(bv_9ireg_plus_d0) = BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (ran(bv_9ireg_plus_d0) = BYTE);
  "`Check assertion (!dd.(dd: SCHAR => bv_ireg_plus_d(iy,dd): BV16)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_ireg_plus_d(iy,dd): BV16);
  "`Check assertion (!dd.(dd: SCHAR => bv_ireg_plus_d(ix,dd): BV16)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_ireg_plus_d(ix,dd): BV16);
  "`Check assertion (ran(bv_ireg_plus_d) = BV16) deduction - ref 3.2, 4.2, 5.3'";
  (ran(bv_ireg_plus_d) = BV16);
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb));
  "`Check assertion (!(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & ww: id_reg_8 & wwr: BYTE & aa: id_reg_8 & aar: BYTE & bb: id_reg_8 & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr,aa|->aar,bb|->bbr}: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa));
  "`Check assertion (!(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & ww: id_reg_8 & wwr: BYTE & aa: id_reg_8 & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr,aa|->aar}: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww));
  "`Check assertion (!(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & ww: id_reg_8 & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv));
  "`Check assertion (!(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr}: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz));
  "`Check assertion (!(xx,xxr,yy,yyr,zz,zzr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr}: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy));
  "`Check assertion (!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} & xxr: BYTE);
  "`Check assertion (!(xx,xxr).(xx: id_reg_8 & xxr: BYTE => rgs8<+{xx|->xxr}: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8});
  "`Check assertion (!xx.(xx: id_reg_8 --> BYTE => rgs8<+xx: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+xx) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT);
  "`Check assertion (!(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {f0}*BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE);
  "`Check assertion (ran(update_flag_reg): POW({f0}*BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (ran(update_flag_reg): POW({2|->id_reg_8}*BYTE));
  "`Check assertion (update_refresh_reg(r_): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (update_refresh_reg(r_): BYTE);
  "`Check assertion (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(a0),rgs8(f0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE);
  "`Check assertion (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(h0),rgs8(l0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE);
  "`Check assertion (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(d0),rgs8(e0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE);
  "`Check assertion (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(b0),rgs8(c0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE);
  "`Check assertion (instruction_next(pc): USHORT) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(pc): USHORT);
  "`Check assertion (ran(rgs8) <: BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (ran(rgs8): POW(BYTE));
  ("`Component assertions'" & ran(mem): POW(BYTE) & dom(mem) = BV16 & ran(rgs8): POW(BYTE) & dom(rgs8) = (1..16)*{id_reg_8} & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & dom(bv_ireg_plus_d) = BV16*SCHAR & ran(bv_ireg_plus_d) = BV16 & !dd.(dd: SCHAR => bv_ireg_plus_d(ix,dd): BV16) & !dd.(dd: SCHAR => bv_ireg_plus_d(iy,dd): BV16) & dom(bv_9ireg_plus_d0) = (BV16 --> BYTE)*BV16*SCHAR & ran(bv_9ireg_plus_d0) = BYTE & !dd.(dd: SCHAR => bv_9ireg_plus_d0(mem,ix,dd): BYTE) & !dd.(dd: SCHAR => bv_9ireg_plus_d0(mem,iy,dd): BYTE) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bitget(rgs8(2|->id_reg_8),7): BIT & bitget(rgs8(2|->id_reg_8),6): BIT & bitget(rgs8(2|->id_reg_8),5): BIT & bitget(rgs8(2|->id_reg_8),4): BIT & bitget(rgs8(2|->id_reg_8),3): BIT & bitget(rgs8(2|->id_reg_8),2): BIT & bitget(rgs8(2|->id_reg_8),1): BIT & bitget(rgs8(2|->id_reg_8),0): BIT & io_ports(rgs8(6|->id_reg_8)): BYTE & dec(rgs8(5|->id_reg_8)): BYTE);
  ("`ext_update_io_ports preconditions in this component'" & address: UCHAR & value: SCHAR);
  "`Check that the invariant (io_ports: BYTE --> BYTE) is preserved by the operation - ref 3.4'";
  (io_ports<+{uchar_byte(address)|->schar_byte(value)}: BYTE +-> BYTE);
  (dom(io_ports<+{uchar_byte(address)|->schar_byte(value)}) = BYTE);
  ("`IN_A_9n0 preconditions in this component'" & nn: UCHAR);
  "`Check that the invariant (rgs8: id_reg_8 --> BYTE) is preserved by the operation - ref 3.4'";
  (rgs8<+{1|->id_reg_8|->io_ports(uchar_byte(nn))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{1|->id_reg_8|->io_ports(uchar_byte(nn))}) = (1..16)*{id_reg_8});
  ("`IN_r_9C0 preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = is_zero(io_ports(rgs8(6|->id_reg_8))) & half_carry = 0 & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 0 & carry = bitget(rgs8(2|->id_reg_8),0));
  (rgs8<+({rr|->io_ports(rgs8(6|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rr|->io_ports(rgs8(6|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8});
  ("`INI preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): PROGRAM_R_ADR);
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  (rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8});
  ("`INIR preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = 1 & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = 1 & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec(rgs8(5|->id_reg_8))) = 1 & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = 1 & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec(rgs8(5|->id_reg_8))) = 1) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`IND preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`INDR preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec(rgs8(5|->id_reg_8))) = 1 & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec(rgs8(5|->id_reg_8))) = 1) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`OUT_9n0_A preconditions in this component'" & nn: UCHAR);
  (io_ports<+{uchar_byte(nn)|->rgs8(1|->id_reg_8)}: BYTE +-> BYTE);
  (dom(io_ports<+{uchar_byte(nn)|->rgs8(1|->id_reg_8)}) = BYTE);
  ("`OUT_9C0_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
  (io_ports<+{rgs8(rr)|->rgs8(6|->id_reg_8)}: BYTE +-> BYTE);
  (dom(io_ports<+{rgs8(rr)|->rgs8(6|->id_reg_8)}) = BYTE);
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  (io_ports<+{rgs8(6|->id_reg_8)|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BYTE +-> BYTE);
  (dom(io_ports<+{rgs8(6|->id_reg_8)|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BYTE);
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec(rgs8(5|->id_reg_8))) = 1 & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec(rgs8(5|->id_reg_8))) = 1) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec(rgs8(5|->id_reg_8))) = 1 & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec(rgs8(5|->id_reg_8))) = 1) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  (rgs8<+({1|->id_reg_8|->rotateleft(rgs8(1|->id_reg_8))}\/{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),7))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->rotateleft(rgs8(1|->id_reg_8))}\/{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),7))})) = (1..16)*{id_reg_8});
  (rgs8<+({1|->id_reg_8|->(rotateleft(rgs8(1|->id_reg_8))<+{0|->bitget(rgs8(2|->id_reg_8),0)})}\/{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),7))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->(rotateleft(rgs8(1|->id_reg_8))<+{0|->bitget(rgs8(2|->id_reg_8),0)})}\/{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),7))})) = (1..16)*{id_reg_8});
  (rgs8<+({1|->id_reg_8|->rotateright(rgs8(1|->id_reg_8))}\/{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->rotateright(rgs8(1|->id_reg_8))}\/{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),0))})) = (1..16)*{id_reg_8});
  (rgs8<+({1|->id_reg_8|->(rotateright(rgs8(1|->id_reg_8))<+{0|->bitget(rgs8(2|->id_reg_8),0)})}\/{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->(rotateright(rgs8(1|->id_reg_8))<+{0|->bitget(rgs8(2|->id_reg_8),0)})}\/{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),0))})) = (1..16)*{id_reg_8});
  ("`RLC_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(rgs8(rr)));
  (rgs8<+({rr|->res}\/{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(rgs8(rr),7))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rr|->res}\/{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(rgs8(rr),7))})) = (1..16)*{id_reg_8});
  ("`RLC_9HL0 preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  (rgs8<+{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7))}) = (1..16)*{id_reg_8});
  ("`RLC_9IX_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(ix,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,ix,desloc)));
  (bv_ireg_plus_d(ix,desloc): BV16);
  (bv16_ushort(bv_ireg_plus_d(ix,desloc)): PROGRAM_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,ix,desloc)) & mem<+{bv_ireg_plus_d(ix,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}) = BV16 & ran(mem<+{bv_ireg_plus_d(ix,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}) = BV16));
  (rgs8<+{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(bv_9ireg_plus_d0(mem,ix,desloc),7))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(bv_9ireg_plus_d0(mem,ix,desloc),7))}) = (1..16)*{id_reg_8});
  ("`RLC_9IY_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(iy,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,iy,desloc)));
  (bv_ireg_plus_d(iy,desloc): BV16);
  (bv16_ushort(bv_ireg_plus_d(iy,desloc)): PROGRAM_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,iy,desloc)) & mem<+{bv_ireg_plus_d(iy,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->res}) = BV16 & ran(mem<+{bv_ireg_plus_d(iy,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(iy,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->res}<+{address|->value}) = BV16));
  (rgs8<+{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(bv_9ireg_plus_d0(mem,iy,desloc),7))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(bv_9ireg_plus_d0(mem,iy,desloc),7))}) = (1..16)*{id_reg_8});
  ("`RL_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(rgs8(rr))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`RL_9HL preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  ("`RL_9IX_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(ix,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,ix,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,ix,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{bv_ireg_plus_d(ix,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}) = BV16 & ran(mem<+{bv_ireg_plus_d(ix,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}) = BV16));
  ("`RL_9IY_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(iy,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,iy,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,iy,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{bv_ireg_plus_d(iy,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->res}) = BV16 & ran(mem<+{bv_ireg_plus_d(iy,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(iy,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->res}<+{address|->value}) = BV16));
  ("`RRC_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
  ("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr)));
  (rgs8<+({rr|->res}\/{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(rgs8(rr),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rr|->res}\/{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(rgs8(rr),0))})) = (1..16)*{id_reg_8});
  ("`RRC_9HL0 preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  (rgs8<+{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0))}) = (1..16)*{id_reg_8});
  ("`RRC_9IX_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(ix,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,ix,desloc)));
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,ix,desloc)) & mem<+{bv_ireg_plus_d(ix,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}) = BV16 & ran(mem<+{bv_ireg_plus_d(ix,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}) = BV16));
  (rgs8<+{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(bv_9ireg_plus_d0(mem,ix,desloc),0))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(bv_9ireg_plus_d0(mem,ix,desloc),0))}) = (1..16)*{id_reg_8});
  ("`RRC_9IY_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(iy,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,iy,desloc)));
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,iy,desloc)) & mem<+{bv_ireg_plus_d(iy,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->res}) = BV16 & ran(mem<+{bv_ireg_plus_d(iy,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(iy,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->res}<+{address|->value}) = BV16));
  (rgs8<+{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(bv_9ireg_plus_d0(mem,iy,desloc),0))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(is_negative(res),is_zero(res),0,parity_even(res),0,bitget(bv_9ireg_plus_d0(mem,iy,desloc),0))}) = (1..16)*{id_reg_8});
  ("`RR_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
  ("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`RR_9HL preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): STACK_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  ("`RR_9IX_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(ix,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,ix,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,ix,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{bv_ireg_plus_d(ix,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}) = BV16 & ran(mem<+{bv_ireg_plus_d(ix,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}) = BV16));
  ("`RR_9IY_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(iy,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,iy,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,iy,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{bv_ireg_plus_d(iy,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->res}) = BV16 & ran(mem<+{bv_ireg_plus_d(iy,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(iy,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->res}<+{address|->value}) = BV16));
  ("`SLA_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
  ("`SLA_9HL preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): STACK_R_ADR);
  ("`SLA_9IX_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(ix,desloc)): DATA_R_ADR);
  ("`SLA_9IY_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(iy,desloc)): DATA_R_ADR);
  ("`SRA_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
  ("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr))<+{7|->bitget(rgs8(rr),7)});
  ("`SRA_9HL0 preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{7|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{7|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)} & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  ("`SRA_9IX_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(ix,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,ix,desloc))<+{7|->bitget(bv_9ireg_plus_d0(mem,ix,desloc),7)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,ix,desloc))<+{7|->bitget(bv_9ireg_plus_d0(mem,ix,desloc),7)} & mem<+{bv_ireg_plus_d(ix,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}) = BV16 & ran(mem<+{bv_ireg_plus_d(ix,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}) = BV16));
  ("`SRA_9IY_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(iy,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,iy,desloc))<+{7|->bv_9ireg_plus_d0(mem,iy,desloc)(7)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,iy,desloc))<+{7|->bv_9ireg_plus_d0(mem,iy,desloc)(7)} & mem<+{bv_ireg_plus_d(ix,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}) = BV16 & ran(mem<+{bv_ireg_plus_d(ix,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}) = BV16));
  ("`SRL_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(rgs8(rr)),7));
  (rgs8<+({rr|->res}\/{update_flag_reg(0,is_zero(res),0,parity_even(res),0,bitget(rgs8(rr),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rr|->res}\/{update_flag_reg(0,is_zero(res),0,parity_even(res),0,bitget(rgs8(rr),0))})) = (1..16)*{id_reg_8});
  ("`SRL_9HL0 preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7));
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  (rgs8<+{update_flag_reg(0,is_zero(res),0,parity_even(res),0,bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(0,is_zero(res),0,parity_even(res),0,bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0))}) = (1..16)*{id_reg_8});
  ("`SRL_9IX_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(ix,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(bv_9ireg_plus_d0(mem,ix,desloc)),7));
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(bv_9ireg_plus_d0(mem,ix,desloc)),7) & mem<+{bv_ireg_plus_d(ix,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}) = BV16 & ran(mem<+{bv_ireg_plus_d(ix,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}) = BV16));
  (rgs8<+{update_flag_reg(0,is_zero(res),0,parity_even(res),0,bitget(bv_9ireg_plus_d0(mem,ix,desloc),0))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(0,is_zero(res),0,parity_even(res),0,bitget(bv_9ireg_plus_d0(mem,ix,desloc),0))}) = (1..16)*{id_reg_8});
  ("`SRL_9IY_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(iy,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(bv_9ireg_plus_d0(mem,iy,desloc)),7));
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(bv_9ireg_plus_d0(mem,iy,desloc)),7) & mem<+{bv_ireg_plus_d(iy,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->res}) = BV16 & ran(mem<+{bv_ireg_plus_d(iy,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(iy,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->res}<+{address|->value}) = BV16));
  (rgs8<+{update_flag_reg(0,is_zero(res),0,parity_even(res),0,bitget(bv_9ireg_plus_d0(mem,iy,desloc),0))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(0,is_zero(res),0,parity_even(res),0,bitget(bv_9ireg_plus_d0(mem,iy,desloc),0))}) = (1..16)*{id_reg_8});
  ("`RLD preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {7|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{6|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{5|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{4|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{3|->bitget(rgs8(1|->id_reg_8),3)}\/{2|->bitget(rgs8(1|->id_reg_8),2)}\/{1|->bitget(rgs8(1|->id_reg_8),1)}\/{0|->bitget(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({3|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{2|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{1|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{0|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}));
  ("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {7|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{6|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{5|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{4|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{3|->bitget(rgs8(1|->id_reg_8),3)}\/{2|->bitget(rgs8(1|->id_reg_8),2)}\/{1|->bitget(rgs8(1|->id_reg_8),1)}\/{0|->bitget(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({3|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{2|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{1|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{0|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  (rgs8<+{update_flag_reg(is_negative(acc),is_zero(acc),0,parity_even(acc),0,bitget(rgs8(2|->id_reg_8),0))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(is_negative(acc),is_zero(acc),0,parity_even(acc),0,bitget(rgs8(2|->id_reg_8),0))}) = (1..16)*{id_reg_8});
  ("`RRD preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {7|->bitget(rgs8(1|->id_reg_8),3)}\/{6|->bitget(rgs8(1|->id_reg_8),2)}\/{5|->bitget(rgs8(1|->id_reg_8),1)}\/{4|->bitget(rgs8(1|->id_reg_8),0)}\/{3|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{2|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{1|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{0|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({3|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{2|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{1|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{0|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}));
  ("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {7|->bitget(rgs8(1|->id_reg_8),3)}\/{6|->bitget(rgs8(1|->id_reg_8),2)}\/{5|->bitget(rgs8(1|->id_reg_8),1)}\/{4|->bitget(rgs8(1|->id_reg_8),0)}\/{3|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{2|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{1|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{0|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({3|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{2|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{1|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{0|->bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  ("`BIT_b_rr preconditions in this component'" & bb: 0..7 & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
  (rgs8<+{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bit_not(bitget(rgs8(rr),bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bit_not(bitget(rgs8(rr),bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))}) = (1..16)*{id_reg_8});
  ("`BIT_b_9HL0 preconditions in this component'" & bb: 0..7);
  (rgs8<+{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bit_not(bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bit_not(bitget(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))}) = (1..16)*{id_reg_8});
  ("`BIT_b_9IX_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR);
  (rgs8<+{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bit_not(bitget(bv_9ireg_plus_d0(mem,ix,desloc),bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bit_not(bitget(bv_9ireg_plus_d0(mem,ix,desloc),bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))}) = (1..16)*{id_reg_8});
  ("`BIT_b_9IY_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR);
  (rgs8<+{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bit_not(bitget(bv_9ireg_plus_d0(mem,iy,desloc),bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bit_not(bitget(bv_9ireg_plus_d0(mem,iy,desloc),bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))}) = (1..16)*{id_reg_8});
  ("`SET_b_r preconditions in this component'" & bb: 0..7 & rr: (1..16)*{id_reg_8});
  (rgs8<+{rr|->bitset(rgs8(rr),bb)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->bitset(rgs8(rr),bb)}) = (1..16)*{id_reg_8});
  ("`SET_b_9HL0 preconditions in this component'" & bb: 0..7 & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  (bitset(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
  ("`SET_b_9IX_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(ix,desloc)): DATA_R_ADR);
  (bitset(bv_9ireg_plus_d0(mem,ix,desloc),bb): BYTE);
  ("`SET_b_9IY_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(iy,desloc)): DATA_R_ADR);
  (bitset(bv_9ireg_plus_d0(mem,iy,desloc),bb): BYTE);
  ("`RES_b_r preconditions in this component'" & bb: 0..7 & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
  (rgs8<+{rr|->bitclear(rgs8(rr),bb)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->bitclear(rgs8(rr),bb)}) = (1..16)*{id_reg_8});
  ("`RES_b_9HL0 preconditions in this component'" & bb: 0..7 & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  (bitclear(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
  ("`RES_b_9IX_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(ix,desloc)): DATA_R_ADR);
  (bitclear(bv_9ireg_plus_d0(mem,ix,desloc),bb): BYTE);
  ("`RES_b_9IY_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(iy,desloc)): DATA_R_ADR);
  (bitclear(bv_9ireg_plus_d0(mem,iy,desloc),bb): BYTE);
  ("`JR_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  "`Check that the invariant (pc: USHORT) is preserved by the operation - ref 3.4'";
  ((pc+ee) mod 2**16: USHORT);
  ("`JR_C_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ("`Local hypotheses'" & not(bitget(rgs8(2|->id_reg_8),0) = 0));
  ("`JR_NC_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ("`Local hypotheses'" & not(bitget(rgs8(2|->id_reg_8),0) = 1));
  ("`JR_Z_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ("`Local hypotheses'" & not(bitget(rgs8(2|->id_reg_8),6) = 0));
  ("`JR_NZ_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ("`Local hypotheses'" & not(bitget(rgs8(2|->id_reg_8),6) = 1));
  (bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): USHORT);
  (bv16_ushort(ix): USHORT);
  (bv16_ushort(iy): USHORT);
  ("`DJNZ_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ("`Local hypotheses'" & is_zero(dec(rgs8(5|->id_reg_8))) = 1);
  (rgs8<+{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & not(is_zero(dec(rgs8(5|->id_reg_8))) = 1));
  ("`CALL_nn preconditions in this component'" & nn: USHORT & bv16_ushort(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))): STACK_R_ADR & bv16_ushort(sp): STACK_R_ADR);
  ("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & not(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)) = ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))));
  ({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}: BV16 +-> BYTE);
  (dom({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}) = BV16);
  ("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & not(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)) = ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))) & elem: dom({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}));
  (bv16_ushort(elem): STACK_R_ADR);
  ("`CALL_cc_nn preconditions in this component'" & cc: 0..8 & nn: USHORT & bv16_ushort(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))): STACK_R_ADR & bv16_ushort(sp): STACK_R_ADR);
  ("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & cc_get(rgs8,cc) = 1);
  ("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & cc_get(rgs8,cc) = 1 & elem: dom({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}));
  (bv16_ushort(byte_bv16(mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))),mem(sp))): USHORT);
  ("`RET_cc preconditions in this component'" & cc: 0..7);
  ("`Local hypotheses'" & cc_get(rgs8,cc) = 1);
  ("`RST_p preconditions in this component'" & pp: 0..7 & bv16_ushort(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))): STACK_R_ADR & bv16_ushort(sp): STACK_R_ADR);
  ("`Local hypotheses'" & pc_l: BYTE & pc_h: BYTE & bv16_byte(ushort_bv16(pc)) = pc_l|->pc_h);
  ({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_h}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_l}: BV16 +-> BYTE);
  (dom({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_h}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_l}) = BV16);
  ("`Local hypotheses'" & pc_l: BYTE & pc_h: BYTE & bv16_byte(ushort_bv16(pc)) = pc_l|->pc_h & elem: dom({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_h}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_l}));
  ("`Local hypotheses'" & pc_l: BYTE & pc_h: BYTE & bv16_byte(ushort_bv16(pc)) = pc_l|->pc_h & mem<+({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_h}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_l}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_h}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_l})) = BV16 & ran(mem<+({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_h}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_l})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_h}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_l})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_h}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_l})<+{address|->value}) = BV16));
  (pp*8: USHORT);
  ("`AND_A_r preconditions in this component'" & rr: (1..16)*{id_reg_8});
  ("`Local hypotheses'" & result: BYTE & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & result = and(rgs8(1|->id_reg_8),rgs8(rr)) & negative = is_negative(result) & zero = is_zero(result) & half_carry = 0 & pv = parity_even(result) & add_sub = 0 & carry = 0);
  (rgs8<+({1|->id_reg_8|->result}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->result}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8});
  ("`AND_A_n preconditions in this component'" & n1: SCHAR);
  ("`Local hypotheses'" & result: BYTE & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & result = and(rgs8(1|->id_reg_8),schar_byte(n1)) & negative = is_negative(result) & zero = is_zero(result) & half_carry = 0 & pv = parity_even(result) & add_sub = 0 & carry = 0);
  ("`Local hypotheses'" & result: BYTE & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & result = and(rgs8(1|->id_reg_8),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(result) & zero = is_zero(result) & half_carry = 0 & pv = parity_even(result) & add_sub = 0 & carry = 0);
  ("`AND_A_9IX_d0 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & result: BYTE & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & result = and(rgs8(1|->id_reg_8),bv_9ireg_plus_d0(mem,ix,desloc)) & negative = is_negative(result) & zero = is_zero(result) & half_carry = 0 & pv = parity_even(result) & add_sub = 0 & carry = 0);
  ("`AND_A_9IY_d0 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & result: BYTE & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & result = and(rgs8(1|->id_reg_8),bv_9ireg_plus_d0(mem,iy,desloc)) & negative = is_negative(result) & zero = is_zero(result) & half_carry = 0 & pv = parity_even(result) & add_sub = 0 & carry = 0);
  ("`OR_A_r preconditions in this component'" & rr: (1..16)*{id_reg_8});
  ("`Local hypotheses'" & result: BYTE & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & result = ior(rgs8(1|->id_reg_8),rgs8(rr)) & negative = is_negative(result) & zero = is_zero(result) & half_carry = 0 & pv = parity_even(result) & add_sub = 0 & carry = 0);
  ("`OR_A_n preconditions in this component'" & n1: SCHAR);
  ("`Local hypotheses'" & result: BYTE & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & result = ior(rgs8(1|->id_reg_8),schar_byte(n1)) & negative = is_negative(result) & zero = is_zero(result) & half_carry = 0 & pv = parity_even(result) & add_sub = 0 & carry = 0);
  ("`Local hypotheses'" & result: BYTE & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & result = ior(rgs8(1|->id_reg_8),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(result) & zero = is_zero(result) & half_carry = 0 & pv = parity_even(result) & add_sub = 0 & carry = 0);
  ("`OR_A_9IX_d0 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & result: BYTE & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & result = ior(rgs8(1|->id_reg_8),bv_9ireg_plus_d0(mem,ix,desloc)) & negative = is_negative(result) & zero = is_zero(result) & half_carry = 0 & pv = parity_even(result) & add_sub = 0 & carry = 0);
  ("`OR_A_9IY_d0 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & result: BYTE & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & result = ior(rgs8(1|->id_reg_8),bv_9ireg_plus_d0(mem,iy,desloc)) & negative = is_negative(result) & zero = is_zero(result) & half_carry = 0 & pv = parity_even(result) & add_sub = 0 & carry = 0);
  ("`XOR_A_r preconditions in this component'" & rr: (1..16)*{id_reg_8});
  ("`Local hypotheses'" & result: BYTE & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & result = xor(rgs8(1|->id_reg_8),rgs8(rr)) & negative = is_negative(result) & zero = is_zero(result) & half_carry = 0 & pv = parity_even(result) & add_sub = 0 & carry = 0);
  ("`XOR_A_n preconditions in this component'" & n1: SCHAR);
  ("`Local hypotheses'" & result: BYTE & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & result = xor(rgs8(1|->id_reg_8),schar_byte(n1)) & negative = is_negative(result) & zero = is_zero(result) & half_carry = 0 & pv = parity_even(result) & add_sub = 0 & carry = 0);
  ("`Local hypotheses'" & result: BYTE & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & result = xor(rgs8(1|->id_reg_8),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(result) & zero = is_zero(result) & half_carry = 0 & pv = parity_even(result) & add_sub = 0 & carry = 0);
  ("`XOR_A_9IX_d0 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & result: BYTE & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & result = xor(rgs8(1|->id_reg_8),bv_9ireg_plus_d0(mem,ix,desloc)) & negative = is_negative(result) & zero = is_zero(result) & half_carry = 0 & pv = parity_even(result) & add_sub = 0 & carry = 0);
  ("`XOR_A_9IY_d0 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & result: BYTE & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & result = xor(rgs8(1|->id_reg_8),bv_9ireg_plus_d0(mem,iy,desloc)) & negative = is_negative(result) & zero = is_zero(result) & half_carry = 0 & pv = parity_even(result) & add_sub = 0 & carry = 0);
  ("`CP_A_r preconditions in this component'" & rr: (1..16)*{id_reg_8});
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(rgs8(rr))));
  (rgs8<+{update_flag_reg(negative,zero,half_carry,carry,1,carry)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(negative,zero,half_carry,carry,1,carry)}) = (1..16)*{id_reg_8});
  ("`CP_A_n preconditions in this component'" & n1: SCHAR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),schar_uchar(n1)));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))));
  ("`CP_A_9IX_d0 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(bv_9ireg_plus_d0(mem,ix,desloc))));
  ("`CP_A_9IY_d0 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(bv_9ireg_plus_d0(mem,iy,desloc))));
  ("`INC_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(0,byte_uchar(rgs8(rr)),1));
  (rgs8<+({rr|->uchar_byte(sum)}\/{update_flag_reg(negative,zero,half_carry,carry,0,carry)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rr|->uchar_byte(sum)}\/{update_flag_reg(negative,zero,half_carry,carry,0,carry)})) = (1..16)*{id_reg_8});
  ("`INC_9HL0 preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(0,byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),1));
  (uchar_byte(sum): BYTE);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(0,byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),1) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->uchar_byte(sum)}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->uchar_byte(sum)}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->uchar_byte(sum)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->uchar_byte(sum)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->uchar_byte(sum)}<+{address|->value}) = BV16));
  (rgs8<+{update_flag_reg(negative,zero,half_carry,carry,0,carry)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(negative,zero,half_carry,carry,0,carry)}) = (1..16)*{id_reg_8});
  ("`INC_9IX_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(ix,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(0,byte_uchar(bv_9ireg_plus_d0(mem,ix,desloc)),1));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(0,byte_uchar(bv_9ireg_plus_d0(mem,ix,desloc)),1) & mem<+{bv_ireg_plus_d(ix,desloc)|->uchar_byte(sum)}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->uchar_byte(sum)}) = BV16 & ran(mem<+{bv_ireg_plus_d(ix,desloc)|->uchar_byte(sum)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(ix,desloc)|->uchar_byte(sum)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->uchar_byte(sum)}<+{address|->value}) = BV16));
  ("`INC_9IY_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(iy,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(0,byte_uchar(bv_9ireg_plus_d0(mem,iy,desloc)),1));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(0,byte_uchar(bv_9ireg_plus_d0(mem,iy,desloc)),1) & mem<+{bv_ireg_plus_d(iy,desloc)|->uchar_byte(sum)}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->uchar_byte(sum)}) = BV16 & ran(mem<+{bv_ireg_plus_d(iy,desloc)|->uchar_byte(sum)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(iy,desloc)|->uchar_byte(sum)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->uchar_byte(sum)}<+{address|->value}) = BV16));
  ("`DEC_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(0,byte_uchar(rgs8(rr)),1));
  (rgs8<+({rr|->uchar_byte(sum)}\/{update_flag_reg(negative,zero,half_carry,carry,1,bitget(rgs8(2|->id_reg_8),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rr|->uchar_byte(sum)}\/{update_flag_reg(negative,zero,half_carry,carry,1,bitget(rgs8(2|->id_reg_8),0))})) = (1..16)*{id_reg_8});
  ("`DEC_9HL0 preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(0,byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),1));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(0,byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),1) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->uchar_byte(sum)}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->uchar_byte(sum)}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->uchar_byte(sum)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->uchar_byte(sum)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->uchar_byte(sum)}<+{address|->value}) = BV16));
  (rgs8<+{update_flag_reg(negative,zero,half_carry,carry,1,bitget(rgs8(2|->id_reg_8),0))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(negative,zero,half_carry,carry,1,bitget(rgs8(2|->id_reg_8),0))}) = (1..16)*{id_reg_8});
  ("`DEC_9IX_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(ix,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(0,byte_uchar(bv_9ireg_plus_d0(mem,ix,desloc)),1));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(0,byte_uchar(bv_9ireg_plus_d0(mem,ix,desloc)),1) & mem<+{bv_ireg_plus_d(ix,desloc)|->uchar_byte(sum)}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->uchar_byte(sum)}) = BV16 & ran(mem<+{bv_ireg_plus_d(ix,desloc)|->uchar_byte(sum)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(ix,desloc)|->uchar_byte(sum)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->uchar_byte(sum)}<+{address|->value}) = BV16));
  ("`DEC_9IY_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(bv_ireg_plus_d(iy,desloc)): DATA_R_ADR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(0,byte_uchar(bv_9ireg_plus_d0(mem,iy,desloc)),1));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(0,byte_uchar(bv_9ireg_plus_d0(mem,iy,desloc)),1) & mem<+{bv_ireg_plus_d(iy,desloc)|->uchar_byte(sum)}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->uchar_byte(sum)}) = BV16 & ran(mem<+{bv_ireg_plus_d(iy,desloc)|->uchar_byte(sum)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(iy,desloc)|->uchar_byte(sum)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->uchar_byte(sum)}<+{address|->value}) = BV16));
  ("`ADD_HL_ss preconditions in this component'" & ss: (1..5)*{id_reg_16} & not(ss = 5|->id_reg_16));
  ("`Local hypotheses'" & result: USHORT & bv_value: BV16 & bvh: BYTE & bvl: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & get_bv_reg16(sp,rgs8,ss) = bv_value & result = add16USHORT(0,bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bv16_ushort(bv_value)) & bvh,bvl = bv16_byte(ushort_bv16(result)) & negative = bitget(rgs8(2|->id_reg_8),7) & zero = bitget(rgs8(2|->id_reg_8),6) & half_carry = add_halfcarryUSHORT(0,bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bv16_ushort(bv_value)) & carry = add_carryUSHORT(0,bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bv16_ushort(bv_value)));
  (rgs8<+({13|->id_reg_8|->bvh}\/{14|->id_reg_8|->bvl}\/{update_flag_reg(negative,zero,half_carry,bitget(rgs8(2|->id_reg_8),2),0,carry)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->bvh}\/{14|->id_reg_8|->bvl}\/{update_flag_reg(negative,zero,half_carry,bitget(rgs8(2|->id_reg_8),2),0,carry)})) = (1..16)*{id_reg_8});
  ("`ADC_HL_ss preconditions in this component'" & ss: (1..5)*{id_reg_16} & not(ss = 5|->id_reg_16));
  ("`Local hypotheses'" & result: USHORT & bv_value: BV16 & bvh: BYTE & bvl: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & get_bv_reg16(sp,rgs8,ss) = bv_value & result = add16USHORT(bitget(rgs8(2|->id_reg_8),0),bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bv16_ushort(bv_value)) & negative = 1 & zero = is_zero16USHORT(result) & half_carry = add_halfcarryUSHORT(bitget(rgs8(2|->id_reg_8),0),bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bv16_ushort(bv_value)) & carry = add_carryUSHORT(bitget(rgs8(2|->id_reg_8),0),bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bv16_ushort(bv_value)));
  (rgs8<+({13|->id_reg_8|->bvh}\/{14|->id_reg_8|->bvl}\/{update_flag_reg(negative,zero,half_carry,carry,0,carry)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->bvh}\/{14|->id_reg_8|->bvl}\/{update_flag_reg(negative,zero,half_carry,carry,0,carry)})) = (1..16)*{id_reg_8});
  ("`SBC_HL_ss preconditions in this component'" & ss: (1..5)*{id_reg_16} & not(ss = 5|->id_reg_16));
  ("`Local hypotheses'" & result: USHORT & bv_value: BV16 & bvh: BYTE & bvl: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & get_bv_reg16(sp,rgs8,ss) = bv_value & result = add16USHORT(bitget(rgs8(2|->id_reg_8),0),bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bv16_ushort(bv_value)) & negative = 1 & zero = is_zero16USHORT(result) & half_carry = sub_halfcarryUSHORT(bitget(rgs8(2|->id_reg_8),0),bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bv16_ushort(bv_value)) & carry = sub_carryUSHORT(bitget(rgs8(2|->id_reg_8),0),bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bv16_ushort(bv_value)));
  ("`ADD_IX_ss preconditions in this component'" & ss: (1..5)*{id_reg_16} & not(ss = 5|->id_reg_16));
  (rgs8<+{update_flag_reg(negative,zero,half_carry,bitget(rgs8(2|->id_reg_8),2),0,carry)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(negative,zero,half_carry,bitget(rgs8(2|->id_reg_8),2),0,carry)}) = (1..16)*{id_reg_8});
  "`Check that the invariant (ix: BV16) is preserved by the operation - ref 3.4'";
  (ushort_bv16(result): BV16);
  ("`ADD_IY_ss preconditions in this component'" & ss: (1..5)*{id_reg_16} & not(ss = 5|->id_reg_16));
  "`Check that the invariant (iy: BV16) is preserved by the operation - ref 3.4'";
  ("`INC_ss preconditions in this component'" & ss: (1..5)*{id_reg_16} & not(ss = 5|->id_reg_16));
  ("`Local hypotheses'" & ss = 4|->id_reg_16);
  "`Check that the invariant (sp: BV16) is preserved by the operation - ref 3.4'";
  (inc_BV16(sp): BV16);
  ("`Local hypotheses'" & not(ss = 4|->id_reg_16) & rh: (1..16)*{id_reg_8} & rl: (1..16)*{id_reg_8} & vh: BYTE & vl: BYTE & REG16_TO_REG8(ss) = rh|->rl & not(rh = rl) & bv16_byte(inc_BV16(byte_bv16(rgs8(rh),rgs8(rl)))) = vh|->vl);
  (rgs8<+({rh|->vh}\/{rl|->vl}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rh|->vh}\/{rl|->vl})) = (1..16)*{id_reg_8});
  (inc_BV16(ix): BV16);
  (inc_BV16(iy): BV16);
  ("`DEC_ss preconditions in this component'" & ss: (1..5)*{id_reg_16} & not(ss = 5|->id_reg_16));
  ("`Local hypotheses'" & not(ss = 4|->id_reg_16) & rh: (1..16)*{id_reg_8} & rl: (1..16)*{id_reg_8} & vh: BYTE & vl: BYTE & REG16_TO_REG8(ss) = rh|->rl & not(rh = rl) & bv16_byte(dec_BV16(byte_bv16(rgs8(rh),rgs8(rl)))) = vh|->vl);
  (dec_BV16(ix): BV16);
  ("`ADD_A_r preconditions in this component'" & rr: (1..16)*{id_reg_8});
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(rgs8(rr))));
  (rgs8<+({1|->id_reg_8|->uchar_byte(sum)}\/{update_flag_reg(negative,zero,half_carry,carry,0,carry)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->uchar_byte(sum)}\/{update_flag_reg(negative,zero,half_carry,carry,0,carry)})) = (1..16)*{id_reg_8});
  ("`ADD_A_n preconditions in this component'" & n1: SCHAR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),schar_uchar(n1)));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))));
  ("`ADD_A_9IX_d0 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(bv_9ireg_plus_d0(mem,ix,desloc))));
  ("`ADD_A_9IY_d0 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(bv_9ireg_plus_d0(mem,iy,desloc))));
  ("`ADC_A_r preconditions in this component'" & rr: (1..16)*{id_reg_8});
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(bitget(rgs8(2|->id_reg_8),0),byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(rgs8(rr))));
  ("`ADC_A_n preconditions in this component'" & n1: SCHAR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(bitget(rgs8(2|->id_reg_8),0),byte_uchar(rgs8(1|->id_reg_8)),schar_uchar(n1)));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(bitget(rgs8(2|->id_reg_8),0),byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))));
  ("`ADC_A_9IX_d0 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(bitget(rgs8(2|->id_reg_8),0),byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(bv_9ireg_plus_d0(mem,ix,desloc))));
  ("`ADC_A_9IY_d0 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = add8UCHAR(bitget(rgs8(2|->id_reg_8),0),byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(bv_9ireg_plus_d0(mem,iy,desloc))));
  ("`SUB_A_r preconditions in this component'" & rr: (1..16)*{id_reg_8});
  (rgs8<+({1|->id_reg_8|->uchar_byte(sum)}\/{update_flag_reg(negative,zero,half_carry,carry,1,carry)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->uchar_byte(sum)}\/{update_flag_reg(negative,zero,half_carry,carry,1,carry)})) = (1..16)*{id_reg_8});
  ("`SUB_A_n preconditions in this component'" & n1: SCHAR);
  ("`SUB_A_9IX_d0 preconditions in this component'" & desloc: SCHAR);
  ("`SUB_A_9IY_d0 preconditions in this component'" & desloc: SCHAR);
  ("`SBC_A_r preconditions in this component'" & rr: (1..16)*{id_reg_8});
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(bitget(rgs8(2|->id_reg_8),0),byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(rgs8(rr))));
  ("`SBC_A_n preconditions in this component'" & n1: SCHAR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(bitget(rgs8(2|->id_reg_8),0),byte_uchar(rgs8(1|->id_reg_8)),schar_uchar(n1)));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(bitget(rgs8(2|->id_reg_8),0),byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))));
  ("`SBC_A_9IX_d0 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(bitget(rgs8(2|->id_reg_8),0),byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(bv_9ireg_plus_d0(mem,ix,desloc))));
  ("`SBC_A_9IY_d0 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn: BYTE & lvn: BYTE & bvn: BYTE & cvn: BYTE & substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & zero = 1);
  (rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{update_flag_reg(negative,zero,half_carry,bit_not(is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))),1,bitget(rgs8(2|->id_reg_8),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{update_flag_reg(negative,zero,half_carry,bit_not(is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))),1,bitget(rgs8(2|->id_reg_8),0))})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn: BYTE & lvn: BYTE & bvn: BYTE & cvn: BYTE & substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))) = 0 & zero = 1);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn: BYTE & lvn: BYTE & bvn: BYTE & cvn: BYTE & substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & zero = 1);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn: BYTE & lvn: BYTE & bvn: BYTE & cvn: BYTE & substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))) = 0 & zero = 1);
  ("`Local hypotheses'" & result$0: BYTE & s0$0: BIT & z0$0: BIT & h0$0: BIT & pv0$0: BIT & n0$0: BIT & c0$0: BIT & daa_function(bitget(rgs8(2|->id_reg_8),1),bitget(rgs8(2|->id_reg_8),0),bitget(rgs8(2|->id_reg_8),4),rgs8(1|->id_reg_8)) = (result$0,c0$0)|->h0$0 & s0$0 = bitget(result$0,7) & z0$0 = is_zero(result$0) & pv0$0 = parity_even(result$0) & n0$0 = bitget(rgs8(2|->id_reg_8),1));
  (rgs8<+({1|->id_reg_8|->result$0}\/{update_flag_reg(s0$0,z0$0,h0$0,pv0$0,n0$0,c0$0)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->result$0}\/{update_flag_reg(s0$0,z0$0,h0$0,pv0$0,n0$0,c0$0)})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & result: BYTE & result = complement(rgs8(1|->id_reg_8)));
  (rgs8<+({1|->id_reg_8|->result}\/{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),1,bitget(rgs8(2|->id_reg_8),2),1,bitget(rgs8(2|->id_reg_8),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->result}\/{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),1,bitget(rgs8(2|->id_reg_8),2),1,bitget(rgs8(2|->id_reg_8),0))})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(0,0,byte_uchar(rgs8(1|->id_reg_8))));
  (rgs8<+{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),bitget(rgs8(2|->id_reg_8),4),bitget(rgs8(2|->id_reg_8),2),0,bit_not(bitget(rgs8(2|->id_reg_8),0)))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),bitget(rgs8(2|->id_reg_8),4),bitget(rgs8(2|->id_reg_8),2),0,bit_not(bitget(rgs8(2|->id_reg_8),0)))}) = (1..16)*{id_reg_8});
  (rgs8<+{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),bitget(rgs8(2|->id_reg_8),4),bitget(rgs8(2|->id_reg_8),2),0,1)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),bitget(rgs8(2|->id_reg_8),4),bitget(rgs8(2|->id_reg_8),2),0,1)}) = (1..16)*{id_reg_8});
  "`Check that the invariant (iff1: BIT) is preserved by the operation - ref 3.4'";
  (1: BIT);
  "`Check that the invariant (im: BIT*BIT) is preserved by the operation - ref 3.4'";
  ("`LD_r_r_ preconditions in this component'" & rr: (1..16)*{id_reg_8} & rr_: (1..16)*{id_reg_8});
  (rgs8<+{rr|->rgs8(rr_)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->rgs8(rr_)}) = (1..16)*{id_reg_8});
  ("`LD_r_n_ preconditions in this component'" & rr: (1..16)*{id_reg_8} & n0: SCHAR);
  (rgs8<+{rr|->schar_byte(n0)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->schar_byte(n0)}) = (1..16)*{id_reg_8});
  ("`LD_r_9HL0 preconditions in this component'" & rr: (1..16)*{id_reg_8});
  ("`Local hypotheses'" & address: BV16 & address = byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)));
  (rgs8<+{rr|->mem(address)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->mem(address)}) = (1..16)*{id_reg_8});
  ("`LD_r_9IX_d0 preconditions in this component'" & rr: (1..16)*{id_reg_8} & desloc: SCHAR);
  (rgs8<+{rr|->bv_9ireg_plus_d0(mem,ix,desloc)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->bv_9ireg_plus_d0(mem,ix,desloc)}) = (1..16)*{id_reg_8});
  ("`LD_r_9IY_d0 preconditions in this component'" & rr: (1..16)*{id_reg_8} & desloc: SCHAR);
  (rgs8<+{rr|->bv_9ireg_plus_d0(mem,iy,desloc)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->bv_9ireg_plus_d0(mem,iy,desloc)}) = (1..16)*{id_reg_8});
  ("`LD_9HL0_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  (rgs8(rr): BYTE);
  ("`LD_9IX_d0_r preconditions in this component'" & desloc: SCHAR & rr: (1..16)*{id_reg_8} & bv16_ushort(bv_ireg_plus_d(ix,desloc)): DATA_R_ADR);
  ("`LD_9IY_d0_r preconditions in this component'" & desloc: SCHAR & rr: (1..16)*{id_reg_8} & bv16_ushort(bv_ireg_plus_d(iy,desloc)): DATA_R_ADR);
  ("`LD_9HL0_n preconditions in this component'" & n0: SCHAR & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  (schar_byte(n0): BYTE);
  ("`LD_9IX_d0_n preconditions in this component'" & desloc: SCHAR & n0: SCHAR & bv16_ushort(bv_ireg_plus_d(ix,desloc)): DATA_R_ADR);
  ("`LD_9IY_d0_n preconditions in this component'" & desloc: SCHAR & n0: SCHAR & bv16_ushort(bv_ireg_plus_d(iy,desloc)): DATA_R_ADR);
  (rgs8<+{1|->id_reg_8|->mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{1|->id_reg_8|->mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))}) = (1..16)*{id_reg_8});
  (rgs8<+{1|->id_reg_8|->mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{1|->id_reg_8|->mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))}) = (1..16)*{id_reg_8});
  ("`LD_A_9nn0 preconditions in this component'" & nn: USHORT);
  (rgs8<+{1|->id_reg_8|->mem(ushort_bv16(nn))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{1|->id_reg_8|->mem(ushort_bv16(nn))}) = (1..16)*{id_reg_8});
  ("`LD_9BC0_A preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): DATA_R_ADR);
  (rgs8(1|->id_reg_8): BYTE);
  (bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): PROGRAM_R_ADR);
  ("`LD_9DE0_A preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): DATA_R_ADR);
  (bv16_ushort(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): PROGRAM_R_ADR);
  ("`LD_9nn0_A preconditions in this component'" & nn: USHORT & nn: DATA_R_ADR);
  (ushort_bv16(nn): BV16);
  (bv16_ushort(ushort_bv16(nn)): PROGRAM_R_ADR);
  (rgs8<+({1|->id_reg_8|->i_}\/{update_flag_reg(is_negative(i_),is_zero(i_),0,iff2,0,bitget(rgs8(2|->id_reg_8),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->i_}\/{update_flag_reg(is_negative(i_),is_zero(i_),0,iff2,0,bitget(rgs8(2|->id_reg_8),0))})) = (1..16)*{id_reg_8});
  (rgs8<+({1|->id_reg_8|->r_}\/{update_flag_reg(is_negative(r_),is_zero(r_),0,iff2,0,bitget(rgs8(2|->id_reg_8),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->r_}\/{update_flag_reg(is_negative(r_),is_zero(r_),0,iff2,0,bitget(rgs8(2|->id_reg_8),0))})) = (1..16)*{id_reg_8});
  "`Check that the invariant (i_: BYTE) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (r_: BYTE) is preserved by the operation - ref 3.4'";
  ("`LD_dd_nn preconditions in this component'" & dd: (1..5)*{id_reg_16} & nn: USHORT & not(dd = 5|->id_reg_16));
  ("`Local hypotheses'" & dd = 4|->id_reg_16);
  ("`Local hypotheses'" & not(dd = 4|->id_reg_16) & rh: (1..16)*{id_reg_8} & rl: (1..16)*{id_reg_8} & w1: BYTE & w2: BYTE & rh,rl = REG16_TO_REG8(dd) & not(rh = rl) & bv16_byte(ushort_bv16(nn)) = w1|->w2);
  (rgs8<+({rh|->w1}\/{rl|->w2}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rh|->w1}\/{rl|->w2})) = (1..16)*{id_reg_8});
  ("`LD_IX_nn preconditions in this component'" & nn: USHORT);
  ("`LD_IY_nn preconditions in this component'" & nn: USHORT);
  ("`LD_HL_9nn0 preconditions in this component'" & nn: USHORT);
  (rgs8<+({13|->id_reg_8|->mem(ushort_bv16(add16USHORT(0,nn,1)))}\/{14|->id_reg_8|->mem(ushort_bv16(nn))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->mem(ushort_bv16(add16USHORT(0,nn,1)))}\/{14|->id_reg_8|->mem(ushort_bv16(nn))})) = (1..16)*{id_reg_8});
  ("`LD_dd_9nn0 preconditions in this component'" & dd: (1..5)*{id_reg_16} & nn: USHORT & not(dd = 5|->id_reg_16));
  (byte_bv16(mem(ushort_bv16(add16USHORT(0,nn,1))),mem(ushort_bv16(nn))): BV16);
  ("`Local hypotheses'" & not(dd = 4|->id_reg_16) & rh: (1..16)*{id_reg_8} & rl: (1..16)*{id_reg_8} & w1: BYTE & w2: BYTE & rh,rl = REG16_TO_REG8(dd) & not(rh = rl) & w1 = mem(ushort_bv16(add16USHORT(0,nn,1))) & w2 = mem(ushort_bv16(nn)));
  ("`LD_IX_9nn0 preconditions in this component'" & nn: USHORT);
  ("`LD_IY_9nn0 preconditions in this component'" & nn: USHORT);
  ("`LD_9nn0_HL preconditions in this component'" & nn: USHORT & nn: DATA_R_ADR & add16USHORT(0,nn,1): DATA_R_ADR);
  ({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{ushort_bv16(nn)|->rgs8(14|->id_reg_8)}: BV16 +-> BYTE);
  (dom({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{ushort_bv16(nn)|->rgs8(14|->id_reg_8)}) = BV16);
  ("`Local hypotheses'" & elem: dom({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{ushort_bv16(nn)|->rgs8(14|->id_reg_8)}));
  (bv16_ushort(elem): PROGRAM_R_ADR);
  ("`LD_9nn0_dd preconditions in this component'" & dd: (1..5)*{id_reg_16} & not(dd = 5|->id_reg_16) & nn: USHORT & nn: DATA_R_ADR & add16USHORT(0,nn,1): DATA_R_ADR);
  ("`Local hypotheses'" & dd = 4|->id_reg_16 & vh: BYTE & vl: BYTE & bv16_byte(sp) = vh|->vl & not(ushort_bv16(add16USHORT(0,nn,1)) = ushort_bv16(nn)));
  ({ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl}: BV16 +-> BYTE);
  (dom({ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl}) = BV16);
  ("`Local hypotheses'" & dd = 4|->id_reg_16 & vh: BYTE & vl: BYTE & bv16_byte(sp) = vh|->vl & not(ushort_bv16(add16USHORT(0,nn,1)) = ushort_bv16(nn)) & elem: dom({ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl}));
  ("`Local hypotheses'" & not(dd = 4|->id_reg_16) & rh: (1..16)*{id_reg_8} & rl: (1..16)*{id_reg_8} & w1: SCHAR & w2: BYTE & rh,rl = REG16_TO_REG8(dd) & not(rh = rl));
  ({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)}: BV16 +-> BYTE);
  (dom({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)}) = BV16);
  ("`Local hypotheses'" & not(dd = 4|->id_reg_16) & rh: (1..16)*{id_reg_8} & rl: (1..16)*{id_reg_8} & w1: SCHAR & w2: BYTE & rh,rl = REG16_TO_REG8(dd) & not(rh = rl) & elem: dom({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)}));
  ("`LD_9nn0_IX preconditions in this component'" & nn: USHORT & nn: DATA_R_ADR & add16USHORT(0,nn,1): DATA_R_ADR);
  ("`Local hypotheses'" & h_ix: BYTE & l_ix: BYTE & h_ix,l_ix = bv16_byte(ix));
  ({ushort_bv16(add16USHORT(0,nn,1))|->h_ix}\/{ushort_bv16(nn)|->l_ix}: BV16 +-> BYTE);
  (dom({ushort_bv16(add16USHORT(0,nn,1))|->h_ix}\/{ushort_bv16(nn)|->l_ix}) = BV16);
  ("`Local hypotheses'" & h_ix: BYTE & l_ix: BYTE & h_ix,l_ix = bv16_byte(ix) & elem: dom({ushort_bv16(add16USHORT(0,nn,1))|->h_ix}\/{ushort_bv16(nn)|->l_ix}));
  ("`LD_9nn0_IY preconditions in this component'" & nn: USHORT & nn: DATA_R_ADR & add16USHORT(0,nn,1): DATA_R_ADR);
  ("`Local hypotheses'" & h_iy: BYTE & l_iy: BYTE & h_iy,l_iy = bv16_byte(iy));
  ({ushort_bv16(add16USHORT(0,nn,1))|->h_iy}\/{ushort_bv16(nn)|->l_iy}: BV16 +-> BYTE);
  (dom({ushort_bv16(add16USHORT(0,nn,1))|->h_iy}\/{ushort_bv16(nn)|->l_iy}) = BV16);
  ("`Local hypotheses'" & h_iy: BYTE & l_iy: BYTE & h_iy,l_iy = bv16_byte(iy) & elem: dom({ushort_bv16(add16USHORT(0,nn,1))|->h_iy}\/{ushort_bv16(nn)|->l_iy}));
  ("`PUSH_qq preconditions in this component'" & qq: (1..5)*{id_reg_16} & not(qq = 4|->id_reg_16));
  ("`Local hypotheses'" & qqh: (1..16)*{id_reg_8} & qql: (1..16)*{id_reg_8} & REG16_TO_REG8(qq) = qqh|->qql & not(qqh = qql) & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->rgs8(qql)}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->rgs8(qqh)}: BV16 +-> BYTE & dom({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->rgs8(qql)}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->rgs8(qqh)}) = BV16 & elem: dom({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->rgs8(qql)}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->rgs8(qqh)}));
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & bv16_byte(ix) = wh|->wl & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->wl}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->wh}: BV16 +-> BYTE & dom({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->wl}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->wh}) = BV16 & elem: dom({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->wl}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->wh}));
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & bv16_byte(iy) = wh|->wl & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->wl}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->wh}: BV16 +-> BYTE & dom({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->wl}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->wh}) = BV16 & elem: dom({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->wl}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->wh}));
  ("`POP_qq preconditions in this component'" & qq: (1..5)*{id_reg_16} & not(qq = 4|->id_reg_16));
  ("`Local hypotheses'" & qqh: (1..16)*{id_reg_8} & qql: (1..16)*{id_reg_8} & REG16_TO_REG8(qq) = qqh|->qql & not(qqh = qql) & {qql|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)))}\/{qqh|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)))}: (1..16)*{id_reg_8} +-> BYTE & dom({qql|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)))}\/{qqh|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)))}) = (1..16)*{id_reg_8});
  (rgs8<+({qql|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)))}\/{qqh|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({qql|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)))}\/{qqh|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)))})) = (1..16)*{id_reg_8});
  (rgs8<+({9|->id_reg_8|->rgs8(13|->id_reg_8)}\/{10|->id_reg_8|->rgs8(14|->id_reg_8)}\/{13|->id_reg_8|->rgs8(9|->id_reg_8)}\/{14|->id_reg_8|->rgs8(10|->id_reg_8)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({9|->id_reg_8|->rgs8(13|->id_reg_8)}\/{10|->id_reg_8|->rgs8(14|->id_reg_8)}\/{13|->id_reg_8|->rgs8(9|->id_reg_8)}\/{14|->id_reg_8|->rgs8(10|->id_reg_8)})) = (1..16)*{id_reg_8});
  (rgs8<+({1|->id_reg_8|->rgs8(4|->id_reg_8)}\/{2|->id_reg_8|->rgs8(3|->id_reg_8)}\/{4|->id_reg_8|->rgs8(1|->id_reg_8)}\/{3|->id_reg_8|->rgs8(2|->id_reg_8)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->rgs8(4|->id_reg_8)}\/{2|->id_reg_8|->rgs8(3|->id_reg_8)}\/{4|->id_reg_8|->rgs8(1|->id_reg_8)}\/{3|->id_reg_8|->rgs8(2|->id_reg_8)})) = (1..16)*{id_reg_8});
  (rgs8<+({5|->id_reg_8|->rgs8(7|->id_reg_8)}\/{6|->id_reg_8|->rgs8(8|->id_reg_8)}\/{9|->id_reg_8|->rgs8(11|->id_reg_8)}\/{10|->id_reg_8|->rgs8(12|->id_reg_8)}\/{13|->id_reg_8|->rgs8(15|->id_reg_8)}\/{14|->id_reg_8|->rgs8(16|->id_reg_8)}\/{7|->id_reg_8|->rgs8(5|->id_reg_8)}\/{8|->id_reg_8|->rgs8(6|->id_reg_8)}\/{11|->id_reg_8|->rgs8(9|->id_reg_8)}\/{12|->id_reg_8|->rgs8(10|->id_reg_8)}\/{15|->id_reg_8|->rgs8(13|->id_reg_8)}\/{16|->id_reg_8|->rgs8(14|->id_reg_8)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({5|->id_reg_8|->rgs8(7|->id_reg_8)}\/{6|->id_reg_8|->rgs8(8|->id_reg_8)}\/{9|->id_reg_8|->rgs8(11|->id_reg_8)}\/{10|->id_reg_8|->rgs8(12|->id_reg_8)}\/{13|->id_reg_8|->rgs8(15|->id_reg_8)}\/{14|->id_reg_8|->rgs8(16|->id_reg_8)}\/{7|->id_reg_8|->rgs8(5|->id_reg_8)}\/{8|->id_reg_8|->rgs8(6|->id_reg_8)}\/{11|->id_reg_8|->rgs8(9|->id_reg_8)}\/{12|->id_reg_8|->rgs8(10|->id_reg_8)}\/{15|->id_reg_8|->rgs8(13|->id_reg_8)}\/{16|->id_reg_8|->rgs8(14|->id_reg_8)})) = (1..16)*{id_reg_8});
  ("`EX_9SP0_HL preconditions in this component'" & bv16_ushort(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))): STACK_R_ADR & bv16_ushort(sp): STACK_R_ADR);
  ({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}: BV16 +-> BYTE);
  (dom({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}) = BV16);
  ("`Local hypotheses'" & elem: dom({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}));
  ("`Local hypotheses'" & mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})) = BV16 & ran(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})<+{address|->value}) = BV16));
  (rgs8<+({13|->id_reg_8|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)))}\/{14|->id_reg_8|->mem(sp)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)))}\/{14|->id_reg_8|->mem(sp)})) = (1..16)*{id_reg_8});
  ("`EX_9SP0_IX preconditions in this component'" & bv16_ushort(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))): STACK_R_ADR & bv16_ushort(sp): STACK_R_ADR);
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & bv16_byte(ix) = wh|->wl);
  ({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}: BV16 +-> BYTE);
  (dom({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}) = BV16);
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & bv16_byte(ix) = wh|->wl & elem: dom({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}));
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & bv16_byte(ix) = wh|->wl & mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})) = BV16 & ran(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})<+{address|->value}) = BV16));
  (byte_bv16(mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))),mem(sp)): BV16);
  ("`EX_9SP0_IY preconditions in this component'" & bv16_ushort(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))): STACK_R_ADR & bv16_ushort(sp): STACK_R_ADR);
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & bv16_byte(iy) = wh|->wl);
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & bv16_byte(iy) = wh|->wl & elem: dom({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}));
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & bv16_byte(iy) = wh|->wl & mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})) = BV16 & ran(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})<+{address|->value}) = BV16));
  ("`LDI preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))));
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & ran(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}) = BV16));
  (rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{9|->id_reg_8|->dvn}\/{10|->id_reg_8|->evn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bit_not(is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))),0,bitget(rgs8(2|->id_reg_8),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{9|->id_reg_8|->dvn}\/{10|->id_reg_8|->evn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bit_not(is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))),0,bitget(rgs8(2|->id_reg_8),0))})) = (1..16)*{id_reg_8});
  ("`LDIR preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))) = 0 & mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & ran(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}) = BV16));
  (rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{9|->id_reg_8|->dvn}\/{10|->id_reg_8|->evn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,0,0,bitget(rgs8(2|->id_reg_8),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{9|->id_reg_8|->dvn}\/{10|->id_reg_8|->evn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{update_flag_reg(bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,0,0,bitget(rgs8(2|->id_reg_8),0))})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & not(is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))) = 0) & mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & ran(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}) = BV16));
  ("`LDD preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))));
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & ran(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}) = BV16));
  ("`LDDR preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))) = 0 & mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & ran(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & not(is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))) = 0) & mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & ran(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}) = BV16));
  ("`ext_NMI preconditions in this component'" & bv16_ushort(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))): STACK_R_ADR & bv16_ushort(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))): STACK_R_ADR);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high);
  ({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_high}: BV16 +-> BYTE);
  (dom({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_high}) = BV16);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & elem: dom({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_high}));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & mem<+({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_high}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_high})) = BV16 & ran(mem<+({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_high})<+{address|->value}) = BV16));
  (102: USHORT);
  ("`ext_INT preconditions in this component'" & iff1 = 1 & byte_bus: 0..255 & bv16_ushort(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))): STACK_R_ADR & bv16_ushort(sp): STACK_R_ADR);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 199);
  ({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}: BV16 +-> BYTE);
  (dom({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}) = BV16);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 199 & elem: dom({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 199 & mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})) = BV16 & ran(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}) = BV16));
  (byte_bus-199: USHORT);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 207);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 207 & elem: dom({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 207 & mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})) = BV16 & ran(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 215);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 215 & elem: dom({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 215 & mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})) = BV16 & ran(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 223);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 223 & elem: dom({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 223 & mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})) = BV16 & ran(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 231);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 231 & elem: dom({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 231 & mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})) = BV16 & ran(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 239);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 239 & elem: dom({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 239 & mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})) = BV16 & ran(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 247);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 247 & elem: dom({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 247 & mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})) = BV16 & ran(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 255);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 255 & elem: dom({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 255 & mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})) = BV16 & ran(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & im = 0|->1);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & im = 0|->1 & elem: dom({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & im = 0|->1 & mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})) = BV16 & ran(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}) = BV16));
  (56: USHORT);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1 & elem: dom({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1 & mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})) = BV16 & ran(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)))|->pc_low}\/{mem(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)))|->pc_high})<+{address|->value}) = BV16));
  (bv16_ushort(byte_bv16(i_,bitclear(rotateleft(uchar_byte(byte_bus)),0))): USHORT);
  (rgs8<+({1|->id_reg_8|->uchar_byte(255)}\/{2|->id_reg_8|->uchar_byte(255)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->uchar_byte(255)}\/{2|->id_reg_8|->uchar_byte(255)})) = (1..16)*{id_reg_8});
  (byte_bv16(uchar_byte(255),uchar_byte(255)): BV16)
END
&
THEORY EnumerateX IS
  id_reg_8 == {a0,f0,f_0,a_0,b0,c0,b_0,c_0,d0,e0,d_0,e_0,h0,l0,h_0,l_0};
  id_reg_16 == {BC,DE,HL,SP,AF}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
