THEORY ProofList IS
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.9,(_f(187) & _f(144) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.8,(_f(187) & _f(144) => _f(180));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.7,(_f(187) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.6,(_f(187) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.5,(_f(186) & _f(144) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.4,(_f(186) & _f(144) => _f(180));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.3,(_f(186) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.2,(_f(186) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTDR.1,(_f(184) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTD.5,(_f(185) & _f(144) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTD.4,(_f(185) & _f(144) => _f(180));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTD.3,(_f(185) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTD.2,(_f(185) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTD.1,(_f(184) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.9,(_f(183) & _f(144) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.8,(_f(183) & _f(144) => _f(180));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.7,(_f(183) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.6,(_f(183) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.5,(_f(182) & _f(144) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.4,(_f(182) & _f(144) => _f(180));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.3,(_f(182) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.2,(_f(182) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTIR.1,(_f(178) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTI.5,(_f(179) & _f(144) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTI.4,(_f(179) & _f(144) => _f(180));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTI.3,(_f(179) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTI.2,(_f(179) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & OUTI.1,(_f(178) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(175) & OUT_9C0_r.2,(_f(144) => _f(177));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(175) & OUT_9C0_r.1,(_f(144) => _f(176));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(172) & OUT_9n0_A.2,(_f(144) => _f(174));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(172) & OUT_9n0_A.1,(_f(144) => _f(173));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(169) & INDR.5,(_f(171) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(169) & INDR.4,(_f(171) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(169) & INDR.3,(_f(170) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(169) & INDR.2,(_f(170) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(169) & INDR.1,(_f(167) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(166) & IND.3,(_f(168) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(166) & IND.2,(_f(168) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(166) & IND.1,(_f(167) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(162) & INIR.5,(_f(165) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(162) & INIR.4,(_f(165) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(162) & INIR.3,(_f(164) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(162) & INIR.2,(_f(164) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(162) & INIR.1,(_f(163) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(155) & INI.3,(_f(159) & _f(148) => _f(161));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(155) & INI.2,(_f(159) & _f(148) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(155) & INI.1,(_f(156) & _f(157) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(151) & IN_r_9C0.2,(_f(152) & _f(148) => _f(154));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(151) & IN_r_9C0.1,(_f(152) & _f(148) => _f(153));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(147) & IN_A_9n0.2,(_f(148) => _f(150));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(147) & IN_A_9n0.1,(_f(148) => _f(149));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(143) & ext_update_io_ports.2,(_f(144) => _f(146));
  _f(1) & _f(2) & _f(15) & _f(142) & _f(143) & ext_update_io_ports.1,(_f(144) => _f(145));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.62,(_f(140) => _f(141));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.61,(_f(138) => _f(139));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.60,(_f(136) => _f(137));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.59,(_f(134) => _f(135));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.58,(_f(132) => _f(133));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.57,(_f(130) => _f(131));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.56,(_f(128) => _f(129));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.55,(_f(126) => _f(127));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.54,(_f(123) & _f(124) => _f(125));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.53,(_f(119) & _f(120) => _f(122));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.52,(_f(119) & _f(120) => _f(121));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.51,(_f(115) & _f(116) => _f(118));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.50,(_f(115) & _f(116) => _f(117));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.49,(_f(111) & _f(112) => _f(114));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.48,(_f(111) & _f(112) => _f(113));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.47,(_f(107) & _f(108) => _f(110));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.46,(_f(107) & _f(108) => _f(109));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.45,(_f(103) & _f(104) => _f(106));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.44,(_f(103) & _f(104) => _f(105));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.43,(_f(99) & _f(100) => _f(102));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.42,(_f(99) & _f(100) => _f(101));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.41,(_f(95) & _f(96) => _f(98));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.40,(_f(95) & _f(96) => _f(97));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.39,(_f(91) & _f(92) => _f(94));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.38,(_f(91) & _f(92) => _f(93));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.37,(_f(89) => _f(90));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.36,(_f(78) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.35,(_f(78) & _f(85) => _f(86));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.34,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.33,(_f(78) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.32,(_f(78) & _f(79) => _f(80));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.31,(_f(76) => _f(77));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.30,(_f(74) => _f(75));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.29,(_f(72) => _f(73));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.28,(_f(70) => _f(71));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.27,(_f(68) => _f(69));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.26,(_f(66) => _f(67));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.25,(_f(64) => _f(65));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.24,(_f(62) => _f(63));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.23,(_f(60) => _f(61));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.22,(_f(58) => _f(59));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.21,(_f(56) => _f(57));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.20,(_f(54) => _f(55));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.19,(_f(52) => _f(53));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.18,(_f(50) => _f(51));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.17,(_f(48) => _f(49));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.16,(_f(46) => _f(47));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.15,(_f(44) => _f(45));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.14,(_f(42) => _f(43));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.13,(_f(40) => _f(41));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.12,(_f(38) => _f(39));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.11,(_f(36) => _f(37));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.10,(_f(34) => _f(35));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.9,(_f(32) => _f(33));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.8,(_f(30) => _f(31));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.7,(_f(28) => _f(29));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.6,(_f(26) => _f(27));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.5,(_f(24) => _f(25));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.4,(_f(22) => _f(23));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.3,(_f(20) => _f(21));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.2,(_f(18) => _f(19));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.1,(_f(16) => _f(17));
  _f(1) & _f(2) & Initialisation.6,(_f(3) & _f(13) => _f(14));
  _f(1) & _f(2) & Initialisation.5,(_f(3) & _f(11) => _f(12));
  _f(1) & _f(2) & Initialisation.4,(_f(3) & _f(9) => _f(10));
  _f(1) & _f(2) & Initialisation.3,(_f(3) & _f(7) => _f(8));
  _f(1) & _f(2) & Initialisation.2,(_f(3) & _f(4) => _f(6));
  _f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & abs: INT +-> INT & dom(abs) = INT & abs = %nn.(nn: INTEGER & nn<=2147483647 & -2147483647<=nn & 0<=nn | nn)\/%nn.(nn: INTEGER & nn<=2147483647 & -2147483647<=nn & nn+1<=0 | -nn) & is_zero16USHORT: USHORT +-> BIT & dom(is_zero16USHORT) = USHORT & is_zero16USHORT = %nat1.(nat1: USHORT | bool_bit(bool(nat1 = 0))) & is_negative: BYTE +-> BIT & dom(is_negative) = BYTE & is_negative = %w1.(w1: BYTE | w1(7)) & half8UCHAR: UCHAR +-> UCHAR & dom(half8UCHAR) = UCHAR & half8UCHAR = %ww.(ww: UCHAR | ww mod 16) & inc: BYTE +-> BYTE & dom(inc) = BYTE & inc = %w1.(w1: BYTE | uchar_byte((byte_uchar(w1)+1) mod 256)) & dec: BYTE +-> BYTE & dom(dec) = BYTE & dec = %w1.(w1: BYTE | uchar_byte(abs(byte_uchar(w1)-1) mod 256)) & simple_add8UCHAR: UCHAR*UCHAR +-> UCHAR & dom(simple_add8UCHAR) = UCHAR*UCHAR & simple_add8UCHAR = %(w1,w2).(w1: UCHAR & w2: UCHAR | (w1+w2) mod 256) & add8UCHAR: BIT*UCHAR*UCHAR +-> UCHAR*BIT*BIT*BIT*BIT & dom(add8UCHAR) = BIT*UCHAR*UCHAR & add8UCHAR = %(carry,w1,w2).(carry: BIT & w1: UCHAR & w2: UCHAR | (carry+w1+w2) mod 256,bool_bit(bool(carry+uchar_schar(w1)+uchar_schar(w2)+1<=0)),bool_bit(bool(UCHAR_MAX+1<=carry+w1+w2)),bool_bit(bool(16<=carry+half8UCHAR(w1)+half8UCHAR(w2))),bool_bit(bool((carry+w1+w2) mod 256 = 0))) & substract8UCHAR: BIT*UCHAR*UCHAR +-> UCHAR*BIT*BIT*BIT*BIT & dom(substract8UCHAR) = BIT*UCHAR*UCHAR & substract8UCHAR = %(carry,w1,w2).(carry: BIT & w1: UCHAR & w2: UCHAR | (carry+w1-w2) mod 256,bool_bit(bool(carry+uchar_schar(w1)-uchar_schar(w2)+1<=0)),bool_bit(bool(UCHAR_MAX+1<=carry+w1-w2)),bool_bit(bool(16<=carry+half8UCHAR(w1)-half8UCHAR(w2))),bool_bit(bool((carry+w1-w2) mod 256 = 0))) & add16USHORT: BIT*USHORT*USHORT +-> USHORT & dom(add16USHORT) = BIT*USHORT*USHORT & add16USHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | (b1+w1+w2) mod 65536) & add_carryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(add_carryUSHORT) = BIT*USHORT*USHORT & add_carryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(65537<=b1+w1+w2))) & add_halfcarryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(add_halfcarryUSHORT) = BIT*USHORT*USHORT & add_halfcarryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(4097<=b1+w1 mod 4096+w2 mod 4096))) & sub16USHORT: BIT*USHORT*USHORT +-> USHORT & dom(sub16USHORT) = BIT*USHORT*USHORT & sub16USHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | (w1-w2-b1) mod 65536) & sub_carryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(sub_carryUSHORT) = BIT*USHORT*USHORT & sub_carryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(65537<=w1-w2-b1))) & sub_halfcarryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(sub_halfcarryUSHORT) = BIT*USHORT*USHORT & sub_halfcarryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(4097<=w1 mod 4096-w2 mod 4096-b1))) & inc_BV16: BV16 +-> BV16 & dom(inc_BV16) = BV16 & inc_BV16 = %w1.(w1: BV16 | ushort_bv16((bv16_ushort(w1)+1) mod 65536)) & dec_BV16: BV16 +-> BV16 & dom(dec_BV16) = BV16 & dec_BV16 = %w1.(w1: BV16 | ushort_bv16(abs(bv16_ushort(w1)-1) mod 65536)) & update_refresh_reg: BYTE +-> BYTE & dom(update_refresh_reg) = BYTE & update_refresh_reg = %v0.(v0: BYTE | uchar_byte(128*v0(7)+(64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) mod 128)) & instruction_next: USHORT +-> USHORT & dom(instruction_next) = USHORT & instruction_next = %w1.(w1: USHORT | (w1+1) mod 65536) & instruction_jump: USHORT*(-126..129) +-> USHORT & dom(instruction_jump) = USHORT*(-126..129) & instruction_jump = %(p0,e0).(p0: USHORT & e0: -126..129 | (p0+e0) mod 65536) & daa_function: BIT*BIT*BIT*BYTE +-> BYTE*BIT*BIT & dom(daa_function) = BIT*BIT*BIT*BYTE & !(zn,c0,h0,value).(zn: BIT & c0: BIT & h0: BIT & value: BYTE => (zn = 0 & c0 = 0 & get_upper_digit(value): 0..9 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,h0,value) = (value,0)|->0) & (zn = 0 & c0 = 0 & get_upper_digit(value): 0..8 & h0 = 0 & get_lower_digit(value): 10..15 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),6)),0)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(6)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 0..9 & h0 = 1 & get_lower_digit(value): 0..3 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),6)),0)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(6)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 10..15 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),96)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(96)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 9..15 & h0 = 0 & get_lower_digit(value): 10..15 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),102)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(102)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 10..15 & h0 = 1 & get_lower_digit(value): 0..3 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),102)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(102)))) & (zn = 0 & c0 = 1 & get_upper_digit(value): 0..2 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),96)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(96)))) & (zn = 0 & c0 = 1 & get_upper_digit(value): 0..2 & h0 = 0 & get_lower_digit(value): 10..15 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),102)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(102)))) & (zn = 0 & c0 = 1 & get_upper_digit(value): 0..3 & h0 = 1 & get_lower_digit(value): 0..3 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),102)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(102)))) & (zn = 1 & c0 = 0 & get_upper_digit(value): 0..9 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,h0,value) = (value,0)|->0) & (zn = 1 & c0 = 0 & get_upper_digit(value): 0..8 & h0 = 1 & get_lower_digit(value): 6..15 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),250)),0)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(250)))) & (zn = 1 & c0 = 1 & get_upper_digit(value): 7..15 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),160)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(160)))) & (zn = 1 & c0 = 1 & get_upper_digit(value): 6..7 & h0 = 1 & get_lower_digit(value): 6..15 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),154)),1)|->bool_bit(bool(16<=half8UCHAR(byte_uchar(value))+half8UCHAR(154))))) & BIT = 0..1 & bit_not: BIT +-> BIT & dom(bit_not) = BIT & bit_not = %bb.(bb: BIT | 1-bb) & bit_and: BIT*BIT +-> BIT & dom(bit_and) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_and(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_and(b1,b2) = 1) & b2 = 1) & bit_or: BIT*BIT +-> BIT & dom(bit_or) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_or(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_or(b1,b2) = 1) or b2 = 1) & bit_xor: BIT*BIT +-> BIT & dom(bit_xor) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_xor(b1,b2) = 1 => not(b1 = b2)) & (not(b1 = b2) => bit_xor(b1,b2) = 1)) & bool_bit: BOOL +-> BIT & dom(bool_bit) = BOOL & bool_bit = {TRUE|->1}\/{FALSE|->0} & BIT_VECTOR = seq(BIT)-{{}} & bv_size: BIT_VECTOR +-> NATURAL-{0} & dom(bv_size) = BIT_VECTOR & bv_size = %bv.(bv: BIT_VECTOR | size(bv)) & bv_catenate: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_catenate) = BIT_VECTOR*BIT_VECTOR & bv_catenate = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR | v1^v2) & phys_bv_index: BIT_VECTOR +-> POW(NATURAL) & dom(phys_bv_index) = BIT_VECTOR & phys_bv_index = %v1.(v1: BIT_VECTOR | 0..bv_size(v1)-1) & bv_sub: BIT_VECTOR*NATURAL*NATURAL +-> BIT_VECTOR & dom(bv_sub) = BIT_VECTOR*NATURAL*NATURAL & bv_sub = %(bv,low,high).(bv: BIT_VECTOR & low: 0..bv_size(bv)-1 & high: low..bv_size(bv)-1 | %i0.(i0: 1..high-low+1 | bv(i0+low))) & bv_zero: NATURAL-{0} +-> BIT_VECTOR & dom(bv_zero) = NATURAL-{0} & bv_zero = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{0}) & bv_one: NATURAL-{0} +-> BIT_VECTOR & dom(bv_one) = NATURAL-{0} & bv_one = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{1}) & bv_not: BIT_VECTOR +-> BIT_VECTOR & dom(bv_not) = BIT_VECTOR & bv_not = %v1.(v1: BIT_VECTOR | %idx.(idx: 1..bv_size(v1) | bit_not(v1(idx)))) & bv_and: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_and) = BIT_VECTOR*BIT_VECTOR & bv_and = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_and(v1(idx),v2(idx)))) & bv_or: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_or) = BIT_VECTOR*BIT_VECTOR & bv_or = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_or(v1(idx),v2(idx)))) & bv_xor: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_xor) = BIT_VECTOR*BIT_VECTOR & bv_xor = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_xor(v1(idx),v2(idx)))) & bv_clear: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_clear) = BIT_VECTOR*NATURAL & bv_clear = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1<+{idx+1|->0}) & bv_set: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_set) = BIT_VECTOR*NATURAL & bv_set = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1<+{idx+1|->1}) & bv_get: BIT_VECTOR*NATURAL +-> BIT & dom(bv_get) = BIT_VECTOR*NATURAL & bv_get = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1(idx+1)) & bv_put: BIT_VECTOR*NATURAL*BIT +-> BIT_VECTOR & dom(bv_put) = BIT_VECTOR*NATURAL*BIT & bv_put = %(v1,idx,bit).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 & bit: BIT | v1<+{idx+1|->bit}) & BYTE_INDEX = 1..8 & PHYS_BYTE_INDEX = 0..7 & BYTE = SET(bt).(bt: BIT_VECTOR & bv_size(bt) = 8) & BYTE_ZERO: BYTE & BYTE_ZERO = BYTE_INDEX*{0} & is_zero: BYTE +-> BIT & dom(is_zero) = BYTE & is_zero = %w1.(w1: BYTE | bool_bit(bool(w1(1)+w1(2)+w1(3)+w1(4)+w1(5)+w1(6)+w1(7)+w1(8) = 0))) & parity_even: BYTE +-> BIT & dom(parity_even) = BYTE & parity_even = %bv.(bv: BYTE | 1-(bv(1)+bv(2)+bv(3)+bv(4)+bv(5)+bv(6)+bv(7)+bv(8) mod 2)) & and: BYTE*BYTE +-> BYTE & dom(and) = BYTE*BYTE & and = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_and(bt1,bt2)) & ior: BYTE*BYTE +-> BYTE & dom(ior) = BYTE*BYTE & ior = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_or(bt1,bt2)) & xor: BYTE*BYTE +-> BYTE & dom(xor) = BYTE*BYTE & xor = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_xor(bt1,bt2)) & bitget: BYTE*PHYS_BYTE_INDEX +-> BIT & dom(bitget) = BYTE*PHYS_BYTE_INDEX & bitget = %(bt1,ii).(bt1: BYTE & ii: PHYS_BYTE_INDEX | bt1(ii+1)) & bitset: BYTE*PHYS_BYTE_INDEX +-> BYTE & dom(bitset) = BYTE*PHYS_BYTE_INDEX & bitset = %(bt1,ii).(bt1: BYTE & ii: PHYS_BYTE_INDEX | bv_set(bt1,ii)) & bitclear: BYTE*PHYS_BYTE_INDEX +-> BYTE & dom(bitclear) = BYTE*PHYS_BYTE_INDEX & !(ww,ii,bb).(ww: BYTE & ii: PHYS_BYTE_INDEX & bb: BIT => bitclear(ww,ii) = bv_clear(ww,ii)) & complement: BYTE +-> BYTE & dom(complement) = BYTE & complement = %bt.(bt: BYTE | bv_not(bt)) & swap: BYTE +-> BYTE & dom(swap) = BYTE & swap = %bt.(bt: BYTE | {1|->bt(5)}\/{2|->bt(6)}\/{3|->bt(7)}\/{4|->bt(8)}\/{5|->bt(1)}\/{6|->bt(2)}\/{7|->bt(3)}\/{8|->bt(4)}) & rotateleft: BYTE +-> BYTE & dom(rotateleft) = BYTE & rotateleft = %bv.(bv: BYTE | {1|->bv(8)}\/{2|->bv(1)}\/{3|->bv(2)}\/{4|->bv(3)}\/{5|->bv(4)}\/{6|->bv(5)}\/{7|->bv(6)}\/{8|->bv(7)}) & rotateright: BYTE +-> BYTE & dom(rotateright) = BYTE & rotateright = %bv.(bv: BYTE | {1|->bv(2)}\/{2|->bv(3)}\/{3|->bv(4)}\/{4|->bv(5)}\/{5|->bv(6)}\/{6|->bv(7)}\/{7|->bv(8)}\/{8|->bv(1)}) & get_upper_digit = %by.(by: BYTE | 8*by(8)+4*by(7)+2*by(6)+by(5)) & get_lower_digit = %by.(by: BYTE | 8*by(4)+4*by(3)+2*by(2)+by(1)) & BV16_INDX = 1..16 & PHYS_BV16_INDEX = 0..15 & BV16 = SET(bt).(bt: BIT_VECTOR & bv_size(bt) = 16) & BV16_ZERO = BV16_INDX*{0} & bv16_byte: BV16 +-> BYTE*BYTE & dom(bv16_byte) = BV16 & bv16_byte = %bv.(bv: BV16 | {1|->bv(9)}\/{2|->bv(10)}\/{3|->bv(11)}\/{4|->bv(12)}\/{5|->bv(13)}\/{6|->bv(14)}\/{7|->bv(15)}\/{8|->bv(16)},{1|->bv(1)}\/{2|->bv(2)}\/{3|->bv(3)}\/{4|->bv(4)}\/{5|->bv(5)}\/{6|->bv(6)}\/{7|->bv(7)}\/{8|->bv(8)}) & byte_bv16: BYTE*BYTE +-> BV16 & dom(byte_bv16) = BYTE*BYTE & byte_bv16 = bv16_byte~ & bv16_bit_get: BV16*PHYS_BV16_INDEX +-> BIT & dom(bv16_bit_get) = BV16*PHYS_BV16_INDEX & bv16_bit_get = %(bt,ind).(bt: BV16 & ind: PHYS_BV16_INDEX | bt(ind+1)) & UCHAR_MAX = 255 & UCHAR_MIN = 0 & UCHAR = UCHAR_MIN..UCHAR_MAX & byte_uchar: BYTE +-> UCHAR & dom(byte_uchar) = BYTE & byte_uchar = %v0.(v0: BYTE | 128*bitget(v0,7)+64*bitget(v0,6)+32*bitget(v0,5)+16*bitget(v0,4)+8*bitget(v0,3)+4*bitget(v0,2)+2*bitget(v0,1)+128*bitget(v0,0)) & uchar_byte: UCHAR +-> BYTE & dom(uchar_byte) = UCHAR & uchar_byte = byte_uchar~ & SCHAR_MAX = 127 & SCHAR_MIN = -128 & SCHAR = SCHAR_MIN..SCHAR_MAX & byte_schar: BYTE +-> SCHAR & dom(byte_schar) = BYTE & byte_schar = %v0.(v0: BYTE | (-128)*bitget(v0,7)+64*bitget(v0,6)+32*bitget(v0,5)+16*bitget(v0,4)+8*bitget(v0,3)+4*bitget(v0,2)+2*bitget(v0,1)+bitget(v0,0)) & schar_byte: SCHAR +-> BYTE & dom(schar_byte) = SCHAR & schar_byte = byte_schar~ & uchar_schar: UCHAR +-> SCHAR & dom(uchar_schar) = UCHAR & uchar_schar = %v1.(v1: UCHAR & v1<=SCHAR_MAX | v1) & uchar_schar = %v1.(v1: UCHAR & not(v1<=SCHAR_MAX) | v1-UCHAR_MAX+1) & schar_uchar: SCHAR +-> UCHAR & dom(schar_uchar) = SCHAR & schar_uchar = uchar_schar~ & SSHORT_MIN = -32768 & SSHORT_MAX = 32767 & SSHORT = SSHORT_MIN..SSHORT_MAX & bv16_sshort: BV16 +-> SSHORT & dom(bv16_sshort) = BV16 & bv16_sshort = %v0.(v0: BV16 | (-32768)*v0(16)+16384*v0(15)+8192*v0(14)+4096*v0(13)+2048*v0(12)+1024*v0(11)+512*v0(10)+256*v0(9)+128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)) & sshort_bv16: SSHORT +-> BV16 & dom(sshort_bv16) = SSHORT & sshort_bv16 = bv16_sshort~ & schar_sshort: SCHAR*SCHAR +-> SSHORT & dom(schar_sshort) = SCHAR*SCHAR & schar_sshort = %(w1,w2).(w1: SCHAR & w2: SCHAR | bv16_sshort(byte_bv16(schar_byte(w1),schar_byte(w2)))) & sshort_schar: SSHORT +-> SCHAR*SCHAR & dom(sshort_schar) = SSHORT & sshort_schar = schar_sshort~ & USHORT_MAX = 65535 & USHORT_MIN = 0 & USHORT = USHORT_MIN..USHORT_MAX & bv16_ushort: BV16 +-> USHORT & dom(bv16_ushort) = BV16 & bv16_ushort = %v0.(v0: BV16 | 32768*bv16_bit_get(v0,15)+16384*bv16_bit_get(v0,14)+8192*bv16_bit_get(v0,13)+4096*bv16_bit_get(v0,12)+2048*bv16_bit_get(v0,11)+1024*bv16_bit_get(v0,10)+512*bv16_bit_get(v0,9)+256*bv16_bit_get(v0,8)+128*bv16_bit_get(v0,7)+64*bv16_bit_get(v0,6)+32*bv16_bit_get(v0,5)+16*bv16_bit_get(v0,4)+8*bv16_bit_get(v0,3)+4*bv16_bit_get(v0,2)+2*bv16_bit_get(v0,1)+bv16_bit_get(v0,0)) & ushort_bv16: USHORT +-> BV16 & dom(ushort_bv16) = USHORT & ushort_bv16 = bv16_ushort~ & uchar_ushort: UCHAR*UCHAR +-> USHORT & dom(uchar_ushort) = UCHAR*UCHAR & uchar_ushort = %(w1,w2).(w1: UCHAR & w2: UCHAR | bv16_ushort(byte_bv16(uchar_byte(w1),uchar_byte(w2)))) & ushort_uchar: USHORT +-> UCHAR*UCHAR & dom(ushort_uchar) = USHORT & ushort_uchar = uchar_ushort~ & "`Component properties'" & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & dom(get_bv_reg16) = BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) & !(sp_,rgs8_,r1).(sp_: BV16 & (rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8}) & r1: (1..5)*{id_reg_16} => (r1 = 1|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_bv16(rgs8_(5|->id_reg_8),rgs8_(6|->id_reg_8))) & (r1 = 2|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_bv16(rgs8_(9|->id_reg_8),rgs8_(10|->id_reg_8))) & (r1 = 3|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_bv16(rgs8_(13|->id_reg_8),rgs8_(14|->id_reg_8))) & (r1 = 4|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = sp_) & (r1 = 5|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_bv16(rgs8_(1|->id_reg_8),rgs8_(2|->id_reg_8)))) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & dom(REG16_TO_REG8) = (1..5)*{id_reg_16} & REG16_TO_REG8(1|->id_reg_16) = 5|->id_reg_8|->(6|->id_reg_8) & REG16_TO_REG8(2|->id_reg_16) = 9|->id_reg_8|->(10|->id_reg_8) & REG16_TO_REG8(3|->id_reg_16) = 13|->id_reg_8|->(14|->id_reg_8) & REG16_TO_REG8(5|->id_reg_16) = 1|->id_reg_8|->(2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = REG16_TO_REG8~ & update_flag_reg: BIT*BIT*BIT*BIT*BIT*BIT +-> {2|->id_reg_8}*BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & bv_ireg_plus_d: BV16*SCHAR +-> BV16 & dom(bv_ireg_plus_d) = BV16*SCHAR & bv_ireg_plus_d = %(ix_iy,desloc).(ix_iy: BV16 & desloc: SCHAR | ushort_bv16((bv16_ushort(ix_iy)+desloc) mod 65536)) & bv_9ireg_plus_d0: (BV16 --> BYTE)*BV16*SCHAR +-> BYTE & dom(bv_9ireg_plus_d0) = (BV16 --> BYTE)*BV16*SCHAR & bv_9ireg_plus_d0 = %(mem,ix_iy,desloc).(mem: BV16 +-> BYTE & dom(mem) = BV16 & ix_iy: BV16 & desloc: SCHAR | mem(bv_ireg_plus_d(ix_iy,desloc))) & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & dom(cc_get) = ((1..16)*{id_reg_8} --> BYTE)*(0..8) & !rgs8_.(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} => cc_get(rgs8_,0) = 1-bitget(rgs8_(2|->id_reg_8),6) & cc_get(rgs8_,1) = bitget(rgs8_(2|->id_reg_8),6) & cc_get(rgs8_,2) = 1-bitget(rgs8_(2|->id_reg_8),0) & cc_get(rgs8_,3) = bitget(rgs8_(2|->id_reg_8),0) & cc_get(rgs8_,4) = 1-bitget(rgs8_(2|->id_reg_8),2) & cc_get(rgs8_,5) = bitget(rgs8_(2|->id_reg_8),2) & cc_get(rgs8_,6) = 1-bitget(rgs8_(2|->id_reg_8),7) & cc_get(rgs8_,7) = bitget(rgs8_(2|->id_reg_8),7)) & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}));
  ("`Included,imported and extended machines properties'" & PROGRAM_R_ADR = USHORT & DATA_R_ADR = USHORT & STACK_R_ADR = USHORT & "`Included,imported and extended machines invariants'" & mem: BV16 +-> BYTE & dom(mem) = BV16 & "`Included,imported and extended machines assertions'" & ran(mem): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{address|->value}: BV16 +-> BYTE & dom(mem<+{address|->value}) = BV16) & "`Seen and used machines assertions'" & dom(is_zero16USHORT) = USHORT & ran(is_zero16USHORT) = BIT & dom(is_negative) = BYTE & ran(is_negative) = BIT & dom(half8UCHAR) = UCHAR & ran(half8UCHAR) = UCHAR & dom(inc) = BYTE & ran(inc) = BYTE & dom(dec) = BYTE & ran(dec) = BYTE & dom(simple_add8UCHAR) = UCHAR*UCHAR & ran(simple_add8UCHAR) = UCHAR & dom(add8UCHAR) = BIT*UCHAR*UCHAR & ran(add8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT) & dom(substract8UCHAR) = BIT*UCHAR*UCHAR & ran(substract8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT) & dom(add16USHORT) = BIT*USHORT*USHORT & ran(add16USHORT) = USHORT & dom(add_carryUSHORT) = BIT*USHORT*USHORT & ran(add_carryUSHORT) = BIT & dom(add_halfcarryUSHORT) = BIT*USHORT*USHORT & ran(add_halfcarryUSHORT) = BIT & dom(sub16USHORT) = BIT*USHORT*USHORT & ran(sub16USHORT) = USHORT & dom(sub_carryUSHORT) = BIT*USHORT*USHORT & ran(sub_carryUSHORT) = BIT & dom(sub_halfcarryUSHORT) = BIT*USHORT*USHORT & ran(sub_halfcarryUSHORT) = BIT & dom(inc_BV16) = BV16 & ran(inc_BV16) = BV16 & dom(dec_BV16) = BV16 & ran(dec_BV16) = BV16 & dom(update_refresh_reg) = BYTE & ran(update_refresh_reg) = BYTE & dom(instruction_next) = USHORT & ran(instruction_next) = USHORT & dom(instruction_jump) = USHORT*(-126..129) & ran(instruction_jump) = USHORT & dom(daa_function) = BIT*BIT*BIT*BYTE & ran(daa_function): POW(BYTE*BIT*BIT) & dom(abs) = INT & ran(abs) = INT & 0 = schar_sshort(0,0) & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & 512 = 2**9 & 1024 = 2**10 & 2048 = 2**11 & 4096 = 2**12 & 8192 = 2**13 & 16384 = 2**14 & 32768 = 2**15 & 65536 = 2**16 & !bb.(bb: BIT => bit_not(bb) = 1-bb) & dom(bit_and) = BIT*BIT & ran(bit_not) = BIT & bit_not(0) = 1 & bit_not(1) = 0 & !bb.(bb: BIT => bit_not(bit_not(bb)) = bb) & ran(bit_and) = BIT & bit_and(0,0) = 0 & bit_and(0,1) = 0 & bit_and(1,0) = 0 & bit_and(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 1 => bit_and(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 0 => bit_and(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3)) & !b1.(b1: BIT => bit_and(b1,1) = b1) & !b1.(b1: BIT => bit_and(b1,0) = 0) & dom(bit_or) = BIT*BIT & ran(bit_or) = BIT & bit_or(0,0) = 0 & bit_or(0,1) = 1 & bit_or(1,0) = 1 & bit_or(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 1 => bit_or(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 0 => bit_or(b2,b1) = 0) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 1 => b1 = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 0 => b1 = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3)) & !b1.(b1: BIT => bit_or(b1,1) = 1) & !b1.(b1: BIT => bit_or(b1,0) = b1) & !b1.(b1: BIT => bit_or(1,b1) = 1) & !b1.(b1: BIT => bit_or(0,b1) = b1) & dom(bit_xor) = BIT*BIT & ran(bit_xor) = BIT & bit_xor(0,0) = 0 & bit_xor(0,1) = 1 & bit_xor(1,0) = 1 & bit_xor(1,1) = 0 & !(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 1 => bit_xor(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 0 => bit_xor(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3)) & !bb.(bb: BIT => bit_xor(bb,bb) = 0) & dom(bool_bit) = BOOL & bool_bit(TRUE) = 1 & bool_bit(FALSE) = 0 & !bb.(bb: BIT => bb = 0 or bb = 1) & !bb.(bb: BIT & not(bb = 0) => bb = 1) & !bb.(bb: BIT & not(bb = 1) => bb = 0) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_xor(bv,bv),indx) = bv_get(bv_zero(bv_size(bv)),indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 0..bv_size(v1)-1 => bv_get(bv_xor(v1,v2),indx) = bv_get(bv_xor(v2,v1),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v2)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_or(bv,bv_zero(bv_size(bv))),indx) = bv_get(bv,indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_or(bv,bv_one(bv_size(bv))),indx) = bv_get(bv_one(bv_size(bv)),indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: 0..bv_size(v1)-1 => bv_get(bv_or(v1,bv_or(v2,v3)),indx) = bv_get(bv_or(bv_or(v1,v2),v3),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v2)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 0..bv_size(v1)-1 => bv_get(bv_or(v1,v2),indx) = bv_get(bv_or(v2,v1),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_and(bv,bv_one(bv_size(bv))),indx) = bv_get(bv,indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_and(bv,bv_zero(bv_size(bv))),indx) = bv_get(bv_zero(bv_size(bv)),indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: 0..bv_size(v1)-1 => bv_get(bv_and(v1,bv_and(v2,v3)),indx) = bv_get(bv_and(bv_and(v1,v2),v3),indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 0..bv_size(v1)-1 => bv_get(bv_and(v1,v2),indx) = bv_get(bv_and(v2,v1),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_and(v1,v2)) = bv_size(v2)) & !(bv,low,high).(bv: BIT_VECTOR & low: 0..bv_size(bv)-1 & high: 0..bv_size(bv)-1 & low<=high => bv_size(bv_sub(bv,low,high)) = high-low) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR => bv_size(bv_catenate(v1,v2)) = bv_size(v1)+bv_size(v2)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_not(bv_not(bv)),indx) = bv_get(bv,indx)) & !bv.(bv: BIT_VECTOR => bv_size(bv_not(bv)) = bv_size(bv)) & size(BYTE_ZERO) = 8 & BYTE: POW(BIT_VECTOR) & BYTE_ZERO: BIT_VECTOR & first(BYTE_ZERO) = 0 & !bt.(bt: BYTE => bv_size(bt) = size(bt) & bv_size(bt) = 8 & (bt: seq(BIT) & not(bt = {}))) & 8: INTEGER & dom(is_zero) = BYTE & ran(is_zero) = BIT & dom(parity_even) = BYTE & ran(parity_even) = BIT & dom(and) = BYTE*BYTE & ran(and) = BYTE & dom(ior) = BYTE*BYTE & ran(ior) = BYTE & dom(xor) = BYTE*BYTE & ran(xor) = BYTE & dom(bitget) = BYTE*PHYS_BYTE_INDEX & ran(bitget) = BIT & dom(bitset) = BYTE*PHYS_BYTE_INDEX & ran(bitset) = BYTE & dom(bitclear) = BYTE*PHYS_BYTE_INDEX & ran(bitclear) = BYTE & dom(complement) = BYTE & ran(complement) = BYTE & dom(swap) = BYTE & ran(swap) = BYTE & dom(rotateleft) = BYTE & ran(rotateleft) = BYTE & dom(rotateright) = BYTE & ran(rotateright) = BYTE & dom(get_upper_digit) = BYTE & ran(get_upper_digit) = 0..15 & dom(get_lower_digit) = BYTE & ran(get_lower_digit) = 0..15 & [1,1,1,1,1,1,1,1]: BYTE & [0,0,0,0,0,0,0,0]: BYTE & BV16_ZERO: BV16 & BV16: POW(BIT_VECTOR) & !bt.(bt: BV16 => bv_size(bt) = size(bt) & bv_size(bt) = 16 & (bt: seq(BIT) & not(bt = {}))) & dom(bv16_byte) = BV16 & ran(bv16_byte) = BYTE*BYTE & dom(byte_bv16) = BYTE*BYTE & ran(byte_bv16) = BV16 & dom(bv16_bit_get) = BV16*PHYS_BV16_INDEX & ran(bv16_bit_get) = BIT & [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]: BV16 & [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]: BV16 & UCHAR_MAX: INTEGER & UCHAR_MIN: INTEGER & dom(byte_uchar) = BYTE & ran(byte_uchar) = UCHAR & dom(uchar_byte) = UCHAR & ran(uchar_byte) = BYTE & SCHAR_MAX: INTEGER & SCHAR_MIN: INTEGER & dom(byte_schar) = BYTE & ran(byte_schar) = SCHAR & dom(schar_byte) = SCHAR & ran(schar_byte) = BYTE & dom(uchar_schar) = UCHAR & ran(uchar_schar) = SCHAR & dom(schar_uchar) = SCHAR & ran(schar_uchar) = UCHAR & SSHORT_MIN: SSHORT & SSHORT_MAX: SSHORT & dom(bv16_sshort) = BV16 & ran(bv16_sshort) = SSHORT & dom(sshort_bv16) = SSHORT & ran(sshort_bv16) = BV16 & dom(schar_sshort) = SCHAR*SCHAR & ran(schar_sshort) = SSHORT & dom(sshort_schar) = SSHORT & ran(sshort_schar) = SCHAR*SCHAR & USHORT_MAX: INTEGER & USHORT_MIN: INTEGER & dom(bv16_ushort) = BV16 & ran(bv16_ushort) = USHORT & dom(ushort_bv16) = USHORT & ran(ushort_bv16) = BV16 & dom(uchar_ushort) = UCHAR*UCHAR & ran(uchar_ushort) = USHORT & dom(ushort_uchar) = USHORT & ran(ushort_uchar) = UCHAR*UCHAR & 2**16 = 65536 & 2**15 = 32768 & 2**14 = 16384 & 2**13 = 8192 & 2**12 = 4096 & 2**11 = 2048 & 2**10 = 1024 & 2**9 = 512 & 2**8 = 256 & (-2)**7 = -128 & 2**7 = 128 & 2**6 = 64 & 2**5 = 32 & 2**4 = 16 & 2**3 = 8 & 2**2 = 4 & 2**1 = 2 & 2**0 = 1);
  ("`Local hypotheses'" & mem$0: BV16 +-> BYTE & dom(mem$0) = BV16 & io_ports$0: BYTE +-> {[0,0,0,0,0,0,0,0]} & dom(io_ports$0) = BYTE & ran(mem$0): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem$0<+{address|->value}: BV16 +-> BYTE & dom(mem$0<+{address|->value}) = BV16));
  "`Check that the invariant (rgs8: id_reg_8 --> BYTE) is established by the initialisation - ref 3.3'";
  ({1|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{2|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{3|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{4|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{5|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{6|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{7|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{8|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{9|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{10|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{11|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{12|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{13|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{14|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{15|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{16|->id_reg_8|->[1,1,1,1,1,1,1,1]}: (1..16)*{id_reg_8} +-> BYTE);
  (dom({1|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{2|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{3|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{4|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{5|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{6|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{7|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{8|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{9|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{10|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{11|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{12|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{13|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{14|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{15|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{16|->id_reg_8|->[1,1,1,1,1,1,1,1]}) = (1..16)*{id_reg_8});
  "`Check that the invariant (pc: USHORT) is established by the initialisation - ref 3.3'";
  (0: USHORT);
  "`Check that the invariant (i_: BYTE) is established by the initialisation - ref 3.3'";
  (uchar_byte(0): BYTE);
  "`Check that the invariant (iff1: BIT) is established by the initialisation - ref 3.3'";
  (0: BIT);
  "`Check that the invariant (io_ports: BYTE --> BYTE) is established by the initialisation - ref 3.3'";
  (io_ports$0: BYTE +-> BYTE);
  ("`Component invariant'" & rgs8: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8) = (1..16)*{id_reg_8} & pc: USHORT & sp: BV16 & ix: BV16 & iy: BV16 & i_: BYTE & r_: BYTE & iff1: BIT & iff2: BIT & im: BIT*BIT & io_ports: BYTE +-> BYTE & dom(io_ports) = BYTE);
  "`Check assertion (dec(rgs8(b0)): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (dec(rgs8(5|->id_reg_8)): BYTE);
  "`Check assertion (io_ports(rgs8(c0)): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (io_ports(rgs8(6|->id_reg_8)): BYTE);
  "`Check assertion (bitget(rgs8(f0),0): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),0): BIT);
  "`Check assertion (bitget(rgs8(f0),1): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),1): BIT);
  "`Check assertion (bitget(rgs8(f0),2): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),2): BIT);
  "`Check assertion (bitget(rgs8(f0),3): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),3): BIT);
  "`Check assertion (bitget(rgs8(f0),4): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),4): BIT);
  "`Check assertion (bitget(rgs8(f0),5): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),5): BIT);
  "`Check assertion (bitget(rgs8(f0),6): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),6): BIT);
  "`Check assertion (bitget(rgs8(f0),7): BIT) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(rgs8(2|->id_reg_8),7): BIT);
  "`Check assertion (ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16);
  "`Check assertion (ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16);
  "`Check assertion (ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16);
  "`Check assertion (ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16);
  "`Check assertion (dec_BV16(byte_bv16(rgs8(h0),rgs8(l0))): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16);
  "`Check assertion (inc_BV16(byte_bv16(rgs8(h0),rgs8(l0))): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16);
  "`Check assertion (inc_BV16(byte_bv16(rgs8(d0),rgs8(e0))): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
  "`Check assertion (dec_BV16(byte_bv16(rgs8(d0),rgs8(e0))): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
  "`Check assertion (inc_BV16(byte_bv16(rgs8(b0),rgs8(c0))): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
  "`Check assertion (dec_BV16(byte_bv16(rgs8(b0),rgs8(c0))): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
  "`Check assertion (mem(iy): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(iy): BYTE);
  "`Check assertion (mem(ix): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(ix): BYTE);
  "`Check assertion (mem(sp): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(sp): BYTE);
  "`Check assertion (mem(byte_bv16(rgs8(a0),rgs8(f0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
  "`Check assertion (mem(byte_bv16(rgs8(h0),rgs8(l0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
  "`Check assertion (mem(byte_bv16(rgs8(d0),rgs8(e0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
  "`Check assertion (mem(byte_bv16(rgs8(b0),rgs8(c0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
  "`Check assertion (byte_bv16(rgs8(a0),rgs8(f0)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
  "`Check assertion (byte_bv16(rgs8(d0),rgs8(e0)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16);
  "`Check assertion (byte_bv16(rgs8(h0),rgs8(l0)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16);
  "`Check assertion (byte_bv16(rgs8(b0),rgs8(c0)): BV16) deduction - ref 3.2, 4.2, 5.3'";
  (byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16);
  ("`Local hypotheses'" & dd: SCHAR);
  "`Check assertion (!dd.(dd: SCHAR => bv_9ireg_plus_d0(mem,iy,dd): BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_9ireg_plus_d0(mem,iy,dd): BYTE);
  "`Check assertion (!dd.(dd: SCHAR => bv_9ireg_plus_d0(mem,ix,dd): BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_9ireg_plus_d0(mem,ix,dd): BYTE);
  "`Check assertion (ran(bv_9ireg_plus_d0) = BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (ran(bv_9ireg_plus_d0) = BYTE);
  "`Check assertion (!dd.(dd: SCHAR => bv_ireg_plus_d(iy,dd): BV16)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_ireg_plus_d(iy,dd): BV16);
  "`Check assertion (!dd.(dd: SCHAR => bv_ireg_plus_d(ix,dd): BV16)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_ireg_plus_d(ix,dd): BV16);
  "`Check assertion (ran(bv_ireg_plus_d) = BV16) deduction - ref 3.2, 4.2, 5.3'";
  (ran(bv_ireg_plus_d) = BV16);
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb));
  "`Check assertion (!(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & ww: id_reg_8 & wwr: BYTE & aa: id_reg_8 & aar: BYTE & bb: id_reg_8 & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr,aa|->aar,bb|->bbr}: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa));
  "`Check assertion (!(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & ww: id_reg_8 & wwr: BYTE & aa: id_reg_8 & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr,aa|->aar}: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww));
  "`Check assertion (!(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & ww: id_reg_8 & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv));
  "`Check assertion (!(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr}: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz));
  "`Check assertion (!(xx,xxr,yy,yyr,zz,zzr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr}: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy));
  "`Check assertion (!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} & xxr: BYTE);
  "`Check assertion (!(xx,xxr).(xx: id_reg_8 & xxr: BYTE => rgs8<+{xx|->xxr}: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8});
  "`Check assertion (!xx.(xx: id_reg_8 --> BYTE => rgs8<+xx: id_reg_8 --> BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+xx) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT);
  "`Check assertion (!(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {f0}*BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE);
  "`Check assertion (ran(update_flag_reg): POW({f0}*BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (ran(update_flag_reg): POW({2|->id_reg_8}*BYTE));
  "`Check assertion (update_refresh_reg(r_): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (update_refresh_reg(r_): BYTE);
  "`Check assertion (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(a0),rgs8(f0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE);
  "`Check assertion (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(h0),rgs8(l0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE);
  "`Check assertion (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(d0),rgs8(e0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE);
  "`Check assertion (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(b0),rgs8(c0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE);
  "`Check assertion (instruction_next(pc): USHORT) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(pc): USHORT);
  "`Check assertion (ran(rgs8) <: BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (ran(rgs8): POW(BYTE));
  ("`Component assertions'" & ran(mem): POW(BYTE) & dom(mem) = BV16 & ran(rgs8): POW(BYTE) & dom(rgs8) = (1..16)*{id_reg_8} & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & dom(bv_ireg_plus_d) = BV16*SCHAR & ran(bv_ireg_plus_d) = BV16 & !dd.(dd: SCHAR => bv_ireg_plus_d(ix,dd): BV16) & !dd.(dd: SCHAR => bv_ireg_plus_d(iy,dd): BV16) & dom(bv_9ireg_plus_d0) = (BV16 --> BYTE)*BV16*SCHAR & ran(bv_9ireg_plus_d0) = BYTE & !dd.(dd: SCHAR => bv_9ireg_plus_d0(mem,ix,dd): BYTE) & !dd.(dd: SCHAR => bv_9ireg_plus_d0(mem,iy,dd): BYTE) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bitget(rgs8(2|->id_reg_8),7): BIT & bitget(rgs8(2|->id_reg_8),6): BIT & bitget(rgs8(2|->id_reg_8),5): BIT & bitget(rgs8(2|->id_reg_8),4): BIT & bitget(rgs8(2|->id_reg_8),3): BIT & bitget(rgs8(2|->id_reg_8),2): BIT & bitget(rgs8(2|->id_reg_8),1): BIT & bitget(rgs8(2|->id_reg_8),0): BIT & io_ports(rgs8(6|->id_reg_8)): BYTE & dec(rgs8(5|->id_reg_8)): BYTE);
  ("`ext_update_io_ports preconditions in this component'" & address: UCHAR & value: SCHAR);
  "`Check that the invariant (io_ports: BYTE --> BYTE) is preserved by the operation - ref 3.4'";
  (io_ports<+{uchar_byte(address)|->schar_byte(value)}: BYTE +-> BYTE);
  (dom(io_ports<+{uchar_byte(address)|->schar_byte(value)}) = BYTE);
  ("`IN_A_9n0 preconditions in this component'" & nn: UCHAR);
  "`Check that the invariant (rgs8: id_reg_8 --> BYTE) is preserved by the operation - ref 3.4'";
  (rgs8<+{1|->id_reg_8|->io_ports(uchar_byte(nn))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{1|->id_reg_8|->io_ports(uchar_byte(nn))}) = (1..16)*{id_reg_8});
  ("`IN_r_9C0 preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = is_zero(io_ports(rgs8(6|->id_reg_8))) & half_carry = 0 & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 0 & carry = bitget(rgs8(2|->id_reg_8),0));
  (rgs8<+({rr|->io_ports(rgs8(6|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rr|->io_ports(rgs8(6|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8});
  ("`INI preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): PROGRAM_R_ADR);
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  (rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8});
  ("`INIR preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = 1 & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = 1 & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec(rgs8(5|->id_reg_8))) = 1 & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = 1 & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec(rgs8(5|->id_reg_8))) = 1) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`IND preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`INDR preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec(rgs8(5|->id_reg_8))) = 1 & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(io_ports(rgs8(6|->id_reg_8))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(io_ports(rgs8(6|->id_reg_8))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec(rgs8(5|->id_reg_8))) = 1) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`OUT_9n0_A preconditions in this component'" & nn: UCHAR);
  (io_ports<+{uchar_byte(nn)|->rgs8(1|->id_reg_8)}: BYTE +-> BYTE);
  (dom(io_ports<+{uchar_byte(nn)|->rgs8(1|->id_reg_8)}) = BYTE);
  ("`OUT_9C0_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
  (io_ports<+{rgs8(rr)|->rgs8(6|->id_reg_8)}: BYTE +-> BYTE);
  (dom(io_ports<+{rgs8(rr)|->rgs8(6|->id_reg_8)}) = BYTE);
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  (io_ports<+{rgs8(6|->id_reg_8)|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BYTE +-> BYTE);
  (dom(io_ports<+{rgs8(6|->id_reg_8)|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BYTE);
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec(rgs8(5|->id_reg_8))) = 1 & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec(rgs8(5|->id_reg_8))) = 1) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec(rgs8(5|->id_reg_8))) = 1 & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & zero: BIT & half_carry: BIT & pv: BIT & add_sub: BIT & carry: BIT & hvn: BYTE & lvn: BYTE & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec(rgs8(5|->id_reg_8))) = 1) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->io_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16))
END
&
THEORY EnumerateX IS
  id_reg_8 == {a0,f0,f_0,a_0,b0,c0,b_0,c_0,d0,e0,d_0,e_0,h0,l0,h_0,l_0};
  id_reg_16 == {BC,DE,HL,SP,AF}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
