THEORY BalanceX IS
  Z80_general_2,96,47,0,46,3,0,0;
  InstanciatedConstraintsLemmas,0,0,0,0,0,0,0;
  AssertionLemmas,62,18,0,41,3,0,0;
  Initialisation,6,1,0,5,0,0,0;
  CPI,2,2,0,0,0,0,0;
  CPIR,4,4,0,0,0,0,0;
  CPD,2,2,0,0,0,0,0;
  CPDR,4,4,0,0,0,0,0;
  DAA,2,2,0,0,0,0,0;
  CPL,2,2,0,0,0,0,0;
  NEG,2,2,0,0,0,0,0;
  CCF,2,2,0,0,0,0,0;
  SCF,2,2,0,0,0,0,0;
  NOP,0,0,0,0,0,0,0;
  HALT,0,0,0,0,0,0,0;
  DI,1,1,0,0,0,0,0;
  EI,1,1,0,0,0,0,0;
  IM0,1,1,0,0,0,0,0;
  IM1,2,2,0,0,0,0,0;
  IM2,1,1,0,0,0,0,0
END
&
THEORY ProofState IS
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0)
END
&
THEORY MethodList IS
  eh(BIT,_h,Goal);
  eh(BIT,_h,Goal);
  eh(BIT,_h,Goal);
  eh(BIT,_h,Goal);
  eh(BIT,_h,Goal);
  eh(BIT,_h,Goal);
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(f0,[1,0,bitget(rgs8(f0),2),1,bitget(rgs8(f0),4),1,bitget(rgs8(f0),6),bitget(rgs8(f0),7)],!(xx,xxr).(xx: id_reg_8 & xxr: BYTE => rgs8<+{xx|->xxr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx} = id_reg_8 & dom(rgs8)\/{xx} = id_reg_8))) & ss & pr & ar(BIT_VECTOR.1,Once) & pr & pr & ss & pr & pr & ss & pr & pr & ss & pr & ss & pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  eh(update_flag_reg,_h,Goal) & ss & dd & ph(f0,[bit_not(bitget(rgs8(f0),0)),0,bitget(rgs8(f0),2),1,bitget(rgs8(f0),4),1,bitget(rgs8(f0),6),bitget(rgs8(f0),7)],!(xx,xxr).(xx: id_reg_8 & xxr: BYTE => rgs8<+{xx|->xxr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr}) = id_reg_8 & dom(rgs8<+{xx|->xxr}) = id_reg_8))) & ss & pr & ar(BIT_VECTOR.1,Once) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & pr & pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,1,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr,yy|->yyr}) = id_reg_8 & dom(rgs8<+{xx|->xxr,yy|->yyr}) = id_reg_8))) & ss & pr & ss & pr & ss & pr & ar(BIT_VECTOR.1,Once) & pr & pr & ss & pr & pr & pr & pr & pr & pr & pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,result,f0,[bitget(rgs8(f0),0),1,bitget(rgs8(f0),2),1,1,1,bitget(rgs8(f0),6),bitget(rgs8(f0),7)],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr,yy|->yyr}) = id_reg_8 & dom(rgs8<+{xx|->xxr,yy|->yyr}) = id_reg_8))) & ss & pr & pr & ss & pr & ar(BIT_VECTOR.1,Once) & pr & pr & pr & pr & pr & pr & pr & pr & pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,result$0,f0,[c0$0,n0$0,pv0$0,1,h0$0,1,z0$0,s0$0],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr,yy|->yyr}) = id_reg_8 & dom(rgs8<+{xx|->xxr,yy|->yyr}) = id_reg_8))) & ss & pr & pr & ss & pr & ar(BIT_VECTOR) & pr & pr & pr & pr & pr & pr & pr & pr & pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(h0,hvn,l0,lvn,b0,bvn,c0,cvn,f0,[bitget(rgs8(f0),0),1,bit_not(is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0)))))),1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & ww: id_reg_8 & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}) = id_reg_8 & dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}) = id_reg_8))) & ss & pr & pr & ss & pr & pr & ss & pr & pr & ss & pr & pr & ss & pr & ar(BIT_VECTOR) & pr & pr & ah(ran(bit_not) = BIT & is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0))))): BIT) & eh(bit_not,_h,Goal) & eh(BIT,_h,Goal) & pp(rt.0) & ah(ran(is_zero16USHORT) = BIT & bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0)))): USHORT) & pr & ah(ran(bv16_ushort) = USHORT & dec_BV16(byte_bv16(rgs8(b0),rgs8(c0))): BV16) & pr & pr & ss & pr & ss & pr & ss & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(h0,hvn,l0,lvn,b0,bvn,c0,cvn,f0,[bitget(rgs8(f0),0),1,bit_not(is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0)))))),1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & ww: id_reg_8 & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}) = id_reg_8 & dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}) = id_reg_8))) & ss & pr & pr & ss & pr & pr & ss & pr & pr & ss & pr & pr & ss & pr & ar(BIT_VECTOR) & pr & pr & ah(ran(bit_not) = BIT & is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0))))): BIT) & eh(bit_not,_h,Goal) & eh(BIT,_h,Goal) & pp(rt.0) & ah(ran(is_zero16USHORT) = BIT & bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0)))): USHORT) & pr & ah(ran(bv16_ushort) = USHORT & dec_BV16(byte_bv16(rgs8(b0),rgs8(c0))): BV16) & pr & pr & ss & pr & ss & pr & ss & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(h0,hvn,l0,lvn,b0,bvn,c0,cvn,f0,[bitget(rgs8(f0),0),1,bit_not(is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0)))))),1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & ww: id_reg_8 & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}) = id_reg_8 & dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}) = id_reg_8))) & ss & pr & pr & ss & pr & pr & ss & pr & pr & ss & pr & pr & ss & pr & ar(BIT_VECTOR) & pr & pr & ah(ran(bit_not) = BIT & is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0))))): BIT) & eh(bit_not,_h,Goal) & eh(BIT,_h,Goal) & pp(rt.0) & ah(ran(is_zero16USHORT) = BIT & bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0)))): USHORT) & pr & ah(ran(bv16_ushort) = USHORT & dec_BV16(byte_bv16(rgs8(b0),rgs8(c0))): BV16) & pr & pr & ss & pr & ss & pr & ss & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(h0,hvn,l0,lvn,b0,bvn,c0,cvn,f0,[bitget(rgs8(f0),0),1,bit_not(is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0)))))),1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & ww: id_reg_8 & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}) = id_reg_8 & dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}) = id_reg_8))) & ss & pr & pr & ss & pr & pr & ss & pr & pr & ss & pr & pr & ss & pr & ar(BIT_VECTOR) & pr & pr & ah(ran(bit_not) = BIT & is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0))))): BIT) & eh(bit_not,_h,Goal) & eh(BIT,_h,Goal) & pp(rt.0) & ah(ran(is_zero16USHORT) = BIT & bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0)))): USHORT) & pr & ah(ran(bv16_ushort) = USHORT & dec_BV16(byte_bv16(rgs8(b0),rgs8(c0))): BV16) & pr & pr & ss & pr & ss & pr & ss & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(h0,hvn,l0,lvn,b0,bvn,c0,cvn,f0,[bitget(rgs8(f0),0),1,bit_not(is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0)))))),1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & ww: id_reg_8 & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}) = id_reg_8 & dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}) = id_reg_8))) & ss & pr & pr & ss & pr & pr & ss & pr & pr & ss & pr & pr & ss & pr & ar(BIT_VECTOR) & pr & pr & ah(ran(bit_not) = BIT & is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0))))): BIT) & eh(bit_not,_h,Goal) & eh(BIT,_h,Goal) & pp(rt.0) & ah(ran(is_zero16USHORT) = BIT & bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0)))): USHORT) & pr & ah(ran(bv16_ushort) = USHORT & dec_BV16(byte_bv16(rgs8(b0),rgs8(c0))): BV16) & pr & pr & ss & pr & ss & pr & ss & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(h0,hvn,l0,lvn,b0,bvn,c0,cvn,f0,[bitget(rgs8(f0),0),1,bit_not(is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0)))))),1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & ww: id_reg_8 & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}) = id_reg_8 & dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr,ww|->wwr}) = id_reg_8))) & ss & pr & pr & ss & pr & pr & ss & pr & pr & ss & pr & pr & ss & pr & ar(BIT_VECTOR) & pr & pr & ah(ran(bit_not) = BIT & is_zero16USHORT(bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0))))): BIT) & eh(bit_not,_h,Goal) & eh(BIT,_h,Goal) & pp(rt.0) & ah(ran(is_zero16USHORT) = BIT & bv16_ushort(dec_BV16(byte_bv16(rgs8(b0),rgs8(c0)))): USHORT) & pr & ah(ran(bv16_ushort) = USHORT & dec_BV16(byte_bv16(rgs8(b0),rgs8(c0))): BV16) & pr & pr & ss & pr & ss & pr & ss & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  eh(update_flag_reg,_h,Goal) & dd & ss & ar(BIT_VECTOR.1,Once) & pr & pr & pr & pr & pr & pr & pr & pr;
  ss & eh(dom(rgs8),_h,Goal) & dd & ss & pr;
  dd & ss & pr;
  ss & eh(dom(rgs8),_h,Goal) & dd & ss & pr;
  pp(rt.0);
  ss & eh(dom(rgs8),_h,Goal) & dd & ss & pr;
  pp(rt.0);
  dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
  dd & pr(Tac(Update_flag));
  dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
  dd & pr(Tac(Update_flag));
  dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
  dd & pr(Tac(Update_flag));
  dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
  dd & pr(Tac(Update_flag));
  dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
  dd & pr(Tac(Update_flag));
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  ah(ran(bv16_ushort) = USHORT) & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & ah(!xx.(xx: UCHAR => uchar_byte(xx): BYTE)) & pr & dd & ph(255,!xx.(xx: UCHAR => uchar_byte(xx): BYTE)) & pr & eh(id_reg_8,_h,Goal) & pr;
  pr
END
&
THEORY PassList IS
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?
END
&
THEORY ManForms 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO,genDivergencePO == KO,local_op == OK);
  PRVersion("V3.3.3.p39")(CLT == "V3.7.6")
END
