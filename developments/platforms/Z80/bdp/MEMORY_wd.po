
THEORY ProofList IS
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.53,(_f(116) => _f(117));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.52,(_f(114) => _f(115));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.51,(_f(112) => _f(113));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.50,(_f(110) => _f(111));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.49,(_f(108) => _f(109));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.48,(_f(106) => _f(107));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.47,(_f(104) => _f(105));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.46,(_f(102) => _f(103));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.45,(_f(100) => _f(101));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.44,(_f(98) => _f(99));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.43,(_f(96) => _f(97));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.42,(_f(94) => _f(95));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.41,(_f(92) => _f(93));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.40,(_f(90) => _f(91));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.39,(_f(88) => _f(89));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.38,(_f(86) => _f(87));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.37,(_f(84) => _f(85));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.36,(_f(82) => _f(83));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.35,(_f(80) => _f(81));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.34,(_f(78) => _f(79));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.33,(_f(76) => _f(77));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.32,(_f(74) => _f(75));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.31,(_f(72) => _f(73));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.30,(_f(70) => _f(71));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.29,(_f(68) => _f(69));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.28,(_f(66) => _f(67));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.27,(_f(64) => _f(65));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.26,(_f(62) => _f(63));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.25,(_f(60) => _f(61));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.24,(_f(58) => _f(59));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.23,(_f(56) => _f(57));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.22,(_f(54) => _f(55));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.21,(_f(52) => _f(53));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.20,(_f(50) => _f(51));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.19,(_f(48) => _f(49));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.18,(_f(46) => _f(47));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.17,(_f(44) => _f(45));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.16,(_f(42) => _f(43));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.15,(_f(40) => _f(41));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.14,(_f(38) => _f(39));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.13,(_f(36) => _f(37));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.12,(_f(34) => _f(35));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.11,(_f(32) => _f(33));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.10,(_f(30) => _f(31));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.9,(_f(28) => _f(29));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.8,(_f(26) => _f(27));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.7,(_f(24) => _f(25));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.6,(_f(22) => _f(23));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.5,(_f(20) => _f(21));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.4,(_f(18) => _f(19));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.3,(_f(16) => _f(17));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.2,(_f(14) => _f(15));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.1,(_f(12) => _f(13))

END
&

THEORY Formulas IS
("`Component constraints'" & btrue);
("`Used machines constraints'" & btrue);
("`Component properties'" & (1..18)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..18)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}));
("`Seen and used machines properties'" & SSHORTINT_LENGTH: INTEGER & 0<=SSHORTINT_LENGTH & SSHORTINT_LENGTH = 16 & NB_SSHORTINTS: INTEGER & 0<=NB_SSHORTINTS & NB_SSHORTINTS = 2**SSHORTINT_LENGTH & SSHORTINT = -32768..32767 & SSHORTINT_POSITION = 0..SSHORTINT_LENGTH-1 & SCHAR_LENGTH: INTEGER & 0<=SCHAR_LENGTH & SCHAR_LENGTH = 8 & NB_SCHARS: INTEGER & 0<=NB_SCHARS & NB_SCHARS = 2**SCHAR_LENGTH & SCHAR = -128..127 & SCHAR_POSITION = 0..SCHAR_LENGTH-1 & UCHAR = 0..255 & BV16: POW(BIT_VECTOR) & BV16 = SET(vv).(vv: BIT_VECTOR & size(vv) = SSHORTINT_LENGTH) & BYTE_TO_UCHAR: BYTE +-> UCHAR & dom(BYTE_TO_UCHAR) = BYTE & BYTE_TO_UCHAR = %v0.(v0: BYTE | (-128)*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & UCHAR_TO_BYTE: UCHAR +-> BYTE & dom(UCHAR_TO_BYTE) = UCHAR & UCHAR_TO_BYTE = BYTE_TO_UCHAR~ & USHORTINT = 0..65535 & NB_INSTRUCTIONS: INTEGER & 0<=NB_INSTRUCTIONS & INST_SZ: INTEGER & 0<=INST_SZ & INST_SZ = 16 & NB_INSTRUCTIONS = 2**INST_SZ & INSTRUCTION_MAX = NB_INSTRUCTIONS-1 & INSTRUCTION = USHORTINT & INSTRUCTION_NEXT: USHORTINT +-> USHORTINT & dom(INSTRUCTION_NEXT) = USHORTINT & INSTRUCTION_NEXT = SET(p0,q0).(p0: INSTRUCTION & q0: INSTRUCTION & 0<=p0 & p0+1<=NB_INSTRUCTIONS-1 & q0 = p0+1)\/{NB_INSTRUCTIONS-1|->0} & INSTRUCTION_JUMP = %(p0,e0).(p0: INSTRUCTION & e0: -126..129 | p0+e0) & BYTE_TO_SCHAR: BYTE +-> SCHAR & dom(BYTE_TO_SCHAR) = BYTE & BYTE_TO_SCHAR = %v0.(v0: BYTE | (-128)*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & SCHAR_TO_BYTE: SCHAR +-> BYTE & dom(SCHAR_TO_BYTE) = SCHAR & SCHAR_TO_BYTE = BYTE_TO_SCHAR~ & BV16_TO_SSHORTINT: BV16 +-> SSHORTINT & dom(BV16_TO_SSHORTINT) = BV16 & BV16_TO_SSHORTINT = %v0.(v0: BV16 | (-32768)*v0(15)+16384*v0(14)+8192*v0(13)+4096*v0(12)+2048*v0(11)+1024*v0(10)+512*v0(9)+256*v0(8)+128*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & SSHORTINT_TO_BV16: SSHORTINT +-> BV16 & dom(SSHORTINT_TO_BV16) = SSHORTINT & SSHORTINT_TO_BV16 = BV16_TO_SSHORTINT~ & BYTE_TO_BV16: BV16*BV16 +-> BV16 & dom(BYTE_TO_BV16) = BV16*BV16 & BYTE_TO_BV16 = %(v1,v2).(v1: BV16 & v2: BV16 | {0|->v2(0)}\/{1|->v2(1)}\/{2|->v2(2)}\/{3|->v2(3)}\/{4|->v2(4)}\/{5|->v2(5)}\/{6|->v2(6)}\/{7|->v2(7)}\/{8|->v1(0)}\/{9|->v1(1)}\/{10|->v1(2)}\/{11|->v1(3)}\/{12|->v1(4)}\/{13|->v1(5)}\/{14|->v1(6)}\/{15|->v1(7)}) & SCHAR_TO_SSHORTINT: SCHAR*SCHAR +-> SSHORTINT & dom(SCHAR_TO_SSHORTINT) = SCHAR*SCHAR & SCHAR_TO_SSHORTINT = %(w1,w2).(w1: SCHAR & w2: SCHAR | BV16_TO_SSHORTINT(BYTE_TO_BV16(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))) & SSHORTINT_TO_SCHAR: SSHORTINT +-> SCHAR*SCHAR & dom(SSHORTINT_TO_SCHAR) = SSHORTINT & SSHORTINT_TO_SCHAR = SCHAR_TO_SSHORTINT~ & BV16_TO_USHORTINT: BV16 +-> USHORTINT & dom(BV16_TO_USHORTINT) = BV16 & BV16_TO_USHORTINT = %v0.(v0: BV16 | (-32768)*v0(15)+16384*v0(14)+8192*v0(13)+4096*v0(12)+2048*v0(11)+1024*v0(10)+512*v0(9)+256*v0(8)+128*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & USHORTINT_TO_BV16: USHORTINT +-> BV16 & dom(USHORTINT_TO_BV16) = USHORTINT & USHORTINT_TO_BV16 = BV16_TO_USHORTINT~ & SSHORTINT_TO_USHORTINT: SSHORTINT +-> USHORTINT & dom(SSHORTINT_TO_USHORTINT) = SSHORTINT & SSHORTINT_TO_USHORTINT = %v0.(v0: SSHORTINT | BV16_TO_USHORTINT(SSHORTINT_TO_BV16(v0))) & USHORTINT_TO_SSHORTINT: USHORTINT +-> SSHORTINT & dom(USHORTINT_TO_SSHORTINT) = USHORTINT & USHORTINT_TO_SSHORTINT = SSHORTINT_TO_USHORTINT~ & BIT = 0..1 & bit_not: BIT +-> BIT & dom(bit_not) = BIT & !bb.(bb: BIT => bit_not(bb) = 1-bb) & bit_and: BIT*BIT +-> BIT & dom(bit_and) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_and(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_and(b1,b2) = 1) & b2 = 1) & bit_or: BIT*BIT +-> BIT & dom(bit_or) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_or(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_or(b1,b2) = 1) or b2 = 1) & bit_xor: BIT*BIT +-> BIT & dom(bit_xor) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_xor(b1,b2) = 1 => not(b1 = b2)) & (not(b1 = b2) => bit_xor(b1,b2) = 1)) & bool_to_bit: BOOL +-> BIT & dom(bool_to_bit) = BOOL & bool_to_bit = {TRUE|->1}\/{FALSE|->0} & BIT_VECTOR = seq(BIT)-{{}} & bv_size: BIT_VECTOR +-> NATURAL-{0} & dom(bv_size) = BIT_VECTOR & bv_size = %bv.(bv: BIT_VECTOR | size(bv)) & bv_catenate: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_catenate) = BIT_VECTOR*BIT_VECTOR & bv_catenate = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR | v1^v2) & bv_sub: BIT_VECTOR*NATURAL*NATURAL +-> BIT_VECTOR & dom(bv_sub) = BIT_VECTOR*NATURAL*NATURAL & bv_sub = %(bv,low,high).(bv: BIT_VECTOR & low: 1..bv_size(bv) & high: 1..bv_size(bv) & low<=high | low..high<|bv) & bv_zero: NATURAL-{0} +-> BIT_VECTOR & dom(bv_zero) = NATURAL-{0} & bv_zero = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{0}) & bv_one: NATURAL-{0} +-> BIT_VECTOR & dom(bv_one) = NATURAL-{0} & bv_one = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{1}) & bv_not: BIT_VECTOR +-> BIT_VECTOR & dom(bv_not) = BIT_VECTOR & bv_not = %v1.(v1: BIT_VECTOR | %idx.(idx: 1..size(v1) | bit_not(v1(idx)))) & bv_and: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_and) = BIT_VECTOR*BIT_VECTOR & bv_and = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_and(v1(idx),v2(idx)))) & bv_or: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_or) = BIT_VECTOR*BIT_VECTOR & bv_or = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_or(v1(idx),v2(idx)))) & bv_xor: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_xor) = BIT_VECTOR*BIT_VECTOR & bv_xor = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_xor(v1(idx),v2(idx)))) & bv_at: BIT_VECTOR*NATURAL +-> BIT & dom(bv_at) = BIT_VECTOR*NATURAL & bv_at = %(v1,idx).(v1: BIT_VECTOR & idx: INTEGER & 0<=idx & idx+1<=bv_size(v1) | v1(idx+1)) & bv_set: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_set) = BIT_VECTOR*NATURAL & bv_set = %(v1,idx).(v1: BIT_VECTOR & idx: INTEGER & 0<=idx & idx+1<=bv_size(v1) | v1<+{idx+1|->1}) & bv_clear: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_clear) = BIT_VECTOR*NATURAL & bv_clear = %(v1,idx).(v1: BIT_VECTOR & idx: INTEGER & 0<=idx & idx+1<=bv_size(v1) | v1<+{idx+1|->0}) & bv_put: BIT_VECTOR*NATURAL*BIT +-> BIT_VECTOR & dom(bv_put) = BIT_VECTOR*NATURAL*BIT & bv_put = %(v1,idx,bit).(v1: BIT_VECTOR & idx: INTEGER & 0<=idx & idx+1<=bv_size(v1) & bit: BIT | v1<+{idx+1|->bit}) & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(vv).(vv: BIT_VECTOR & bv_size(vv) = BYTE_WIDTH) & BYTE_ZERO: BYTE & BYTE_ZERO = BYTE_INDEX*{0} & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & add8: SCHAR*SCHAR +-> SCHAR & dom(add8) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8(w1,w2) = w1+w2-256)) & add16: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substract: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substract) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substract(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substract(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & and: SCHAR*SCHAR +-> SCHAR*BOOL & dom(and) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => and(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & ior: SCHAR*SCHAR +-> SCHAR*BOOL & dom(ior) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => ior(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xor: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xor) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xor(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitget: SCHAR*SCHAR_POSITION +-> BIT & dom(bitget) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitget(w0,i0) = SCHAR_TO_BYTE(w0)(i0)) & bitset: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitset) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitset(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclear: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclear) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclear(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complement: SCHAR +-> SCHAR & dom(complement) = SCHAR & !w0.(w0: SCHAR => complement(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swap: SCHAR +-> SCHAR & dom(swap) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swap(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleft: SCHAR +-> SCHAR*BOOL & dom(rotateleft) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleft(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotateright: SCHAR +-> SCHAR*BOOL & dom(rotateright) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateright(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(1)}\/{1|->SCHAR_TO_BYTE(w0)(2)}\/{2|->SCHAR_TO_BYTE(w0)(3)}\/{3|->SCHAR_TO_BYTE(w0)(4)}\/{4|->SCHAR_TO_BYTE(w0)(5)}\/{5|->SCHAR_TO_BYTE(w0)(6)}\/{6|->SCHAR_TO_BYTE(w0)(7)}\/{7|->SCHAR_TO_BYTE(w0)(0)})|->bool(SCHAR_TO_BYTE(w0)(0) = 1)));
("`Included,imported and extended machines properties'" & btrue);
("`Component invariant'" & stack: USHORTINT +-> SCHAR & dom(stack) = USHORTINT & rgs8: (1..18)*{id_reg_8} +-> SCHAR & dom(rgs8) = (1..18)*{id_reg_8} & mem: USHORTINT +-> SCHAR & dom(mem) = USHORTINT & btrue & btrue);
("`Seen and used machines invariants'" & btrue);
("`Included,imported and extended machines invariants'" & btrue);
("`Component assertions'" & dom(stack) = USHORTINT & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & dom(mem) = USHORTINT & ran(rgs8): POW(SCHAR) & dom(rgs8) = (1..18)*{id_reg_8} & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))))): USHORTINT);
("`Seen and used machines assertions'" & NB_SCHARS = 256 & !n0.(n0: SCHAR => 0<=n0) & !n0.(n0: SCHAR => n0<=255) & 2**16 = 65536 & INSTRUCTION_NEXT: USHORTINT +-> USHORTINT & dom(INSTRUCTION_NEXT) = USHORTINT & 0 = SCHAR_TO_SSHORTINT(0,0) & bit_not(0) = 1 & bit_not(1) = 0 & !bb.(bb: BIT => bit_not(bit_not(bb)) = bb) & bit_and(0,0) = 0 & bit_and(0,1) = 0 & bit_and(1,0) = 0 & bit_and(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 1 => bit_and(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 0 => bit_and(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3)) & !b1.(b1: BIT => bit_and(b1,1) = b1) & !b1.(b1: BIT => bit_and(b1,0) = 0) & bit_or(0,0) = 0 & bit_or(0,1) = 1 & bit_or(1,0) = 1 & bit_or(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 1 => bit_or(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 0 => bit_or(b2,b1) = 0) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 1 => b1 = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 0 => b1 = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3)) & !b1.(b1: BIT => bit_or(b1,1) = 1) & !b1.(b1: BIT => bit_or(b1,0) = b1) & !b1.(b1: BIT => bit_or(1,b1) = 1) & !b1.(b1: BIT => bit_or(0,b1) = b1) & bit_xor(0,0) = 0 & bit_xor(0,1) = 1 & bit_xor(1,0) = 1 & bit_xor(1,1) = 0 & !(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 1 => bit_xor(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 0 => bit_xor(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3)) & !bb.(bb: BIT => bit_xor(bb,bb) = 0) & bool_to_bit(TRUE) = 1 & bool_to_bit(FALSE) = 0 & !bv.(bv: BIT_VECTOR => bv_size(bv_not(bv)) = bv_size(bv)) & !(bv,indx).(bv: BIT_VECTOR & indx: 1..bv_size(bv) => bv_not(bv_not(bv))(indx) = bv(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR => bv_size(bv_catenate(v1,v2)) = bv_size(v1)+bv_size(v2)) & !(bv,low,high).(bv: BIT_VECTOR & low: INTEGER & 0<=low & high: INTEGER & 0<=high & low<=high => bv_size(bv_sub(bv,low,high)) = high-low) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_and(v1,v2)) = bv_size(v2)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 1..bv_size(v1) => bv_and(v1,v2)(indx) = bv_and(v2,v1)(indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: 1..bv_size(v1) => bv_and(v1,bv_and(v2,v3))(indx) = bv_and(bv_and(v1,v2),v3)(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 1..bv_size(bv) => bv_and(bv,bv_zero(bv_size(bv)))(indx) = bv_zero(bv_size(bv))(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 1..bv_size(bv) => bv_and(bv,bv_one(bv_size(bv)))(indx) = bv(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v1)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 1..bv_size(v1) => bv_or(v1,v2)(indx) = bv_or(v2,v1)(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v2)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: 1..bv_size(v1) => bv_or(v1,bv_or(v2,v3))(indx) = bv_or(bv_or(v1,v2),v3)(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 1..bv_size(bv) => bv_or(bv,bv_one(bv_size(bv)))(indx) = bv_one(bv_size(bv))(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 1..bv_size(bv) => bv_or(bv,bv_zero(bv_size(bv)))(indx) = bv(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v1)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v2)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 1..bv_size(v1) => bv_xor(v1,v2)(indx) = bv_xor(v2,v1)(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 1..bv_size(bv) => bv_xor(bv,bv)(indx) = bv_zero(bv_size(bv))(indx)) & dom(add8) = SCHAR*SCHAR & ran(add8): POW(SCHAR) & dom(substract) = SCHAR*SCHAR & ran(substract): POW(SCHAR*BOOL*BOOL) & dom(and) = SCHAR*SCHAR & ran(and): POW(SCHAR*BOOL) & dom(ior) = SCHAR*SCHAR & ran(ior): POW(SCHAR*BOOL) & dom(xor) = SCHAR*SCHAR & ran(xor): POW(SCHAR*BOOL) & dom(bitclear) = SCHAR*SCHAR_POSITION & ran(bitclear): POW(SCHAR) & dom(bitset) = SCHAR*SCHAR_POSITION & ran(bitset): POW(SCHAR) & dom(bitget) = SCHAR*SCHAR_POSITION & ran(bitget): POW(BIT) & dom(complement) = SCHAR & ran(complement): POW(SCHAR) & dom(swap) = SCHAR & ran(swap): POW(SCHAR) & ran(rotateleft): POW(SCHAR*BOOL) & dom(rotateleft) = SCHAR & dom(rotateright) = SCHAR & ran(rotateright): POW(SCHAR*BOOL) & !(w0,idx).(w0: SCHAR & idx: SCHAR_POSITION => bitget(w0,idx) = SCHAR_TO_BYTE(w0)(idx)) & max(SCHAR) = 127);
("`Included,imported and extended machines assertions'" & btrue);
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR));
(0: dom(INSTRUCTION_NEXT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1);
(1: dom(INSTRUCTION_NEXT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2);
(2: dom(INSTRUCTION_NEXT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3);
(3: dom(INSTRUCTION_NEXT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4);
(4: dom(INSTRUCTION_NEXT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5);
(5: dom(INSTRUCTION_NEXT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6);
(6: dom(INSTRUCTION_NEXT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7);
(7: dom(INSTRUCTION_NEXT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8);
(8: dom(INSTRUCTION_NEXT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9);
(9: dom(INSTRUCTION_NEXT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10);
(10: dom(INSTRUCTION_NEXT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11);
(11: dom(INSTRUCTION_NEXT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12);
(12: dom(INSTRUCTION_NEXT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13);
(13: dom(INSTRUCTION_NEXT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & vec: BYTE & in0: 0..7);
(BYTE_TO_SCHAR(vec),in0: dom(bitget));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & vec: BYTE & in0: 0..7);
(in0: dom(vec));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & vec: BYTE & in0: 0..7);
(vec: dom(vec) +-> ran(vec));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)));
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)));
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)));
(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8): dom(SCHAR_TO_SSHORTINT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)));
(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): dom(SSHORTINT_TO_USHORTINT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)));
(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): dom(mem));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR);
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR);
(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8): dom(SCHAR_TO_SSHORTINT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR);
(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): dom(SSHORTINT_TO_USHORTINT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR);
(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): dom(mem));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR);
(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): dom(SSHORTINT_TO_USHORTINT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR);
(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): dom(mem));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT);
(9|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT);
(10|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT);
(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8): dom(SCHAR_TO_SSHORTINT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT);
(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): dom(SSHORTINT_TO_USHORTINT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT);
(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): dom(mem));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR);
(9|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR);
(10|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR);
(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8): dom(SCHAR_TO_SSHORTINT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR);
(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): dom(SSHORTINT_TO_USHORTINT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR);
(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): dom(mem));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR);
(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): dom(SSHORTINT_TO_USHORTINT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR);
(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): dom(mem));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))))): USHORTINT);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))))): USHORTINT);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))))): USHORTINT);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(SCHAR_TO_SSHORTINT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))))): USHORTINT);
(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): dom(SSHORTINT_TO_USHORTINT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))))): USHORTINT);
(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): dom(mem));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))): SCHAR);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))): SCHAR);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))): SCHAR);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(SCHAR_TO_SSHORTINT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))): SCHAR);
(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): dom(SSHORTINT_TO_USHORTINT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))): SCHAR);
(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): dom(mem));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))): SCHAR);
(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))): dom(SSHORTINT_TO_USHORTINT));
("`Local hypotheses'" & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & ran(rgs8): POW(SCHAR) & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))))): USHORTINT & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))): SCHAR);
(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): dom(mem))

END
&

THEORY EnumerateX IS
(id_reg_8 == {a0,f0,f_0,a_0,b0,c0,b_0,c_0,d0,e0,d_0,e_0,h0,l0,h_0,l_0,i0,r0});
(id_reg_16 == {BC,DE,HL,SP,AF})

END
