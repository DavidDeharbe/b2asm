THEORY ProofList IS
  _f(1) & _f(2) & AssertionLemmas.11,(_f(25) => _f(26));
  _f(1) & _f(2) & AssertionLemmas.10,(_f(23) => _f(24));
  _f(1) & _f(2) & AssertionLemmas.9,(_f(21) => _f(22));
  _f(1) & _f(2) & AssertionLemmas.8,(_f(19) => _f(20));
  _f(1) & _f(2) & AssertionLemmas.7,(_f(17) => _f(18));
  _f(1) & _f(2) & AssertionLemmas.6,(_f(15) => _f(16));
  _f(1) & _f(2) & AssertionLemmas.5,(_f(13) => _f(14));
  _f(1) & _f(2) & AssertionLemmas.4,(_f(11) => _f(12));
  _f(1) & _f(2) & AssertionLemmas.3,(_f(9) => _f(10));
  _f(1) & _f(2) & AssertionLemmas.2,(_f(6) & _f(7) => _f(8));
  _f(1) & _f(2) & AssertionLemmas.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & SCHAR_MAX: INTEGER & SCHAR_MIN: INTEGER & SCHAR_MAX = 2**7-1 & SCHAR_MIN = (-2)**7 & SCHAR = (-2)**7..2**7-1 & UCHAR = 0..2**8-1 & UCHAR_MAX: INTEGER & UCHAR_MIN: INTEGER & UCHAR_MAX = 2**8 & UCHAR_MIN = 0 & uchar_schar: UCHAR +-> SCHAR & dom(uchar_schar) = UCHAR & uchar_schar = %v1.(v1: UCHAR & v1<=SCHAR_MAX | v1) & uchar_schar = %v1.(v1: UCHAR & not(v1<=SCHAR_MAX) | v1-UCHAR_MAX+1) & schar_uchar: SCHAR +-> UCHAR & dom(schar_uchar) = SCHAR & schar_uchar = uchar_schar~ & SSHORTINT = (-2)**15..2**15-1 & byte_to_uchar: BYTE +-> UCHAR & dom(byte_to_uchar) = BYTE & byte_to_uchar = %v0.(v0: BYTE | 2**7*v0(7)+2**6*v0(6)+2**5*v0(5)+2**4*v0(4)+2**3*v0(3)+2**2*v0(2)+2*v0(1)+v0(0)) & uchar_to_byte: UCHAR +-> BYTE & dom(uchar_to_byte) = UCHAR & uchar_to_byte = byte_to_uchar~ & update_refresh_reg: BYTE +-> BYTE & dom(update_refresh_reg) = BYTE & update_refresh_reg = %v0.(v0: BYTE | uchar_to_byte(2**7*v0(7)+(2**6*v0(6)+2**5*v0(5)+2**4*v0(4)+2**3*v0(3)+2**2*v0(2)+2*v0(1)+v0(0)) mod 64)) & USHORTINT = 0..2**16-1 & USHORTINT_MAX = 2**16-1 & USHORTINT_MIN = 0 & NB_INSTRUCTIONS: INTEGER & 0<=NB_INSTRUCTIONS & INST_SZ: INTEGER & 0<=INST_SZ & INST_SZ = 16 & NB_INSTRUCTIONS = 2**INST_SZ & INSTRUCTION_MAX = NB_INSTRUCTIONS-1 & INSTRUCTION = USHORTINT & instruction_next: USHORTINT +-> USHORTINT & dom(instruction_next) = USHORTINT & instruction_next = %w1.(w1: USHORTINT | (w1+1) mod 65535) & instruction_jump = %(p0,e0).(p0: INSTRUCTION & e0: -126..129 | (p0+e0) mod 65535) & byte_to_schar: BYTE +-> SCHAR & dom(byte_to_schar) = BYTE & byte_to_schar = %v0.(v0: BYTE | (-2)**7*v0(7)+2**6*v0(6)+2**5*v0(5)+2**4*v0(4)+2**3*v0(3)+2**2*v0(2)+2*v0(1)+v0(0)) & schar_to_byte: SCHAR +-> BYTE & dom(schar_to_byte) = SCHAR & schar_to_byte = byte_to_schar~ & bv16_to_sshortint: BV16 +-> SSHORTINT & dom(bv16_to_sshortint) = BV16 & bv16_to_sshortint = %v0.(v0: BV16 | (-2)**15*v0(15)+2**14*v0(14)+2**13*v0(13)+2**12*v0(12)+2**11*v0(11)+2**10*v0(10)+2**9*v0(9)+2**8*v0(8)+2**7*v0(7)+2**6*v0(6)+2**5*v0(5)+2**4*v0(4)+2**3*v0(3)+2**2*v0(2)+2*v0(1)+v0(0)) & sshortint_to_bv16: SSHORTINT +-> BV16 & dom(sshortint_to_bv16) = SSHORTINT & sshortint_to_bv16 = bv16_to_sshortint~ & byte_to_bv16: BYTE*BYTE +-> BV16 & dom(byte_to_bv16) = BYTE*BYTE & byte_to_bv16 = %(v1,v2).(v1: BV16 & v2: BV16 | {0|->v2(0)}\/{1|->v2(1)}\/{2|->v2(2)}\/{3|->v2(3)}\/{4|->v2(4)}\/{5|->v2(5)}\/{6|->v2(6)}\/{7|->v2(7)}\/{8|->v1(0)}\/{9|->v1(1)}\/{10|->v1(2)}\/{11|->v1(3)}\/{12|->v1(4)}\/{13|->v1(5)}\/{14|->v1(6)}\/{15|->v1(7)}) & bv16_to_byte: BV16 +-> BYTE*BYTE & dom(bv16_to_byte) = BV16 & bv16_to_byte = byte_to_bv16~ & schar_to_sshortint: SCHAR*SCHAR +-> SSHORTINT & dom(schar_to_sshortint) = SCHAR*SCHAR & schar_to_sshortint = %(w1,w2).(w1: SCHAR & w2: SCHAR | bv16_to_sshortint(byte_to_bv16(schar_to_byte(w1),schar_to_byte(w2)))) & sshortint_to_schar: SSHORTINT +-> SCHAR*SCHAR & dom(sshortint_to_schar) = SSHORTINT & sshortint_to_schar = schar_to_sshortint~ & bv16_to_ushortint: BV16 +-> USHORTINT & dom(bv16_to_ushortint) = BV16 & bv16_to_ushortint = %v0.(v0: BV16 | 2**15*v0(15)+2**14*v0(14)+2**13*v0(13)+2**12*v0(12)+2**11*v0(11)+2**10*v0(10)+2**9*v0(9)+2**8*v0(8)+2**7*v0(7)+2**6*v0(6)+2**5*v0(5)+2**4*v0(4)+2**3*v0(3)+2**2*v0(2)+2*v0(1)+v0(0)) & ushortint_to_bv16: USHORTINT +-> BV16 & dom(ushortint_to_bv16) = USHORTINT & ushortint_to_bv16 = bv16_to_ushortint~ & sshortint_to_ushortint: SSHORTINT +-> USHORTINT & dom(sshortint_to_ushortint) = SSHORTINT & sshortint_to_ushortint = %v0.(v0: SSHORTINT | v0-32768) & ushortint_to_sshortint: USHORTINT +-> SSHORTINT & dom(ushortint_to_sshortint) = USHORTINT & ushortint_to_sshortint = sshortint_to_ushortint~ & get_upper_digit = %by.(by: BYTE | 2**3*by(7)+2**2*by(6)+2*by(5)+by(4)) & get_lower_digit = %by.(by: BYTE | 2**3*by(3)+2**2*by(2)+2*by(1)+by(0)) & BIT = 0..1 & bit_not: BIT +-> BIT & dom(bit_not) = BIT & bit_not = %bb.(bb: BIT | 1-bb) & bit_and: BIT*BIT +-> BIT & dom(bit_and) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_and(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_and(b1,b2) = 1) & b2 = 1) & bit_or: BIT*BIT +-> BIT & dom(bit_or) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_or(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_or(b1,b2) = 1) or b2 = 1) & bit_xor: BIT*BIT +-> BIT & dom(bit_xor) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_xor(b1,b2) = 1 => not(b1 = b2)) & (not(b1 = b2) => bit_xor(b1,b2) = 1)) & bool_to_bit: BOOL +-> BIT & dom(bool_to_bit) = BOOL & bool_to_bit = {TRUE|->1}\/{FALSE|->0} & BIT_VECTOR = seq(BIT)-{{}} & bv_size: BIT_VECTOR +-> NATURAL-{0} & dom(bv_size) = BIT_VECTOR & bv_size = %bv.(bv: BIT_VECTOR | size(bv)) & bv_catenate: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_catenate) = BIT_VECTOR*BIT_VECTOR & bv_catenate = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR | v1^v2) & bv_index: BIT_VECTOR +-> POW(NATURAL) & dom(bv_index) = BIT_VECTOR & bv_index = %v1.(v1: BIT_VECTOR | 0..bv_size(v1)-1) & bv_sub: BIT_VECTOR*NATURAL*NATURAL +-> BIT_VECTOR & dom(bv_sub) = BIT_VECTOR*NATURAL*NATURAL & bv_sub = %(bv,low,high).(bv: BIT_VECTOR & low: 0..bv_size(bv)-1 & high: low..bv_size(bv)-1 | %i0.(i0: 1..high-low+1 | bv(i0+low))) & bv_zero: NATURAL-{0} +-> BIT_VECTOR & dom(bv_zero) = NATURAL-{0} & bv_zero = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{0}) & bv_one: NATURAL-{0} +-> BIT_VECTOR & dom(bv_one) = NATURAL-{0} & bv_one = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{1}) & bv_not: BIT_VECTOR +-> BIT_VECTOR & dom(bv_not) = BIT_VECTOR & bv_not = %v1.(v1: BIT_VECTOR | %idx.(idx: 1..bv_size(v1) | bit_not(v1(idx)))) & bv_and: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_and) = BIT_VECTOR*BIT_VECTOR & bv_and = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_and(v1(idx),v2(idx)))) & bv_or: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_or) = BIT_VECTOR*BIT_VECTOR & bv_or = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_or(v1(idx),v2(idx)))) & bv_xor: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_xor) = BIT_VECTOR*BIT_VECTOR & bv_xor = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_xor(v1(idx),v2(idx)))) & bv_get: BIT_VECTOR*NATURAL +-> BIT & dom(bv_get) = BIT_VECTOR*NATURAL & bv_get = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1(idx+1)) & bv_set: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_set) = BIT_VECTOR*NATURAL & bv_set = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1<+{idx+1|->1}) & bv_clear: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_clear) = BIT_VECTOR*NATURAL & bv_clear = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1<+{idx+1|->0}) & bv_put: BIT_VECTOR*NATURAL*BIT +-> BIT_VECTOR & dom(bv_put) = BIT_VECTOR*NATURAL*BIT & bv_put = %(v1,idx,bit).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 & bit: BIT | v1<+{idx+1|->bit}) & BYTE_WIDTH = 8 & BYTE_INDEX = 1..BYTE_WIDTH & REAL_BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE = SET(bt).(bt: BIT_VECTOR & bv_size(bt) = BYTE_WIDTH) & BYTE_ZERO: BYTE & BYTE_ZERO = BYTE_INDEX*{0} & byte_bit_get: BYTE*REAL_BYTE_INDEX +-> BIT & dom(byte_bit_get) = BYTE*REAL_BYTE_INDEX & byte_bit_get = %(bt,ind).(bt: BYTE & ind: REAL_BYTE_INDEX | bt(ind+1)) & BV16_INDX = 1..16 & REAL_BV16_INDX = 0..15 & BV16 = SET(bt).(bt: BIT_VECTOR & bv_size(bt) = 16) & BV16_ZERO = BV16_INDX*{0} & bv16_byte: BV16 +-> BYTE*BYTE & dom(bv16_byte) = BV16 & bv16_byte = %bv.(bv: BV16 | {0|->bv(8)}\/{1|->bv(9)}\/{2|->bv(10)}\/{3|->bv(11)}\/{4|->bv(12)}\/{5|->bv(13)}\/{6|->bv(14)}\/{7|->bv(15)},{0|->bv(0)}\/{1|->bv(1)}\/{2|->bv(2)}\/{3|->bv(3)}\/{4|->bv(4)}\/{5|->bv(5)}\/{6|->bv(6)}\/{7|->bv(7)}) & byte_bv16 = bv16_byte~ & bv16_bit_get: BYTE*BV16_INDX +-> BIT & dom(bv16_bit_get) = BYTE*BV16_INDX & "`Component properties'" & is_zero: BYTE +-> BIT & dom(is_zero) = BYTE & is_zero = %w1.(w1: BYTE | bool_to_bit(bool(w1(0)+w1(1)+w1(2)+w1(3)+w1(4)+w1(5)+w1(6)+w1(7) = 0))) & is_zeroUSHORTINT: USHORTINT +-> BIT & dom(is_zeroUSHORTINT) = USHORTINT & is_zeroUSHORTINT = %nat1.(nat1: USHORTINT | bool_to_bit(bool(nat1 = 0))) & is_negative: BYTE +-> BIT & dom(is_negative) = BYTE & is_negative = %w1.(w1: BYTE | w1(7)) & half: UCHAR +-> UCHAR & dom(half) = UCHAR & half = %ww.(ww: UCHAR | ww mod 2**4) & simple_add8UCHAR: UCHAR*UCHAR +-> UCHAR & dom(simple_add8UCHAR) = UCHAR*UCHAR & simple_add8UCHAR = %(w1,w2).(w1: UCHAR & w2: UCHAR | (w1+w2) mod 2**8) & add8UCHAR: BIT*UCHAR*UCHAR +-> UCHAR*BIT*BIT*BIT*BIT & dom(add8UCHAR) = BIT*UCHAR*UCHAR & add8UCHAR = %(carry,w1,w2).(carry: BIT & w1: UCHAR & w2: UCHAR | (carry+w1+w2) mod 256,bool_to_bit(bool(carry+uchar_schar(w1)+uchar_schar(w2)+1<=0)),bool_to_bit(bool(UCHAR_MAX+1<=carry+w1+w2)),bool_to_bit(bool(2**4<=carry+half(w1)+half(w2))),bool_to_bit(bool((carry+w1+w2) mod UCHAR_MAX-1 = 0))) & substract8UCHAR: BIT*UCHAR*UCHAR +-> UCHAR*BIT*BIT*BIT*BIT & dom(substract8UCHAR) = BIT*UCHAR*UCHAR & substract8UCHAR = %(carry,w1,w2).(carry: BIT & w1: UCHAR & w2: UCHAR | (carry+w1-w2) mod 256,bool_to_bit(bool(carry+uchar_schar(w1)-uchar_schar(w2)+1<=0)),bool_to_bit(bool(UCHAR_MAX+1<=carry+w1-w2)),bool_to_bit(bool(2**4<=carry+half(w1)-half(w2))),bool_to_bit(bool((carry+w1-w2) mod UCHAR_MAX-1 = 0))) & add16USHORTINT: BIT*USHORTINT*USHORTINT +-> USHORTINT & dom(add16USHORTINT) = BIT*USHORTINT*USHORTINT & add16USHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | (b1+w1+w2) mod 65536) & add_carryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(add_carryUSHORTINT) = BIT*USHORTINT*USHORTINT & add_carryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**16+1<=b1+w1+w2))) & add_halfcarryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(add_halfcarryUSHORTINT) = BIT*USHORTINT*USHORTINT & add_halfcarryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**12+1<=b1+w1 mod 2**12+w2 mod 2**12))) & sub16USHORTINT: BIT*USHORTINT*USHORTINT +-> USHORTINT & dom(sub16USHORTINT) = BIT*USHORTINT*USHORTINT & sub16USHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | (w1-w2-b1) mod 65536) & sub_carryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(sub_carryUSHORTINT) = BIT*USHORTINT*USHORTINT & sub_carryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**16+1<=w1-w2-b1))) & sub_halfcarryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(sub_halfcarryUSHORTINT) = BIT*USHORTINT*USHORTINT & sub_halfcarryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**12+1<=w1 mod 2**12-w2 mod 2**12-b1))) & inc_BYTE: BYTE +-> BYTE & dom(inc_BYTE) = BYTE & inc_BYTE = %w1.(w1: BYTE | uchar_to_byte((byte_to_uchar(w1)+1) mod 256)) & dec_BYTE: BYTE +-> BYTE & dom(dec_BYTE) = BYTE & dec_BYTE = %w1.(w1: BYTE | uchar_to_byte((byte_to_uchar(w1)-1) mod 256)) & inc_BV16: BV16 +-> BV16 & dom(inc_BV16) = BV16 & inc_BV16 = %w1.(w1: BV16 | ushortint_to_bv16((bv16_to_ushortint(w1)+1) mod 65536)) & dec_BV16: BYTE +-> BYTE & dom(dec_BV16) = BYTE & dec_BV16 = %w1.(w1: BV16 | ushortint_to_bv16((bv16_to_ushortint(w1)-1) mod 65536)) & parity_even_BYTE: BIT_VECTOR +-> BIT & dom(parity_even_BYTE) = BIT_VECTOR & parity_even_BYTE = %bv.(bv: BIT_VECTOR | 1-SIGMA(idx).(idx: dom(bv) | bv(idx)) mod 2) & and: BYTE*BYTE +-> BYTE & dom(and) = BYTE*BYTE & and = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_and(bt1,bt2)) & ior: BYTE*BYTE +-> BYTE & dom(ior) = BYTE*BYTE & ior = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_or(bt1,bt2)) & xor: BYTE*BYTE +-> BYTE & dom(xor) = BYTE*BYTE & xor = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_xor(bt1,bt2)) & bitget: BYTE*BYTE_INDEX +-> BIT & dom(bitget) = BYTE*BYTE_INDEX & bitget = %(bt1,ii).(bt1: BYTE & ii: BYTE_INDEX | bt1(ii)) & bitset: BYTE*BYTE_INDEX +-> BYTE & dom(bitset) = BYTE*BYTE_INDEX & !(ww,ii).(ww: BYTE & ii: BYTE_INDEX => bitset(ww,ii) = bv_set(ww,ii)) & bitclear: BYTE*BYTE_INDEX +-> BYTE & dom(bitclear) = BYTE*BYTE_INDEX & !(ww,ii,bb).(ww: BYTE & ii: BYTE_INDEX & bb: BIT => bitclear(ww,ii) = bv_clear(ww,ii)) & complement: BYTE +-> BYTE & dom(complement) = BYTE & complement = %bt.(bt: BYTE | bv_not(bt)) & swap: BYTE +-> BYTE & dom(swap) = BYTE & swap = %bt.(bt: BYTE | {0|->bt(4)}\/{1|->bt(5)}\/{2|->bt(6)}\/{3|->bt(7)}\/{4|->bt(0)}\/{5|->bt(1)}\/{6|->bt(2)}\/{7|->bt(3)}) & rotateleft: BYTE +-> BYTE & dom(rotateleft) = BYTE & rotateleft = %bv.(bv: BYTE | {0|->bv(7)}\/{1|->bv(0)}\/{2|->bv(1)}\/{3|->bv(2)}\/{4|->bv(3)}\/{5|->bv(4)}\/{6|->bv(5)}\/{7|->bv(6)}) & rotateright: BYTE +-> BYTE & dom(rotateright) = BYTE & rotateright = %bv.(bv: BYTE | {0|->bv(1)}\/{1|->bv(2)}\/{2|->bv(3)}\/{3|->bv(4)}\/{4|->bv(5)}\/{5|->bv(6)}\/{6|->bv(7)}\/{7|->bv(0)}));
  ("`Seen and used machines assertions'" & 0 = schar_to_sshortint(0,0) & !n0.(n0: UCHAR => 0<=n0) & !n0.(n0: UCHAR => n0<=255) & instruction_next: USHORTINT +-> USHORTINT & dom(instruction_next) = USHORTINT & !xx.(xx: BYTE => byte_to_uchar(xx): UCHAR) & !xx.(xx: UCHAR => uchar_to_byte(xx): BYTE) & !xx.(xx: BYTE => update_refresh_reg(xx): BYTE) & !xx.(xx: BYTE => byte_to_schar(xx): SCHAR) & !xx.(xx: SCHAR => schar_to_byte(xx): BYTE) & !(xx,yy).(xx: BYTE & yy: BYTE => byte_to_bv16(xx,yy): BV16) & !(xx,yy).(xx: BYTE & yy: BYTE => #zz.(zz: BV16 & byte_to_bv16(xx,yy) = zz)) & !xx.(xx: BV16 => bv16_to_ushortint(xx): USHORTINT) & !xx.(xx: USHORTINT => ushortint_to_bv16(xx): BV16) & !xx.(xx: BYTE => get_upper_digit(xx): 0..16) & !xx.(xx: BYTE => get_lower_digit(xx): 0..16) & !bb.(bb: BIT => bit_not(bb) = 1-bb) & bit_not(0) = 1 & bit_not(1) = 0 & !bb.(bb: BIT => bit_not(bit_not(bb)) = bb) & bit_and(0,0) = 0 & bit_and(0,1) = 0 & bit_and(1,0) = 0 & bit_and(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 1 => bit_and(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 0 => bit_and(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3)) & !b1.(b1: BIT => bit_and(b1,1) = b1) & !b1.(b1: BIT => bit_and(b1,0) = 0) & bit_or(0,0) = 0 & bit_or(0,1) = 1 & bit_or(1,0) = 1 & bit_or(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 1 => bit_or(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 0 => bit_or(b2,b1) = 0) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 1 => b1 = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 0 => b1 = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3)) & !b1.(b1: BIT => bit_or(b1,1) = 1) & !b1.(b1: BIT => bit_or(b1,0) = b1) & !b1.(b1: BIT => bit_or(1,b1) = 1) & !b1.(b1: BIT => bit_or(0,b1) = b1) & bit_xor(0,0) = 0 & bit_xor(0,1) = 1 & bit_xor(1,0) = 1 & bit_xor(1,1) = 0 & !(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 1 => bit_xor(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 0 => bit_xor(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3)) & !bb.(bb: BIT => bit_xor(bb,bb) = 0) & bool_to_bit(TRUE) = 1 & bool_to_bit(FALSE) = 0 & !bb.(bb: BIT => bb = 0 or bb = 1) & !bb.(bb: BIT & not(bb = 0) => bb = 1) & !bb.(bb: BIT & not(bb = 1) => bb = 0) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_xor(bv,bv),indx) = bv_get(bv_zero(bv_size(bv)),indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 0..bv_size(v1)-1 => bv_get(bv_xor(v1,v2),indx) = bv_get(bv_xor(v2,v1),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v2)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_or(bv,bv_zero(bv_size(bv))),indx) = bv_get(bv,indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_or(bv,bv_one(bv_size(bv))),indx) = bv_get(bv_one(bv_size(bv)),indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: 0..bv_size(v1)-1 => bv_get(bv_or(v1,bv_or(v2,v3)),indx) = bv_get(bv_or(bv_or(v1,v2),v3),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v2)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 0..bv_size(v1)-1 => bv_get(bv_or(v1,v2),indx) = bv_get(bv_or(v2,v1),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_and(bv,bv_one(bv_size(bv))),indx) = bv_get(bv,indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_and(bv,bv_zero(bv_size(bv))),indx) = bv_get(bv_zero(bv_size(bv)),indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: 0..bv_size(v1)-1 => bv_get(bv_and(v1,bv_and(v2,v3)),indx) = bv_get(bv_and(bv_and(v1,v2),v3),indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 0..bv_size(v1)-1 => bv_get(bv_and(v1,v2),indx) = bv_get(bv_and(v2,v1),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_and(v1,v2)) = bv_size(v2)) & !(bv,low,high).(bv: BIT_VECTOR & low: 0..bv_size(bv)-1 & high: 0..bv_size(bv)-1 & low<=high => bv_size(bv_sub(bv,low,high)) = high-low) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR => bv_size(bv_catenate(v1,v2)) = bv_size(v1)+bv_size(v2)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_not(bv_not(bv)),indx) = bv_get(bv,indx)) & !bv.(bv: BIT_VECTOR => bv_size(bv_not(bv)) = bv_size(bv)) & !bt.(bt: BYTE => size(bt) = 8) & size(BYTE_ZERO) = 8 & BYTE: POW(BIT_VECTOR) & BYTE_ZERO: BIT_VECTOR & first(BYTE_ZERO) = 0 & BV16_ZERO: BV16 & BV16: POW(BIT_VECTOR) & BV16_ZERO: BIT_VECTOR);
  ("`Local hypotheses'" & x0: UCHAR & x1: UCHAR);
  "`Check assertion (!(x0,x1).(x0: UCHAR & x1: UCHAR => simple_add8UCHAR(x0,x1): UCHAR)) deduction - ref 3.2, 4.2, 5.3'";
  (simple_add8UCHAR(x0,x1): UCHAR);
  ("`Local hypotheses'" & vec: BYTE & in0: 0..7);
  "`Check assertion (!(vec,in0).(vec: BYTE & in0: 0..7 => bitget(vec,in0) = vec(in0))) deduction - ref 3.2, 4.2, 5.3'";
  (bitget(vec,in0) = vec(in0));
  "`Check assertion (ran(rotateright) <: BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (ran(rotateright): POW(BYTE));
  "`Check assertion (ran(rotateleft) <: BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (ran(rotateleft): POW(BYTE));
  "`Check assertion (ran(swap) <: BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (ran(swap): POW(BYTE));
  "`Check assertion (ran(complement) <: BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (ran(complement): POW(BYTE));
  "`Check assertion (ran(xor) <: BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (ran(xor): POW(BYTE));
  "`Check assertion (ran(ior) <: BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (ran(ior): POW(BYTE));
  "`Check assertion (ran(and) <: BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (ran(and): POW(BYTE));
  "`Check assertion (ran(substract8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT)) deduction - ref 3.2, 4.2, 5.3'";
  (ran(substract8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT));
  "`Check assertion (ran(add8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT)) deduction - ref 3.2, 4.2, 5.3'";
  (ran(add8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT));
  ("`Component assertions'" & dom(add8UCHAR) = BIT*UCHAR*UCHAR & ran(add8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT) & dom(substract8UCHAR) = BIT*UCHAR*UCHAR & ran(substract8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT) & dom(and) = BYTE*BYTE & ran(and): POW(BYTE) & dom(ior) = BYTE*BYTE & ran(ior): POW(BYTE) & dom(xor) = BYTE*BYTE & ran(xor): POW(BYTE) & dom(complement) = BYTE & ran(complement): POW(BYTE) & dom(swap) = BYTE & ran(swap): POW(BYTE) & dom(rotateleft) = BYTE & ran(rotateleft): POW(BYTE) & dom(rotateright) = BYTE & ran(rotateright): POW(BYTE) & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(vec,in0) = vec(in0)) & !(x0,x1).(x0: UCHAR & x1: UCHAR => simple_add8UCHAR(x0,x1): UCHAR))
END
&
THEORY EnumerateX 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
