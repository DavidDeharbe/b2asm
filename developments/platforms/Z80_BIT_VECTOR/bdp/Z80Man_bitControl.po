THEORY ProofList IS
  _f(1) & _f(2) & _f(3) & _f(66) & _f(265) & CALL_nn.6,(_f(270) & _f(271) => _f(272));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(265) & CALL_nn.5,(_f(270) & _f(185) => _f(239));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(265) & CALL_nn.4,(_f(81) => _f(269));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(265) & CALL_nn.3,(_f(81) => _f(268));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(265) & CALL_nn.2,(_f(81) => _f(267));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(265) & CALL_nn.1,(_f(81) => _f(266));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(260) & DJNZ_e.6,(_f(264) & _f(185) => _f(244));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(260) & DJNZ_e.5,(_f(264) & _f(67) => _f(263));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(260) & DJNZ_e.4,(_f(264) & _f(67) => _f(262));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(260) & DJNZ_e.3,(_f(261) & _f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(260) & DJNZ_e.2,(_f(261) & _f(67) => _f(263));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(260) & DJNZ_e.1,(_f(261) & _f(67) => _f(262));
  _f(1) & _f(2) & _f(3) & _f(66) & JP_IY.1,(_f(185) => _f(259));
  _f(1) & _f(2) & _f(3) & _f(66) & JP_IX.1,(_f(185) => _f(258));
  _f(1) & _f(2) & _f(3) & _f(66) & JP_HL.1,(_f(185) => _f(257));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(254) & JR_NZ_e.2,(_f(256) & _f(185) => _f(244));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(254) & JR_NZ_e.1,(_f(255) & _f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(251) & JR_Z_e.2,(_f(253) & _f(185) => _f(244));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(251) & JR_Z_e.1,(_f(252) & _f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(248) & JR_NC_e.2,(_f(250) & _f(185) => _f(244));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(248) & JR_NC_e.1,(_f(249) & _f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(245) & JR_C_e.2,(_f(247) & _f(185) => _f(244));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(245) & JR_C_e.1,(_f(246) & _f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(243) & JR_e.1,(_f(185) => _f(244));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(240) & JP_cc_nn.2,(_f(242) & _f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(240) & JP_cc_nn.1,(_f(241) & _f(185) => _f(239));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(238) & JP_nn.1,(_f(185) => _f(239));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(232) & RES_b_9IY_d0.6,(_f(237) & _f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(232) & RES_b_9IY_d0.5,(_f(81) => _f(236));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(232) & RES_b_9IY_d0.4,(_f(81) => _f(235));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(232) & RES_b_9IY_d0.3,(_f(81) => _f(234));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(232) & RES_b_9IY_d0.2,(_f(81) => _f(233));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(232) & RES_b_9IY_d0.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(226) & RES_b_9IX_d0.6,(_f(231) & _f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(226) & RES_b_9IX_d0.5,(_f(81) => _f(230));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(226) & RES_b_9IX_d0.4,(_f(81) => _f(229));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(226) & RES_b_9IX_d0.3,(_f(81) => _f(228));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(226) & RES_b_9IX_d0.2,(_f(81) => _f(227));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(226) & RES_b_9IX_d0.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(220) & RES_b_9HL0.6,(_f(225) & _f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(220) & RES_b_9HL0.5,(_f(81) => _f(224));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(220) & RES_b_9HL0.4,(_f(81) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(220) & RES_b_9HL0.3,(_f(81) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(220) & RES_b_9HL0.2,(_f(81) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(220) & RES_b_9HL0.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(217) & RES_b_r.3,(_f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(217) & RES_b_r.2,(_f(67) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(217) & RES_b_r.1,(_f(67) => _f(218));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(211) & SET_b_9IY_d0.6,(_f(216) & _f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(211) & SET_b_9IY_d0.5,(_f(81) => _f(215));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(211) & SET_b_9IY_d0.4,(_f(81) => _f(214));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(211) & SET_b_9IY_d0.3,(_f(81) => _f(213));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(211) & SET_b_9IY_d0.2,(_f(81) => _f(212));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(211) & SET_b_9IY_d0.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(205) & SET_b_9IX_d0.6,(_f(210) & _f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(205) & SET_b_9IX_d0.5,(_f(81) => _f(209));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(205) & SET_b_9IX_d0.4,(_f(81) => _f(208));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(205) & SET_b_9IX_d0.3,(_f(81) => _f(207));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(205) & SET_b_9IX_d0.2,(_f(81) => _f(206));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(205) & SET_b_9IX_d0.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(199) & SET_b_9HL0.6,(_f(204) & _f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(199) & SET_b_9HL0.5,(_f(81) => _f(203));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(199) & SET_b_9HL0.4,(_f(81) => _f(202));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(199) & SET_b_9HL0.3,(_f(81) => _f(201));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(199) & SET_b_9HL0.2,(_f(81) => _f(200));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(199) & SET_b_9HL0.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(196) & SET_b_r.3,(_f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(196) & SET_b_r.2,(_f(67) => _f(198));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(196) & SET_b_r.1,(_f(67) => _f(197));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(193) & BIT_b_9IY_d0.3,(_f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(193) & BIT_b_9IY_d0.2,(_f(67) => _f(195));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(193) & BIT_b_9IY_d0.1,(_f(67) => _f(194));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(190) & BIT_b_9IX_d0.3,(_f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(190) & BIT_b_9IX_d0.2,(_f(67) => _f(192));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(190) & BIT_b_9IX_d0.1,(_f(67) => _f(191));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(187) & BIT_b_9HL0.3,(_f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(187) & BIT_b_9HL0.2,(_f(67) => _f(189));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(187) & BIT_b_9HL0.1,(_f(67) => _f(188));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(182) & BIT_b_rr.3,(_f(185) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(182) & BIT_b_rr.2,(_f(67) => _f(184));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(182) & BIT_b_rr.1,(_f(67) => _f(183));
  _f(1) & _f(2) & _f(3) & _f(66) & RRD.6,(_f(181) & _f(67) => _f(179));
  _f(1) & _f(2) & _f(3) & _f(66) & RRD.5,(_f(181) & _f(67) => _f(178));
  _f(1) & _f(2) & _f(3) & _f(66) & RRD.4,(_f(180) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & RRD.3,(_f(180) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & RRD.2,(_f(180) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & RRD.1,(_f(180) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & RLD.6,(_f(177) & _f(67) => _f(179));
  _f(1) & _f(2) & _f(3) & _f(66) & RLD.5,(_f(177) & _f(67) => _f(178));
  _f(1) & _f(2) & _f(3) & _f(66) & RLD.4,(_f(176) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & RLD.3,(_f(176) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & RLD.2,(_f(176) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & RLD.1,(_f(176) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(171) & SRL_9IY_d9.6,(_f(173) & _f(67) => _f(175));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(171) & SRL_9IY_d9.5,(_f(173) & _f(67) => _f(174));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(171) & SRL_9IY_d9.4,(_f(172) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(171) & SRL_9IY_d9.3,(_f(172) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(171) & SRL_9IY_d9.2,(_f(172) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(171) & SRL_9IY_d9.1,(_f(172) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(166) & SRL_9IX_d9.6,(_f(168) & _f(67) => _f(170));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(166) & SRL_9IX_d9.5,(_f(168) & _f(67) => _f(169));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(166) & SRL_9IX_d9.4,(_f(167) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(166) & SRL_9IX_d9.3,(_f(167) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(166) & SRL_9IX_d9.2,(_f(167) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(166) & SRL_9IX_d9.1,(_f(167) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & SRL_9HL0.6,(_f(163) & _f(67) => _f(165));
  _f(1) & _f(2) & _f(3) & _f(66) & SRL_9HL0.5,(_f(163) & _f(67) => _f(164));
  _f(1) & _f(2) & _f(3) & _f(66) & SRL_9HL0.4,(_f(162) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & SRL_9HL0.3,(_f(162) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & SRL_9HL0.2,(_f(162) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & SRL_9HL0.1,(_f(162) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(158) & SRL_r.2,(_f(159) & _f(67) => _f(161));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(158) & SRL_r.1,(_f(159) & _f(67) => _f(160));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(155) & SRA_9IY_d9.6,(_f(157) & _f(67) => _f(134));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(155) & SRA_9IY_d9.5,(_f(157) & _f(67) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(155) & SRA_9IY_d9.4,(_f(156) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(155) & SRA_9IY_d9.3,(_f(156) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(155) & SRA_9IY_d9.2,(_f(156) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(155) & SRA_9IY_d9.1,(_f(156) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(152) & SRA_9IX_d9.6,(_f(154) & _f(67) => _f(129));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(152) & SRA_9IX_d9.5,(_f(154) & _f(67) => _f(128));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(152) & SRA_9IX_d9.4,(_f(153) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(152) & SRA_9IX_d9.3,(_f(153) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(152) & SRA_9IX_d9.2,(_f(153) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(152) & SRA_9IX_d9.1,(_f(153) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & SRA_9HL0.6,(_f(151) & _f(67) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(66) & SRA_9HL0.5,(_f(151) & _f(67) => _f(123));
  _f(1) & _f(2) & _f(3) & _f(66) & SRA_9HL0.4,(_f(150) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & SRA_9HL0.3,(_f(150) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & SRA_9HL0.2,(_f(150) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & SRA_9HL0.1,(_f(150) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(148) & SRA_r.2,(_f(149) & _f(67) => _f(120));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(148) & SRA_r.1,(_f(149) & _f(67) => _f(119));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(147) & SLA_9IY_d9.6,(_f(144) & _f(67) => _f(98));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(147) & SLA_9IY_d9.5,(_f(144) & _f(67) => _f(97));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(147) & SLA_9IY_d9.4,(_f(143) & _f(81) => _f(115));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(147) & SLA_9IY_d9.3,(_f(143) & _f(81) => _f(114));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(147) & SLA_9IY_d9.2,(_f(143) & _f(81) => _f(113));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(147) & SLA_9IY_d9.1,(_f(143) & _f(81) => _f(112));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(146) & SLA_9IX_d9.6,(_f(141) & _f(67) => _f(93));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(146) & SLA_9IX_d9.5,(_f(141) & _f(67) => _f(92));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(146) & SLA_9IX_d9.4,(_f(140) & _f(81) => _f(108));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(146) & SLA_9IX_d9.3,(_f(140) & _f(81) => _f(107));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(146) & SLA_9IX_d9.2,(_f(140) & _f(81) => _f(106));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(146) & SLA_9IX_d9.1,(_f(140) & _f(81) => _f(105));
  _f(1) & _f(2) & _f(3) & _f(66) & SLA_9HL.6,(_f(138) & _f(67) => _f(88));
  _f(1) & _f(2) & _f(3) & _f(66) & SLA_9HL.5,(_f(138) & _f(67) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(66) & SLA_9HL.4,(_f(137) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & SLA_9HL.3,(_f(137) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & SLA_9HL.2,(_f(137) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & SLA_9HL.1,(_f(137) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(145) & SLA_r.2,(_f(136) & _f(67) => _f(79));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(145) & SLA_r.1,(_f(136) & _f(67) => _f(78));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(142) & RR_9IY_d9.6,(_f(144) & _f(67) => _f(134));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(142) & RR_9IY_d9.5,(_f(144) & _f(67) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(142) & RR_9IY_d9.4,(_f(143) & _f(81) => _f(115));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(142) & RR_9IY_d9.3,(_f(143) & _f(81) => _f(114));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(142) & RR_9IY_d9.2,(_f(143) & _f(81) => _f(113));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(142) & RR_9IY_d9.1,(_f(143) & _f(81) => _f(112));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(139) & RR_9IX_d9.6,(_f(141) & _f(67) => _f(129));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(139) & RR_9IX_d9.5,(_f(141) & _f(67) => _f(128));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(139) & RR_9IX_d9.4,(_f(140) & _f(81) => _f(108));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(139) & RR_9IX_d9.3,(_f(140) & _f(81) => _f(107));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(139) & RR_9IX_d9.2,(_f(140) & _f(81) => _f(106));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(139) & RR_9IX_d9.1,(_f(140) & _f(81) => _f(105));
  _f(1) & _f(2) & _f(3) & _f(66) & RR_9HL.6,(_f(138) & _f(67) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(66) & RR_9HL.5,(_f(138) & _f(67) => _f(123));
  _f(1) & _f(2) & _f(3) & _f(66) & RR_9HL.4,(_f(137) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & RR_9HL.3,(_f(137) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & RR_9HL.2,(_f(137) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & RR_9HL.1,(_f(137) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(135) & RR_r.2,(_f(136) & _f(67) => _f(120));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(135) & RR_r.1,(_f(136) & _f(67) => _f(119));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(130) & RRC_9IY_d9.6,(_f(132) & _f(67) => _f(134));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(130) & RRC_9IY_d9.5,(_f(132) & _f(67) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(130) & RRC_9IY_d9.4,(_f(131) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(130) & RRC_9IY_d9.3,(_f(131) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(130) & RRC_9IY_d9.2,(_f(131) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(130) & RRC_9IY_d9.1,(_f(131) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(125) & RRC_9IX_d9.6,(_f(127) & _f(67) => _f(129));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(125) & RRC_9IX_d9.5,(_f(127) & _f(67) => _f(128));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(125) & RRC_9IX_d9.4,(_f(126) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(125) & RRC_9IX_d9.3,(_f(126) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(125) & RRC_9IX_d9.2,(_f(126) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(125) & RRC_9IX_d9.1,(_f(126) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & RRC_9HL0.6,(_f(122) & _f(67) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(66) & RRC_9HL0.5,(_f(122) & _f(67) => _f(123));
  _f(1) & _f(2) & _f(3) & _f(66) & RRC_9HL0.4,(_f(121) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & RRC_9HL0.3,(_f(121) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & RRC_9HL0.2,(_f(121) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & RRC_9HL0.1,(_f(121) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(117) & RRC_r.2,(_f(118) & _f(67) => _f(120));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(117) & RRC_r.1,(_f(118) & _f(67) => _f(119));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(110) & RL_9IY_d9.6,(_f(116) & _f(67) => _f(98));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(110) & RL_9IY_d9.5,(_f(116) & _f(67) => _f(97));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(110) & RL_9IY_d9.4,(_f(111) & _f(81) => _f(115));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(110) & RL_9IY_d9.3,(_f(111) & _f(81) => _f(114));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(110) & RL_9IY_d9.2,(_f(111) & _f(81) => _f(113));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(110) & RL_9IY_d9.1,(_f(111) & _f(81) => _f(112));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(103) & RL_9IX_d9.6,(_f(109) & _f(67) => _f(93));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(103) & RL_9IX_d9.5,(_f(109) & _f(67) => _f(92));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(103) & RL_9IX_d9.4,(_f(104) & _f(81) => _f(108));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(103) & RL_9IX_d9.3,(_f(104) & _f(81) => _f(107));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(103) & RL_9IX_d9.2,(_f(104) & _f(81) => _f(106));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(103) & RL_9IX_d9.1,(_f(104) & _f(81) => _f(105));
  _f(1) & _f(2) & _f(3) & _f(66) & RL_9HL.6,(_f(102) & _f(67) => _f(88));
  _f(1) & _f(2) & _f(3) & _f(66) & RL_9HL.5,(_f(102) & _f(67) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(66) & RL_9HL.4,(_f(101) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & RL_9HL.3,(_f(101) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & RL_9HL.2,(_f(101) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & RL_9HL.1,(_f(101) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(99) & RL_r.2,(_f(100) & _f(67) => _f(79));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(99) & RL_r.1,(_f(100) & _f(67) => _f(78));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(94) & RLC_9IY_d9.6,(_f(96) & _f(67) => _f(98));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(94) & RLC_9IY_d9.5,(_f(96) & _f(67) => _f(97));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(94) & RLC_9IY_d9.4,(_f(95) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(94) & RLC_9IY_d9.3,(_f(95) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(94) & RLC_9IY_d9.2,(_f(95) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(94) & RLC_9IY_d9.1,(_f(95) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(89) & RLC_9IX_d9.6,(_f(91) & _f(67) => _f(93));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(89) & RLC_9IX_d9.5,(_f(91) & _f(67) => _f(92));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(89) & RLC_9IX_d9.4,(_f(90) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(89) & RLC_9IX_d9.3,(_f(90) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(89) & RLC_9IX_d9.2,(_f(90) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(89) & RLC_9IX_d9.1,(_f(90) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & RLC_9HL0.6,(_f(86) & _f(67) => _f(88));
  _f(1) & _f(2) & _f(3) & _f(66) & RLC_9HL0.5,(_f(86) & _f(67) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(66) & RLC_9HL0.4,(_f(80) & _f(81) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & RLC_9HL0.3,(_f(80) & _f(81) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & RLC_9HL0.2,(_f(80) & _f(81) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(66) & RLC_9HL0.1,(_f(80) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(76) & RLC_r.2,(_f(77) & _f(67) => _f(79));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(76) & RLC_r.1,(_f(77) & _f(67) => _f(78));
  _f(1) & _f(2) & _f(3) & _f(66) & RRA.2,(_f(67) => _f(75));
  _f(1) & _f(2) & _f(3) & _f(66) & RRA.1,(_f(67) => _f(74));
  _f(1) & _f(2) & _f(3) & _f(66) & RRCA.2,(_f(67) => _f(73));
  _f(1) & _f(2) & _f(3) & _f(66) & RRCA.1,(_f(67) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & RLA.2,(_f(67) => _f(71));
  _f(1) & _f(2) & _f(3) & _f(66) & RLA.1,(_f(67) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(66) & RLCA.2,(_f(67) => _f(69));
  _f(1) & _f(2) & _f(3) & _f(66) & RLCA.1,(_f(67) => _f(68));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.30,(_f(64) => _f(65));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.29,(_f(62) => _f(63));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.28,(_f(60) => _f(61));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.27,(_f(58) => _f(59));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.26,(_f(56) => _f(57));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.25,(_f(54) => _f(55));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.24,(_f(52) => _f(53));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.23,(_f(50) => _f(51));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.22,(_f(48) => _f(49));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.21,(_f(46) => _f(47));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.20,(_f(44) => _f(45));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.19,(_f(42) => _f(43));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.18,(_f(40) => _f(41));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.17,(_f(38) => _f(39));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.16,(_f(36) => _f(37));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.15,(_f(34) => _f(35));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.14,(_f(32) => _f(33));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.13,(_f(30) => _f(31));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.12,(_f(28) => _f(29));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.11,(_f(26) => _f(27));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.10,(_f(24) => _f(25));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.9,(_f(22) => _f(23));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.8,(_f(20) => _f(21));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.7,(_f(18) => _f(19));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.6,(_f(16) => _f(17));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.5,(_f(14) => _f(15));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.4,(_f(9) & _f(12) => _f(13));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.3,(_f(9) & _f(10) => _f(11));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.2,(_f(4) & _f(7) => _f(8));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.1,(_f(4) & _f(5) => _f(6))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & SCHAR_LENGTH: INTEGER & 0<=SCHAR_LENGTH & SCHAR_LENGTH = 8 & NB_SCHARS: INTEGER & 0<=NB_SCHARS & NB_SCHARS = 2**SCHAR_LENGTH & SCHAR = -128..127 & SCHAR_POSITION = 0..SCHAR_LENGTH-1 & UCHAR = 0..255 & SSHORTINT_LENGTH: INTEGER & 0<=SSHORTINT_LENGTH & SSHORTINT_LENGTH = 16 & NB_SSHORTINTS: INTEGER & 0<=NB_SSHORTINTS & NB_SSHORTINTS = 2**SSHORTINT_LENGTH & SSHORTINT = -32768..32767 & SSHORTINT_POSITION = 0..SSHORTINT_LENGTH-1 & BV16: POW(BIT_VECTOR) & BV16 = SET(vv).(vv: BIT_VECTOR & size(vv) = SSHORTINT_LENGTH) & BYTE_TO_UCHAR: BYTE +-> UCHAR & dom(BYTE_TO_UCHAR) = BYTE & BYTE_TO_UCHAR = %v0.(v0: BYTE | 128*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & UCHAR_TO_BYTE: UCHAR +-> BYTE & dom(UCHAR_TO_BYTE) = UCHAR & UCHAR_TO_BYTE = BYTE_TO_UCHAR~ & USHORTINT = 0..65535 & NB_INSTRUCTIONS: INTEGER & 0<=NB_INSTRUCTIONS & INST_SZ: INTEGER & 0<=INST_SZ & INST_SZ = 16 & NB_INSTRUCTIONS = 2**INST_SZ & INSTRUCTION_MAX = NB_INSTRUCTIONS-1 & INSTRUCTION = USHORTINT & INSTRUCTION_NEXT: USHORTINT +-> USHORTINT & dom(INSTRUCTION_NEXT) = USHORTINT & INSTRUCTION_NEXT = %w1.(w1: USHORTINT | (w1+1) mod 65535) & INSTRUCTION_JUMP = %(p0,e0).(p0: INSTRUCTION & e0: -126..129 | (p0+e0) mod 65535) & BYTE_TO_SCHAR: BYTE +-> SCHAR & dom(BYTE_TO_SCHAR) = BYTE & BYTE_TO_SCHAR = %v0.(v0: BYTE | (-128)*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & SCHAR_TO_BYTE: SCHAR +-> BYTE & dom(SCHAR_TO_BYTE) = SCHAR & SCHAR_TO_BYTE = BYTE_TO_SCHAR~ & BV16_TO_SSHORTINT: BV16 +-> SSHORTINT & dom(BV16_TO_SSHORTINT) = BV16 & BV16_TO_SSHORTINT = %v0.(v0: BV16 | (-32768)*v0(15)+16384*v0(14)+8192*v0(13)+4096*v0(12)+2048*v0(11)+1024*v0(10)+512*v0(9)+256*v0(8)+128*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & SSHORTINT_TO_BV16: SSHORTINT +-> BV16 & dom(SSHORTINT_TO_BV16) = SSHORTINT & SSHORTINT_TO_BV16 = BV16_TO_SSHORTINT~ & BYTE_TO_BV16: BYTE*BYTE +-> BV16 & dom(BYTE_TO_BV16) = BYTE*BYTE & BYTE_TO_BV16 = %(v1,v2).(v1: BV16 & v2: BV16 | {0|->v2(0)}\/{1|->v2(1)}\/{2|->v2(2)}\/{3|->v2(3)}\/{4|->v2(4)}\/{5|->v2(5)}\/{6|->v2(6)}\/{7|->v2(7)}\/{8|->v1(0)}\/{9|->v1(1)}\/{10|->v1(2)}\/{11|->v1(3)}\/{12|->v1(4)}\/{13|->v1(5)}\/{14|->v1(6)}\/{15|->v1(7)}) & BV16_TO_BYTE: BV16 +-> BYTE*BYTE & dom(BV16_TO_BYTE) = BV16 & BV16_TO_BYTE = BYTE_TO_BV16~ & SCHAR_TO_SSHORTINT: SCHAR*SCHAR +-> SSHORTINT & dom(SCHAR_TO_SSHORTINT) = SCHAR*SCHAR & SCHAR_TO_SSHORTINT = %(w1,w2).(w1: SCHAR & w2: SCHAR | BV16_TO_SSHORTINT(BYTE_TO_BV16(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))) & SSHORTINT_TO_SCHAR: SSHORTINT +-> SCHAR*SCHAR & dom(SSHORTINT_TO_SCHAR) = SSHORTINT & SSHORTINT_TO_SCHAR = SCHAR_TO_SSHORTINT~ & BV16_TO_USHORTINT: BV16 +-> USHORTINT & dom(BV16_TO_USHORTINT) = BV16 & BV16_TO_USHORTINT = %v0.(v0: BV16 | 32768*v0(15)+16384*v0(14)+8192*v0(13)+4096*v0(12)+2048*v0(11)+1024*v0(10)+512*v0(9)+256*v0(8)+128*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & USHORTINT_TO_BV16: USHORTINT +-> BV16 & dom(USHORTINT_TO_BV16) = USHORTINT & USHORTINT_TO_BV16 = BV16_TO_USHORTINT~ & parity_bit_from_BYTE: BIT_VECTOR +-> BIT & dom(parity_bit_from_BYTE) = BIT_VECTOR & parity_bit_from_BYTE = %bv.(bv: BIT_VECTOR | SIGMA(idx).(idx: dom(bv) | bv(idx)) mod 2) & SSHORTINT_TO_USHORTINT: SSHORTINT +-> USHORTINT & dom(SSHORTINT_TO_USHORTINT) = SSHORTINT & SSHORTINT_TO_USHORTINT = %v0.(v0: SSHORTINT | v0-32768) & USHORTINT_TO_SSHORTINT: USHORTINT +-> SSHORTINT & dom(USHORTINT_TO_SSHORTINT) = USHORTINT & USHORTINT_TO_SSHORTINT = SSHORTINT_TO_USHORTINT~ & BIT = 0..1 & bit_not: BIT +-> BIT & dom(bit_not) = BIT & !bb.(bb: BIT => bit_not(bb) = 1-bb) & bit_and: BIT*BIT +-> BIT & dom(bit_and) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_and(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_and(b1,b2) = 1) & b2 = 1) & bit_or: BIT*BIT +-> BIT & dom(bit_or) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_or(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_or(b1,b2) = 1) or b2 = 1) & bit_xor: BIT*BIT +-> BIT & dom(bit_xor) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_xor(b1,b2) = 1 => not(b1 = b2)) & (not(b1 = b2) => bit_xor(b1,b2) = 1)) & bool_to_bit: BOOL +-> BIT & dom(bool_to_bit) = BOOL & bool_to_bit = {TRUE|->1}\/{FALSE|->0} & BIT_VECTOR = SET(bt).(bt: NATURAL +-> BIT)-{{}} & bv_size: BIT_VECTOR +-> NATURAL-{0} & dom(bv_size) = BIT_VECTOR & bv_size = %bv.(bv: BIT_VECTOR | size(bv)) & BV_INDX: BIT_VECTOR +-> POW(NATURAL) & dom(BV_INDX) = BIT_VECTOR & BV_INDX = %bv.(bv: BIT_VECTOR | 0..bv_size(bv)-1) & bv_catenate: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_catenate) = BIT_VECTOR*BIT_VECTOR & bv_catenate = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR | v1^v2) & bv_sub: BIT_VECTOR*NATURAL*NATURAL +-> BIT_VECTOR & dom(bv_sub) = BIT_VECTOR*NATURAL*NATURAL & bv_sub = %(bv,low,high).(bv: BIT_VECTOR & low: BV_INDX(bv) & high: BV_INDX(bv) & low<=high | low..high<|bv) & bv_zero: NATURAL-{0} +-> BIT_VECTOR & dom(bv_zero) = NATURAL-{0} & bv_zero = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (0..sz)*{0}) & bv_one: NATURAL-{0} +-> BIT_VECTOR & dom(bv_one) = NATURAL-{0} & bv_one = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (0..sz)*{1}) & bv_not: BIT_VECTOR +-> BIT_VECTOR & dom(bv_not) = BIT_VECTOR & bv_not = %v1.(v1: BIT_VECTOR | %idx.(idx: BV_INDX(v1) | bit_not(v1(idx)))) & bv_and: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_and) = BIT_VECTOR*BIT_VECTOR & bv_and = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: BV_INDX(v1) | bit_and(v1(idx),v2(idx)))) & bv_or: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_or) = BIT_VECTOR*BIT_VECTOR & bv_or = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: BV_INDX(v1) | bit_or(v1(idx),v2(idx)))) & bv_xor: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_xor) = BIT_VECTOR*BIT_VECTOR & bv_xor = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: BV_INDX(v1) | bit_xor(v1(idx),v2(idx)))) & bv_get: BIT_VECTOR*NATURAL +-> BIT & dom(bv_get) = BIT_VECTOR*NATURAL & bv_get = %(v1,idx).(v1: BIT_VECTOR & idx: BV_INDX(v1) | v1(idx)) & bv_set: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_set) = BIT_VECTOR*NATURAL & bv_set = %(v1,idx).(v1: BIT_VECTOR & idx: BV_INDX(v1) | v1<+{idx|->1}) & bv_clear: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_clear) = BIT_VECTOR*NATURAL & bv_clear = %(v1,idx).(v1: BIT_VECTOR & idx: BV_INDX(v1) | v1<+{idx|->0}) & bv_put: BIT_VECTOR*NATURAL*BIT +-> BIT_VECTOR & dom(bv_put) = BIT_VECTOR*NATURAL*BIT & bv_put = %(v1,idx,bit).(v1: BIT_VECTOR & idx: BV_INDX(v1) & bit: BIT | v1<+{idx|->bit}) & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE = SET(bt).(bt: BYTE_INDEX +-> BIT & dom(bt) = BYTE_INDEX & size(bt) = BYTE_WIDTH)-{{}} & BYTE_ZERO: BYTE & BYTE_ZERO = BYTE_INDEX*{0} & is_zero: BYTE +-> BIT & dom(is_zero) = BYTE & is_zero = %w1.(w1: BYTE | bool_to_bit(bool(w1(0)+w1(1)+w1(2)+w1(3)+w1(4)+w1(5)+w1(6)+w1(7) = 0))) & is_zeroUSHORTINT: USHORTINT +-> BIT & dom(is_zeroUSHORTINT) = USHORTINT & is_zeroUSHORTINT = %nat1.(nat1: USHORTINT | bool_to_bit(bool(nat1 = 0))) & is_negative: BYTE +-> BIT & dom(is_negative) = BYTE & is_negative = %w1.(w1: BYTE | w1(7)) & halfSCHAR: SCHAR +-> UCHAR & dom(halfSCHAR) = SCHAR & halfSCHAR = %ww.(ww: SCHAR | (ww+128) mod 16) & add8UCHAR: UCHAR*UCHAR +-> UCHAR & dom(add8UCHAR) = UCHAR*UCHAR & add8UCHAR = %(w1,w2).(w1: UCHAR & w2: UCHAR | (w1+w2) mod 256) & add8SCHAR: BIT*SCHAR*SCHAR +-> SCHAR*BIT*BIT*BIT*BIT & dom(add8SCHAR) = BIT*SCHAR*SCHAR & add8SCHAR = %(carry,w1,w2).(carry: BIT & w1: SCHAR & w2: SCHAR & carry+w1+w2+1<= -128 | 256-(carry+w1+w2),bool_to_bit(bool(carry+w1+w2+1<=0)),1,bool_to_bit(bool(16<=halfSCHAR(carry+w1)+halfSCHAR(w2))),0)\/%(carry,w1,w2).(carry: BIT & w1: SCHAR & w2: SCHAR & not(carry+w1+w2+1<= -128) | (carry+w1+w2) mod 128,bool_to_bit(bool(carry+w1+w2+1<=0)),bool_to_bit(bool(128<=carry+w1+w2)),bool_to_bit(bool(16<=halfSCHAR(w1)+halfSCHAR(w2))),bool_to_bit(bool((carry+w1+w2) mod 128 = 0))) & substract8SCHAR: BIT*SCHAR*SCHAR +-> SCHAR*BIT*BIT*BIT*BIT & dom(substract8SCHAR) = BIT*SCHAR*SCHAR & substract8SCHAR = %(carry,w1,w2).(carry: BIT & w1: SCHAR & w2: SCHAR & carry+w1-w2+1<= -128 | 256-(w1-w2-carry),bool_to_bit(bool(w1-w2-carry+1<=0)),1,bool_to_bit(bool(16<=halfSCHAR(w1)-halfSCHAR(w2))),0)\/%(carry,w1,w2).(carry: BIT & w1: SCHAR & w2: SCHAR & not(carry+w1-w2+1<= -128) | (w1-w2-carry) mod 128,bool_to_bit(bool(w1-w2-carry+1<=0)),bool_to_bit(bool(128<=w1-w2-carry)),bool_to_bit(bool(16<=halfSCHAR(w1)-halfSCHAR(w2))),bool_to_bit(bool((w1-w2-carry) mod 128 = 0))) & add16USHORTINT: BIT*USHORTINT*USHORTINT +-> USHORTINT & dom(add16USHORTINT) = BIT*USHORTINT*USHORTINT & add16USHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | (b1+w1+w2) mod 65536) & add_carryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(add_carryUSHORTINT) = BIT*USHORTINT*USHORTINT & add_carryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**16+1<=b1+w1+w2))) & add_halfcarryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(add_halfcarryUSHORTINT) = BIT*USHORTINT*USHORTINT & add_halfcarryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**12+1<=b1+w1 mod 2**12+w2 mod 2**12))) & sub16USHORTINT: BIT*USHORTINT*USHORTINT +-> USHORTINT & dom(sub16USHORTINT) = BIT*USHORTINT*USHORTINT & sub16USHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | (w1-w2-b1) mod 65536) & sub_carryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(sub_carryUSHORTINT) = BIT*USHORTINT*USHORTINT & sub_carryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**16+1<=w1-w2-b1))) & sub_halfcarryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(sub_halfcarryUSHORTINT) = BIT*USHORTINT*USHORTINT & sub_halfcarryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**12+1<=w1 mod 2**12-w2 mod 2**12-b1))) & inc_BYTE: BYTE +-> BYTE & dom(inc_BYTE) = BYTE & inc_BYTE = %w1.(w1: BYTE | UCHAR_TO_BYTE((BYTE_TO_UCHAR(w1)+1) mod 256)) & dec_BYTE: BYTE +-> BYTE & dom(dec_BYTE) = BYTE & dec_BYTE = %w1.(w1: BYTE | UCHAR_TO_BYTE((BYTE_TO_UCHAR(w1)-1) mod 256)) & inc_BV16: BV16 +-> BV16 & dom(inc_BV16) = BV16 & inc_BV16 = %w1.(w1: BV16 | USHORTINT_TO_BV16((BV16_TO_USHORTINT(w1)+1) mod 65536)) & dec_BV16: BYTE +-> BYTE & dom(dec_BV16) = BYTE & dec_BV16 = %w1.(w1: BV16 | USHORTINT_TO_BV16((BV16_TO_USHORTINT(w1)-1) mod 65536)) & parity_even_BYTE: BIT_VECTOR +-> BIT & dom(parity_even_BYTE) = BIT_VECTOR & parity_even_BYTE = %bv.(bv: BIT_VECTOR | 1-SIGMA(idx).(idx: dom(bv) | bv(idx)) mod 2) & and: BYTE*BYTE +-> BYTE & dom(and) = BYTE*BYTE & and = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_and(bt1,bt2)) & ior: BYTE*BYTE +-> BYTE & dom(ior) = BYTE*BYTE & ior = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_or(bt1,bt2)) & xor: BYTE*BYTE +-> BYTE & dom(xor) = BYTE*BYTE & xor = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_xor(bt1,bt2)) & bitget: BYTE*BYTE_INDEX +-> BIT & dom(bitget) = BYTE*BYTE_INDEX & bitget = %(bt1,ii).(bt1: BYTE & ii: BYTE_INDEX | bt1(ii)) & bitset: BYTE*BYTE_INDEX +-> BYTE & dom(bitset) = BYTE*BYTE_INDEX & !(ww,ii).(ww: BYTE & ii: BYTE_INDEX => bitset(ww,ii) = bv_set(ww,ii)) & bitclear: BYTE*BYTE_INDEX +-> BYTE & dom(bitclear) = BYTE*BYTE_INDEX & !(ww,ii,bb).(ww: BYTE & ii: BYTE_INDEX & bb: BIT => bitclear(ww,ii) = bv_clear(ww,ii)) & complement: BYTE +-> BYTE & dom(complement) = BYTE & complement = %bt.(bt: BYTE | bv_not(bt)) & swap: BYTE +-> BYTE & dom(swap) = BYTE & swap = %bt.(bt: BYTE | {0|->bt(4)}\/{1|->bt(5)}\/{2|->bt(6)}\/{3|->bt(7)}\/{4|->bt(0)}\/{5|->bt(1)}\/{6|->bt(2)}\/{7|->bt(3)}) & rotateleft: BYTE +-> BYTE & dom(rotateleft) = BYTE & rotateleft = %bv.(bv: BYTE | {0|->bv(7)}\/{1|->bv(0)}\/{2|->bv(1)}\/{3|->bv(2)}\/{4|->bv(3)}\/{5|->bv(4)}\/{6|->bv(5)}\/{7|->bv(6)}) & rotateright: BYTE +-> BYTE & dom(rotateright) = BYTE & rotateright = %bv.(bv: BYTE | {0|->bv(1)}\/{1|->bv(2)}\/{2|->bv(3)}\/{3|->bv(4)}\/{4|->bv(5)}\/{5|->bv(6)}\/{6|->bv(7)}\/{7|->bv(0)}) & "`Component properties'" & get_bv_reg16: BV16*((1..18)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & dom(get_bv_reg16) = BV16*((1..18)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) & !(sp_,rgs8_,r1).(sp_: BV16 & (rgs8_: (1..18)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..18)*{id_reg_8}) & r1: (1..5)*{id_reg_16} => (r1 = 1|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = BYTE_TO_BV16(rgs8_(5|->id_reg_8),rgs8_(6|->id_reg_8))) & (r1 = 2|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = BYTE_TO_BV16(rgs8_(9|->id_reg_8),rgs8_(10|->id_reg_8))) & (r1 = 3|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = BYTE_TO_BV16(rgs8_(13|->id_reg_8),rgs8_(14|->id_reg_8))) & (r1 = 4|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = sp_) & (r1 = 5|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = BYTE_TO_BV16(rgs8_(1|->id_reg_8),rgs8_(2|->id_reg_8)))) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..18)*{id_reg_8}*((1..18)*{id_reg_8}) & dom(REG16_TO_REG8) = (1..5)*{id_reg_16} & !r1.(r1: (1..5)*{id_reg_16} => (r1 = 1|->id_reg_16 => REG16_TO_REG8(r1) = 5|->id_reg_8|->(6|->id_reg_8)) & (r1 = 2|->id_reg_16 => REG16_TO_REG8(r1) = 9|->id_reg_8|->(10|->id_reg_8)) & (r1 = 3|->id_reg_16 => REG16_TO_REG8(r1) = 13|->id_reg_8|->(14|->id_reg_8)) & (r1 = 5|->id_reg_16 => REG16_TO_REG8(r1) = 1|->id_reg_8|->(2|->id_reg_8))) & REG8_TO_REG16 = REG16_TO_REG8~ & update_flag_register_SZ_H_PvNC = %(rgs8_$0,s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(rgs8_$0: (1..18)*{id_reg_8} +-> BYTE & dom(rgs8_$0) = (1..18)*{id_reg_8} & s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | rgs8_$0<+{2|->id_reg_8|->({7|->s7$0}\/{6|->z6$0}\/{4|->h4$0}\/{2|->pv2$0}\/{1|->n_add_sub$0}\/{0|->c0$0})}) & get_new_flag_register_SZ_H_PvNC = %(rgs8_$0,s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(rgs8_$0: (1..18)*{id_reg_8} +-> BYTE & dom(rgs8_$0) = (1..18)*{id_reg_8} & s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->({7|->s7$0}\/{6|->z6$0}\/{4|->h4$0}\/{2|->pv2$0}\/{1|->n_add_sub$0}\/{0|->c0$0})) & bv_IX_plus_d = %(ix,desloc).(ix: BV16 & desloc: SCHAR | USHORTINT_TO_BV16(BV16_TO_USHORTINT(ix)+desloc)) & bv_IY_plus_d = %(iy,desloc).(iy: BV16 & desloc: SCHAR | USHORTINT_TO_BV16(BV16_TO_USHORTINT(iy)+desloc)) & bv_9IX_plus_d0 = %(mem,ix,desloc).(mem: BV16 +-> BYTE & dom(mem) = BV16 & ix: BV16 & desloc: SCHAR | mem(USHORTINT_TO_BV16((BV16_TO_USHORTINT(ix)+desloc) mod 65536))) & bv_9IY_plus_d0 = %(mem,iy,desloc).(mem: BV16 +-> BYTE & dom(mem) = BV16 & iy: BV16 & desloc: SCHAR | mem(USHORTINT_TO_BV16((BV16_TO_USHORTINT(iy)+desloc) mod 65536))) & (1..18)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..18)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}));
  ("`Included,imported and extended machines invariants'" & stack: BV16 +-> BYTE & stack~: BYTE +-> BV16 & dom(stack) = BV16 & mem: BV16 +-> BYTE & mem~: BYTE +-> BV16 & dom(mem) = BV16 & "`Included,imported and extended machines assertions'" & ran(stack): POW(BYTE) & ran(mem): POW(BYTE) & "`Seen and used machines assertions'" & NB_SCHARS = 256 & !n0.(n0: SCHAR => 0<=n0) & !n0.(n0: SCHAR => n0<=255) & 2**16 = 65536 & INSTRUCTION_NEXT: USHORTINT +-> USHORTINT & dom(INSTRUCTION_NEXT) = USHORTINT & 0 = SCHAR_TO_SSHORTINT(0,0) & !xx.(xx: BYTE => BYTE_TO_UCHAR(xx): UCHAR) & !xx.(xx: UCHAR => UCHAR_TO_BYTE(xx): BYTE) & !xx.(xx: BYTE => BYTE_TO_SCHAR(xx): SCHAR) & !xx.(xx: SCHAR => SCHAR_TO_BYTE(xx): BYTE) & !(xx,yy).(xx: BYTE & yy: BYTE => BYTE_TO_BV16(xx,yy): BV16) & !(xx,yy).(xx: BYTE & yy: BYTE => #zz.(zz: BV16 & BYTE_TO_BV16(xx,yy) = zz)) & !xx.(xx: BV16 => BV16_TO_USHORTINT(xx): USHORTINT) & !xx.(xx: USHORTINT => USHORTINT_TO_BV16(xx): BV16) & bit_not(0) = 1 & bit_not(1) = 0 & !bb.(bb: BIT => bit_not(bit_not(bb)) = bb) & bit_and(0,0) = 0 & bit_and(0,1) = 0 & bit_and(1,0) = 0 & bit_and(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 1 => bit_and(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 0 => bit_and(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3)) & !b1.(b1: BIT => bit_and(b1,1) = b1) & !b1.(b1: BIT => bit_and(b1,0) = 0) & bit_or(0,0) = 0 & bit_or(0,1) = 1 & bit_or(1,0) = 1 & bit_or(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 1 => bit_or(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 0 => bit_or(b2,b1) = 0) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 1 => b1 = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 0 => b1 = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3)) & !b1.(b1: BIT => bit_or(b1,1) = 1) & !b1.(b1: BIT => bit_or(b1,0) = b1) & !b1.(b1: BIT => bit_or(1,b1) = 1) & !b1.(b1: BIT => bit_or(0,b1) = b1) & bit_xor(0,0) = 0 & bit_xor(0,1) = 1 & bit_xor(1,0) = 1 & bit_xor(1,1) = 0 & !(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 1 => bit_xor(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 0 => bit_xor(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3)) & !bb.(bb: BIT => bit_xor(bb,bb) = 0) & bool_to_bit(TRUE) = 1 & bool_to_bit(FALSE) = 0 & !bb.(bb: BIT => bb = 0 or bb = 1) & !bb.(bb: BIT & not(bb = 0) => bb = 1) & !bb.(bb: BIT & not(bb = 1) => bb = 0) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_xor(bv,bv)(indx) = bv_zero(bv_size(bv))(indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: BV_INDX(v1) => bv_xor(v1,v2)(indx) = bv_xor(v2,v1)(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v2)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_or(bv,bv_zero(bv_size(bv)))(indx) = bv(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_or(bv,bv_one(bv_size(bv)))(indx) = bv_one(bv_size(bv))(indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: BV_INDX(v1) => bv_or(v1,bv_or(v2,v3))(indx) = bv_or(bv_or(v1,v2),v3)(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v2)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: BV_INDX(v1) => bv_or(v1,v2)(indx) = bv_or(v2,v1)(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_and(bv,bv_one(bv_size(bv)))(indx) = bv(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_and(bv,bv_zero(bv_size(bv)))(indx) = bv_zero(bv_size(bv))(indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: BV_INDX(v1) => bv_and(v1,bv_and(v2,v3))(indx) = bv_and(bv_and(v1,v2),v3)(indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: BV_INDX(v1) => bv_and(v1,v2)(indx) = bv_and(v2,v1)(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_and(v1,v2)) = bv_size(v2)) & !(bv,low,high).(bv: BIT_VECTOR & low: BV_INDX(bv) & high: BV_INDX(bv) & low<=high => bv_size(bv_sub(bv,low,high)) = high-low) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR => bv_size(bv_catenate(v1,v2)) = bv_size(v1)+bv_size(v2)) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_not(bv_not(bv))(indx) = bv(indx)) & !bv.(bv: BIT_VECTOR => bv_size(bv_not(bv)) = bv_size(bv)) & !bt.(bt: BYTE => size(bt) = 8) & size(BYTE_ZERO) = 8 & BYTE: POW(BIT_VECTOR) & BYTE_ZERO: BIT_VECTOR & first(BYTE_ZERO) = 0 & dom(add8SCHAR) = BIT*SCHAR*SCHAR & ran(add8SCHAR): POW(SCHAR*BIT*BIT*BIT*BIT) & dom(substract8SCHAR) = BIT*SCHAR*SCHAR & ran(substract8SCHAR): POW(SCHAR*BIT*BIT*BIT*BIT) & dom(and) = BYTE*BYTE & ran(and): POW(BYTE) & dom(ior) = BYTE*BYTE & ran(ior): POW(BYTE) & dom(xor) = BYTE*BYTE & ran(xor): POW(BYTE) & dom(complement) = BYTE & ran(complement): POW(BYTE) & dom(swap) = BYTE & ran(swap): POW(BYTE) & dom(rotateleft) = BYTE & ran(rotateleft): POW(BYTE) & dom(rotateright) = BYTE & ran(rotateright): POW(BYTE) & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(vec,in0) = vec(in0)) & !(xx,yy).(xx: INTEGER & yy: INTEGER => xx mod yy+1<=yy & 0<=xx mod yy) & 2**15 = 32768 & 2**14 = 16384 & 2**13 = 8192 & 2**12 = 4096 & 2**11 = 2048 & 2**10 = 1024 & 2**9 = 512 & 2**8 = 256 & 2**7 = 128 & 2**6 = 64 & 2**5 = 32 & 2**4 = 16 & 2**3 = 8 & 2**2 = 4 & 2**1 = 2 & 2**0 = 1);
  ("`Component invariant'" & stack: BV16 +-> BYTE & dom(stack) = BV16 & rgs8: (1..18)*{id_reg_8} +-> BYTE & dom(rgs8) = (1..18)*{id_reg_8} & pc: INSTRUCTION & sp: BV16 & ix: BV16 & iy: BV16 & i_o_ports: BYTE +-> BYTE & dom(i_o_ports) = BYTE);
  ("`Local hypotheses'" & mmm: BV16 +-> BYTE & mmm~: BYTE +-> BV16 & dom(mmm) = BV16 & ii: BV16 & des: SCHAR);
  "`Check assertion (!(mmm,ii,des).(mmm: BV16 >-> BYTE & ii: BV16 & des: SCHAR => bv_9IY_plus_d0(mmm,ii,des): BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_9IY_plus_d0(mmm,ii,des): BYTE);
  "`Check assertion (!(mmm,ii,des).(mmm: BV16 >-> BYTE & ii: BV16 & des: SCHAR => bv_9IX_plus_d0(mmm,ii,des): BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_9IX_plus_d0(mmm,ii,des): BYTE);
  ("`Local hypotheses'" & ii: BV16 & des: SCHAR);
  "`Check assertion (!(ii,des).(ii: BV16 & des: SCHAR => bv_IY_plus_d(ii,des): BV16)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_IY_plus_d(ii,des): BV16);
  "`Check assertion (!(ii,des).(ii: BV16 & des: SCHAR => bv_IX_plus_d(ii,des): BV16)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_IX_plus_d(ii,des): BV16);
  "`Check assertion (mem(iy): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(iy): BYTE);
  "`Check assertion (mem(ix): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(ix): BYTE);
  "`Check assertion (mem(sp): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(sp): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(a0),rgs8(f0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(rgs8(a0),rgs8(f0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(h0),rgs8(l0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(rgs8(h0),rgs8(l0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(d0),rgs8(e0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(rgs8(d0),rgs8(e0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(b0),rgs8(c0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(rgs8(b0),rgs8(c0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
  "`Check assertion (INSTRUCTION_NEXT(13) = 14) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(13) = 14);
  "`Check assertion (INSTRUCTION_NEXT(12) = 13) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(12) = 13);
  "`Check assertion (INSTRUCTION_NEXT(11) = 12) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(11) = 12);
  "`Check assertion (INSTRUCTION_NEXT(10) = 11) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(10) = 11);
  "`Check assertion (INSTRUCTION_NEXT(9) = 10) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(9) = 10);
  "`Check assertion (INSTRUCTION_NEXT(8) = 9) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(8) = 9);
  "`Check assertion (INSTRUCTION_NEXT(7) = 8) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(7) = 8);
  "`Check assertion (INSTRUCTION_NEXT(6) = 7) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(6) = 7);
  "`Check assertion (INSTRUCTION_NEXT(5) = 6) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(5) = 6);
  "`Check assertion (INSTRUCTION_NEXT(4) = 5) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(4) = 5);
  "`Check assertion (INSTRUCTION_NEXT(3) = 4) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(3) = 4);
  "`Check assertion (INSTRUCTION_NEXT(2) = 3) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(2) = 3);
  "`Check assertion (INSTRUCTION_NEXT(1) = 2) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(1) = 2);
  "`Check assertion (INSTRUCTION_NEXT(0) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(0) = 1);
  "`Check assertion (ran(rgs8) <: BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (ran(rgs8): POW(BYTE));
  ("`Component assertions'" & dom(stack) = BV16 & ran(stack): POW(BYTE) & ran(mem): POW(BYTE) & dom(mem) = BV16 & ran(rgs8): POW(BYTE) & dom(rgs8) = (1..18)*{id_reg_8} & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & mem(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(BYTE_TO_BV16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & !(ii,des).(ii: BV16 & des: SCHAR => bv_IX_plus_d(ii,des): BV16) & !(ii,des).(ii: BV16 & des: SCHAR => bv_IY_plus_d(ii,des): BV16) & !(mmm,ii,des).(mmm: BV16 +-> BYTE & mmm~: BYTE +-> BV16 & dom(mmm) = BV16 & ii: BV16 & des: SCHAR => bv_9IX_plus_d0(mmm,ii,des): BYTE) & !(mmm,ii,des).(mmm: BV16 +-> BYTE & mmm~: BYTE +-> BV16 & dom(mmm) = BV16 & ii: BV16 & des: SCHAR => bv_9IY_plus_d0(mmm,ii,des): BYTE));
  "`Check that the invariant (rgs8: id_reg_8 --> BYTE) is preserved by the operation - ref 3.4'";
  (rgs8<+({1|->id_reg_8|->rotateleft(rgs8(1|->id_reg_8))}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),7))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->rotateleft(rgs8(1|->id_reg_8))}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),7))})) = (1..18)*{id_reg_8});
  (rgs8<+({1|->id_reg_8|->(rotateleft(rgs8(1|->id_reg_8))<+{0|->bitget(rgs8(2|->id_reg_8),0)})}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),7))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->(rotateleft(rgs8(1|->id_reg_8))<+{0|->bitget(rgs8(2|->id_reg_8),0)})}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),7))})) = (1..18)*{id_reg_8});
  (rgs8<+({1|->id_reg_8|->rotateright(rgs8(1|->id_reg_8))}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),0))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->rotateright(rgs8(1|->id_reg_8))}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),0))})) = (1..18)*{id_reg_8});
  (rgs8<+({1|->id_reg_8|->(rotateright(rgs8(1|->id_reg_8))<+{0|->bitget(rgs8(2|->id_reg_8),0)})}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),0))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->(rotateright(rgs8(1|->id_reg_8))<+{0|->bitget(rgs8(2|->id_reg_8),0)})}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),0))})) = (1..18)*{id_reg_8});
  ("`RLC_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(rgs8(rr)));
  (rgs8<+({rr|->res}\/{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(rgs8(rr),7))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rr|->res}\/{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(rgs8(rr),7))})) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16);
  (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE);
  ((mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16);
  (dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7))}) = (1..18)*{id_reg_8});
  ("`RLC_9IX_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9IX_plus_d0(mem,ix,desloc)));
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9IX_plus_d0(mem,ix,desloc)) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9IX_plus_d0(mem,ix,desloc),7))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9IX_plus_d0(mem,ix,desloc),7))}) = (1..18)*{id_reg_8});
  ("`RLC_9IY_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9IY_plus_d0(mem,iy,desloc)));
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9IY_plus_d0(mem,iy,desloc)) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9IY_plus_d0(mem,iy,desloc),7))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9IY_plus_d0(mem,iy,desloc),7))}) = (1..18)*{id_reg_8});
  ("`RL_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(rgs8(rr))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  ("`RL_9IX_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9IX_plus_d0(mem,ix,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  (bv_IX_plus_d(ix,desloc): BV16);
  (mem<+{bv_IX_plus_d(ix,desloc)|->res}: BV16 +-> BYTE);
  ((mem<+{bv_IX_plus_d(ix,desloc)|->res})~: BYTE +-> BV16);
  (dom(mem<+{bv_IX_plus_d(ix,desloc)|->res}) = BV16);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9IX_plus_d0(mem,ix,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{bv_IX_plus_d(ix,desloc)|->res}: BV16 +-> BYTE & (mem<+{bv_IX_plus_d(ix,desloc)|->res})~: BYTE +-> BV16 & dom(mem<+{bv_IX_plus_d(ix,desloc)|->res}) = BV16 & ran(mem<+{bv_IX_plus_d(ix,desloc)|->res}): POW(BYTE));
  ("`RL_9IY_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9IY_plus_d0(mem,iy,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  (bv_IY_plus_d(iy,desloc): BV16);
  (mem<+{bv_IY_plus_d(iy,desloc)|->res}: BV16 +-> BYTE);
  ((mem<+{bv_IY_plus_d(iy,desloc)|->res})~: BYTE +-> BV16);
  (dom(mem<+{bv_IY_plus_d(iy,desloc)|->res}) = BV16);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9IY_plus_d0(mem,iy,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{bv_IY_plus_d(iy,desloc)|->res}: BV16 +-> BYTE & (mem<+{bv_IY_plus_d(iy,desloc)|->res})~: BYTE +-> BV16 & dom(mem<+{bv_IY_plus_d(iy,desloc)|->res}) = BV16 & ran(mem<+{bv_IY_plus_d(iy,desloc)|->res}): POW(BYTE));
  ("`RRC_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr)));
  (rgs8<+({rr|->res}\/{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(rgs8(rr),0))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rr|->res}\/{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(rgs8(rr),0))})) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0))}) = (1..18)*{id_reg_8});
  ("`RRC_9IX_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9IX_plus_d0(mem,ix,desloc)));
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9IX_plus_d0(mem,ix,desloc)) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9IX_plus_d0(mem,ix,desloc),0))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9IX_plus_d0(mem,ix,desloc),0))}) = (1..18)*{id_reg_8});
  ("`RRC_9IY_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9IY_plus_d0(mem,iy,desloc)));
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9IY_plus_d0(mem,iy,desloc)) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9IY_plus_d0(mem,iy,desloc),0))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9IY_plus_d0(mem,iy,desloc),0))}) = (1..18)*{id_reg_8});
  ("`RR_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  ("`RR_9IX_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9IX_plus_d0(mem,ix,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9IX_plus_d0(mem,ix,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{bv_IX_plus_d(ix,desloc)|->res}: BV16 +-> BYTE & (mem<+{bv_IX_plus_d(ix,desloc)|->res})~: BYTE +-> BV16 & dom(mem<+{bv_IX_plus_d(ix,desloc)|->res}) = BV16 & ran(mem<+{bv_IX_plus_d(ix,desloc)|->res}): POW(BYTE));
  ("`RR_9IY_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9IY_plus_d0(mem,iy,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9IY_plus_d0(mem,iy,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{bv_IY_plus_d(iy,desloc)|->res}: BV16 +-> BYTE & (mem<+{bv_IY_plus_d(iy,desloc)|->res})~: BYTE +-> BV16 & dom(mem<+{bv_IY_plus_d(iy,desloc)|->res}) = BV16 & ran(mem<+{bv_IY_plus_d(iy,desloc)|->res}): POW(BYTE));
  ("`SLA_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`SLA_9IX_d9 preconditions in this component'" & desloc: SCHAR);
  ("`SLA_9IY_d9 preconditions in this component'" & desloc: SCHAR);
  ("`SRA_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr))<+{7|->bitget(rgs8(rr),7)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{7|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{7|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)} & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  ("`SRA_9IX_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9IX_plus_d0(mem,ix,desloc))<+{7|->bitget(bv_9IX_plus_d0(mem,ix,desloc),7)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9IX_plus_d0(mem,ix,desloc))<+{7|->bitget(bv_9IX_plus_d0(mem,ix,desloc),7)} & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  ("`SRA_9IY_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9IY_plus_d0(mem,iy,desloc))<+{7|->bv_9IY_plus_d0(mem,iy,desloc)(7)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9IY_plus_d0(mem,iy,desloc))<+{7|->bv_9IY_plus_d0(mem,iy,desloc)(7)} & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  ("`SRL_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(rgs8(rr)),7));
  (rgs8<+({rr|->res}\/{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(rgs8(rr),0))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rr|->res}\/{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(rgs8(rr),0))})) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7));
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0))}) = (1..18)*{id_reg_8});
  ("`SRL_9IX_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(bv_9IX_plus_d0(mem,ix,desloc)),7));
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(bv_9IX_plus_d0(mem,ix,desloc)),7) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9IX_plus_d0(mem,ix,desloc),0))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9IX_plus_d0(mem,ix,desloc),0))}) = (1..18)*{id_reg_8});
  ("`SRL_9IY_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(bv_9IY_plus_d0(mem,iy,desloc)),7));
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(bv_9IY_plus_d0(mem,iy,desloc)),7) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9IY_plus_d0(mem,iy,desloc),0))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9IY_plus_d0(mem,iy,desloc),0))}) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {7|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{6|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{5|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{4|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{3|->bitget(rgs8(1|->id_reg_8),3)}\/{2|->bitget(rgs8(1|->id_reg_8),2)}\/{1|->bitget(rgs8(1|->id_reg_8),1)}\/{0|->bitget(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({3|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{2|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{1|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{0|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}));
  ("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {7|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{6|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{5|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{4|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{3|->bitget(rgs8(1|->id_reg_8),3)}\/{2|->bitget(rgs8(1|->id_reg_8),2)}\/{1|->bitget(rgs8(1|->id_reg_8),1)}\/{0|->bitget(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({3|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{2|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{1|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{0|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(acc),is_zero(acc),0,parity_even_BYTE(acc),0,bitget(rgs8(2|->id_reg_8),0))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(acc),is_zero(acc),0,parity_even_BYTE(acc),0,bitget(rgs8(2|->id_reg_8),0))}) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {7|->bitget(rgs8(1|->id_reg_8),3)}\/{6|->bitget(rgs8(1|->id_reg_8),2)}\/{5|->bitget(rgs8(1|->id_reg_8),1)}\/{4|->bitget(rgs8(1|->id_reg_8),0)}\/{3|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{2|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{1|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{0|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({3|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{2|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{1|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{0|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}));
  ("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {7|->bitget(rgs8(1|->id_reg_8),3)}\/{6|->bitget(rgs8(1|->id_reg_8),2)}\/{5|->bitget(rgs8(1|->id_reg_8),1)}\/{4|->bitget(rgs8(1|->id_reg_8),0)}\/{3|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{2|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{1|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{0|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({3|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{2|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{1|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{0|->bitget(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE));
  ("`BIT_b_rr preconditions in this component'" & bb: 0..SCHAR_LENGTH-1 & rr: (1..18)*{id_reg_8});
  (update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(bitget(rgs8(rr),bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0)): (1..18)*{id_reg_8} +-> BYTE);
  (dom(update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(bitget(rgs8(rr),bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))) = (1..18)*{id_reg_8});
  "`Check that the invariant (pc: INSTRUCTION) is preserved by the operation - ref 3.4'";
  (INSTRUCTION_NEXT(pc): INSTRUCTION);
  ("`BIT_b_9HL0 preconditions in this component'" & bb: 0..SCHAR_LENGTH-1);
  (update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0)): (1..18)*{id_reg_8} +-> BYTE);
  (dom(update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))) = (1..18)*{id_reg_8});
  ("`BIT_b_9IX_d0 preconditions in this component'" & bb: 0..SCHAR_LENGTH-1 & desloc: SCHAR);
  (update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(bv_9IX_plus_d0(mem,ix,desloc)(bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0)): (1..18)*{id_reg_8} +-> BYTE);
  (dom(update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(bv_9IX_plus_d0(mem,ix,desloc)(bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))) = (1..18)*{id_reg_8});
  ("`BIT_b_9IY_d0 preconditions in this component'" & bb: 0..SCHAR_LENGTH-1 & desloc: SCHAR);
  (update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(bv_9IY_plus_d0(mem,iy,desloc)(bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0)): (1..18)*{id_reg_8} +-> BYTE);
  (dom(update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(bv_9IY_plus_d0(mem,iy,desloc)(bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))) = (1..18)*{id_reg_8});
  ("`SET_b_r preconditions in this component'" & bb: 0..SCHAR_LENGTH-1 & rr: (1..18)*{id_reg_8});
  (rgs8<+{rr|->bitset(rgs8(rr),bb)}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->bitset(rgs8(rr),bb)}) = (1..18)*{id_reg_8});
  ("`SET_b_9HL0 preconditions in this component'" & bb: 0..SCHAR_LENGTH-1);
  (bv_set(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
  (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}: BV16 +-> BYTE);
  ((mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)})~: BYTE +-> BV16);
  (dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}) = BV16);
  ("`Local hypotheses'" & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}): POW(BYTE));
  ("`SET_b_9IX_d0 preconditions in this component'" & bb: 0..SCHAR_LENGTH-1 & desloc: SCHAR);
  (bv_set(bv_9IY_plus_d0(mem,ix,desloc),bb): BYTE);
  (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9IY_plus_d0(mem,ix,desloc),bb)}: BV16 +-> BYTE);
  ((mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9IY_plus_d0(mem,ix,desloc),bb)})~: BYTE +-> BV16);
  (dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9IY_plus_d0(mem,ix,desloc),bb)}) = BV16);
  ("`Local hypotheses'" & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9IY_plus_d0(mem,ix,desloc),bb)}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9IY_plus_d0(mem,ix,desloc),bb)})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9IY_plus_d0(mem,ix,desloc),bb)}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9IY_plus_d0(mem,ix,desloc),bb)}): POW(BYTE));
  ("`SET_b_9IY_d0 preconditions in this component'" & bb: 0..SCHAR_LENGTH-1 & desloc: SCHAR);
  (bv_set(bv_9IY_plus_d0(mem,iy,desloc),bb): BYTE);
  (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9IY_plus_d0(mem,iy,desloc),bb)}: BV16 +-> BYTE);
  ((mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9IY_plus_d0(mem,iy,desloc),bb)})~: BYTE +-> BV16);
  (dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9IY_plus_d0(mem,iy,desloc),bb)}) = BV16);
  ("`Local hypotheses'" & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9IY_plus_d0(mem,iy,desloc),bb)}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9IY_plus_d0(mem,iy,desloc),bb)})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9IY_plus_d0(mem,iy,desloc),bb)}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9IY_plus_d0(mem,iy,desloc),bb)}): POW(BYTE));
  ("`RES_b_r preconditions in this component'" & bb: 0..SCHAR_LENGTH-1 & rr: (1..18)*{id_reg_8});
  (rgs8<+{rr|->bv_clear(rgs8(rr),bb)}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->bv_clear(rgs8(rr),bb)}) = (1..18)*{id_reg_8});
  ("`RES_b_9HL0 preconditions in this component'" & bb: 0..SCHAR_LENGTH-1);
  (bv_clear(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
  (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}: BV16 +-> BYTE);
  ((mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)})~: BYTE +-> BV16);
  (dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}) = BV16);
  ("`Local hypotheses'" & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}): POW(BYTE));
  ("`RES_b_9IX_d0 preconditions in this component'" & bb: 0..SCHAR_LENGTH-1 & desloc: SCHAR);
  (bv_clear(bv_9IY_plus_d0(mem,ix,desloc),bb): BYTE);
  (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9IY_plus_d0(mem,ix,desloc),bb)}: BV16 +-> BYTE);
  ((mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9IY_plus_d0(mem,ix,desloc),bb)})~: BYTE +-> BV16);
  (dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9IY_plus_d0(mem,ix,desloc),bb)}) = BV16);
  ("`Local hypotheses'" & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9IY_plus_d0(mem,ix,desloc),bb)}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9IY_plus_d0(mem,ix,desloc),bb)})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9IY_plus_d0(mem,ix,desloc),bb)}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9IY_plus_d0(mem,ix,desloc),bb)}): POW(BYTE));
  ("`RES_b_9IY_d0 preconditions in this component'" & bb: 0..SCHAR_LENGTH-1 & desloc: SCHAR);
  (bv_clear(bv_9IY_plus_d0(mem,iy,desloc),bb): BYTE);
  (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9IY_plus_d0(mem,iy,desloc),bb)}: BV16 +-> BYTE);
  ((mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9IY_plus_d0(mem,iy,desloc),bb)})~: BYTE +-> BV16);
  (dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9IY_plus_d0(mem,iy,desloc),bb)}) = BV16);
  ("`Local hypotheses'" & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9IY_plus_d0(mem,iy,desloc),bb)}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9IY_plus_d0(mem,iy,desloc),bb)})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9IY_plus_d0(mem,iy,desloc),bb)}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9IY_plus_d0(mem,iy,desloc),bb)}): POW(BYTE));
  ("`JP_nn preconditions in this component'" & nn: USHORTINT);
  (nn: INSTRUCTION);
  ("`JP_cc_nn preconditions in this component'" & cc: BOOL & nn: USHORTINT);
  ("`Local hypotheses'" & cc = TRUE);
  ("`Local hypotheses'" & not(cc = TRUE));
  ("`JR_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ((pc+ee) mod 2**16: INSTRUCTION);
  ("`JR_C_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ("`Local hypotheses'" & bitget(rgs8(2|->id_reg_8),0) = 0);
  ("`Local hypotheses'" & not(bitget(rgs8(2|->id_reg_8),0) = 0));
  ("`JR_NC_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ("`Local hypotheses'" & bitget(rgs8(2|->id_reg_8),0) = 1);
  ("`Local hypotheses'" & not(bitget(rgs8(2|->id_reg_8),0) = 1));
  ("`JR_Z_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ("`Local hypotheses'" & bitget(rgs8(2|->id_reg_8),6) = 0);
  ("`Local hypotheses'" & not(bitget(rgs8(2|->id_reg_8),6) = 0));
  ("`JR_NZ_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ("`Local hypotheses'" & bitget(rgs8(2|->id_reg_8),6) = 1);
  ("`Local hypotheses'" & not(bitget(rgs8(2|->id_reg_8),6) = 1));
  (BV16_TO_USHORTINT(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): INSTRUCTION);
  (BV16_TO_USHORTINT(ix): INSTRUCTION);
  (BV16_TO_USHORTINT(iy): INSTRUCTION);
  ("`DJNZ_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ("`Local hypotheses'" & is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1);
  (rgs8<+{5|->id_reg_8|->dec_BYTE(rgs8(5|->id_reg_8))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{5|->id_reg_8|->dec_BYTE(rgs8(5|->id_reg_8))}) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & not(is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1));
  ("`CALL_nn preconditions in this component'" & nn: USHORTINT);
  (USHORTINT_TO_BV16(INSTRUCTION_NEXT(pc)): BYTE);
  (stack<+{sp|->USHORTINT_TO_BV16(INSTRUCTION_NEXT(pc))}: BV16 +-> BYTE);
  ((stack<+{sp|->USHORTINT_TO_BV16(INSTRUCTION_NEXT(pc))})~: BYTE +-> BV16);
  (dom(stack<+{sp|->USHORTINT_TO_BV16(INSTRUCTION_NEXT(pc))}) = BV16);
  ("`Local hypotheses'" & stack<+{sp|->USHORTINT_TO_BV16(INSTRUCTION_NEXT(pc))}: BV16 +-> BYTE & (stack<+{sp|->USHORTINT_TO_BV16(INSTRUCTION_NEXT(pc))})~: BYTE +-> BV16 & dom(stack<+{sp|->USHORTINT_TO_BV16(INSTRUCTION_NEXT(pc))}) = BV16 & ran(stack<+{sp|->USHORTINT_TO_BV16(INSTRUCTION_NEXT(pc))}): POW(BYTE));
  "`Check that the invariant (sp: BV16) is preserved by the operation - ref 3.4'";
  (inc_BV16(sp): BV16)
END
&
THEORY EnumerateX IS
  id_reg_8 == {a0,f0,f_0,a_0,b0,c0,b_0,c_0,d0,e0,d_0,e_0,h0,l0,h_0,l_0,i0,r0};
  id_reg_16 == {BC,DE,HL,SP,AF}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
