THEORY OPOBalanceX IS
  traffic_light_asm_pic,192;
  ValuesLemmas,1;
  InstanciatedConstraintsLemmas,0;
  Initialisation,0;
  advance,191
END
&
THEORY OPOProofList IS
  _f(1) & _f(2) & _f(12) & advance.191,(_f(164) & _of(72) => _of(73));
  _f(1) & _f(2) & _f(12) & advance.190,(_f(162) & _of(4) => _of(71));
  _f(1) & _f(2) & _f(12) & advance.189,(_f(162) & _of(4) => _of(70));
  _f(1) & _f(2) & _f(12) & advance.188,(_f(162) & _of(4) => _of(69));
  _f(1) & _f(2) & _f(12) & advance.187,(_f(162) & _of(4) => _of(68));
  _f(1) & _f(2) & _f(12) & advance.186,(_f(162) & _of(4) => _of(67));
  _f(1) & _f(2) & _f(12) & advance.185,(_f(162) & _of(4) => _of(66));
  _f(1) & _f(2) & _f(12) & advance.184,(_f(162) & _of(4) => _of(65));
  _f(1) & _f(2) & _f(12) & advance.183,(_f(162) & _of(4) => _of(64));
  _f(1) & _f(2) & _f(12) & advance.182,(_of(63) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.181,(_of(63) & _of(4) => _of(23));
  _f(1) & _f(2) & _f(12) & advance.180,(_f(162) & _of(4) => _of(62));
  _f(1) & _f(2) & _f(12) & advance.179,(_f(162) & _of(4) => _of(61));
  _f(1) & _f(2) & _f(12) & advance.178,(_f(162) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.177,(_f(162) & _of(4) => _of(60));
  _f(1) & _f(2) & _f(12) & advance.176,(_f(162) & _of(4) => _of(59));
  _f(1) & _f(2) & _f(12) & advance.175,(_f(159) & _of(4) => _f(74));
  _f(1) & _f(2) & _f(12) & advance.174,(_of(58) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.173,(_of(57) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.172,(_of(57) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.171,(_of(56) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.170,(_of(56) & _of(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.169,(_f(140) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.168,(_f(139) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.167,(_f(138) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.166,(_f(137) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.165,(_f(135) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.164,(_of(55) & _of(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.163,(_of(54) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.162,(_of(54) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.161,(_f(53) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.160,(_of(53) & _of(4) => _f(76));
  _f(1) & _f(2) & _f(12) & advance.159,(_f(52) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.158,(_f(52) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.157,(_of(53) & _of(4) => _f(71));
  _f(1) & _f(2) & _f(12) & advance.156,(_of(53) & _of(4) => _f(68));
  _f(1) & _f(2) & _f(12) & advance.155,(_of(53) & _of(24) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.154,(_of(53) & _of(4) => _f(22));
  _f(1) & _f(2) & _f(12) & advance.153,(_of(53) & _of(21) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.152,(_of(53) & _of(4) => _of(23));
  _f(1) & _f(2) & _f(12) & advance.151,(_of(53) & _of(4) => _f(17));
  _f(1) & _f(2) & _f(12) & advance.150,(_of(53) & _of(24) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.149,(_of(53) & _of(36) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.148,(_of(53) & _of(24) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.147,(_f(52) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.146,(_f(52) & _of(4) => _of(44));
  _f(1) & _f(2) & _f(12) & advance.145,(_f(52) & _of(4) => _of(43));
  _f(1) & _f(2) & _f(12) & advance.144,(_of(52) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.143,(_of(51) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.142,(_of(51) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.141,(_f(130) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.140,(_of(49) & _of(4) => _of(50));
  _f(1) & _f(2) & _f(12) & advance.139,(_of(49) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.138,(_of(49) & _of(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.137,(_of(48) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.136,(_of(48) & _of(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.135,(_f(129) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.134,(_f(128) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.133,(_of(47) & _of(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.132,(_f(126) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.131,(_of(46) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.130,(_of(46) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.129,(_f(50) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.128,(_of(45) & _of(4) => _f(76));
  _f(1) & _f(2) & _f(12) & advance.127,(_f(48) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.126,(_f(48) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.125,(_of(45) & _of(4) => _f(71));
  _f(1) & _f(2) & _f(12) & advance.124,(_of(45) & _of(4) => _f(68));
  _f(1) & _f(2) & _f(12) & advance.123,(_of(45) & _of(24) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.122,(_of(45) & _of(4) => _f(22));
  _f(1) & _f(2) & _f(12) & advance.121,(_of(45) & _of(21) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.120,(_of(45) & _of(4) => _of(23));
  _f(1) & _f(2) & _f(12) & advance.119,(_of(45) & _of(4) => _f(17));
  _f(1) & _f(2) & _f(12) & advance.118,(_of(45) & _of(24) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.117,(_of(45) & _of(36) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.116,(_of(45) & _of(24) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.115,(_f(48) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.114,(_f(48) & _of(4) => _of(44));
  _f(1) & _f(2) & _f(12) & advance.113,(_f(48) & _of(4) => _of(43));
  _f(1) & _f(2) & _f(12) & advance.112,(_of(42) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.111,(_of(41) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.110,(_of(41) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.109,(_f(120) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.108,(_f(118) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.107,(_f(117) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.106,(_of(39) & _of(4) => _of(40));
  _f(1) & _f(2) & _f(12) & advance.105,(_of(39) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.104,(_of(39) & _of(4) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.103,(_of(38) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.102,(_of(38) & _of(4) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.101,(_f(115) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.100,(_of(37) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.99,(_of(37) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.98,(_f(46) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.97,(_of(35) & _of(4) => _f(76));
  _f(1) & _f(2) & _f(12) & advance.96,(_of(35) & _of(4) => _f(74));
  _f(1) & _f(2) & _f(12) & advance.95,(_of(35) & _of(4) => _f(71));
  _f(1) & _f(2) & _f(12) & advance.94,(_f(44) & _of(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.93,(_of(35) & _of(4) => _f(68));
  _f(1) & _f(2) & _f(12) & advance.92,(_of(35) & _of(24) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.91,(_of(35) & _of(4) => _f(22));
  _f(1) & _f(2) & _f(12) & advance.90,(_of(35) & _of(24) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.89,(_of(35) & _of(4) => _of(23));
  _f(1) & _f(2) & _f(12) & advance.88,(_of(35) & _of(4) => _f(17));
  _f(1) & _f(2) & _f(12) & advance.87,(_of(35) & _of(24) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.86,(_of(35) & _of(36) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.85,(_of(35) & _of(21) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.84,(_f(44) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.83,(_f(44) & _of(4) => _of(34));
  _f(1) & _f(2) & _f(12) & advance.82,(_f(44) & _of(4) => _of(33));
  _f(1) & _f(2) & _f(12) & advance.81,(_of(32) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.80,(_of(31) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.79,(_of(31) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.78,(_f(110) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.77,(_f(109) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.76,(_f(108) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.75,(_f(107) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.74,(_f(106) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.73,(_of(30) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.72,(_of(30) & _of(4) => _f(62));
  _f(1) & _f(2) & _f(12) & advance.71,(_of(29) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.70,(_of(29) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.69,(_f(103) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.68,(_of(28) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.67,(_of(27) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.66,(_of(27) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.65,(_f(100) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.64,(_f(99) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.63,(_f(98) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.62,(_f(97) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.61,(_f(96) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.60,(_of(26) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.59,(_of(26) & _of(4) => _f(62));
  _f(1) & _f(2) & _f(12) & advance.58,(_of(25) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.57,(_of(25) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.56,(_f(93) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.55,(_of(20) & _of(4) => _f(76));
  _f(1) & _f(2) & _f(12) & advance.54,(_of(20) & _of(4) => _f(74));
  _f(1) & _f(2) & _f(12) & advance.53,(_of(20) & _of(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.52,(_f(40) & _of(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.51,(_of(20) & _of(4) => _f(71));
  _f(1) & _f(2) & _f(12) & advance.50,(_of(20) & _of(4) => _f(68));
  _f(1) & _f(2) & _f(12) & advance.49,(_of(20) & _of(24) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.48,(_of(20) & _of(4) => _f(22));
  _f(1) & _f(2) & _f(12) & advance.47,(_of(20) & _of(21) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.46,(_of(20) & _of(4) => _of(23));
  _f(1) & _f(2) & _f(12) & advance.45,(_of(20) & _of(4) => _f(17));
  _f(1) & _f(2) & _f(12) & advance.44,(_of(20) & _of(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.43,(_of(20) & _of(22) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.42,(_of(20) & _of(21) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.41,(_f(40) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.40,(_f(40) & _of(4) => _of(19));
  _f(1) & _f(2) & _f(12) & advance.39,(_f(40) & _of(4) => _of(18));
  _f(1) & _f(2) & _f(12) & advance.38,(_of(17) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.37,(_of(16) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.36,(_of(16) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.35,(_f(88) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.34,(_f(87) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.33,(_f(86) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.32,(_f(85) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.31,(_f(84) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.30,(_f(82) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.29,(_of(15) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.28,(_of(15) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.27,(_f(77) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.26,(_of(14) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.25,(_of(13) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.24,(_of(13) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.23,(_f(72) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.22,(_f(70) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.21,(_f(69) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.20,(_f(67) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.19,(_f(65) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.18,(_f(61) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.17,(_of(11) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(12) & advance.16,(_of(11) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.15,(_f(55) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(12) & advance.14,(_of(9) & _of(4) => _of(5));
  _f(1) & _f(2) & _f(12) & advance.13,(_of(8) & _of(4) => _of(7));
  _f(1) & _f(2) & _f(12) & advance.12,(_of(8) & _of(4) => _of(5));
  _f(1) & _f(2) & _f(12) & advance.11,(_f(30) & _of(4) => _of(7));
  _f(1) & _f(2) & _f(12) & advance.10,(_f(28) & _of(4) => _of(7));
  _f(1) & _f(2) & _f(12) & advance.9,(_f(27) & _of(4) => _of(7));
  _f(1) & _f(2) & _f(12) & advance.8,(_f(25) & _of(4) => _of(7));
  _f(1) & _f(2) & _f(12) & advance.7,(_f(23) & _of(4) => _of(7));
  _f(1) & _f(2) & _f(12) & advance.6,(_f(18) & _of(4) => _of(7));
  _f(1) & _f(2) & _f(12) & advance.5,(_of(6) & _of(4) => _of(7));
  _f(1) & _f(2) & _f(12) & advance.4,(_of(6) & _of(4) => _of(5));
  _f(1) & _f(2) & _f(12) & advance.3,(_of(4) => _of(5));
  _f(1) & _f(2) & _f(12) & advance.2,(_of(4) => _of(2));
  _f(1) & _f(2) & _f(12) & advance.1,(_of(3) => _of(2));
  _f(1) & ValuesLemmas.1,(_of(1) => _of(2))
END
&
THEORY OPOFormulas IS
  "`Check that the property (btrue) is preserved by the valuations - ref 5.2'";
  (btrue);
  "`Check precondition (btrue) deduction'";
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (mmem$1(0) : 0..2);
  ("`Local hypotheses'" & mpc$1 = 0);
  (mmem$1(0) = counter);
  ("`Local hypotheses'" & mpc$1 = 9);
  ("`Local hypotheses'" & mpc$1 = 10);
  (mmem$2(0) : 0..2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & bitget(mmem$2(0),1) = 0 & mpc$2 = 0 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 0);
  (mmem$2(0) = counter);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & bitget(mmem$2(0),1) = 0 & mpc$2 = 0 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 9);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & bitget(mmem$2(0),1) = 0 & mpc$2 = 0 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 10);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & not(bitget(mmem$2(0),1) = 0) & mpc$2 = 0 & INSTRUCTION_NEXT(mpc$2) = 0);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & not(bitget(mmem$2(0),1) = 0) & mpc$2 = 0 & INSTRUCTION_NEXT(mpc$2) = 9);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & not(bitget(mmem$2(0),1) = 0) & mpc$2 = 0 & INSTRUCTION_NEXT(mpc$2) = 10);
  (0<=8);
  (8<=10);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & mpc$2 = 1 & bfalse);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (mmem$2(0)/=2);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & bitget(mmem$2(0),0) = 0 & mpc$2 = 2 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 0);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & bitget(mmem$2(0),0) = 0 & mpc$2 = 2 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & bitget(mmem$2(0),0) = 0 & mpc$2 = 2 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 9);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & bitget(mmem$2(0),0) = 0 & mpc$2 = 2 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 10);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(bitget(mmem$2(0),0) = 0) & mpc$2 = 2 & INSTRUCTION_NEXT(mpc$2) = 0);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(bitget(mmem$2(0),0) = 0) & mpc$2 = 2 & INSTRUCTION_NEXT(mpc$2) = 2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(bitget(mmem$2(0),0) = 0) & mpc$2 = 2 & INSTRUCTION_NEXT(mpc$2) = 9);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(bitget(mmem$2(0),0) = 0) & mpc$2 = 2 & INSTRUCTION_NEXT(mpc$2) = 10);
  (0<=6);
  (6<=10);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & mpc$2 = 3 & bfalse);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & mpc$2 = 4 & INSTRUCTION_NEXT(mpc$2) = 0);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & mpc$2 = 4 & INSTRUCTION_NEXT(mpc$2) = 4);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & mpc$2 = 4 & INSTRUCTION_NEXT(mpc$2) = 5);
  (1 = 1);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & mpc$2 = 4 & INSTRUCTION_NEXT(mpc$2) = 9);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & mpc$2 = 4 & INSTRUCTION_NEXT(mpc$2) = 10);
  (0<=9);
  (9<=10);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & mpc$2 = 5 & bfalse);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & mpc$2 = 6 & INSTRUCTION_NEXT(mpc$2) = 0);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & mpc$2 = 6 & INSTRUCTION_NEXT(mpc$2) = 3);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & mpc$2 = 6 & INSTRUCTION_NEXT(mpc$2) = 6);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & mpc$2 = 6 & INSTRUCTION_NEXT(mpc$2) = 7);
  (2 = 2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & mpc$2 = 6 & INSTRUCTION_NEXT(mpc$2) = 9);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & mpc$2 = 6 & INSTRUCTION_NEXT(mpc$2) = 10);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 9) & not(mpc$2 = 8) & mpc$2 = 7 & bfalse);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 9) & mpc$2 = 8 & INSTRUCTION_NEXT(mpc$2) = 0);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 9) & mpc$2 = 8 & INSTRUCTION_NEXT(mpc$2) = 1);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 9) & mpc$2 = 8 & INSTRUCTION_NEXT(mpc$2) = 8);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 9) & mpc$2 = 8 & INSTRUCTION_NEXT(mpc$2) = 9);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 9) & mpc$2 = 8 & INSTRUCTION_NEXT(mpc$2) = 10);
  (0<=mpc$2);
  (mpc$2<=10);
  (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter);
  (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 8) & not(mpc$2 = 9) & mpc$2 = 2);
  (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1);
  (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter);
  (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1);
  (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter);
  (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2);
  (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter);
  (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter));
  (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter));
  "`Check that the invariant (mmem(0) : 0..2) is preserved by the operation - ref 4.4, 5.5'";
  (mmemz$7777(0) : 0..2)
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
