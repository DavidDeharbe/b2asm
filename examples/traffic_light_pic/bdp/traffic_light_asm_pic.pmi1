THEORY BalanceX IS
  traffic_light_asm_pic,165,4,0,120,9,0,0;
  ValuesLemmas,0,0,0,0,0,0,0;
  InstanciatedConstraintsLemmas,0,0,0,0,0,0,0;
  Initialisation,4,0,0,4,0,0,0;
  advance,161,4,0,116,9,0,0
END
&
THEORY ProofState IS
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Unproved;
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Unproved;
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Unproved;
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Unproved;
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Proved(0);
  Proved(0);
  Unproved;
  Unproved;
  Unproved;
  Proved(0);
  Proved(0);
  Unproved;
  Unproved;
  Unproved;
  Proved(0);
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Proved(0);
  Proved(0);
  Unproved;
  Unproved;
  Unproved;
  Proved(0);
  Proved(0);
  Unproved;
  Unproved;
  Unproved;
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0)
END
&
THEORY MethodList IS
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  ?;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  ?;
  pr;
  pr;
  ?;
  pr;
  pr;
  pr;
  ?;
  ?;
  pr;
  pr;
  pr;
  pr;
  ?;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  cl & xp & ah(INSTRUCTION_NEXT(2) = 3) & cls & ah(!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & ph(2,!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & ah(INSTRUCTION = 0..INSTRUCTION_MAX) & ah(INSTRUCTION_MAX = 255) & pp(rp.0) & mh(2<=254 & 2+1<=255 => 0 = 1+2-INSTRUCTION_NEXT(2) & INSTRUCTION_NEXT(2) = 2+1) & pp(rp.0) & pp(rp.0) & eh(INSTRUCTION_NEXT(2),2+1,Goal) & pp(rp.0) & eh(INSTRUCTION_NEXT(2),3,Goal) & ah(INSTRUCTION_NEXT(3) = 4) & cls & ph(3,!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & ah(INSTRUCTION = 0..INSTRUCTION_MAX) & ah(INSTRUCTION_MAX = 255) & pp(rp.0) & mh(3<=254 & 3+1<=255 => 0 = 1+3-INSTRUCTION_NEXT(3) & INSTRUCTION_NEXT(3) = 3+1) & pp(rp.0) & pp(rp.0) & eh(INSTRUCTION_NEXT(3),3+1,Goal) & pp(rp.0) & eh(INSTRUCTION_NEXT(3),4,Goal) & ss & pp(rp.0);
  pr;
  pr;
  pr;
  pr;
  pr;
  cl & xp & ah(INSTRUCTION_NEXT(0) = 1) & ph(0,!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & ds(INSTRUCTION_NEXT(0) = 7) & ds(not(0 = 1)) & ds(not(0 = 2)) & ds(not(0 = 3)) & ds(not(0 = 4)) & ds(not(0 = 5)) & ds(not(0 = 6)) & ds(not(0 = 7)) & ds(not(0 = 8)) & ds(not(0 = 9)) & ds(0+1<=10) & ds(0 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & ah(INSTRUCTION = 0..INSTRUCTION_MAX) & ah(INSTRUCTION_MAX = 255) & ds(mmem$2(0) = counter) & ds(not(bitget(mmem$2(0),1) = 0)) & cls & ss & pr & mh(0<=254 & 0+1<=255 => 0 = 1+0-INSTRUCTION_NEXT(0) & INSTRUCTION_NEXT(0) = 0+1) & ss & pr & ss & pr & eh(INSTRUCTION_NEXT(0),0+1,Goal) & ss & pr & eh(INSTRUCTION_NEXT(0),1,Goal);
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  cl & xp & ah(INSTRUCTION_NEXT(0) = 1) & ds(INSTRUCTION_NEXT(INSTRUCTION_NEXT(0)) = 7) & ds(not(0 = 1)) & ds(not(0 = 2)) & ds(not(0 = 3)) & ds(not(0 = 4)) & ds(not(0 = 5)) & ds(not(0 = 6)) & ds(not(0 = 7)) & ds(not(0 = 8)) & ds(not(0 = 9)) & ds(0+1<=10) & ds(0 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & ds(0 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & ds(0 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & ds(0 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & ds(0 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & ds(0 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & ds(0 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & ds(0 = 3 => mmem$2(0) = 1 & counter = 1) & ds(0 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & ds(0 = 1 => mmem$2(0) = 2 & counter = 2) & ds(0<=10) & ds(0<=0) & ah(!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & ds(mmem$2(0) = counter) & ds(bitget(mmem$2(0),1) = 0) & ds(mmem$2(0) : 0..2) & ds(mmem$2(0) : 0..2) & ds(1<=msp$1+1) & ph(0,!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & ah(INSTRUCTION = 0..INSTRUCTION_MAX) & ah(INSTRUCTION_MAX = 255) & ss & pr & ds(0 = 255 => INSTRUCTION_NEXT(0) = 0) & mh(0<=254 & 0+1<=255 => 0 = 1+0-INSTRUCTION_NEXT(0) & INSTRUCTION_NEXT(0) = 0+1) & ss & pr & ss & pr & eh(INSTRUCTION_NEXT(0),0+1,Goal) & ss & pr & eh(INSTRUCTION_NEXT(0),1,Goal) & ah(INSTRUCTION_NEXT(1) = 2) & ds(INSTRUCTION_NEXT(1) = 7) & cls & ph(1,!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & ah(INSTRUCTION = 0..INSTRUCTION_MAX) & ah(INSTRUCTION_MAX = 255) & ss & pr & ds(1 = 255 => INSTRUCTION_NEXT(1) = 0) & ss & eh(INSTRUCTION_NEXT(1),2,Goal) & eh(INSTRUCTION_NEXT(1),2,Goal);
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  cl & xp & ds(1<=msp$1+1) & ds(mmem$2(0) : 0..2) & ds(mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & ss & pr;
  pr;
  pr;
  pr;
  pr;
  pr
END
&
THEORY PassList IS
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),(?;0);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(1),(?;0);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(1),(?;0);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),?;
  Force(1),(?;0);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(1),(?;0);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(1),(?;0;1);
  Force(1),(?;0;1);
  Force(0),?;
  Force(1),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(1),(?;0);
  Force(0),?;
  Force(0),?;
  Force(1),(?;0);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(1),(?;0);
  Force(0),?;
  Force(0),?;
  Force(1),(?;0);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?
END
&
THEORY ManForms 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK);
  PRVersion("V3.3.3.p24.bbt")(CLT == "V3.7.6")
END
