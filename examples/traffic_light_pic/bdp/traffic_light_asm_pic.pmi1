THEORY BalanceX IS
  traffic_light_asm_pic,175,19,0,153,3,0,0;
  ValuesLemmas,0,0,0,0,0,0,0;
  InstanciatedConstraintsLemmas,0,0,0,0,0,0,0;
  AssertionLemmas,10,8,0,1,1,0,0;
  Initialisation,4,0,0,4,0,0,0;
  advance,161,11,0,148,2,0,0
END
&
THEORY ProofState IS
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0)
END
&
THEORY MethodList IS
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  cl & xp & eh(INSTRUCTION_NEXT(2),3,Goal) & eh(INSTRUCTION_NEXT(3),4,Goal);
  cl & xp & eh(INSTRUCTION_NEXT(2),3,Goal) & eh(INSTRUCTION_NEXT(3),4,Goal);
  cl & xp & eh(INSTRUCTION_NEXT(2),3,Goal) & eh(INSTRUCTION_NEXT(3),4,Goal);
  cl & xp & eh(INSTRUCTION_NEXT(2),3,Goal) & eh(INSTRUCTION_NEXT(3),4,Goal);
  pr;
  pr;
  cl & xp & eh(INSTRUCTION_NEXT(2),3,Goal) & eh(INSTRUCTION_NEXT(3),4,Goal);
  cl & xp & eh(INSTRUCTION_NEXT(2),3,Goal) & eh(INSTRUCTION_NEXT(3),4,Goal);
  cl & xp & ds(INSTRUCTION_NEXT(INSTRUCTION_NEXT(2)) = 4) & ds(not(2 = 3)) & ds(not(2 = 4)) & ds(not(2 = 5)) & ds(not(2 = 6)) & ds(not(2 = 7)) & ds(not(2 = 8)) & ds(not(2 = 9)) & ds(not(2 = 1)) & ds(not(2 = 0)) & ds(2+1<=10) & ds(2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & ds(2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & ds(2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & ds(2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & ds(2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & ds(2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & ax(mmem$2(0)) & ax(counter) & ds(2 = 4 => xx$0 = 0 & xx$0 = xx$0) & ds(2 = 3 => xx$0 = 1 & xx$0 = 1) & ds(2 = 1 => xx$0 = 2 & xx$0 = 2) & ds(2 = 0 => xx$0 : 0..2 & xx$0 = xx$0) & ds(2<=10) & ds(0<=2) & ds(1<=msp$1+1) & ah(bitget(1,0) = 1) & ph(1,0,!(w,i).(w : WORD & i : WORD_POSITION => bitget(w,i) = WORD_TO_BV(w)(i))) & eh(WORD,0..NB_WORDS-1,Goal) & ah(WORD = 0..NB_WORDS-1) & eh(NB_WORDS,256,Goal) & ss & pr & ah(WORD_POSITION = 0..7) & pp(rp.0) & ah(WORD_TO_BV(1) = {0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}) & ph(1,{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0},!(w,v).(w : WORD & v : BV8 => (v = WORD_TO_BV(w) => 0 = 128*v(7)+64*v(6)+32*v(5)+16*v(4)+8*v(3)+4*v(2)+2*v(1)+v(0)-w & w = 128*v(7)+64*v(6)+32*v(5)+16*v(4)+8*v(3)+4*v(2)+2*v(1)+v(0)) & (0 = 128*v(7)+64*v(6)+32*v(5)+16*v(4)+8*v(3)+4*v(2)+2*v(1)+v(0)-w & w = 128*v(7)+64*v(6)+32*v(5)+16*v(4)+8*v(3)+4*v(2)+2*v(1)+v(0) => v = WORD_TO_BV(w)))) & clk & eh(WORD,0..NB_WORDS-1,Goal) & eh(NB_WORDS,256,Goal) & pp(rp.0) & ah(BV8 = 0..7 --> 0..1) & ss & pp(rp.0) & mh(0 = 128*{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(7)+64*{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(6)+32*{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(5)+16*{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(4)+8*{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(3)+4*{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(2)+2*{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(1)+{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(0)-1 & 1 = 128*{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(7)+64*{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(6)+32*{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(5)+16*{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(4)+8*{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(3)+4*{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(2)+2*{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(1)+{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(0) => {0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0} = WORD_TO_BV(1)) & ss & pr & ss & pr & eh({0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0},WORD_TO_BV(1),Goal) & eh(WORD_TO_BV(1),{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0},Goal) & ds(not(xx$0 = 2)) & ds(bitget(xx$0,0) = 0) & ds(xx$0 : 0..2) & eh(bitget(1,0),{0|->1,1|->0,2|->0,3|->0,4|->0,5|->0,6|->0,7|->0}(0),Goal) & pr & ah(xx$0/=1) & ds(not(xx$0 = 2)) & pp(rp.0) & ds(bitget(xx$0,0) = 0) & clk & ds(bitget(1,0) = 1) & clk & pp(rp.1);
  pr;
  pr;
  cl & xp & eh(INSTRUCTION_NEXT(2),3,Goal) & eh(INSTRUCTION_NEXT(3),4,Goal);
  cl & xp & eh(INSTRUCTION_NEXT(2),3,Goal) & eh(INSTRUCTION_NEXT(3),4,Goal);
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  cl & xp & eh(INSTRUCTION_NEXT(0),1,Goal) & eh(INSTRUCTION_NEXT(1),2,Goal);
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  cl & xp & ds(1<=msp$1+1) & ds(mmem$2(0) : 0..2) & ds(mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & ss & pr;
  pr;
  pr;
  cl & xp & ph(1,!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & eh(INSTRUCTION,0..INSTRUCTION_MAX,Goal) & eh(INSTRUCTION_MAX,255,Goal) & pr & mh(1<=254 & 1+1<=255 => 0 = 1+1-INSTRUCTION_NEXT(1) & INSTRUCTION_NEXT(1) = 1+1) & pp(rp.0) & pp(rp.0) & eh(INSTRUCTION_NEXT(1),1+1,Goal) & ss & pr;
  cl & xp & ph(2,!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & ss & eh(INSTRUCTION,0..INSTRUCTION_MAX,Goal) & eh(INSTRUCTION_MAX,255,Goal) & pp(rp.0) & mh(2<=254 & 2+1<=255 => 0 = 1+2-INSTRUCTION_NEXT(2) & INSTRUCTION_NEXT(2) = 2+1) & ss & pr & pp(rp.0) & eh(INSTRUCTION_NEXT(2),2+1,Goal) & ss & pr;
  cl & xp & ph(3,!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & eh(INSTRUCTION,0..INSTRUCTION_MAX,Goal) & eh(INSTRUCTION_MAX,255,Goal) & pp(rp.0) & mh(3<=254 & 3+1<=255 => 0 = 1+3-INSTRUCTION_NEXT(3) & INSTRUCTION_NEXT(3) = 3+1) & pp(rp.0) & pp(rp.0) & eh(INSTRUCTION_NEXT(3),3+1,Goal) & pp(rp.0);
  cl & xp & ph(4,!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & eh(INSTRUCTION,0..INSTRUCTION_MAX,Goal) & eh(INSTRUCTION_MAX,255,Goal) & pp(rp.0) & mh(4<=254 & 4+1<=255 => 0 = 1+4-INSTRUCTION_NEXT(4) & INSTRUCTION_NEXT(4) = 4+1) & pp(rp.0) & pp(rp.0) & pp(rp.0);
  cl & xp & ah(!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & ph(5,!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & ah(INSTRUCTION = 0..INSTRUCTION_MAX) & ah(INSTRUCTION_MAX = 255) & pp(rp.0) & mh(5<=254 & 5+1<=255 => 0 = 1+5-INSTRUCTION_NEXT(5) & INSTRUCTION_NEXT(5) = 5+1) & pp(rp.0) & pp(rp.0) & pp(rp.0);
  pr;
  cl & xp & ph(7,!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & eh(INSTRUCTION,0..INSTRUCTION_MAX,Goal) & eh(INSTRUCTION_MAX,255,Goal) & pr & mh(7<=254 & 7+1<=255 => 0 = 1+7-INSTRUCTION_NEXT(7) & INSTRUCTION_NEXT(7) = 7+1) & pp(rp.0) & pp(rp.0) & ss & pp(rp.0);
  cl & xp & ah(!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & ph(8,!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & ah(INSTRUCTION = 0..INSTRUCTION_MAX) & ah(INSTRUCTION_MAX = 255) & ah(INSTRUCTION = 0..INSTRUCTION_MAX) & ah(INSTRUCTION_MAX = 255) & ss & pr & mh(8<=254 & 8+1<=255 => 0 = 1+8-INSTRUCTION_NEXT(8) & INSTRUCTION_NEXT(8) = 8+1) & pp(rp.0) & pp(rp.0) & ss & pp(rp.0);
  cl & xp & ah(!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & ph(9,!i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i<=254 & i+1<=255 => 0 = 1+i-INSTRUCTION_NEXT(i) & INSTRUCTION_NEXT(i) = i+1))) & eh(INSTRUCTION,0..INSTRUCTION_MAX,Goal) & eh(INSTRUCTION_MAX,255,Goal) & pp(rp.0) & mh(9<=254 & 9+1<=255 => 0 = 1+9-INSTRUCTION_NEXT(9) & INSTRUCTION_NEXT(9) = 9+1) & pp(rp.0) & pp(rp.0) & eh(INSTRUCTION_NEXT(9),9+1,Goal) & pp(rp.0);
  pr;
  pr;
  pr;
  pr
END
&
THEORY PassList IS
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(1),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(1),(?;0);
  Force(0),?;
  Force(0),?;
  Force(1),(?;0);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(1),(?;0);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?
END
&
THEORY ManForms 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK);
  PRVersion("V3.3.3.p24.bbt")(CLT == "V3.7.6")
END
