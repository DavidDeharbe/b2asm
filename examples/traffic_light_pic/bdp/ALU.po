THEORY ProofList IS
  _f(1) & _f(2) & AssertionLemmas.12,(_f(25) => _f(26));
  _f(1) & _f(2) & AssertionLemmas.11,(_f(23) => _f(24));
  _f(1) & _f(2) & AssertionLemmas.10,(_f(21) => _f(22));
  _f(1) & _f(2) & AssertionLemmas.9,(_f(19) => _f(20));
  _f(1) & _f(2) & AssertionLemmas.8,(_f(17) => _f(18));
  _f(1) & _f(2) & AssertionLemmas.7,(_f(15) => _f(16));
  _f(1) & _f(2) & AssertionLemmas.6,(_f(13) => _f(14));
  _f(1) & _f(2) & AssertionLemmas.5,(_f(11) => _f(12));
  _f(1) & _f(2) & AssertionLemmas.4,(_f(9) => _f(10));
  _f(1) & _f(2) & AssertionLemmas.3,(_f(7) => _f(8));
  _f(1) & _f(2) & AssertionLemmas.2,(_f(5) => _f(6));
  _f(1) & _f(2) & AssertionLemmas.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & WORD_LENGTH : INTEGER & 0<=WORD_LENGTH & INST_SZ : INTEGER & 0<=INST_SZ & NB_WORDS : INTEGER & 0<=NB_WORDS & NB_INSTRUCTIONS : INTEGER & 0<=NB_INSTRUCTIONS & WORD_LENGTH = 8 & NB_WORDS = 2**WORD_LENGTH & WORD = 0..NB_WORDS-1 & WORD_POSITION = 0..WORD_LENGTH-1 & INST_SZ = 8 & NB_INSTRUCTIONS = 256 & INSTRUCTION_MAX = NB_INSTRUCTIONS-1 & INSTRUCTION = 0..INSTRUCTION_MAX & INSTRUCTION_NEXT : INSTRUCTION +-> INSTRUCTION & dom(INSTRUCTION_NEXT) = INSTRUCTION & !i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i+1<=255 => INSTRUCTION_NEXT(i) = i+1)) & BV_TO_WORD : BV8 +-> WORD & dom(BV_TO_WORD) = BV8 & WORD_TO_BV : WORD +-> BV8 & dom(WORD_TO_BV) = WORD & !(w,v).(w : WORD & v : BV8 => (v = WORD_TO_BV(w) => w = 128*v(7)+64*v(6)+32*v(5)+16*v(4)+8*v(3)+4*v(2)+2*v(1)+v(0)) & (w = 128*v(7)+64*v(6)+32*v(5)+16*v(4)+8*v(3)+4*v(2)+2*v(1)+v(0) => v = WORD_TO_BV(w))) & BV_TO_WORD = WORD_TO_BV~ & !n.(n : INTEGER & 0<=n & 1<=n => 2**n = 2*2**(n-1)) & REGISTER : POW(INTEGER) & REGISTER = 0..127 & BIT = 0..1 & BIT_FLIP : BIT +-> BIT & dom(BIT_FLIP) = BIT & !b.(b : BIT => BIT_FLIP(b) = 1-b) & BIT_AND : BIT*BIT +-> BIT & dom(BIT_AND) = BIT*BIT & !(b1,b2).(b1 : BIT & b2 : BIT => (BIT_AND(b1,b2) = 1 => b1 = 1) & (b1 = 1 => BIT_AND(b1,b2) = 1) & b2 = 1) & BIT_IOR : BIT*BIT +-> BIT & dom(BIT_IOR) = BIT*BIT & !(b1,b2).(b1 : BIT & b2 : BIT => (BIT_IOR(b1,b2) = 1 => b1 = 1) & (b1 = 1 => BIT_IOR(b1,b2) = 1) or b2 = 1) & BIT_XOR : BIT*BIT +-> BIT & dom(BIT_XOR) = BIT*BIT & !(b1,b2).(b1 : BIT & b2 : BIT => (BIT_XOR(b1,b2) = 1 => b1 = 1 & b2 = 0 or (b1 = 0 & b2 = 1)) & ((b1 = 1 & b2 = 0 => BIT_XOR(b1,b2) = 1) & (b1 = 0 & b2 = 1 => BIT_XOR(b1,b2) = 1))) & BV8_INDEX = 0..7 & BV8 = BV8_INDEX --> BIT & BV8_SET_BIT : BV8*BV8_INDEX*BIT +-> BV8 & dom(BV8_SET_BIT) = BV8*BV8_INDEX*BIT & !(v,i,j,b).(v : BV8 & i : BV8_INDEX & j : BV8_INDEX & b : BIT & not(i = j) => BV8_SET_BIT(v,i,b)(j) = v(j)) & !(v,i,b).(v : BV8 & i : BV8_INDEX & b : BIT => BV8_SET_BIT(v,i,b)(i) = b) & BV8_COMPLEMENT : BV8 +-> BV8 & dom(BV8_COMPLEMENT) = BV8 & !(v,i).(v : BV8 & i : BV8_INDEX => BV8_COMPLEMENT(v)(i) = BIT_FLIP(v(i))) & BV8_ALL_ZEROES : BV8 & !i.(i : BV8_INDEX => BV8_ALL_ZEROES(i) = 0) & BV8_AND : BV8*BV8 +-> BV8 & dom(BV8_AND) = BV8*BV8 & !(v1,v2,i).(v1 : BV8 & v2 : BV8 & i : BV8_INDEX => BV8_AND(v1,v2)(i) = BIT_AND(v1(i),v2(i))) & BV8_IOR : BV8*BV8 +-> BV8 & dom(BV8_IOR) = BV8*BV8 & !(v1,v2,i).(v1 : BV8 & v2 : BV8 & i : BV8_INDEX => BV8_IOR(v1,v2)(i) = BIT_IOR(v1(i),v2(i))) & BV8_XOR : BV8*BV8 +-> BV8 & dom(BV8_XOR) = BV8*BV8 & !(v1,v2,i).(v1 : BV8 & v2 : BV8 & i : BV8_INDEX => BV8_XOR(v1,v2)(i) = BIT_XOR(v1(i),v2(i))) & "`Component properties'" & add : WORD*WORD +-> WORD*BOOL*BOOL & dom(add) = WORD*WORD & !(w1,w2).(w1 : WORD & w2 : WORD & (w1+w2 : INTEGER & 0<=w1+w2) => (w1+w2<=255 => add(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (256<=w1+w2 => add(w1,w2) = (w1+w2-256,bool(w1+w2 = 256))|->TRUE)) & substract : WORD*WORD +-> WORD*BOOL*BOOL & dom(substract) = WORD*WORD & !(w1,w2).(w1 : WORD & w2 : WORD & w1-w2 : INTEGER => (w1-w2+1<=0 => substract(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substract(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & and : WORD*WORD +-> WORD*BOOL & dom(and) = WORD*WORD & !(w1,w2).(w1 : WORD & w2 : WORD & BV_TO_WORD(BV8_AND(WORD_TO_BV(w1),WORD_TO_BV(w2))) : WORD => and(w1,w2) = BV_TO_WORD(BV8_AND(WORD_TO_BV(w1),WORD_TO_BV(w2)))|->bool(BV_TO_WORD(BV8_AND(WORD_TO_BV(w1),WORD_TO_BV(w2))) = 0)) & ior : WORD*WORD +-> WORD*BOOL & dom(ior) = WORD*WORD & !(w1,w2).(w1 : WORD & w2 : WORD & BV_TO_WORD(BV8_IOR(WORD_TO_BV(w1),WORD_TO_BV(w2))) : WORD => ior(w1,w2) = BV_TO_WORD(BV8_IOR(WORD_TO_BV(w1),WORD_TO_BV(w2)))|->bool(BV_TO_WORD(BV8_IOR(WORD_TO_BV(w1),WORD_TO_BV(w2))) = 0)) & xor : WORD*WORD +-> WORD*BOOL & dom(xor) = WORD*WORD & !(w1,w2).(w1 : WORD & w2 : WORD & BV_TO_WORD(BV8_XOR(WORD_TO_BV(w1),WORD_TO_BV(w2))) : WORD => xor(w1,w2) = BV_TO_WORD(BV8_XOR(WORD_TO_BV(w1),WORD_TO_BV(w2)))|->bool(BV_TO_WORD(BV8_XOR(WORD_TO_BV(w1),WORD_TO_BV(w2))) = 0)) & bitget : WORD*WORD_POSITION +-> BIT & dom(bitget) = WORD*WORD_POSITION & !(w,i).(w : WORD & i : WORD_POSITION => bitget(w,i) = WORD_TO_BV(w)(i)) & bitset : WORD*WORD_POSITION +-> WORD & dom(bitset) = WORD*WORD_POSITION & !(w,i).(w : WORD & i : WORD_POSITION => bitset(w,i) = BV_TO_WORD(BV8_SET_BIT(WORD_TO_BV(w),i,1))) & bitclear : WORD*WORD_POSITION +-> WORD & dom(bitclear) = WORD*WORD_POSITION & !(w,i,b).(w : WORD & i : WORD_POSITION & b : BIT => bitclear(w,i) = BV_TO_WORD(BV8_SET_BIT(WORD_TO_BV(w),i,0))) & complement : WORD +-> WORD & dom(complement) = WORD & !w.(w : WORD => complement(w) = BV_TO_WORD(BV8_COMPLEMENT(WORD_TO_BV(w)))) & swap : WORD +-> WORD & dom(swap) = WORD & !w.(w : WORD & WORD_TO_BV(w) : BV8 => swap(w) = BV_TO_WORD({0|->WORD_TO_BV(w)(4)}\/{1|->WORD_TO_BV(w)(5)}\/{2|->WORD_TO_BV(w)(6)}\/{3|->WORD_TO_BV(w)(7)}\/{4|->WORD_TO_BV(w)(0)}\/{5|->WORD_TO_BV(w)(1)}\/{6|->WORD_TO_BV(w)(2)}\/{7|->WORD_TO_BV(w)(3)})) & rotateleft : WORD +-> WORD*BOOL & dom(rotateleft) = WORD & !w.(w : WORD & WORD_TO_BV(w) : BV8 => rotateleft(w) = BV_TO_WORD({0|->WORD_TO_BV(w)(7)}\/{1|->WORD_TO_BV(w)(0)}\/{2|->WORD_TO_BV(w)(1)}\/{3|->WORD_TO_BV(w)(2)}\/{4|->WORD_TO_BV(w)(3)}\/{5|->WORD_TO_BV(w)(4)}\/{6|->WORD_TO_BV(w)(5)}\/{7|->WORD_TO_BV(w)(6)})|->bool(WORD_TO_BV(w)(7) = 1)) & rotateright : WORD +-> WORD*BOOL & dom(rotateright) = WORD & !w.(w : WORD & WORD_TO_BV(w) : BV8 => rotateright(w) = BV_TO_WORD({0|->WORD_TO_BV(w)(1)}\/{1|->WORD_TO_BV(w)(2)}\/{2|->WORD_TO_BV(w)(3)}\/{3|->WORD_TO_BV(w)(4)}\/{4|->WORD_TO_BV(w)(5)}\/{5|->WORD_TO_BV(w)(6)}\/{6|->WORD_TO_BV(w)(7)}\/{7|->WORD_TO_BV(w)(0)})|->bool(WORD_TO_BV(w)(0) = 1)));
  ("`Seen and used machines assertions'" & 2**8 = 256 & NB_WORDS = 256 & !n.(n : WORD => 0<=n) & !n.(n : WORD => n<=255) & WORD_POSITION = BV8_INDEX & BIT_FLIP(0) = 1 & BIT_FLIP(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1 & BIT_IOR(0,0) = 0 & BIT_IOR(0,1) = 0 & BIT_IOR(1,0) = 0 & BIT_IOR(1,1) = 1 & BIT_XOR(0,0) = 0 & BIT_XOR(0,1) = 1 & BIT_XOR(1,0) = 1 & BIT_XOR(1,1) = 0);
  "`Check assertion (ran(rotateright) <: WORD*BOOL) deduction - ref 3.2, 4.2, 5.3'";
  (ran(rotateright) : POW(WORD*BOOL));
  "`Check assertion (ran(rotateleft) <: WORD*BOOL) deduction - ref 3.2, 4.2, 5.3'";
  (ran(rotateleft) : POW(WORD*BOOL));
  "`Check assertion (ran(swap) <: WORD) deduction - ref 3.2, 4.2, 5.3'";
  (ran(swap) : POW(WORD));
  "`Check assertion (ran(complement) <: WORD) deduction - ref 3.2, 4.2, 5.3'";
  (ran(complement) : POW(WORD));
  "`Check assertion (ran(bitget) <: BIT) deduction - ref 3.2, 4.2, 5.3'";
  (ran(bitget) : POW(BIT));
  "`Check assertion (ran(bitset) <: WORD) deduction - ref 3.2, 4.2, 5.3'";
  (ran(bitset) : POW(WORD));
  "`Check assertion (ran(bitclear) <: WORD) deduction - ref 3.2, 4.2, 5.3'";
  (ran(bitclear) : POW(WORD));
  "`Check assertion (ran(xor) <: WORD*BOOL) deduction - ref 3.2, 4.2, 5.3'";
  (ran(xor) : POW(WORD*BOOL));
  "`Check assertion (ran(ior) <: WORD*BOOL) deduction - ref 3.2, 4.2, 5.3'";
  (ran(ior) : POW(WORD*BOOL));
  "`Check assertion (ran(and) <: WORD*BOOL) deduction - ref 3.2, 4.2, 5.3'";
  (ran(and) : POW(WORD*BOOL));
  "`Check assertion (ran(substract) <: WORD*BOOL*BOOL) deduction - ref 3.2, 4.2, 5.3'";
  (ran(substract) : POW(WORD*BOOL*BOOL));
  "`Check assertion (ran(add) <: WORD*BOOL*BOOL) deduction - ref 3.2, 4.2, 5.3'";
  (ran(add) : POW(WORD*BOOL*BOOL));
  ("`Component assertions'" & dom(add) = WORD*WORD & ran(add) : POW(WORD*BOOL*BOOL) & dom(substract) = WORD*WORD & ran(substract) : POW(WORD*BOOL*BOOL) & dom(and) = WORD*WORD & ran(and) : POW(WORD*BOOL) & dom(ior) = WORD*WORD & ran(ior) : POW(WORD*BOOL) & dom(xor) = WORD*WORD & ran(xor) : POW(WORD*BOOL) & dom(bitclear) = WORD*WORD_POSITION & ran(bitclear) : POW(WORD) & dom(bitset) = WORD*WORD_POSITION & ran(bitset) : POW(WORD) & dom(bitget) = WORD*WORD_POSITION & ran(bitget) : POW(BIT) & dom(complement) = WORD & ran(complement) : POW(WORD) & dom(swap) = WORD & ran(swap) : POW(WORD) & ran(rotateleft) : POW(WORD*BOOL) & dom(rotateleft) = WORD & dom(rotateright) = WORD & ran(rotateright) : POW(WORD*BOOL))
END
&
THEORY EnumerateX 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
