THEORY OPOBalanceX IS
  traffic_light_ass2,39;
  ValuesLemmas,1;
  InstanciatedConstraintsLemmas,0;
  Initialisation,2;
  advance,36
END
&
THEORY OPOProofList IS
  _f(1) & _f(8) & advance.36,(_f(58) & _of(39) => _of(2));
  _f(1) & _f(8) & advance.35,(_f(56) & _of(9) => _of(38));
  _f(1) & _f(8) & advance.34,(_f(56) & _of(9) => _of(37));
  _f(1) & _f(8) & advance.33,(_f(56) & _of(9) => _of(36));
  _f(1) & _f(8) & advance.32,(_f(56) & _of(9) => _of(35));
  _f(1) & _f(8) & advance.31,(_f(56) & _of(9) => _of(26));
  _f(1) & _f(8) & advance.30,(_f(56) & _of(9) => _of(25));
  _f(1) & _f(8) & advance.29,(_f(56) & _of(9) => _of(34));
  _f(1) & _f(8) & advance.28,(_f(56) & _of(9) => _of(33));
  _f(1) & _f(8) & advance.27,(_of(32) & _of(9) => _of(29));
  _f(1) & _f(8) & advance.26,(_f(37) & _of(9) => _of(31));
  _f(1) & _f(8) & advance.25,(_f(37) & _of(9) => _of(26));
  _f(1) & _f(8) & advance.24,(_f(37) & _of(9) => _of(25));
  _f(1) & _f(8) & advance.23,(_of(28) & _of(9) => _of(30));
  _f(1) & _f(8) & advance.22,(_of(28) & _of(9) => _of(29));
  _f(1) & _f(8) & advance.21,(_f(32) & _of(9) => _of(27));
  _f(1) & _f(8) & advance.20,(_f(32) & _of(9) => _of(26));
  _f(1) & _f(8) & advance.19,(_f(32) & _of(9) => _of(25));
  _f(1) & _f(8) & advance.18,(_f(32) & _of(9) => _of(21));
  _f(1) & _f(8) & advance.17,(_of(24) & _of(11) => _of(21));
  _f(1) & _f(8) & advance.16,(_of(24) & _of(11) => _of(20));
  _f(1) & _f(8) & advance.15,(_of(22) & _of(9) => _of(23));
  _f(1) & _f(8) & advance.14,(_of(22) & _of(9) => _of(20));
  _f(1) & _f(8) & advance.13,(_f(13) & _of(11) => _of(21));
  _f(1) & _f(8) & advance.12,(_of(19) & _of(9) => _of(20));
  _f(1) & _f(8) & advance.11,(_of(9) => _of(18));
  _f(1) & _f(8) & advance.10,(_of(9) => _of(17));
  _f(1) & _f(8) & advance.9,(_of(9) => _of(16));
  _f(1) & _f(8) & advance.8,(_of(9) => _of(15));
  _f(1) & _f(8) & advance.7,(_of(9) => _of(14));
  _f(1) & _f(8) & advance.6,(_of(9) => _of(13));
  _f(1) & _f(8) & advance.5,(_of(11) => _of(12));
  _f(1) & _f(8) & advance.4,(_of(9) => _of(10));
  _f(1) & _f(8) & advance.3,(_of(9) => _of(5));
  _f(1) & _f(8) & advance.2,(_of(8) => _of(2));
  _f(1) & _f(8) & advance.1,(_of(7) => _of(2));
  _f(1) & Initialisation.2,(_f(5) & _of(6) => _of(2));
  _f(1) & Initialisation.1,(_of(3) & _of(4) => _of(5));
  ValuesLemmas.1,(_of(1) => _of(2))
END
&
THEORY OPOFormulas IS
  "`Check that the property (btrue) is preserved by the valuations - ref 5.2'";
  (btrue);
  ("`Local hypotheses'" & memory_data$0 : NATURAL +-> NATURAL & dom(memory_data$0) = NATURAL);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (0 : NATURAL);
  "`Check that the invariant (ucmemory_data(0) = state) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'";
  "`Check precondition (btrue) deduction'";
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (3 : NATURAL);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (0<=3);
  (0>=0);
  (0 = 0);
  (3 = 3);
  (ucmemory_data$1 : NATURAL +-> NATURAL);
  (dom(ucmemory_data$1) = NATURAL);
  (ucmemory_data$1(0) = state);
  ("`Local hypotheses'" & 0<=ucpc$2 & ucpc$2<=3 & ucmemory_data$2 : NATURAL +-> NATURAL & dom(ucmemory_data$2) = NATURAL & (ucpc$2 = 0 => ucmemory_data$2(0) = state) & (ucpc$2 = 1 => ucmemory_data$2(0) = state+1) & (ucpc$2 = 2 => ucmemory_data$2(0) = state+1 & ucmemory_data$2(0) = 3) & (ucpc$2 = 3 => ucmemory_data$2(0) = (state+1) mod 3) & ucpc$2+1<=3 & not(ucpc$2 = 2) & not(ucpc$2 = 1) & ucpc$2 = 0);
  (0 : INTEGER);
  (ucpc$2+1<=3);
  ("`Local hypotheses'" & 0<=ucpc$2 & ucpc$2<=3 & ucmemory_data$2 : NATURAL +-> NATURAL & dom(ucmemory_data$2) = NATURAL & (ucpc$2 = 0 => ucmemory_data$2(0) = state) & (ucpc$2 = 1 => ucmemory_data$2(0) = state+1) & (ucpc$2 = 2 => ucmemory_data$2(0) = state+1 & ucmemory_data$2(0) = 3) & (ucpc$2 = 3 => ucmemory_data$2(0) = (state+1) mod 3) & ucpc$2+1<=3 & not(ucpc$2 = 0) & not(ucpc$2 = 2) & ucpc$2 = 1);
  (3 : INTEGER);
  ("`Local hypotheses'" & 0<=ucpc$2 & ucpc$2<=3 & ucmemory_data$2 : NATURAL +-> NATURAL & dom(ucmemory_data$2) = NATURAL & (ucpc$2 = 0 => ucmemory_data$2(0) = state) & (ucpc$2 = 1 => ucmemory_data$2(0) = state+1) & (ucpc$2 = 2 => ucmemory_data$2(0) = state+1 & ucmemory_data$2(0) = 3) & (ucpc$2 = 3 => ucmemory_data$2(0) = (state+1) mod 3) & ucpc$2+1<=3 & not(ucpc$2 = 0) & not(ucpc$2 = 1) & ucpc$2 = 2);
  (ucmemory_data$2 : NATURAL +-> NATURAL);
  (dom(ucmemory_data$2) = NATURAL);
  (ucpc$2+1 = 1 => ucmemory_data$2(0) = state+1);
  ("`Local hypotheses'" & 0<=ucpc$2 & ucpc$2<=3 & ucmemory_data$2 : NATURAL +-> NATURAL & dom(ucmemory_data$2) = NATURAL & (ucpc$2 = 0 => ucmemory_data$2(0) = state) & (ucpc$2 = 1 => ucmemory_data$2(0) = state+1) & (ucpc$2 = 2 => ucmemory_data$2(0) = state+1 & ucmemory_data$2(0) = 3) & (ucpc$2 = 3 => ucmemory_data$2(0) = (state+1) mod 3) & ucpc$2+1<=3 & not(ucpc$2 = 0) & not(ucpc$2 = 2) & ucmemory_data$2(0) = 3 & ucpc$2 = 1 & ucpc$2+1 = 2);
  (ucmemory_data$2(0) = state+1);
  (ucmemory_data$2(0) = 3);
  (ucpc$2+2 = 1 => ucmemory_data$2(0) = state+1);
  ("`Local hypotheses'" & 0<=ucpc$2 & ucpc$2<=3 & ucmemory_data$2 : NATURAL +-> NATURAL & dom(ucmemory_data$2) = NATURAL & (ucpc$2 = 0 => ucmemory_data$2(0) = state) & (ucpc$2 = 1 => ucmemory_data$2(0) = state+1) & (ucpc$2 = 2 => ucmemory_data$2(0) = state+1 & ucmemory_data$2(0) = 3) & (ucpc$2 = 3 => ucmemory_data$2(0) = (state+1) mod 3) & ucpc$2+1<=3 & not(ucpc$2 = 0) & not(ucpc$2 = 2) & not(ucmemory_data$2(0) = 3) & ucpc$2 = 1 & ucpc$2+2 = 2);
  (0<=ucpc$2);
  (ucpc$2<=3);
  (ucpc$2 = 0 => ucmemory_data$2(0) = state);
  (ucpc$2 = 1 => ucmemory_data$2(0) = state+1);
  (ucpc$2 = 2 => ucmemory_data$2(0) = state+1 & ucmemory_data$2(0) = 3);
  (ucpc$2 = 3 => ucmemory_data$2(0) = (state+1) mod 3);
  "`Check that the invariant (ucmemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'"
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
