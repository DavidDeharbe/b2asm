THEORY OPOBalanceX IS
  Microcontroller,309;
  Initialisation,4;
  init_data,11;
  init,12;
  push,8;
  pop_1,9;
  pop_2,11;
  get_data,12;
  get_pc,12;
  set_end,12;
  get_end,12;
  set_w,12;
  get_w,12;
  goto,12;
  iszero,23;
  isequal,17;
  move,10;
  move_w_m,10;
  move_m_w,10;
  reset,10;
  reset_w,12;
  set_data,8;
  inc,11;
  dec,11;
  add,12;
  sub,12;
  mul,12;
  div,12
END
&
THEORY OPOProofList IS
  _f(6) & _f(60) & div.12,(_of(26) => _of(27));
  _f(6) & _f(60) & div.11,(_of(23) => _of(25));
  _f(6) & _f(60) & div.10,(_of(23) => _of(24));
  _f(6) & _f(60) & div.9,(_of(20) => _of(22));
  _f(6) & _f(60) & div.8,(_of(20) => _of(21));
  _f(6) & _f(60) & div.7,(_of(17) => _of(57));
  _f(6) & _f(60) & div.6,(_of(17) => _of(56));
  _f(6) & _f(60) & div.5,(_of(15) => _of(16));
  _f(6) & _f(60) & div.4,(_of(13) => _of(14));
  _f(6) & _f(60) & div.3,(_of(11) => _of(29));
  _f(6) & _f(60) & div.2,(_of(11) => _of(28));
  _f(6) & _f(60) & div.1,(_of(9) => _of(10));
  _f(6) & _f(59) & mul.12,(_of(26) => _of(27));
  _f(6) & _f(59) & mul.11,(_of(23) => _of(25));
  _f(6) & _f(59) & mul.10,(_of(23) => _of(24));
  _f(6) & _f(59) & mul.9,(_of(20) => _of(22));
  _f(6) & _f(59) & mul.8,(_of(20) => _of(21));
  _f(6) & _f(59) & mul.7,(_of(17) => _of(55));
  _f(6) & _f(59) & mul.6,(_of(17) => _of(54));
  _f(6) & _f(59) & mul.5,(_of(15) => _of(16));
  _f(6) & _f(59) & mul.4,(_of(13) => _of(14));
  _f(6) & _f(59) & mul.3,(_of(11) => _of(29));
  _f(6) & _f(59) & mul.2,(_of(11) => _of(28));
  _f(6) & _f(59) & mul.1,(_of(9) => _of(10));
  _f(6) & _f(58) & sub.12,(_of(26) => _of(27));
  _f(6) & _f(58) & sub.11,(_of(23) => _of(25));
  _f(6) & _f(58) & sub.10,(_of(23) => _of(24));
  _f(6) & _f(58) & sub.9,(_of(20) => _of(22));
  _f(6) & _f(58) & sub.8,(_of(20) => _of(21));
  _f(6) & _f(58) & sub.7,(_of(17) => _of(53));
  _f(6) & _f(58) & sub.6,(_of(17) => _of(52));
  _f(6) & _f(58) & sub.5,(_of(15) => _of(16));
  _f(6) & _f(58) & sub.4,(_of(13) => _of(14));
  _f(6) & _f(58) & sub.3,(_of(11) => _of(29));
  _f(6) & _f(58) & sub.2,(_of(11) => _of(28));
  _f(6) & _f(58) & sub.1,(_of(9) => _of(10));
  _f(6) & _f(57) & add.12,(_of(26) => _of(27));
  _f(6) & _f(57) & add.11,(_of(23) => _of(25));
  _f(6) & _f(57) & add.10,(_of(23) => _of(24));
  _f(6) & _f(57) & add.9,(_of(20) => _of(22));
  _f(6) & _f(57) & add.8,(_of(20) => _of(21));
  _f(6) & _f(57) & add.7,(_of(17) => _of(51));
  _f(6) & _f(57) & add.6,(_of(17) => _of(50));
  _f(6) & _f(57) & add.5,(_of(15) => _of(16));
  _f(6) & _f(57) & add.4,(_of(13) => _of(14));
  _f(6) & _f(57) & add.3,(_of(11) => _of(29));
  _f(6) & _f(57) & add.2,(_of(11) => _of(28));
  _f(6) & _f(57) & add.1,(_of(9) => _of(10));
  _f(6) & _f(55) & dec.11,(_of(26) => _f(33));
  _f(6) & _f(55) & dec.10,(_of(23) => _of(25));
  _f(6) & _f(55) & dec.9,(_of(23) => _of(24));
  _f(6) & _f(55) & dec.8,(_of(20) => _f(18));
  _f(6) & _f(55) & dec.7,(_of(20) => _f(17));
  _f(6) & _f(55) & dec.6,(_of(17) => _of(19));
  _f(6) & _f(55) & dec.5,(_of(17) => _of(18));
  _f(6) & _f(55) & dec.4,(_of(15) => _of(16));
  _f(6) & _f(55) & dec.3,(_of(13) => _of(14));
  _f(6) & _f(55) & dec.2,(_of(11) => _of(49));
  _f(6) & _f(55) & dec.1,(_of(9) => _of(10));
  _f(6) & _f(53) & inc.11,(_of(26) => _f(33));
  _f(6) & _f(53) & inc.10,(_of(23) => _of(25));
  _f(6) & _f(53) & inc.9,(_of(23) => _of(24));
  _f(6) & _f(53) & inc.8,(_of(20) => _f(18));
  _f(6) & _f(53) & inc.7,(_of(20) => _f(17));
  _f(6) & _f(53) & inc.6,(_of(17) => _of(19));
  _f(6) & _f(53) & inc.5,(_of(17) => _of(18));
  _f(6) & _f(53) & inc.4,(_of(15) => _of(16));
  _f(6) & _f(53) & inc.3,(_of(13) => _of(14));
  _f(6) & _f(53) & inc.2,(_of(11) => _of(48));
  _f(6) & _f(53) & inc.1,(_of(9) => _of(10));
  _f(6) & _f(51) & set_data.8,(_of(26) => _f(33));
  _f(6) & _f(51) & set_data.7,(_of(23) => _of(25));
  _f(6) & _f(51) & set_data.6,(_of(23) => _of(24));
  _f(6) & _f(51) & set_data.5,(_of(17) => _of(19));
  _f(6) & _f(51) & set_data.4,(_of(17) => _of(18));
  _f(6) & _f(51) & set_data.3,(_of(15) => _of(16));
  _f(6) & _f(51) & set_data.2,(_of(13) => _of(14));
  _f(6) & _f(51) & set_data.1,(_of(9) => _of(10));
  _f(6) & reset_w.12,(_of(26) => _of(27));
  _f(6) & reset_w.11,(_of(23) => _of(25));
  _f(6) & reset_w.10,(_of(23) => _of(24));
  _f(6) & reset_w.9,(_of(20) => _of(22));
  _f(6) & reset_w.8,(_of(20) => _of(21));
  _f(6) & reset_w.7,(_of(17) => _of(8));
  _f(6) & reset_w.6,(_of(17) => _of(6));
  _f(6) & reset_w.5,(_of(15) => _of(16));
  _f(6) & reset_w.4,(_of(13) => _of(14));
  _f(6) & reset_w.3,(_of(11) => _of(29));
  _f(6) & reset_w.2,(_of(11) => _of(28));
  _f(6) & reset_w.1,(_of(9) => _of(10));
  _f(6) & _f(48) & reset.10,(_of(26) => _f(33));
  _f(6) & _f(48) & reset.9,(_of(23) => _of(25));
  _f(6) & _f(48) & reset.8,(_of(23) => _of(24));
  _f(6) & _f(48) & reset.7,(_of(20) => _f(18));
  _f(6) & _f(48) & reset.6,(_of(20) => _f(17));
  _f(6) & _f(48) & reset.5,(_of(17) => _of(19));
  _f(6) & _f(48) & reset.4,(_of(17) => _of(18));
  _f(6) & _f(48) & reset.3,(_of(15) => _of(16));
  _f(6) & _f(48) & reset.2,(_of(13) => _of(14));
  _f(6) & _f(48) & reset.1,(_of(9) => _of(10));
  _f(6) & _f(44) & move_m_w.10,(_of(26) => _f(33));
  _f(6) & _f(44) & move_m_w.9,(_of(23) => _of(25));
  _f(6) & _f(44) & move_m_w.8,(_of(23) => _of(24));
  _f(6) & _f(44) & move_m_w.7,(_of(20) => _f(18));
  _f(6) & _f(44) & move_m_w.6,(_of(20) => _f(17));
  _f(6) & _f(44) & move_m_w.5,(_of(15) => _of(16));
  _f(6) & _f(44) & move_m_w.4,(_of(13) => _of(14));
  _f(6) & _f(44) & move_m_w.3,(_of(11) => _of(29));
  _f(6) & _f(44) & move_m_w.2,(_of(11) => _of(28));
  _f(6) & _f(44) & move_m_w.1,(_of(9) => _of(10));
  _f(6) & _f(41) & move_w_m.10,(_of(26) => _f(33));
  _f(6) & _f(41) & move_w_m.9,(_of(23) => _of(25));
  _f(6) & _f(41) & move_w_m.8,(_of(23) => _of(24));
  _f(6) & _f(41) & move_w_m.7,(_of(20) => _f(18));
  _f(6) & _f(41) & move_w_m.6,(_of(20) => _f(17));
  _f(6) & _f(41) & move_w_m.5,(_of(17) => _of(19));
  _f(6) & _f(41) & move_w_m.4,(_of(17) => _of(18));
  _f(6) & _f(41) & move_w_m.3,(_of(15) => _of(16));
  _f(6) & _f(41) & move_w_m.2,(_of(13) => _of(14));
  _f(6) & _f(41) & move_w_m.1,(_of(9) => _of(10));
  _f(6) & _f(38) & move.10,(_of(26) => _f(33));
  _f(6) & _f(38) & move.9,(_of(23) => _of(25));
  _f(6) & _f(38) & move.8,(_of(23) => _of(24));
  _f(6) & _f(38) & move.7,(_of(20) => _f(18));
  _f(6) & _f(38) & move.6,(_of(20) => _f(17));
  _f(6) & _f(38) & move.5,(_of(17) => _of(19));
  _f(6) & _f(38) & move.4,(_of(17) => _of(18));
  _f(6) & _f(38) & move.3,(_of(15) => _of(16));
  _f(6) & _f(38) & move.2,(_of(13) => _of(14));
  _f(6) & _f(38) & move.1,(_of(9) => _of(10));
  _f(6) & _f(31) & isequal.17,(_f(34) & _of(23) => _of(25));
  _f(6) & _f(31) & isequal.16,(_f(34) & _of(23) => _of(24));
  _f(6) & _f(31) & isequal.15,(_of(47) & _of(17) => _of(19));
  _f(6) & _f(31) & isequal.14,(_of(47) & _of(17) => _of(18));
  _f(6) & _f(31) & isequal.13,(_of(47) & _of(15) => _of(16));
  _f(6) & _f(31) & isequal.12,(_of(47) & _of(13) => _of(14));
  _f(6) & _f(31) & isequal.11,(_of(47) & _of(11) => _of(29));
  _f(6) & _f(31) & isequal.10,(_of(47) & _of(11) => _of(28));
  _f(6) & _f(31) & isequal.9,(_f(32) & _of(23) => _of(25));
  _f(6) & _f(31) & isequal.8,(_f(32) & _of(23) => _of(24));
  _f(6) & _f(31) & isequal.7,(_of(46) & _of(17) => _of(19));
  _f(6) & _f(31) & isequal.6,(_of(46) & _of(17) => _of(18));
  _f(6) & _f(31) & isequal.5,(_of(46) & _of(15) => _of(16));
  _f(6) & _f(31) & isequal.4,(_of(46) & _of(13) => _of(14));
  _f(6) & _f(31) & isequal.3,(_of(46) & _of(11) => _of(29));
  _f(6) & _f(31) & isequal.2,(_of(46) & _of(11) => _of(28));
  _f(6) & _f(31) & isequal.1,(_of(9) => _of(10));
  _f(6) & _f(30) & iszero.23,(_of(42) & _of(26) => _of(45));
  _f(6) & _f(30) & iszero.22,(_of(42) & _of(23) => _of(25));
  _f(6) & _f(30) & iszero.21,(_of(42) & _of(23) => _of(24));
  _f(6) & _f(30) & iszero.20,(_of(42) & _of(20) => _of(44));
  _f(6) & _f(30) & iszero.19,(_of(42) & _of(20) => _of(43));
  _f(6) & _f(30) & iszero.18,(_of(42) & _of(17) => _of(19));
  _f(6) & _f(30) & iszero.17,(_of(42) & _of(17) => _of(18));
  _f(6) & _f(30) & iszero.16,(_of(42) & _of(15) => _of(16));
  _f(6) & _f(30) & iszero.15,(_of(42) & _of(13) => _of(14));
  _f(6) & _f(30) & iszero.14,(_of(42) & _of(11) => _of(29));
  _f(6) & _f(30) & iszero.13,(_of(42) & _of(11) => _of(28));
  _f(6) & _f(30) & iszero.12,(_of(41) & _of(26) => _of(35));
  _f(6) & _f(30) & iszero.11,(_of(41) & _of(23) => _of(25));
  _f(6) & _f(30) & iszero.10,(_of(41) & _of(23) => _of(24));
  _f(6) & _f(30) & iszero.9,(_of(41) & _of(20) => _f(18));
  _f(6) & _f(30) & iszero.8,(_of(41) & _of(20) => _f(17));
  _f(6) & _f(30) & iszero.7,(_of(41) & _of(17) => _of(19));
  _f(6) & _f(30) & iszero.6,(_of(41) & _of(17) => _of(18));
  _f(6) & _f(30) & iszero.5,(_of(41) & _of(15) => _of(16));
  _f(6) & _f(30) & iszero.4,(_of(41) & _of(13) => _of(14));
  _f(6) & _f(30) & iszero.3,(_of(41) & _of(11) => _of(29));
  _f(6) & _f(30) & iszero.2,(_of(41) & _of(11) => _of(28));
  _f(6) & _f(30) & iszero.1,(_of(9) => _of(10));
  _f(6) & _f(29) & goto.12,(_of(26) => _of(40));
  _f(6) & _f(29) & goto.11,(_of(23) => _of(25));
  _f(6) & _f(29) & goto.10,(_of(23) => _of(24));
  _f(6) & _f(29) & goto.9,(_of(20) => _of(38));
  _f(6) & _f(29) & goto.8,(_of(20) => _of(37));
  _f(6) & _f(29) & goto.7,(_of(17) => _of(19));
  _f(6) & _f(29) & goto.6,(_of(17) => _of(18));
  _f(6) & _f(29) & goto.5,(_of(15) => _of(16));
  _f(6) & _f(29) & goto.4,(_of(13) => _of(14));
  _f(6) & _f(29) & goto.3,(_of(11) => _of(29));
  _f(6) & _f(29) & goto.2,(_of(11) => _of(28));
  _f(6) & _f(29) & goto.1,(_of(9) => _of(10));
  _f(6) & get_w.12,(_of(26) => _of(27));
  _f(6) & get_w.11,(_of(23) => _of(25));
  _f(6) & get_w.10,(_of(23) => _of(24));
  _f(6) & get_w.9,(_of(20) => _of(22));
  _f(6) & get_w.8,(_of(20) => _of(21));
  _f(6) & get_w.7,(_of(17) => _of(19));
  _f(6) & get_w.6,(_of(17) => _of(18));
  _f(6) & get_w.5,(_of(15) => _of(16));
  _f(6) & get_w.4,(_of(13) => _of(14));
  _f(6) & get_w.3,(_of(11) => _of(29));
  _f(6) & get_w.2,(_of(11) => _of(28));
  _f(6) & get_w.1,(_of(9) => _of(10));
  _f(6) & _f(28) & set_w.12,(_of(26) => _of(27));
  _f(6) & _f(28) & set_w.11,(_of(23) => _of(25));
  _f(6) & _f(28) & set_w.10,(_of(23) => _of(24));
  _f(6) & _f(28) & set_w.9,(_of(20) => _of(22));
  _f(6) & _f(28) & set_w.8,(_of(20) => _of(21));
  _f(6) & _f(28) & set_w.7,(_of(17) => _of(38));
  _f(6) & _f(28) & set_w.6,(_of(17) => _of(37));
  _f(6) & _f(28) & set_w.5,(_of(15) => _of(16));
  _f(6) & _f(28) & set_w.4,(_of(13) => _of(14));
  _f(6) & _f(28) & set_w.3,(_of(11) => _of(29));
  _f(6) & _f(28) & set_w.2,(_of(11) => _of(28));
  _f(6) & _f(28) & set_w.1,(_of(9) => _of(10));
  _f(6) & get_end.12,(_of(26) => _of(27));
  _f(6) & get_end.11,(_of(23) => _of(25));
  _f(6) & get_end.10,(_of(23) => _of(24));
  _f(6) & get_end.9,(_of(20) => _of(22));
  _f(6) & get_end.8,(_of(20) => _of(21));
  _f(6) & get_end.7,(_of(17) => _of(19));
  _f(6) & get_end.6,(_of(17) => _of(18));
  _f(6) & get_end.5,(_of(15) => _of(16));
  _f(6) & get_end.4,(_of(13) => _of(14));
  _f(6) & get_end.3,(_of(11) => _of(29));
  _f(6) & get_end.2,(_of(11) => _of(28));
  _f(6) & get_end.1,(_of(9) => _of(10));
  _f(6) & _f(27) & set_end.12,(_of(26) => _of(39));
  _f(6) & _f(27) & set_end.11,(_of(23) => _of(38));
  _f(6) & _f(27) & set_end.10,(_of(23) => _of(37));
  _f(6) & _f(27) & set_end.9,(_of(20) => _of(22));
  _f(6) & _f(27) & set_end.8,(_of(20) => _of(21));
  _f(6) & _f(27) & set_end.7,(_of(17) => _of(19));
  _f(6) & _f(27) & set_end.6,(_of(17) => _of(18));
  _f(6) & _f(27) & set_end.5,(_of(15) => _of(16));
  _f(6) & _f(27) & set_end.4,(_of(13) => _of(14));
  _f(6) & _f(27) & set_end.3,(_of(11) => _of(29));
  _f(6) & _f(27) & set_end.2,(_of(11) => _of(28));
  _f(6) & _f(27) & set_end.1,(_of(9) => _of(10));
  _f(6) & get_pc.12,(_of(26) => _of(27));
  _f(6) & get_pc.11,(_of(23) => _of(25));
  _f(6) & get_pc.10,(_of(23) => _of(24));
  _f(6) & get_pc.9,(_of(20) => _of(22));
  _f(6) & get_pc.8,(_of(20) => _of(21));
  _f(6) & get_pc.7,(_of(17) => _of(19));
  _f(6) & get_pc.6,(_of(17) => _of(18));
  _f(6) & get_pc.5,(_of(15) => _of(16));
  _f(6) & get_pc.4,(_of(13) => _of(14));
  _f(6) & get_pc.3,(_of(11) => _of(29));
  _f(6) & get_pc.2,(_of(11) => _of(28));
  _f(6) & get_pc.1,(_of(9) => _of(10));
  _f(6) & _f(26) & get_data.12,(_of(26) => _of(27));
  _f(6) & _f(26) & get_data.11,(_of(23) => _of(25));
  _f(6) & _f(26) & get_data.10,(_of(23) => _of(24));
  _f(6) & _f(26) & get_data.9,(_of(20) => _of(22));
  _f(6) & _f(26) & get_data.8,(_of(20) => _of(21));
  _f(6) & _f(26) & get_data.7,(_of(17) => _of(19));
  _f(6) & _f(26) & get_data.6,(_of(17) => _of(18));
  _f(6) & _f(26) & get_data.5,(_of(15) => _of(16));
  _f(6) & _f(26) & get_data.4,(_of(13) => _of(14));
  _f(6) & _f(26) & get_data.3,(_of(11) => _of(29));
  _f(6) & _f(26) & get_data.2,(_of(11) => _of(28));
  _f(6) & _f(26) & get_data.1,(_of(9) => _of(10));
  _f(6) & _f(24) & pop_2.11,(_of(26) => _of(27));
  _f(6) & _f(24) & pop_2.10,(_of(23) => _of(25));
  _f(6) & _f(24) & pop_2.9,(_of(23) => _of(24));
  _f(6) & _f(24) & pop_2.8,(_of(20) => _of(22));
  _f(6) & _f(24) & pop_2.7,(_of(20) => _of(21));
  _f(6) & _f(24) & pop_2.6,(_of(17) => _of(19));
  _f(6) & _f(24) & pop_2.5,(_of(17) => _of(18));
  _f(6) & _f(24) & pop_2.4,(_of(15) => _of(36));
  _f(6) & _f(24) & pop_2.3,(_of(11) => _of(29));
  _f(6) & _f(24) & pop_2.2,(_of(11) => _of(28));
  _f(6) & _f(24) & pop_2.1,(_of(9) => _of(10));
  _f(6) & _f(19) & pop_1.9,(_of(23) => _of(25));
  _f(6) & _f(19) & pop_1.8,(_of(23) => _of(24));
  _f(6) & _f(19) & pop_1.7,(_of(17) => _of(19));
  _f(6) & _f(19) & pop_1.6,(_of(17) => _of(18));
  _f(6) & _f(19) & pop_1.5,(_of(15) => _of(16));
  _f(6) & _f(19) & pop_1.4,(_of(13) => _of(14));
  _f(6) & _f(19) & pop_1.3,(_of(11) => _of(29));
  _f(6) & _f(19) & pop_1.2,(_of(11) => _of(28));
  _f(6) & _f(19) & pop_1.1,(_of(9) => _of(10));
  _f(6) & _f(11) & push.8,(_of(26) => _of(35));
  _f(6) & _f(11) & push.7,(_of(23) => _of(25));
  _f(6) & _f(11) & push.6,(_of(23) => _of(24));
  _f(6) & _f(11) & push.5,(_of(17) => _of(19));
  _f(6) & _f(11) & push.4,(_of(17) => _of(18));
  _f(6) & _f(11) & push.3,(_of(11) => _of(29));
  _f(6) & _f(11) & push.2,(_of(11) => _of(28));
  _f(6) & _f(11) & push.1,(_of(9) => _of(10));
  _f(6) & _f(10) & init.12,(_of(26) => _of(34));
  _f(6) & _f(10) & init.11,(_of(23) => _of(33));
  _f(6) & _f(10) & init.10,(_of(23) => _of(32));
  _f(6) & _f(10) & init.9,(_of(20) => _of(31));
  _f(6) & _f(10) & init.8,(_of(20) => _of(30));
  _f(6) & _f(10) & init.7,(_of(17) => _of(19));
  _f(6) & _f(10) & init.6,(_of(17) => _of(18));
  _f(6) & _f(10) & init.5,(_of(15) => _of(16));
  _f(6) & _f(10) & init.4,(_of(13) => _of(14));
  _f(6) & _f(10) & init.3,(_of(11) => _of(29));
  _f(6) & _f(10) & init.2,(_of(11) => _of(28));
  _f(6) & _f(10) & init.1,(_of(9) => _of(10));
  _f(6) & _f(7) & init_data.11,(_of(26) => _of(27));
  _f(6) & _f(7) & init_data.10,(_of(23) => _of(25));
  _f(6) & _f(7) & init_data.9,(_of(23) => _of(24));
  _f(6) & _f(7) & init_data.8,(_of(20) => _of(22));
  _f(6) & _f(7) & init_data.7,(_of(20) => _of(21));
  _f(6) & _f(7) & init_data.6,(_of(17) => _of(19));
  _f(6) & _f(7) & init_data.5,(_of(17) => _of(18));
  _f(6) & _f(7) & init_data.4,(_of(15) => _of(16));
  _f(6) & _f(7) & init_data.3,(_of(13) => _of(14));
  _f(6) & _f(7) & init_data.2,(_of(11) => _of(12));
  _f(6) & _f(7) & init_data.1,(_of(9) => _of(10));
  Initialisation.4,(_f(1) & _of(7) => _of(8));
  Initialisation.3,(_f(1) & _of(5) => _of(6));
  Initialisation.2,(_of(1) & _of(2) => _of(4));
  Initialisation.1,(_of(1) & _of(2) => _of(3))
END
&
THEORY OPOFormulas IS
  ("`Local hypotheses'" & memory_data$0 : NATURAL +-> NATURAL & dom(memory_data$0) = NATURAL);
  "`Check that the invariant (memory_data : NATURAL --> NATURAL) is established by the initialisation - ref 3.3'";
  (memory_data$0 : NATURAL +-> NATURAL);
  (dom(memory_data$0) = NATURAL);
  "`Check that the invariant (w : NATURAL) is established by the initialisation - ref 3.3'" & "`Check that the invariant (pc : NATURAL) is established by the initialisation - ref 3.3'" & "`Check that the invariant (end : NATURAL) is established by the initialisation - ref 3.3'";
  (0 : INTEGER);
  "`Check that the invariant (w : NATURAL) is established by the initialisation - ref 3.3'" & "`Check that the invariant (pc : NATURAL) is established by the initialisation - ref 3.3'" & "`Check that the invariant (end : NATURAL) is established by the initialisation - ref 3.3'" & "`Check that the invariant (pc<=end) is established by the initialisation - ref 3.3'";
  (0<=0);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (btrue);
  "`Check that the invariant (memory_data : NATURAL --> NATURAL) is preserved by the operation - ref 3.4'";
  (dom(memory_data<+{address|->value}) = NATURAL);
  "`Check that the invariant (stack : 1..8 +-> NATURAL) is preserved by the operation - ref 3.4'";
  (stack : 1..8 +-> NATURAL);
  "`Check that the invariant (card(stack)<=8) is preserved by the operation - ref 3.4'";
  (card(stack)<=8);
  "`Check that the invariant (w : NATURAL) is preserved by the operation - ref 3.4'";
  (w : INTEGER);
  (0<=w);
  "`Check that the invariant (pc : NATURAL) is preserved by the operation - ref 3.4'";
  (pc : INTEGER);
  (0<=pc);
  "`Check that the invariant (end : NATURAL) is preserved by the operation - ref 3.4'";
  (end : INTEGER);
  (0<=end);
  "`Check that the invariant (pc<=end) is preserved by the operation - ref 3.4'";
  (pc<=end);
  (memory_data : NATURAL +-> NATURAL);
  (dom(memory_data) = NATURAL);
  (pc_ : INTEGER);
  (0<=pc_);
  (end_ : INTEGER);
  (0<=end_);
  (pc_<=end_);
  (pc+1<=end);
  (card({card(stack)}<<|stack)<=8);
  (value : INTEGER);
  (0<=value);
  (pc<=value);
  (value<=end);
  ("`Local hypotheses'" & memory_data(address) = 0);
  ("`Local hypotheses'" & not(memory_data(address) = 0));
  (pc+2 : INTEGER);
  (0<=pc+2);
  (pc+2<=end);
  ("`Local hypotheses'" & memory_data(address_1) = value);
  ("`Local hypotheses'" & not(memory_data(address_1) = value));
  (dom(memory_data<+{address|->memory_data(address)+1}) = NATURAL);
  (dom(memory_data<+{address|->memory_data(address)-1}) = NATURAL);
  (memory_data(address1)+memory_data(address2) : INTEGER);
  (0<=memory_data(address1)+memory_data(address2));
  (memory_data(address1)-memory_data(address2) : INTEGER);
  (0<=memory_data(address1)-memory_data(address2));
  (memory_data(address1)*memory_data(address2) : INTEGER);
  (0<=memory_data(address1)*memory_data(address2));
  (memory_data(address1)/memory_data(address2) : INTEGER);
  (0<=memory_data(address1)/memory_data(address2))
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
