THEORY ProofList IS
  _f(1) & _f(2) & _f(7) & advance.34,(_f(33) & _f(14) => _f(30));
  _f(1) & _f(2) & _f(7) & advance.33,(_f(33) & _f(14) => _f(11));
  _f(1) & _f(2) & _f(7) & advance.32,(_f(31) & _f(14) => _f(32));
  _f(1) & _f(2) & _f(7) & advance.31,(_f(31) & _f(14) => _f(17));
  _f(1) & _f(2) & _f(7) & advance.30,(_f(29) & _f(14) => _f(30));
  _f(1) & _f(2) & _f(7) & advance.29,(_f(29) & _f(9) => _f(11));
  _f(1) & _f(2) & _f(7) & advance.28,(_f(29) & _f(9) => _f(10));
  _f(1) & _f(2) & _f(7) & advance.27,(_f(28) & _f(14) => _f(25));
  _f(1) & _f(2) & _f(7) & advance.26,(_f(28) & _f(12) => _f(4));
  _f(1) & _f(2) & _f(7) & advance.25,(_f(28) & _f(14) => _f(11));
  _f(1) & _f(2) & _f(7) & advance.24,(_f(26) & _f(14) => _f(27));
  _f(1) & _f(2) & _f(7) & advance.23,(_f(26) & _f(12) => _f(4));
  _f(1) & _f(2) & _f(7) & advance.22,(_f(26) & _f(14) => _f(17));
  _f(1) & _f(2) & _f(7) & advance.21,(_f(24) & _f(14) => _f(25));
  _f(1) & _f(2) & _f(7) & advance.20,(_f(24) & _f(12) => _f(4));
  _f(1) & _f(2) & _f(7) & advance.19,(_f(24) & _f(9) => _f(11));
  _f(1) & _f(2) & _f(7) & advance.18,(_f(24) & _f(9) => _f(10));
  _f(1) & _f(2) & _f(7) & advance.17,(_f(23) & _f(12) => _f(20));
  _f(1) & _f(2) & _f(7) & advance.16,(_f(23) & _f(14) => _f(11));
  _f(1) & _f(2) & _f(7) & advance.15,(_f(21) & _f(14) => _f(22));
  _f(1) & _f(2) & _f(7) & advance.14,(_f(21) & _f(12) => _f(20));
  _f(1) & _f(2) & _f(7) & advance.13,(_f(21) & _f(14) => _f(17));
  _f(1) & _f(2) & _f(7) & advance.12,(_f(19) & _f(12) => _f(20));
  _f(1) & _f(2) & _f(7) & advance.11,(_f(19) & _f(9) => _f(11));
  _f(1) & _f(2) & _f(7) & advance.10,(_f(19) & _f(9) => _f(10));
  _f(1) & _f(2) & _f(7) & advance.9,(_f(18) & _f(14) => _f(15));
  _f(1) & _f(2) & _f(7) & advance.8,(_f(18) & _f(12) => _f(13));
  _f(1) & _f(2) & _f(7) & advance.7,(_f(18) & _f(14) => _f(11));
  _f(1) & _f(2) & _f(7) & advance.6,(_f(16) & _f(12) => _f(13));
  _f(1) & _f(2) & _f(7) & advance.5,(_f(16) & _f(14) => _f(17));
  _f(1) & _f(2) & _f(7) & advance.4,(_f(8) & _f(14) => _f(15));
  _f(1) & _f(2) & _f(7) & advance.3,(_f(8) & _f(12) => _f(13));
  _f(1) & _f(2) & _f(7) & advance.2,(_f(8) & _f(9) => _f(11));
  _f(1) & _f(2) & _f(7) & advance.1,(_f(8) & _f(9) => _f(10));
  _f(1) & _f(2) & Initialisation.2,(_f(5) => _f(6));
  _f(1) & _f(2) & Initialisation.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & not((1..3)*{COLOR} = {}) & color_refine : (1..3)*{COLOR} +-> NATURAL & dom(color_refine) = (1..3)*{COLOR} & color_refine = {1|->COLOR|->0}\/{2|->COLOR|->1}\/{3|->COLOR|->2});
  ("`Seen and used machines assertions'" & !c.(c : (1..3)*{COLOR} => c = 1|->COLOR or c = 2|->COLOR or c = 3|->COLOR) & color_refine(1|->COLOR) = 0 & color_refine(2|->COLOR) = 1 & color_refine(3|->COLOR) = 2);
  "`Check that the invariant (counter : 0..2) is established by the initialisation - ref 4.3, 5.4'";
  (0 : 0..2);
  "`Check that the invariant (counter = color_refine(color)) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'";
  (#(color$0).(color$0 : (1..3)*{COLOR} & 0 = color_refine(color$0)));
  ("`Previous components invariants'" & color : (1..3)*{COLOR} & "`Component invariant'" & counter$1 : INTEGER & 0<=counter$1 & counter$1 : 0..2 & counter$1 = color_refine(color));
  ("`Local hypotheses'" & not(counter$1 = 2) & not(counter$1 = 1) & counter$1 = 0 & color = 3|->COLOR & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(1 : INTEGER & 1 : 0..2 & 1 = color_refine(1|->COLOR))) & not(color = 1|->COLOR));
  "`Check that the invariant (counter : NATURAL & counter : NATURAL & counter : 0..2 & counter = color_refine(color)) is preserved by the operation - ref 4.4, 5.5'";
  (not(color = 3|->COLOR));
  (color = 2|->COLOR);
  "`Check that the invariant (counter : 0..2) is preserved by the operation - ref 4.4, 5.5'";
  (1 : 0..2);
  "`Check that the invariant (counter = color_refine(color)) is preserved by the operation - ref 4.4, 5.5'";
  (1 = color_refine(3|->COLOR));
  ("`Local hypotheses'" & not(counter$1 = 2) & not(counter$1 = 1) & counter$1 = 0 & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(1 : INTEGER & 1 : 0..2 & 1 = color_refine(color))) & color = 1|->COLOR);
  (not(color = 2|->COLOR));
  ("`Local hypotheses'" & not(counter$1 = 2) & not(counter$1 = 1) & counter$1 = 0 & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(1 : INTEGER & 1 : 0..2 & 1 = color_refine(color))) & not(color = 1|->COLOR));
  ("`Local hypotheses'" & not(counter$1 = 0) & not(counter$1 = 2) & counter$1 = 1 & color = 3|->COLOR & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(2 : INTEGER & 2 : 0..2 & 2 = color_refine(1|->COLOR))) & not(color = 1|->COLOR));
  (2 : 0..2);
  ("`Local hypotheses'" & not(counter$1 = 0) & not(counter$1 = 2) & counter$1 = 1 & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(2 : INTEGER & 2 : 0..2 & 2 = color_refine(color))) & color = 1|->COLOR);
  (2 = color_refine(2|->COLOR));
  ("`Local hypotheses'" & not(counter$1 = 0) & not(counter$1 = 2) & counter$1 = 1 & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(2 : INTEGER & 2 : 0..2 & 2 = color_refine(color))) & not(color = 1|->COLOR));
  ("`Local hypotheses'" & not(counter$1 = 0) & not(counter$1 = 1) & counter$1 = 2 & color = 3|->COLOR & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(0 : INTEGER & 0 : 0..2 & 0 = color_refine(1|->COLOR))) & not(color = 1|->COLOR));
  (0 = color_refine(3|->COLOR));
  ("`Local hypotheses'" & not(counter$1 = 0) & not(counter$1 = 1) & counter$1 = 2 & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(0 : INTEGER & 0 : 0..2 & 0 = color_refine(color))) & color = 1|->COLOR);
  (0 = color_refine(2|->COLOR));
  ("`Local hypotheses'" & not(counter$1 = 0) & not(counter$1 = 1) & counter$1 = 2 & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(0 : INTEGER & 0 : 0..2 & 0 = color_refine(color))) & not(color = 1|->COLOR));
  ("`Local hypotheses'" & not(counter$1 = 0) & not(counter$1 = 1) & not(counter$1 = 2) & color = 3|->COLOR & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(counter$1 : INTEGER & 0<=counter$1 & counter$1 : 0..2 & counter$1 = color_refine(1|->COLOR))) & not(color = 1|->COLOR));
  (counter$1 = color_refine(3|->COLOR));
  ("`Local hypotheses'" & not(counter$1 = 0) & not(counter$1 = 1) & not(counter$1 = 2) & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(counter$1 : INTEGER & 0<=counter$1 & counter$1 : 0..2 & counter$1 = color_refine(color))) & color = 1|->COLOR);
  (counter$1 = color_refine(2|->COLOR));
  ("`Local hypotheses'" & not(counter$1 = 0) & not(counter$1 = 1) & not(counter$1 = 2) & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(counter$1 : INTEGER & 0<=counter$1 & counter$1 : 0..2 & counter$1 = color_refine(color))) & not(color = 1|->COLOR))
END
&
THEORY EnumerateX IS
  COLOR == {green,yellow,red}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
