THEORY OPOBalanceX IS
  traffic_light_asm,79;
  ValuesLemmas,1;
  InstanciatedConstraintsLemmas,0;
  Initialisation,3;
  advance,75
END
&
THEORY OPOProofList IS
  _f(1) & _f(8) & advance.75,(_of(22) & _of(60) => _of(78));
  _f(1) & _f(8) & advance.74,(_of(22) & _of(60) => _of(77));
  _f(1) & _f(8) & advance.73,(_of(22) & _of(75) => _of(76));
  _f(1) & _f(8) & advance.72,(_of(22) & _of(60) => _of(74));
  _f(1) & _f(8) & advance.71,(_of(22) & _of(60) => _of(73));
  _f(1) & _f(8) & advance.70,(_of(22) & _of(58) => _of(72));
  _f(1) & _f(8) & advance.69,(_of(71) & _of(60) => _of(2));
  _f(1) & _f(8) & advance.68,(_of(22) & _of(69) => _of(70));
  _f(1) & _f(8) & advance.67,(_of(22) & _of(60) => _of(68));
  _f(1) & _f(8) & advance.66,(_of(22) & _of(60) => _of(67));
  _f(1) & _f(8) & advance.65,(_of(22) & _of(60) => _of(66));
  _f(1) & _f(8) & advance.64,(_of(65) & _of(60) => _of(2));
  _f(1) & _f(8) & advance.63,(_of(63) & _of(60) => _of(64));
  _f(1) & _f(8) & advance.62,(_of(22) & _of(60) => _of(62));
  _f(1) & _f(8) & advance.61,(_of(22) & _of(60) => _of(61));
  _f(1) & _f(8) & advance.60,(_of(22) & _of(58) => _of(59));
  _f(1) & _f(8) & advance.59,(_of(22) & _of(56) => _of(57));
  _f(1) & _f(8) & advance.58,(_of(22) & _of(51) => _of(55));
  _f(1) & _f(8) & advance.57,(_of(22) & _of(51) => _of(54));
  _f(1) & _f(8) & advance.56,(_of(22) & _of(51) => _of(53));
  _f(1) & _f(8) & advance.55,(_of(22) & _of(51) => _of(52));
  _f(1) & _f(8) & advance.54,(_of(22) & _of(4) => _of(50));
  _f(1) & _f(8) & advance.53,(_of(17) & _of(4) => _of(47));
  _f(1) & _f(8) & advance.52,(_of(17) & _of(4) => _of(46));
  _f(1) & _f(8) & advance.51,(_of(17) & _of(4) => _of(45));
  _f(1) & _f(8) & advance.50,(_of(17) & _of(4) => _of(44));
  _f(1) & _f(8) & advance.49,(_of(17) & _of(4) => _of(43));
  _f(1) & _f(8) & advance.48,(_of(22) & _of(40) => _of(49));
  _f(1) & _f(8) & advance.47,(_of(22) & _of(38) => _of(48));
  _f(1) & _f(8) & advance.46,(_of(18) & _of(4) => _of(47));
  _f(1) & _f(8) & advance.45,(_of(18) & _of(4) => _of(46));
  _f(1) & _f(8) & advance.44,(_of(18) & _of(4) => _of(45));
  _f(1) & _f(8) & advance.43,(_of(18) & _of(4) => _of(44));
  _f(1) & _f(8) & advance.42,(_of(18) & _of(4) => _of(43));
  _f(1) & _f(8) & advance.41,(_of(22) & _of(40) => _of(42));
  _f(1) & _f(8) & advance.40,(_of(22) & _of(40) => _of(41));
  _f(1) & _f(8) & advance.39,(_of(22) & _of(38) => _of(39));
  _f(1) & _f(8) & advance.38,(_of(22) & _of(4) => _of(37));
  _f(1) & _f(8) & advance.37,(_of(22) & _of(4) => _of(36));
  _f(1) & _f(8) & advance.36,(_of(14) & _of(4) => _of(20));
  _f(1) & _f(8) & advance.35,(_of(14) & _of(4) => _of(6));
  _f(1) & _f(8) & advance.34,(_of(14) & _of(4) => _of(5));
  _f(1) & _f(8) & advance.33,(_of(22) & _of(4) => _of(35));
  _f(1) & _f(8) & advance.32,(_of(22) & _of(9) => _of(34));
  _f(1) & _f(8) & advance.31,(_of(17) & _of(4) => _of(33));
  _f(1) & _f(8) & advance.30,(_of(17) & _of(4) => _of(6));
  _f(1) & _f(8) & advance.29,(_of(17) & _of(4) => _of(5));
  _f(1) & _f(8) & advance.28,(_of(22) & _of(31) => _of(32));
  _f(1) & _f(8) & advance.27,(_of(22) & _of(4) => _of(30));
  _f(1) & _f(8) & advance.26,(_of(22) & _of(4) => _of(29));
  _f(1) & _f(8) & advance.25,(_f(9) & _of(4) => _of(20));
  _f(1) & _f(8) & advance.24,(_f(9) & _of(4) => _of(10));
  _f(1) & _f(8) & advance.23,(_of(22) & _of(9) => _of(28));
  _f(1) & _f(8) & advance.22,(_of(22) & _of(9) => _of(27));
  _f(1) & _f(8) & advance.21,(_f(9) & _of(4) => _of(26));
  _f(1) & _f(8) & advance.20,(_f(9) & _of(4) => _of(6));
  _f(1) & _f(8) & advance.19,(_of(25) & _of(4) => _of(5));
  _f(1) & _f(8) & advance.18,(_of(22) & _of(4) => _of(24));
  _f(1) & _f(8) & advance.17,(_of(22) & _of(4) => _of(23));
  _f(1) & _f(8) & advance.16,(_of(18) & _of(4) => _of(21));
  _f(1) & _f(8) & advance.15,(_of(18) & _of(9) => _of(20));
  _f(1) & _f(8) & advance.14,(_of(18) & _of(9) => _of(10));
  _f(1) & _f(8) & advance.13,(_of(18) & _of(4) => _of(19));
  _f(1) & _f(8) & advance.12,(_of(18) & _of(4) => _of(5));
  _f(1) & _f(8) & advance.11,(_of(17) & _of(4) => _of(16));
  _f(1) & _f(8) & advance.10,(_of(17) & _of(4) => _of(15));
  _f(1) & _f(8) & advance.9,(_of(14) & _of(4) => _of(16));
  _f(1) & _f(8) & advance.8,(_of(14) & _of(4) => _of(15));
  _f(1) & _f(8) & advance.7,(_of(4) => _of(13));
  _f(1) & _f(8) & advance.6,(_of(4) => _of(12));
  _f(1) & _f(8) & advance.5,(_of(4) => _of(11));
  _f(1) & _f(8) & advance.4,(_of(4) => _of(10));
  _f(1) & _f(8) & advance.3,(_of(9) => _of(5));
  _f(1) & _f(8) & advance.2,(_of(4) => _of(2));
  _f(1) & _f(8) & advance.1,(_of(8) => _of(2));
  _f(1) & Initialisation.3,(_f(5) & _of(7) => _of(2));
  _f(1) & Initialisation.2,(_of(3) & _of(4) => _of(6));
  _f(1) & Initialisation.1,(_of(3) & _of(4) => _of(5));
  ValuesLemmas.1,(_of(1) => _of(2))
END
&
THEORY OPOFormulas IS
  "`Check that the property (btrue) is preserved by the valuations - ref 5.2'";
  (btrue);
  ("`Local hypotheses'" & memory_data$0 : NATURAL +-> NATURAL & dom(memory_data$0) = NATURAL);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (0 : NATURAL);
  (3 : NATURAL);
  "`Check initialisation refinement - ref 4.3, 5.4'";
  "`Check precondition (btrue) deduction'";
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (5 : NATURAL);
  (0<=5);
  (1 : NATURAL);
  (2<5);
  ("`Local hypotheses'" & micromemory_data$1(0) = 1);
  (4 : NATURAL);
  (4<=5);
  ("`Local hypotheses'" & not(micromemory_data$1(0) = 1) & bfalse);
  ("`Local hypotheses'" & micromemory_data$1(0) = 1 & bfalse);
  (micromemory_data$1(0)-1 : NATURAL);
  (5<=5);
  (dom(micromemory_data$1<+{0|->micromemory_data$1(0)-1}) = NATURAL);
  ("`Local hypotheses'" & bfalse);
  (4 = 2 => 0 : NATURAL & micromemory_data$1(0)-1 : NATURAL & 5 : NATURAL & 5<=5 & dom(micromemory_data$1<+{0|->micromemory_data$1(0)-1}) = NATURAL);
  (1 = 2 => 0 : NATURAL & micromemory_data$1(0)-1 : NATURAL & 2 : NATURAL & 2<=5 & dom(micromemory_data$1<+{0|->micromemory_data$1(0)-1}) = NATURAL);
  ("`Local hypotheses'" & not(micromemory_data$1(0) = 1));
  (3<=5);
  (5 = 3 => 5 : NATURAL & 5<=5);
  (2 = 3 => 5 : NATURAL & 5<=5);
  (4 = 3 => 5 : NATURAL & 5<=5);
  (1 = 3 => 5 : NATURAL & 5<=5);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (5 = 4 => 0 : NATURAL & 3 : NATURAL & 6<=5);
  (6<=5);
  (2 = 4 => 0 : NATURAL & 3 : NATURAL & 3<=5);
  (3 = 4 => 0 : NATURAL & 3 : NATURAL & 4<=5);
  (4 = 4 => 0 : NATURAL & 3 : NATURAL & 5<=5);
  (1 = 4 => 0 : NATURAL & 3 : NATURAL & 2<=5);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (6/=5 => -1 : INT & 0 : INT & 1 : INT & -1 : NATURAL & -1<=5);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (3/=5 => -1 : INT & 0 : INT & 1 : INT & -1 : NATURAL & -1<=5);
  (4/=5 => -1 : INT & 0 : INT & 1 : INT & -1 : NATURAL & -1<=5);
  (-1 : INT);
  (0 : INT);
  (1 : INT);
  (-1 : NATURAL);
  (-1<=5);
  (5/=5 => -1 : INT & 0 : INT & 1 : INT & -1 : NATURAL & -1<=5);
  (2/=5 => -1 : INT & 0 : INT & 1 : INT & -1 : NATURAL & -1<=5);
  (1/=5 => -1 : INT & 0 : INT & 1 : INT & -1 : NATURAL & -1<=5);
  "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'";
  (not(btrue & micromemory_data$1<+{0|->micromemory_data$1(0)-1}<+{0|->3} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->micromemory_data$1(0)-1}<+{0|->3}) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & -1 : INTEGER & 0<= -1 & 5 : INTEGER & 0<=5 & -1<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not((micromemory_data$1<+{0|->micromemory_data$1(0)-1}<+{0|->3})(0) = state$7777 & btrue))));
  (not(btrue & micromemory_data$1<+{0|->3} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->3}) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & -1 : INTEGER & 0<= -1 & 5 : INTEGER & 0<=5 & -1<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not((micromemory_data$1<+{0|->3})(0) = state$7777 & btrue))));
  (not(btrue & micromemory_data$1<+{0|->micromemory_data$1(0)-1} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->micromemory_data$1(0)-1}) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & -1 : INTEGER & 0<= -1 & 5 : INTEGER & 0<=5 & -1<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not((micromemory_data$1<+{0|->micromemory_data$1(0)-1})(0) = state$7777 & btrue))));
  (not(btrue & micromemory_data$1 : NATURAL +-> NATURAL & dom(micromemory_data$1) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & -1 : INTEGER & 0<= -1 & 5 : INTEGER & 0<=5 & -1<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not(micromemory_data$1(0) = state$7777 & btrue))));
  "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'";
  (not(btrue & micromemory_data$1<+{0|->micromemory_data$1(0)-1}<+{0|->3} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->micromemory_data$1(0)-1}<+{0|->3}) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & 6 : INTEGER & 0<=6 & 5 : INTEGER & 0<=5 & 6<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not((micromemory_data$1<+{0|->micromemory_data$1(0)-1}<+{0|->3})(0) = state$7777 & btrue))));
  "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'";
  (not(btrue & micromemory_data$1<+{0|->3} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->3}) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & 6 : INTEGER & 0<=6 & 5 : INTEGER & 0<=5 & 6<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not((micromemory_data$1<+{0|->3})(0) = state$7777 & btrue))));
  "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'";
  (not(btrue & micromemory_data$1<+{0|->micromemory_data$1(0)-1}<+{0|->3} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->micromemory_data$1(0)-1}<+{0|->3}) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & 3 : INTEGER & 0<=3 & 5 : INTEGER & 0<=5 & 3<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not((micromemory_data$1<+{0|->micromemory_data$1(0)-1}<+{0|->3})(0) = state$7777 & btrue))));
  (not(btrue & micromemory_data$1<+{0|->micromemory_data$1(0)-1}<+{0|->3} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->micromemory_data$1(0)-1}<+{0|->3}) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & 4 : INTEGER & 0<=4 & 5 : INTEGER & 0<=5 & 4<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not((micromemory_data$1<+{0|->micromemory_data$1(0)-1}<+{0|->3})(0) = state$7777 & btrue))));
  ("`Local hypotheses'" & micromemory_data$1(0) = 1 & micromemory_data$1<+{0|->3} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->3}) = NATURAL & 5 : INTEGER & not(state = 1));
  ((micromemory_data$1<+{0|->3})(0) = state-1);
  ("`Local hypotheses'" & micromemory_data$1(0) = 1 & micromemory_data$1<+{0|->3} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->3}) = NATURAL & 5 : INTEGER);
  (not(micromemory_data$1<+{0|->3} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->3}) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & 5 : INTEGER & 0<=5 & 5 : INTEGER & 0<=5 & 5<=5 & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not((micromemory_data$1<+{0|->3})(0) = state$7777))));
  (not(btrue & micromemory_data$1<+{0|->3} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->3}) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & 2 : INTEGER & 0<=2 & 5 : INTEGER & 0<=5 & 2<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not((micromemory_data$1<+{0|->3})(0) = state$7777 & btrue))));
  (not(btrue & micromemory_data$1<+{0|->3} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->3}) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & 3 : INTEGER & 0<=3 & 5 : INTEGER & 0<=5 & 3<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not((micromemory_data$1<+{0|->3})(0) = state$7777 & btrue))));
  "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'";
  (not(btrue & micromemory_data$1<+{0|->micromemory_data$1(0)-1} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->micromemory_data$1(0)-1}) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & 5 : INTEGER & 0<=5 & 5 : INTEGER & 0<=5 & 5<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not((micromemory_data$1<+{0|->micromemory_data$1(0)-1})(0) = state$7777 & btrue))));
  ("`Local hypotheses'" & not(micromemory_data$1(0) = 1) & micromemory_data$1<+{0|->micromemory_data$1(0)-1} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->micromemory_data$1(0)-1}) = NATURAL & 5 : INTEGER);
  (not(micromemory_data$1 : NATURAL +-> NATURAL & dom(micromemory_data$1) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & 5 : INTEGER & 0<=5 & 5 : INTEGER & 0<=5 & 5<=5 & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not(micromemory_data$1(0) = state$7777))));
  (not(btrue & micromemory_data$1<+{0|->micromemory_data$1(0)-1} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->micromemory_data$1(0)-1}) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & 2 : INTEGER & 0<=2 & 5 : INTEGER & 0<=5 & 2<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not((micromemory_data$1<+{0|->micromemory_data$1(0)-1})(0) = state$7777 & btrue))));
  (not(btrue & micromemory_data$1<+{0|->micromemory_data$1(0)-1} : NATURAL +-> NATURAL & dom(micromemory_data$1<+{0|->micromemory_data$1(0)-1}) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & 3 : INTEGER & 0<=3 & 5 : INTEGER & 0<=5 & 3<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not((micromemory_data$1<+{0|->micromemory_data$1(0)-1})(0) = state$7777 & btrue))));
  "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (micromemory_data(0) = state) is preserved by the operation - ref 4.4, 5.5'";
  (not(btrue & micromemory_data$1 : NATURAL +-> NATURAL & dom(micromemory_data$1) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & 4 : INTEGER & 0<=4 & 5 : INTEGER & 0<=5 & 4<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not(micromemory_data$1(0) = state$7777 & btrue))));
  (not(btrue & micromemory_data$1 : NATURAL +-> NATURAL & dom(micromemory_data$1) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & 1 : INTEGER & 0<=1 & 5 : INTEGER & 0<=5 & 1<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not(micromemory_data$1(0) = state$7777 & btrue))));
  (not(btrue & micromemory_data$1 : NATURAL +-> NATURAL & dom(micromemory_data$1) = NATURAL & microstack$1 : 1..8 +-> NATURAL & card(microstack$1)<=8 & microw$1 : INTEGER & 0<=microw$1 & 2 : INTEGER & 0<=2 & 5 : INTEGER & 0<=5 & 2<=5 & btrue & btrue & btrue & !(state$7777).(state = 1 & state$7777 = 3 or (not(state = 1) & state$7777 = state-1) => not(micromemory_data$1(0) = state$7777 & btrue))))
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
