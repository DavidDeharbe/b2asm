THEORY OPOBalanceX IS
  conditionalasmw,46;
  ValuesLemmas,1;
  InstanciatedConstraintsLemmas,0;
  Initialisation,3;
  add,39;
  largest,3
END
&
THEORY OPOProofList IS
  _f(1) & _f(2) & _f(9) & _f(49) & largest.3,(_f(50) & _of(40) => _of(41));
  _f(1) & _f(2) & _f(9) & _f(49) & largest.2,(_f(50) & _of(39) => _of(13));
  _f(1) & _f(2) & _f(9) & _f(49) & largest.1,(_of(8) => _of(2));
  _f(1) & _f(2) & _f(9) & _f(10) & add.39,(_of(38) & _of(4) => _f(30));
  _f(1) & _f(2) & _f(9) & _f(10) & add.38,(_of(37) & _of(4) => _of(17));
  _f(1) & _f(2) & _f(9) & _f(10) & add.37,(_of(37) & _of(4) => _of(28));
  _f(1) & _f(2) & _f(9) & _f(10) & add.36,(_of(37) & _of(4) => _of(27));
  _f(1) & _f(2) & _f(9) & _f(10) & add.35,(_f(44) & _of(4) => _of(36));
  _f(1) & _f(2) & _f(9) & _f(10) & add.34,(_f(44) & _of(4) => _of(35));
  _f(1) & _f(2) & _f(9) & _f(10) & add.33,(_f(44) & _of(4) => _of(34));
  _f(1) & _f(2) & _f(9) & _f(10) & add.32,(_f(44) & _of(4) => _of(33));
  _f(1) & _f(2) & _f(9) & _f(10) & add.31,(_f(41) & _of(4) => _f(24));
  _f(1) & _f(2) & _f(9) & _f(10) & add.30,(_of(32) & _of(4) => _of(28));
  _f(1) & _f(2) & _f(9) & _f(10) & add.29,(_of(32) & _of(4) => _of(27));
  _f(1) & _f(2) & _f(9) & _f(10) & add.28,(_of(31) & _of(4) => _of(28));
  _f(1) & _f(2) & _f(9) & _f(10) & add.27,(_of(31) & _of(4) => _of(27));
  _f(1) & _f(2) & _f(9) & _f(10) & add.26,(_f(31) & _of(4) => _of(30));
  _f(1) & _f(2) & _f(9) & _f(10) & add.25,(_of(29) & _of(4) => _of(28));
  _f(1) & _f(2) & _f(9) & _f(10) & add.24,(_of(29) & _of(4) => _of(27));
  _f(1) & _f(2) & _f(9) & _f(10) & add.23,(_of(26) & _of(4) => _of(28));
  _f(1) & _f(2) & _f(9) & _f(10) & add.22,(_of(26) & _of(4) => _of(27));
  _f(1) & _f(2) & _f(9) & _f(10) & add.21,(_f(27) & _of(4) => _of(25));
  _f(1) & _f(2) & _f(9) & _f(10) & add.20,(_f(27) & _of(4) => _of(21));
  _f(1) & _f(2) & _f(9) & _f(10) & add.19,(_of(24) & _of(15) => _of(21));
  _f(1) & _f(2) & _f(9) & _f(10) & add.18,(_of(24) & _of(4) => _of(6));
  _f(1) & _f(2) & _f(9) & _f(10) & add.17,(_of(24) & _of(4) => _of(5));
  _f(1) & _f(2) & _f(9) & _f(10) & add.16,(_of(22) & _of(4) => _of(23));
  _f(1) & _f(2) & _f(9) & _f(10) & add.15,(_of(22) & _of(4) => _of(6));
  _f(1) & _f(2) & _f(9) & _f(10) & add.14,(_of(22) & _of(4) => _of(5));
  _f(1) & _f(2) & _f(9) & _f(10) & add.13,(_of(19) & _of(15) => _of(21));
  _f(1) & _f(2) & _f(9) & _f(10) & add.12,(_of(19) & _of(4) => _of(20));
  _f(1) & _f(2) & _f(9) & _f(10) & add.11,(_of(19) & _of(4) => _of(5));
  _f(1) & _f(2) & _f(9) & _f(10) & add.10,(_of(14) & _of(4) => _of(18));
  _f(1) & _f(2) & _f(9) & _f(10) & add.9,(_of(14) & _of(4) => _of(17));
  _f(1) & _f(2) & _f(9) & _f(10) & add.8,(_of(14) & _of(15) => _of(16));
  _f(1) & _f(2) & _f(9) & _f(10) & add.7,(_of(14) & _of(15) => _of(13));
  _f(1) & _f(2) & _f(9) & _f(10) & add.6,(_of(9) & _of(4) => _of(13));
  _f(1) & _f(2) & _f(9) & _f(10) & add.5,(_of(9) & _of(4) => _of(12));
  _f(1) & _f(2) & _f(9) & _f(10) & add.4,(_of(9) & _of(4) => _of(11));
  _f(1) & _f(2) & _f(9) & _f(10) & add.3,(_of(9) & _of(4) => _of(10));
  _f(1) & _f(2) & _f(9) & _f(10) & add.2,(_of(9) & _of(4) => _of(2));
  _f(1) & _f(2) & _f(9) & _f(10) & add.1,(_of(8) => _of(2));
  _f(1) & _f(2) & Initialisation.3,(_f(3) & _of(4) => _of(7));
  _f(1) & _f(2) & Initialisation.2,(_of(3) & _of(4) => _of(6));
  _f(1) & _f(2) & Initialisation.1,(_of(3) & _of(4) => _of(5));
  _f(1) & ValuesLemmas.1,(_of(1) => _of(2))
END
&
THEORY OPOFormulas IS
  "`Check that the property (btrue) is preserved by the valuations - ref 5.2'";
  (btrue);
  ("`Local hypotheses'" & mem$0 : NATURAL +-> uint32 & dom(mem$0) = NATURAL & end$0 : INTEGER & 0<=end$0);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (1 : NATURAL);
  (0 : NATURAL);
  (1<=1);
  "`Check precondition (btrue) deduction'";
  ("`add preconditions in this component'" & v : uint32 & not(v : st));
  (3 : NATURAL);
  (0<=0);
  (0<=3);
  (ucmem$1(0) = max(st));
  ("`add preconditions in this component'" & v : uint32 & not(v : st) & "`Local hypotheses'" & bfalse);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'" & "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (ucmem$1(1) = v);
  (max(st)<v);
  (ucmem$1(0) = max({v,max(st)}));
  ("`add preconditions in this component'" & v : uint32 & not(v : st) & "`Local hypotheses'" & 0<=ucpc$2 & ucpc$2<=3 & (ucpc$2 = 0 => ucmem$2(0) = max(st)) & (ucpc$2 = 1 => ucmem$2(0) = max(st) & ucmem$2(1) = v) & (ucpc$2 = 2 => ucmem$2(0) = max(st) & ucmem$2(1) = v & max(st)+1<=v) & (ucpc$2 = 3 => ucmem$2(0) = max({v}\/{max(st)})) & ucpc$2+1<=3 & not(ucpc$2 = 2) & not(ucpc$2 = 1) & ucpc$2 = 0);
  (v : uint32);
  (ucpc$2+1<=3);
  ("`add preconditions in this component'" & v : uint32 & not(v : st) & "`Local hypotheses'" & 0<=ucpc$2 & ucpc$2<=3 & (ucpc$2 = 0 => ucmem$2(0) = max(st)) & (ucpc$2 = 1 => ucmem$2(0) = max(st) & ucmem$2(1) = v) & (ucpc$2 = 2 => ucmem$2(0) = max(st) & ucmem$2(1) = v & max(st)+1<=v) & (ucpc$2 = 3 => ucmem$2(0) = max({v}\/{max(st)})) & ucpc$2+1<=3 & not(ucpc$2 = 0) & not(ucpc$2 = 2) & ucpc$2 = 1);
  (ucmem$2(1)>ucmem$2(0) => ucpc$2+1<=3);
  ("`add preconditions in this component'" & v : uint32 & not(v : st) & "`Local hypotheses'" & 0<=ucpc$2 & ucpc$2<=3 & (ucpc$2 = 0 => ucmem$2(0) = max(st)) & (ucpc$2 = 1 => ucmem$2(0) = max(st) & ucmem$2(1) = v) & (ucpc$2 = 2 => ucmem$2(0) = max(st) & ucmem$2(1) = v & max(st)+1<=v) & (ucpc$2 = 3 => ucmem$2(0) = max({v}\/{max(st)})) & ucpc$2+1<=3 & not(ucpc$2 = 0) & not(ucpc$2 = 1) & ucpc$2 = 2);
  (ucpc$2+1 = 0 => ucmem$2(0) = max(st));
  ("`add preconditions in this component'" & v : uint32 & not(v : st) & "`Local hypotheses'" & 0<=ucpc$2 & ucpc$2<=3 & (ucpc$2 = 0 => ucmem$2(0) = max(st)) & (ucpc$2 = 1 => ucmem$2(0) = max(st) & ucmem$2(1) = v) & (ucpc$2 = 2 => ucmem$2(0) = max(st) & ucmem$2(1) = v & max(st)+1<=v) & (ucpc$2 = 3 => ucmem$2(0) = max({v}\/{max(st)})) & ucpc$2+1<=3 & not(ucpc$2 = 0) & not(ucpc$2 = 2) & ucmem$2(0)+1<=ucmem$2(1) & ucpc$2 = 1 & ucpc$2+1 = 1);
  (ucmem$2(0) = max(st));
  (ucmem$2(1) = v);
  ("`add preconditions in this component'" & v : uint32 & not(v : st) & "`Local hypotheses'" & 0<=ucpc$2 & ucpc$2<=3 & (ucpc$2 = 0 => ucmem$2(0) = max(st)) & (ucpc$2 = 1 => ucmem$2(0) = max(st) & ucmem$2(1) = v) & (ucpc$2 = 2 => ucmem$2(0) = max(st) & ucmem$2(1) = v & max(st)+1<=v) & (ucpc$2 = 3 => ucmem$2(0) = max({v}\/{max(st)})) & ucpc$2+1<=3 & not(ucpc$2 = 0) & not(ucpc$2 = 2) & ucmem$2(0)+1<=ucmem$2(1) & ucpc$2 = 1 & ucpc$2+1 = 2);
  (ucpc$2+2 = 0 => ucmem$2(0) = max(st));
  ("`add preconditions in this component'" & v : uint32 & not(v : st) & "`Local hypotheses'" & 0<=ucpc$2 & ucpc$2<=3 & (ucpc$2 = 0 => ucmem$2(0) = max(st)) & (ucpc$2 = 1 => ucmem$2(0) = max(st) & ucmem$2(1) = v) & (ucpc$2 = 2 => ucmem$2(0) = max(st) & ucmem$2(1) = v & max(st)+1<=v) & (ucpc$2 = 3 => ucmem$2(0) = max({v}\/{max(st)})) & ucpc$2+1<=3 & not(ucpc$2 = 0) & not(ucpc$2 = 2) & not(ucmem$2(0)+1<=ucmem$2(1)) & ucpc$2 = 1 & ucpc$2+2 = 1);
  ("`add preconditions in this component'" & v : uint32 & not(v : st) & "`Local hypotheses'" & 0<=ucpc$2 & ucpc$2<=3 & (ucpc$2 = 0 => ucmem$2(0) = max(st)) & (ucpc$2 = 1 => ucmem$2(0) = max(st) & ucmem$2(1) = v) & (ucpc$2 = 2 => ucmem$2(0) = max(st) & ucmem$2(1) = v & max(st)+1<=v) & (ucpc$2 = 3 => ucmem$2(0) = max({v}\/{max(st)})) & ucpc$2+1<=3 & not(ucpc$2 = 0) & not(ucpc$2 = 2) & not(ucmem$2(0)+1<=ucmem$2(1)) & ucpc$2 = 1 & ucpc$2+2 = 2);
  (0<=ucpc$2);
  (ucpc$2<=3);
  (ucpc$2 = 0 => ucmem$2(0) = max(st));
  (ucpc$2 = 1 => ucmem$2(0) = max(st) & ucmem$2(1) = v);
  ("`add preconditions in this component'" & v : uint32 & not(v : st) & "`Local hypotheses'" & 0<=ucpc$2 & ucpc$2<=3 & (ucpc$2 = 0 => ucmem$2(0) = max(st)) & (ucpc$2 = 1 => ucmem$2(0) = max(st) & ucmem$2(1) = v) & (ucpc$2 = 2 => ucmem$2(0) = max(st) & ucmem$2(1) = v & max(st)+1<=v) & (ucpc$2 = 3 => ucmem$2(0) = max({v}\/{max(st)})) & ucpc$2+1<=3 & not(ucpc$2 = 0) & not(ucpc$2 = 1) & not(ucpc$2 = 2) & ucpc$2 = 2);
  ("`add preconditions in this component'" & v : uint32 & not(v : st) & "`Local hypotheses'" & 0<=ucpc$2 & ucpc$2<=3 & (ucpc$2 = 0 => ucmem$2(0) = max(st)) & (ucpc$2 = 1 => ucmem$2(0) = max(st) & ucmem$2(1) = v) & (ucpc$2 = 2 => ucmem$2(0) = max(st) & ucmem$2(1) = v & max(st)+1<=v) & (ucpc$2 = 3 => ucmem$2(0) = max({v}\/{max(st)})) & ucpc$2+1<=3 & not(ucpc$2 = 0) & not(ucpc$2 = 1) & not(ucpc$2 = 2) & ucpc$2 = 3);
  "`Check that the invariant (res$1 = res) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  "`Check that the invariant (max(st) = ucmem(0)) is preserved by the operation - ref 4.4, 5.5'";
  (max(st) = ucmem$1(0))
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
