IMPLEMENTATION
   assembly2
REFINES addition
SEES programvariant
IMPORTS
  uc.microcontroller
INVARIANT
  a = uc.memory_data(0) & b = uc.memory_data(1) & 
  s = uc.memory_data(2)
INITIALISATION
  BEGIN
    uc.init_data(0, 0);
    uc.init_data(1, 0);
    uc.init_data(2, 0);
    uc.set_end(0)
  END
OPERATIONS
  run =
  VAR pc, end, loopvar IN
    pc := 0;
    end := 8;
    uc.init(pc,end);
    loopvar := 0;
    WHILE pc < end DO
    BEGIN
      CASE pc OF
        EITHER 0 THEN uc.move(0,2)
        OR 1 THEN uc.set_data(3,0)
        OR 2 THEN uc.testeq(1,3)
        OR 3 THEN uc.goto(7)
        OR 4 THEN uc.inc(2)
        OR 5 THEN uc.inc(3)
        OR 6 THEN 
          BEGIN
             uc.goto(2);
             loopvar := loopvar + 1
          END
        OR 7 THEN uc.nop
        END
      END;
      pc <-- uc.get_pc
    END
    INVARIANT 
      pc >= 0 & pc <= end &
      pc = uc.pc & end = uc.end & end = 8 &
      loopvar : NATURAL & 
      uc.memory_data : (NATURAL --> NATURAL) &
      uc.memory_data(0) = a & uc.memory_data(1) = b &
      (pc = 0 => loopvar = 0 & uc.memory_data(2) = s) &
      (pc = 1 => loopvar = 0 & uc.memory_data(2) = a) &
      (pc = 2 => (uc.memory_data(2) = a + uc.memory_data(3) & uc.memory_data(3) = loopvar & loopvar <= b)) &
      (pc = 3 => (uc.memory_data(2) = a + uc.memory_data(3) & uc.memory_data(3) = loopvar & loopvar = b)) &
      (pc = 4 => (uc.memory_data(2) = a + uc.memory_data(3) & uc.memory_data(3) = loopvar & loopvar < b)) &
      (pc = 5 => (uc.memory_data(2) = a + uc.memory_data(3)+1 & uc.memory_data(3) = loopvar & loopvar < b)) &
      (pc = 6 => (uc.memory_data(2) = a + uc.memory_data(3) & uc.memory_data(3) = loopvar + 1 & loopvar < b)) &
      (pc = 7 => (uc.memory_data(2) = a + uc.memory_data(3) & uc.memory_data(3) = loopvar & loopvar = b)) &
      (pc = 8 => (uc.memory_data(2) = a + uc.memory_data(3) & uc.memory_data(3) = loopvar & loopvar = b))
    VARIANT pgvar(pc, uc.memory_data(1), loopvar)
    END
  END
END
