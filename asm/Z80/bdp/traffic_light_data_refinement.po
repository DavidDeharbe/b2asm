THEORY ProofList IS
  _f(1) & _f(2) & _f(7) & advance.16,(_f(22) & _f(17) => _f(18));
  _f(1) & _f(2) & _f(7) & advance.15,(_f(22) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(7) & advance.14,(_f(22) & _f(12) => _f(14));
  _f(1) & _f(2) & _f(7) & advance.13,(_f(22) & _f(12) => _f(13));
  _f(1) & _f(2) & _f(7) & advance.12,(_f(22) & _f(17) => _f(11));
  _f(1) & _f(2) & _f(7) & advance.11,(_f(19) & _f(17) => _f(21));
  _f(1) & _f(2) & _f(7) & advance.10,(_f(19) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(7) & advance.9,(_f(19) & _f(12) => _f(14));
  _f(1) & _f(2) & _f(7) & advance.8,(_f(19) & _f(12) => _f(13));
  _f(1) & _f(2) & _f(7) & advance.7,(_f(19) & _f(17) => _f(20));
  _f(1) & _f(2) & _f(7) & advance.6,(_f(8) & _f(17) => _f(18));
  _f(1) & _f(2) & _f(7) & advance.5,(_f(8) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(7) & advance.4,(_f(8) & _f(12) => _f(14));
  _f(1) & _f(2) & _f(7) & advance.3,(_f(8) & _f(12) => _f(13));
  _f(1) & _f(2) & _f(7) & advance.2,(_f(8) & _f(9) => _f(11));
  _f(1) & _f(2) & _f(7) & advance.1,(_f(8) & _f(9) => _f(10));
  _f(1) & _f(2) & Initialisation.2,(_f(5) => _f(6));
  _f(1) & _f(2) & Initialisation.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & not((1..3)*{COLOR} = {}) & color_refine : (1..3)*{COLOR} +-> NATURAL & dom(color_refine) = (1..3)*{COLOR} & color_refine = {1|->COLOR|->0}\/{2|->COLOR|->1}\/{3|->COLOR|->2} & color_step : 0..2 +-> 0..2 & dom(color_step) = 0..2 & color_step = {0|->1}\/{1|->2}\/{2|->0});
  ("`Seen and used machines assertions'" & !c.(c : (1..3)*{COLOR} => c = 1|->COLOR or c = 2|->COLOR or c = 3|->COLOR) & color_refine(1|->COLOR) = 0 & color_refine(2|->COLOR) = 1 & color_refine(3|->COLOR) = 2 & color_step(0) = 1 & color_step(1) = 2 & color_step(2) = 0);
  "`Check that the invariant (counter : 0..2) is established by the initialisation - ref 4.3, 5.4'";
  (0 : 0..2);
  "`Check that the invariant (counter = color_refine(color)) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'";
  (#(color$0).(color$0 : (1..3)*{COLOR} & 0 = color_refine(color$0)));
  ("`Previous components invariants'" & color : (1..3)*{COLOR} & "`Component invariant'" & counter$1 : INTEGER & 0<=counter$1 & counter$1 : 0..2 & counter$1 = color_refine(color));
  ("`Local hypotheses'" & color = 3|->COLOR & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(color_step(counter$1) : INTEGER & 0<=color_step(counter$1) & color_step(counter$1) : 0..2 & color_step(counter$1) = color_refine(1|->COLOR))) & not(color = 1|->COLOR));
  "`Check that the invariant (counter : NATURAL & counter : NATURAL & counter : 0..2 & counter = color_refine(color)) is preserved by the operation - ref 4.4, 5.5'";
  (not(color = 3|->COLOR));
  (color = 2|->COLOR);
  "`Check that the invariant (counter : NATURAL) is preserved by the operation - ref 4.4, 5.5'";
  (color_step(counter$1) : INTEGER);
  (0<=color_step(counter$1));
  "`Check that the invariant (counter : 0..2) is preserved by the operation - ref 4.4, 5.5'";
  (color_step(counter$1) : 0..2);
  "`Check that the invariant (counter = color_refine(color)) is preserved by the operation - ref 4.4, 5.5'";
  (color_step(counter$1) = color_refine(3|->COLOR));
  ("`Local hypotheses'" & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(color_step(counter$1) : INTEGER & 0<=color_step(counter$1) & color_step(counter$1) : 0..2 & color_step(counter$1) = color_refine(color))) & color = 1|->COLOR);
  (not(color = 2|->COLOR));
  (color_step(counter$1) = color_refine(2|->COLOR));
  ("`Local hypotheses'" & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(color_step(counter$1) : INTEGER & 0<=color_step(counter$1) & color_step(counter$1) : 0..2 & color_step(counter$1) = color_refine(color))) & not(color = 1|->COLOR))
END
&
THEORY EnumerateX IS
  COLOR == {green,yellow,red}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
