THEORY ProofList IS
  _f(1) & _f(2) & AssertionLemmas.6,(_f(14) => _f(15));
  _f(1) & _f(2) & AssertionLemmas.5,(_f(9) & _f(12) => _f(13));
  _f(1) & _f(2) & AssertionLemmas.4,(_f(9) & _f(10) => _f(11));
  _f(1) & _f(2) & AssertionLemmas.3,(_f(7) => _f(8));
  _f(1) & _f(2) & AssertionLemmas.2,(_f(5) => _f(6));
  _f(1) & _f(2) & AssertionLemmas.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
  ("`Component properties'" & WORD16_LENGTH : INTEGER & 0<=WORD16_LENGTH & WORD16_LENGTH = 16 & NB_WORD16S : INTEGER & 0<=NB_WORD16S & NB_WORD16S = 2**WORD16_LENGTH & WORD16 = 0..NB_WORD16S-1 & WORD16_POSITION = 0..WORD16_LENGTH-1 & WORD8_LENGTH : INTEGER & 0<=WORD8_LENGTH & WORD8_LENGTH = 8 & NB_WORD8S : INTEGER & 0<=NB_WORD8S & NB_WORD8S = 2**WORD8_LENGTH & WORD8 = 0..NB_WORD8S-1 & WORD8_POSITION = 0..WORD8_LENGTH-1 & NB_INSTRUCTIONS : INTEGER & 0<=NB_INSTRUCTIONS & INST_SZ : INTEGER & 0<=INST_SZ & INST_SZ = 16 & NB_INSTRUCTIONS = 2**INST_SZ & INSTRUCTION_MAX = NB_INSTRUCTIONS-1 & INSTRUCTION = 0..INSTRUCTION_MAX & INSTRUCTION_NEXT : INSTRUCTION +-> INSTRUCTION & dom(INSTRUCTION_NEXT) = INSTRUCTION & INSTRUCTION_NEXT = SET(p,q).(p : INSTRUCTION & q : INSTRUCTION & 0<=p & p+1<=NB_INSTRUCTIONS-1 & q = p+1)\/{NB_INSTRUCTIONS-1|->0} & BV8_TO_WORD8 : BV8 +-> WORD8 & dom(BV8_TO_WORD8) = BV8 & BV8_TO_WORD8 = %v.(v : BV8 | 128*v(7)+64*v(6)+32*v(5)+16*v(4)+8*v(3)+4*v(2)+2*v(1)+v(0)) & WORD8_TO_BV8 : WORD8 +-> BV8 & dom(WORD8_TO_BV8) = WORD8 & WORD8_TO_BV8 = BV8_TO_WORD8~ & BV16_TO_WORD16 : BV16 +-> WORD16 & dom(BV16_TO_WORD16) = BV16 & BV16_TO_WORD16 = %v.(v : BV16 | 32768*v(15)+16384*v(14)+8192*v(13)+4096*v(12)+2048*v(11)+1024*v(10)+512*v(9)+256*v(8)+128*v(7)+64*v(6)+32*v(5)+16*v(4)+8*v(3)+4*v(2)+2*v(1)+v(0)) & WORD16_TO_BV16 : WORD16 +-> BV16 & dom(WORD16_TO_BV16) = WORD16 & WORD16_TO_BV16 = BV16_TO_WORD16~ & BV8_TO_BV16 : BV8*BV8 +-> BV16 & dom(BV8_TO_BV16) = BV8*BV8 & BV8_TO_BV16 = %(v1,v2).(v1 : BV8 & v2 : BV8 | {0|->v1(0)}\/{1|->v1(1)}\/{2|->v1(2)}\/{3|->v1(3)}\/{4|->v1(4)}\/{5|->v1(5)}\/{6|->v1(6)}\/{7|->v1(7)}\/{8|->v2(0)}\/{9|->v2(1)}\/{10|->v2(2)}\/{11|->v2(3)}\/{12|->v2(4)}\/{13|->v2(5)}\/{14|->v2(6)}\/{15|->v2(7)}) & WORD8_TO_WORD16 : WORD8*WORD8 +-> WORD16 & dom(WORD8_TO_WORD16) = WORD8*WORD8 & WORD8_TO_WORD16 = %(w1,w2).(w1 : WORD8 & w2 : WORD8 | BV16_TO_WORD16(BV8_TO_BV16(WORD8_TO_BV8(w1),WORD8_TO_BV8(w2)))) & WORD16_TO_WORD8 : WORD16 +-> WORD8*WORD8 & dom(WORD16_TO_WORD8) = WORD16 & WORD16_TO_WORD8 = WORD8_TO_WORD16~);
  ("`Included,imported and extended machines properties'" & BIT = 0..1 & BIT_FLIP : BIT +-> BIT & dom(BIT_FLIP) = BIT & !b.(b : BIT => BIT_FLIP(b) = 1-b) & BIT_AND : BIT*BIT +-> BIT & dom(BIT_AND) = BIT*BIT & !(b1,b2).(b1 : BIT & b2 : BIT => (BIT_AND(b1,b2) = 1 => b1 = 1) & (b1 = 1 => BIT_AND(b1,b2) = 1) & b2 = 1) & BIT_IOR : BIT*BIT +-> BIT & dom(BIT_IOR) = BIT*BIT & !(b1,b2).(b1 : BIT & b2 : BIT => (BIT_IOR(b1,b2) = 1 => b1 = 1) & (b1 = 1 => BIT_IOR(b1,b2) = 1) or b2 = 1) & BIT_XOR : BIT*BIT +-> BIT & dom(BIT_XOR) = BIT*BIT & !(b1,b2).(b1 : BIT & b2 : BIT => (BIT_XOR(b1,b2) = 1 => b1 = 1 & b2 = 0 or (b1 = 0 & b2 = 1)) & ((b1 = 1 & b2 = 0 => BIT_XOR(b1,b2) = 1) & (b1 = 0 & b2 = 1 => BIT_XOR(b1,b2) = 1))) & BV8_INDEX = 0..7 & BV8 = BV8_INDEX --> BIT & BV8_SET_BIT : BV8*BV8_INDEX*BIT +-> BV8 & dom(BV8_SET_BIT) = BV8*BV8_INDEX*BIT & !(v,i,j,b).(v : BV8 & i : BV8_INDEX & j : BV8_INDEX & b : BIT & not(i = j) => BV8_SET_BIT(v,i,b)(j) = v(j)) & !(v,i,b).(v : BV8 & i : BV8_INDEX & b : BIT => BV8_SET_BIT(v,i,b)(i) = b) & BV8_COMPLEMENT : BV8 +-> BV8 & dom(BV8_COMPLEMENT) = BV8 & !(v,i).(v : BV8 & i : BV8_INDEX => BV8_COMPLEMENT(v)(i) = BIT_FLIP(v(i))) & BV8_ALL_ZEROES : BV8 & !i.(i : BV8_INDEX => BV8_ALL_ZEROES(i) = 0) & BV8_AND : BV8*BV8 +-> BV8 & dom(BV8_AND) = BV8*BV8 & !(v1,v2,i).(v1 : BV8 & v2 : BV8 & i : BV8_INDEX => BV8_AND(v1,v2)(i) = BIT_AND(v1(i),v2(i))) & BV8_IOR : BV8*BV8 +-> BV8 & dom(BV8_IOR) = BV8*BV8 & !(v1,v2,i).(v1 : BV8 & v2 : BV8 & i : BV8_INDEX => BV8_IOR(v1,v2)(i) = BIT_IOR(v1(i),v2(i))) & BV8_XOR : BV8*BV8 +-> BV8 & dom(BV8_XOR) = BV8*BV8 & !(v1,v2,i).(v1 : BV8 & v2 : BV8 & i : BV8_INDEX => BV8_XOR(v1,v2)(i) = BIT_XOR(v1(i),v2(i))) & BV16_INDEX = 0..15 & BV16 = BV16_INDEX --> BIT & BV16_SET_BIT : BV16*BV16_INDEX*BIT +-> BV16 & dom(BV16_SET_BIT) = BV16*BV16_INDEX*BIT & !(v,i,j,b).(v : BV16 & i : BV16_INDEX & j : BV16_INDEX & b : BIT & not(i = j) => BV16_SET_BIT(v,i,b)(j) = v(j)) & !(v,i,b).(v : BV16 & i : BV16_INDEX & b : BIT => BV16_SET_BIT(v,i,b)(i) = b) & BV16_COMPLEMENT : BV16 +-> BV16 & dom(BV16_COMPLEMENT) = BV16 & !(v,i).(v : BV16 & i : BV16_INDEX => BV16_COMPLEMENT(v)(i) = BIT_FLIP(v(i))) & BV16_ALL_ZEROES : BV16 & !i.(i : BV16_INDEX => BV16_ALL_ZEROES(i) = 0) & BV16_AND : BV16*BV16 +-> BV16 & dom(BV16_AND) = BV16*BV16 & !(v1,v2,i).(v1 : BV16 & v2 : BV16 & i : BV16_INDEX => BV16_AND(v1,v2)(i) = BIT_AND(v1(i),v2(i))) & BV16_IOR : BV16*BV16 +-> BV16 & dom(BV16_IOR) = BV16*BV16 & !(v1,v2,i).(v1 : BV16 & v2 : BV16 & i : BV16_INDEX => BV16_IOR(v1,v2)(i) = BIT_IOR(v1(i),v2(i))) & BV16_XOR : BV16*BV16 +-> BV16 & dom(BV16_XOR) = BV16*BV16 & !(v1,v2,i).(v1 : BV16 & v2 : BV16 & i : BV16_INDEX => BV16_XOR(v1,v2)(i) = BIT_XOR(v1(i),v2(i))) & "`Included,imported and extended machines assertions'" & BIT_FLIP(0) = 1 & BIT_FLIP(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1 & BIT_IOR(0,0) = 0 & BIT_IOR(0,1) = 0 & BIT_IOR(1,0) = 0 & BIT_IOR(1,1) = 1 & BIT_XOR(0,0) = 0 & BIT_XOR(0,1) = 1 & BIT_XOR(1,0) = 1 & BIT_XOR(1,1) = 0 & !(vec,idx,b).(vec : BV8 & idx : BV8_INDEX & b : BIT => BV8_SET_BIT(vec,idx,b)(idx) = b));
  "`Check assertion (0 = WORD8_TO_WORD16(0,0)) deduction - ref 3.2, 4.2, 5.3'";
  (0 = WORD8_TO_WORD16(0,0));
  "`Check assertion (2**16 = 65536) deduction - ref 3.2, 4.2, 5.3'";
  (2**16 = 65536);
  "`Check assertion (WORD8_POSITION = BV8_INDEX) deduction - ref 3.2, 4.2, 5.3'";
  (WORD8_POSITION = BV8_INDEX);
  ("`Local hypotheses'" & n : WORD8);
  "`Check assertion (!n.(n : WORD8 => n<=255)) deduction - ref 3.2, 4.2, 5.3'";
  (n<=255);
  "`Check assertion (!n.(n : WORD8 => 0<=n)) deduction - ref 3.2, 4.2, 5.3'";
  (0<=n);
  "`Check assertion (NB_WORD8S = 256) deduction - ref 3.2, 4.2, 5.3'";
  (NB_WORD8S = 256);
  ("`Component assertions'" & NB_WORD8S = 256 & !n.(n : WORD8 => 0<=n) & !n.(n : WORD8 => n<=255) & WORD8_POSITION = BV8_INDEX & 2**16 = 65536 & 0 = WORD8_TO_WORD16(0,0))
END
&
THEORY EnumerateX 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
