THEORY OPOBalanceX IS
  traffic_light_alg,47;
  ValuesLemmas,1;
  InstanciatedConstraintsLemmas,0;
  Initialisation,7;
  advance,39
END
&
THEORY OPOProofList IS
  _f(1) & _f(2) & _f(3) & advance.39,(_of(71) & _of(57) => _of(67));
  _f(1) & _f(2) & _f(3) & advance.38,(_of(70) & _of(57) => _of(58));
  _f(1) & _f(2) & _f(3) & advance.37,(_f(14) & _of(64) => _of(13));
  _f(1) & _f(2) & _f(3) & advance.36,(_f(14) & _of(32) => _of(9));
  _f(1) & _f(2) & _f(3) & advance.35,(_f(14) & _of(30) => _of(7));
  _f(1) & _f(2) & _f(3) & advance.34,(_of(69) & _of(26) => _f(8));
  _f(1) & _f(2) & _f(3) & advance.33,(_of(68) & _of(26) => _of(63));
  _f(1) & _f(2) & _f(3) & advance.32,(_of(66) & _of(57) => _of(67));
  _f(1) & _f(2) & _f(3) & advance.31,(_of(65) & _of(57) => _of(58));
  _f(1) & _f(2) & _f(3) & advance.30,(_f(7) & _of(64) => _of(13));
  _f(1) & _f(2) & _f(3) & advance.29,(_f(7) & _of(32) => _of(9));
  _f(1) & _f(2) & _f(3) & advance.28,(_f(7) & _of(30) => _of(7));
  _f(1) & _f(2) & _f(3) & advance.27,(_of(62) & _of(26) => _of(63));
  _f(1) & _f(2) & _f(3) & advance.26,(_of(50) & _of(61) => _of(13));
  _f(1) & _f(2) & _f(3) & advance.25,(_of(59) & _of(57) => _of(60));
  _f(1) & _f(2) & _f(3) & advance.24,(_of(53) & _of(57) => _of(58));
  _f(1) & _f(2) & _f(3) & advance.23,(_of(55) & _of(35) => _of(56));
  _f(1) & _f(2) & _f(3) & advance.22,(_of(53) & _of(35) => _of(54));
  _f(1) & _f(2) & _f(3) & advance.21,(_of(50) & _of(32) => _of(52));
  _f(1) & _f(2) & _f(3) & advance.20,(_of(50) & _of(30) => _of(9));
  _f(1) & _f(2) & _f(3) & advance.19,(_of(50) & _of(26) => _of(51));
  _f(1) & _f(2) & _f(3) & advance.18,(_of(50) & _of(26) => _of(29));
  _f(1) & _f(2) & _f(3) & advance.17,(_of(48) & _of(26) => _of(49));
  _f(1) & _f(2) & _f(3) & advance.16,(_of(46) & _of(26) => _of(47));
  _f(1) & _f(2) & _f(3) & advance.15,(_of(44) & _of(26) => _of(45));
  _f(1) & _f(2) & _f(3) & advance.14,(_of(42) & _of(40) => _of(43));
  _f(1) & _f(2) & _f(3) & advance.13,(_of(34) & _of(40) => _of(41));
  _f(1) & _f(2) & _f(3) & advance.12,(_f(4) & _of(39) => _of(13));
  _f(1) & _f(2) & _f(3) & advance.11,(_of(37) & _of(35) => _of(38));
  _f(1) & _f(2) & _f(3) & advance.10,(_of(34) & _of(35) => _of(36));
  _f(1) & _f(2) & _f(3) & advance.9,(_f(4) & _of(32) => _of(33));
  _f(1) & _f(2) & _f(3) & advance.8,(_f(4) & _of(30) => _of(31));
  _f(1) & _f(2) & _f(3) & advance.7,(_of(28) & _of(26) => _of(29));
  _f(1) & _f(2) & _f(3) & advance.6,(_of(25) & _of(26) => _of(27));
  _f(1) & _f(2) & _f(3) & advance.5,(_of(24) & _of(19) => _of(4));
  _f(1) & _f(2) & _f(3) & advance.4,(_of(22) & _of(19) => _of(23));
  _f(1) & _f(2) & _f(3) & advance.3,(_of(20) & _of(19) => _of(21));
  _f(1) & _f(2) & _f(3) & advance.2,(_of(19) => _of(13));
  _f(1) & _f(2) & _f(3) & advance.1,(_of(18) => _of(13));
  _f(1) & _f(2) & Initialisation.7,(_of(5) & _of(16) => _of(17));
  _f(1) & _f(2) & Initialisation.6,(_of(5) & _of(14) => _of(15));
  _f(1) & _f(2) & Initialisation.5,(_of(5) & _of(12) => _of(13));
  _f(1) & _f(2) & Initialisation.4,(_of(5) & _of(10) => _of(11));
  _f(1) & _f(2) & Initialisation.3,(_of(5) & _of(8) => _of(9));
  _f(1) & _f(2) & Initialisation.2,(_of(5) & _of(6) => _of(7));
  _f(1) & _f(2) & Initialisation.1,(_of(3) => _of(4));
  ValuesLemmas.1,(_of(1) => _of(2))
END
&
THEORY OPOFormulas IS
  "`Check that the property (not(COLOR = {})) is preserved by the valuations - ref 5.2'";
  (not(COLOR = {}));
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (0 : NATURAL);
  ("`Local hypotheses'" & 0 : INTEGER);
  "`Check that the invariant (0<=statevalue) is established by the initialisation - ref 4.3, 5.4'";
  (0<=0);
  "`Check that the invariant (statevalue<=2) is established by the initialisation - ref 4.3, 5.4'";
  (0<=2);
  "`Check initialisation refinement - ref 4.3, 5.4'";
  (green : COLOR);
  "`Check that the invariant (statevalue = 0 <=> (color = green)) is established by the initialisation - ref 4.3, 5.4'" & "`Check that the invariant (statevalue = 1 <=> (color = yellow)) is established by the initialisation - ref 4.3, 5.4'" & "`Check that the invariant (statevalue = 2 <=> (color = red)) is established by the initialisation - ref 4.3, 5.4'";
  (btrue);
  "`Check that the invariant (statevalue = 1 <=> (color = yellow)) is established by the initialisation - ref 4.3, 5.4'";
  (not(green = yellow));
  "`Check that the invariant (statevalue = 2 <=> (color = red)) is established by the initialisation - ref 4.3, 5.4'";
  (not(green = red));
  "`Check precondition (btrue) deduction'";
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  ("`Local hypotheses'" & statevalue$1 = 0);
  (1 : NATURAL);
  ("`Local hypotheses'" & not(statevalue$1 = 0) & statevalue$1 = 1);
  (2 : NATURAL);
  ("`Local hypotheses'" & not(statevalue$1 = 0) & not(statevalue$1 = 1));
  ("`Local hypotheses'" & statevalue$1 = 0 & 1 : INTEGER & color = 3|->COLOR);
  "`Check that the invariant (0<=statevalue & statevalue<=2 & statevalue = 0 <=> (color = green) & statevalue = 1 <=> (color = yellow) & statevalue = 2 <=> (color = red) & statevalue = 2 <=> (color = red)) is preserved by the operation - ref 4.4, 5.5'";
  (not(!(color$7777).((not(color = red) & not(color = yellow) & color = green & color$7777 = yellow or (not(color = green) & not(color = red) & color = yellow & color$7777 = red) => not(0<=1 & 1<=2 & (1 = 0 => color$7777 = green) & (color$7777 = green => 1 = 0) & (1 = 1 => color$7777 = yellow) & (color$7777 = yellow => 1 = 1) & (1 = 2 => color$7777 = red) & (color$7777 = red => 1 = 2))) & (color$7777 = green & not(color = green) & not(color = yellow) => not(0<=1 & 1<=2 & (1 = 0 => color$7777 = green) & (color$7777 = green => 1 = 0) & (1 = 1 => color$7777 = yellow) & (color$7777 = yellow => 1 = 1) & (1 = 2 => color$7777 = red) & (color$7777 = red => 1 = 2))))));
  ("`Local hypotheses'" & statevalue$1 = 0 & 1 : INTEGER & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(not(color = 1|->COLOR) & color = 2|->COLOR & not(color = 3|->COLOR))));
  (not(color = red));
  "`Check that the invariant (0<=statevalue) is preserved by the operation - ref 4.4, 5.5'";
  (0<=1);
  "`Check that the invariant (statevalue<=2) is preserved by the operation - ref 4.4, 5.5'";
  (1<=2);
  ("`Local hypotheses'" & statevalue$1 = 0 & 1 : INTEGER & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(not(color = 1|->COLOR) & color = 2|->COLOR & not(color = 3|->COLOR))) & bfalse);
  "`Check that the invariant (statevalue = 0 <=> (color = green)) is preserved by the operation - ref 4.4, 5.5'";
  (yellow = green);
  ("`Local hypotheses'" & statevalue$1 = 0 & 1 : INTEGER & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(not(color = 1|->COLOR) & color = 2|->COLOR & not(color = 3|->COLOR))) & 2|->COLOR = 1|->COLOR);
  (1 = 0);
  "`Check that the invariant (statevalue = 1 <=> (color = yellow)) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (statevalue = 1 <=> (color = yellow)) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (statevalue = 2 <=> (color = red)) is preserved by the operation - ref 4.4, 5.5'";
  (yellow = red);
  ("`Local hypotheses'" & statevalue$1 = 0 & 1 : INTEGER & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(not(color = 1|->COLOR) & color = 2|->COLOR & not(color = 3|->COLOR))) & 2|->COLOR = 3|->COLOR);
  (1 = 2);
  ("`Local hypotheses'" & statevalue$1 = 0 & 1 : INTEGER & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(not(color = 1|->COLOR) & color = 2|->COLOR & not(color = 3|->COLOR))) & not(color = 1|->COLOR));
  (not(!(color$7777).(not(color = red) & color = yellow & color$7777 = red => not(0<=1 & 1<=2 & (1 = 0 => color$7777 = green) & (color$7777 = green => 1 = 0) & (1 = 1 => color$7777 = yellow) & (color$7777 = yellow => 1 = 1) & (1 = 2 => color$7777 = red) & (color$7777 = red => 1 = 2)))));
  ("`Local hypotheses'" & not(statevalue$1 = 0) & statevalue$1 = 1 & 2 : INTEGER & color = 3|->COLOR);
  (not(!(color$7777).((not(color = red) & not(color = yellow) & color = green & color$7777 = yellow or (not(color = green) & not(color = red) & color = yellow & color$7777 = red) => not(0<=2 & 2<=2 & (2 = 0 => color$7777 = green) & (color$7777 = green => 2 = 0) & (2 = 1 => color$7777 = yellow) & (color$7777 = yellow => 2 = 1) & (2 = 2 => color$7777 = red) & (color$7777 = red => 2 = 2))) & (color$7777 = green & not(color = green) & not(color = yellow) => not(0<=2 & 2<=2 & (2 = 0 => color$7777 = green) & (color$7777 = green => 2 = 0) & (2 = 1 => color$7777 = yellow) & (color$7777 = yellow => 2 = 1) & (2 = 2 => color$7777 = red) & (color$7777 = red => 2 = 2))))));
  ("`Local hypotheses'" & not(statevalue$1 = 0) & statevalue$1 = 1 & 2 : INTEGER & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(not(color = 1|->COLOR) & not(color = 2|->COLOR) & color = 3|->COLOR)) & color = 1|->COLOR);
  (not(!(color$7777).(not(color = red) & not(color = yellow) & color$7777 = yellow => not(0<=2 & 2<=2 & (2 = 0 => color$7777 = green) & (color$7777 = green => 2 = 0) & (2 = 1 => color$7777 = yellow) & (color$7777 = yellow => 2 = 1) & (2 = 2 => color$7777 = red) & (color$7777 = red => 2 = 2)))));
  ("`Local hypotheses'" & not(statevalue$1 = 0) & statevalue$1 = 1 & 2 : INTEGER & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(not(color = 1|->COLOR) & not(color = 2|->COLOR) & color = 3|->COLOR)) & not(color = 1|->COLOR));
  (color = yellow);
  (2<=2);
  ("`Local hypotheses'" & not(statevalue$1 = 0) & statevalue$1 = 1 & 2 : INTEGER & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(not(color = 1|->COLOR) & not(color = 2|->COLOR) & color = 3|->COLOR)) & not(color = 1|->COLOR) & bfalse);
  (red = green);
  ("`Local hypotheses'" & not(statevalue$1 = 0) & statevalue$1 = 1 & 2 : INTEGER & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(not(color = 1|->COLOR) & not(color = 2|->COLOR) & color = 3|->COLOR)) & not(color = 1|->COLOR) & 3|->COLOR = 1|->COLOR);
  (2 = 0);
  "`Check that the invariant (statevalue = 1 <=> (color = yellow)) is preserved by the operation - ref 4.4, 5.5'";
  (red = yellow);
  ("`Local hypotheses'" & not(statevalue$1 = 0) & statevalue$1 = 1 & 2 : INTEGER & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(not(color = 1|->COLOR) & not(color = 2|->COLOR) & color = 3|->COLOR)) & not(color = 1|->COLOR) & 3|->COLOR = 2|->COLOR);
  (2 = 1);
  "`Check that the invariant (statevalue = 2 <=> (color = red)) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (statevalue = 2 <=> (color = red)) is preserved by the operation - ref 4.4, 5.5'";
  ("`Local hypotheses'" & not(statevalue$1 = 0) & not(statevalue$1 = 1) & 0 : INTEGER & color = 3|->COLOR & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(not(1|->COLOR = 2|->COLOR) & not(1|->COLOR = 3|->COLOR))) & color = 1|->COLOR);
  (not(!(color$7777).(not(color = red) & not(color = yellow) & color$7777 = yellow => not(0<=0 & 0<=2 & (0 = 0 => color$7777 = green) & (color$7777 = green => 0 = 0) & (0 = 1 => color$7777 = yellow) & (color$7777 = yellow => 0 = 1) & (0 = 2 => color$7777 = red) & (color$7777 = red => 0 = 2)))));
  "`Check that the invariant (statevalue = 0 <=> (color = green)) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (statevalue = 2 <=> (color = red)) is preserved by the operation - ref 4.4, 5.5'";
  ("`Local hypotheses'" & not(statevalue$1 = 0) & not(statevalue$1 = 1) & 0 : INTEGER & color = 3|->COLOR & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(not(1|->COLOR = 2|->COLOR) & not(1|->COLOR = 3|->COLOR))) & not(color = 1|->COLOR) & bfalse);
  ("`Local hypotheses'" & not(statevalue$1 = 0) & not(statevalue$1 = 1) & 0 : INTEGER & color = 3|->COLOR & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(not(1|->COLOR = 2|->COLOR) & not(1|->COLOR = 3|->COLOR))) & not(color = 1|->COLOR) & 3|->COLOR = 2|->COLOR);
  (0 = 1);
  ("`Local hypotheses'" & not(statevalue$1 = 0) & not(statevalue$1 = 1) & 0 : INTEGER & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(color = 1|->COLOR & not(color = 2|->COLOR) & not(color = 3|->COLOR))) & color = 1|->COLOR);
  ("`Local hypotheses'" & not(statevalue$1 = 0) & not(statevalue$1 = 1) & 0 : INTEGER & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(color = 1|->COLOR & not(color = 2|->COLOR) & not(color = 3|->COLOR))) & not(color = 1|->COLOR));
  ("`Local hypotheses'" & not(statevalue$1 = 0) & not(statevalue$1 = 1) & 0 : INTEGER & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(color = 1|->COLOR & not(color = 2|->COLOR) & not(color = 3|->COLOR))) & not(color = 1|->COLOR) & bfalse);
  ("`Local hypotheses'" & not(statevalue$1 = 0) & not(statevalue$1 = 1) & 0 : INTEGER & not(color = 3|->COLOR) & (not(color = 1|->COLOR) & not(color = 2|->COLOR) => not(color = 1|->COLOR & not(color = 2|->COLOR) & not(color = 3|->COLOR))) & not(color = 1|->COLOR) & 3|->COLOR = 2|->COLOR)
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
