THEORY ProofList IS
  _f(1) & _f(2) & _f(12) & advance.176,(_f(164) & _f(165) => _f(166));
  _f(1) & _f(2) & _f(12) & advance.175,(_f(162) & _f(4) => _f(163));
  _f(1) & _f(2) & _f(12) & advance.174,(_f(160) & _f(4) => _f(161));
  _f(1) & _f(2) & _f(12) & advance.173,(_f(160) & _f(4) => _f(144));
  _f(1) & _f(2) & _f(12) & advance.172,(_f(159) & _f(4) => _f(146));
  _f(1) & _f(2) & _f(12) & advance.171,(_f(159) & _f(4) => _f(144));
  _f(1) & _f(2) & _f(12) & advance.170,(_f(158) & _f(4) => _f(146));
  _f(1) & _f(2) & _f(12) & advance.169,(_f(158) & _f(4) => _f(148));
  _f(1) & _f(2) & _f(12) & advance.168,(_f(157) & _f(4) => _f(71));
  _f(1) & _f(2) & _f(12) & advance.167,(_f(157) & _f(4) => _f(146));
  _f(1) & _f(2) & _f(12) & advance.166,(_f(157) & _f(4) => _f(152));
  _f(1) & _f(2) & _f(12) & advance.165,(_f(156) & _f(4) => _f(146));
  _f(1) & _f(2) & _f(12) & advance.164,(_f(156) & _f(4) => _f(152));
  _f(1) & _f(2) & _f(12) & advance.163,(_f(155) & _f(4) => _f(68));
  _f(1) & _f(2) & _f(12) & advance.162,(_f(155) & _f(4) => _f(146));
  _f(1) & _f(2) & _f(12) & advance.161,(_f(155) & _f(4) => _f(154));
  _f(1) & _f(2) & _f(12) & advance.160,(_f(153) & _f(4) => _f(146));
  _f(1) & _f(2) & _f(12) & advance.159,(_f(153) & _f(4) => _f(154));
  _f(1) & _f(2) & _f(12) & advance.158,(_f(151) & _f(4) => _f(22));
  _f(1) & _f(2) & _f(12) & advance.157,(_f(151) & _f(4) => _f(152));
  _f(1) & _f(2) & _f(12) & advance.156,(_f(149) & _f(4) => _f(146));
  _f(1) & _f(2) & _f(12) & advance.155,(_f(149) & _f(4) => _f(150));
  _f(1) & _f(2) & _f(12) & advance.154,(_f(147) & _f(4) => _f(17));
  _f(1) & _f(2) & _f(12) & advance.153,(_f(147) & _f(4) => _f(148));
  _f(1) & _f(2) & _f(12) & advance.152,(_f(145) & _f(4) => _f(146));
  _f(1) & _f(2) & _f(12) & advance.151,(_f(145) & _f(4) => _f(144));
  _f(1) & _f(2) & _f(12) & advance.150,(_f(54) & _f(4) => _f(144));
  _f(1) & _f(2) & _f(12) & advance.149,(_f(54) & _f(4) => _f(80));
  _f(1) & _f(2) & _f(12) & advance.148,(_f(54) & _f(4) => _f(79));
  _f(1) & _f(2) & _f(12) & advance.147,(_f(54) & _f(4) => _f(78));
  _f(1) & _f(2) & _f(12) & advance.146,(_f(143) & _f(4) => _f(76));
  _f(1) & _f(2) & _f(12) & advance.145,(_f(141) & _f(4) => _f(142));
  _f(1) & _f(2) & _f(12) & advance.144,(_f(140) & _f(4) => _f(119));
  _f(1) & _f(2) & _f(12) & advance.143,(_f(140) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.142,(_f(139) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.141,(_f(138) & _f(4) => _f(119));
  _f(1) & _f(2) & _f(12) & advance.140,(_f(138) & _f(4) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.139,(_f(137) & _f(4) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.138,(_f(136) & _f(4) => _f(22));
  _f(1) & _f(2) & _f(12) & advance.137,(_f(136) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.136,(_f(135) & _f(4) => _f(62));
  _f(1) & _f(2) & _f(12) & advance.135,(_f(134) & _f(4) => _f(17));
  _f(1) & _f(2) & _f(12) & advance.134,(_f(53) & _f(4) => _f(80));
  _f(1) & _f(2) & _f(12) & advance.133,(_f(53) & _f(4) => _f(79));
  _f(1) & _f(2) & _f(12) & advance.132,(_f(53) & _f(4) => _f(78));
  _f(1) & _f(2) & _f(12) & advance.131,(_f(52) & _f(4) => _f(74));
  _f(1) & _f(2) & _f(12) & advance.130,(_f(52) & _f(4) => _f(124));
  _f(1) & _f(2) & _f(12) & advance.129,(_f(133) & _f(4) => _f(76));
  _f(1) & _f(2) & _f(12) & advance.128,(_f(131) & _f(4) => _f(132));
  _f(1) & _f(2) & _f(12) & advance.127,(_f(130) & _f(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.126,(_f(129) & _f(4) => _f(119));
  _f(1) & _f(2) & _f(12) & advance.125,(_f(129) & _f(4) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.124,(_f(128) & _f(4) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.123,(_f(127) & _f(4) => _f(22));
  _f(1) & _f(2) & _f(12) & advance.122,(_f(126) & _f(4) => _f(62));
  _f(1) & _f(2) & _f(12) & advance.121,(_f(125) & _f(4) => _f(17));
  _f(1) & _f(2) & _f(12) & advance.120,(_f(125) & _f(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.119,(_f(50) & _f(4) => _f(80));
  _f(1) & _f(2) & _f(12) & advance.118,(_f(50) & _f(4) => _f(79));
  _f(1) & _f(2) & _f(12) & advance.117,(_f(50) & _f(4) => _f(78));
  _f(1) & _f(2) & _f(12) & advance.116,(_f(48) & _f(4) => _f(74));
  _f(1) & _f(2) & _f(12) & advance.115,(_f(48) & _f(4) => _f(124));
  _f(1) & _f(2) & _f(12) & advance.114,(_f(123) & _f(4) => _f(76));
  _f(1) & _f(2) & _f(12) & advance.113,(_f(121) & _f(4) => _f(122));
  _f(1) & _f(2) & _f(12) & advance.112,(_f(120) & _f(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.111,(_f(118) & _f(4) => _f(119));
  _f(1) & _f(2) & _f(12) & advance.110,(_f(118) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.109,(_f(117) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.108,(_f(116) & _f(4) => _f(22));
  _f(1) & _f(2) & _f(12) & advance.107,(_f(116) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.106,(_f(115) & _f(4) => _f(62));
  _f(1) & _f(2) & _f(12) & advance.105,(_f(114) & _f(4) => _f(17));
  _f(1) & _f(2) & _f(12) & advance.104,(_f(114) & _f(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.103,(_f(46) & _f(4) => _f(80));
  _f(1) & _f(2) & _f(12) & advance.102,(_f(46) & _f(4) => _f(79));
  _f(1) & _f(2) & _f(12) & advance.101,(_f(46) & _f(4) => _f(78));
  _f(1) & _f(2) & _f(12) & advance.100,(_f(44) & _f(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.99,(_f(44) & _f(4) => _f(113));
  _f(1) & _f(2) & _f(12) & advance.98,(_f(112) & _f(4) => _f(76));
  _f(1) & _f(2) & _f(12) & advance.97,(_f(111) & _f(4) => _f(74));
  _f(1) & _f(2) & _f(12) & advance.96,(_f(110) & _f(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.95,(_f(109) & _f(4) => _f(71));
  _f(1) & _f(2) & _f(12) & advance.94,(_f(109) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.93,(_f(108) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.92,(_f(107) & _f(4) => _f(68));
  _f(1) & _f(2) & _f(12) & advance.91,(_f(107) & _f(4) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.90,(_f(106) & _f(4) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.89,(_f(105) & _f(4) => _f(22));
  _f(1) & _f(2) & _f(12) & advance.88,(_f(105) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.87,(_f(104) & _f(4) => _f(17));
  _f(1) & _f(2) & _f(12) & advance.86,(_f(104) & _f(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.85,(_f(103) & _f(4) => _f(80));
  _f(1) & _f(2) & _f(12) & advance.84,(_f(103) & _f(4) => _f(79));
  _f(1) & _f(2) & _f(12) & advance.83,(_f(103) & _f(4) => _f(78));
  _f(1) & _f(2) & _f(12) & advance.82,(_f(102) & _f(4) => _f(76));
  _f(1) & _f(2) & _f(12) & advance.81,(_f(101) & _f(4) => _f(74));
  _f(1) & _f(2) & _f(12) & advance.80,(_f(100) & _f(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.79,(_f(99) & _f(4) => _f(71));
  _f(1) & _f(2) & _f(12) & advance.78,(_f(99) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.77,(_f(98) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.76,(_f(97) & _f(4) => _f(68));
  _f(1) & _f(2) & _f(12) & advance.75,(_f(97) & _f(4) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.74,(_f(96) & _f(4) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.73,(_f(95) & _f(4) => _f(22));
  _f(1) & _f(2) & _f(12) & advance.72,(_f(95) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.71,(_f(94) & _f(4) => _f(17));
  _f(1) & _f(2) & _f(12) & advance.70,(_f(94) & _f(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.69,(_f(93) & _f(4) => _f(58));
  _f(1) & _f(2) & _f(12) & advance.68,(_f(93) & _f(4) => _f(57));
  _f(1) & _f(2) & _f(12) & advance.67,(_f(93) & _f(4) => _f(56));
  _f(1) & _f(2) & _f(12) & advance.66,(_f(40) & _f(4) => _f(92));
  _f(1) & _f(2) & _f(12) & advance.65,(_f(40) & _f(4) => _f(91));
  _f(1) & _f(2) & _f(12) & advance.64,(_f(90) & _f(4) => _f(76));
  _f(1) & _f(2) & _f(12) & advance.63,(_f(89) & _f(4) => _f(74));
  _f(1) & _f(2) & _f(12) & advance.62,(_f(88) & _f(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.61,(_f(87) & _f(4) => _f(71));
  _f(1) & _f(2) & _f(12) & advance.60,(_f(87) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.59,(_f(86) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.58,(_f(85) & _f(4) => _f(68));
  _f(1) & _f(2) & _f(12) & advance.57,(_f(85) & _f(4) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.56,(_f(84) & _f(4) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.55,(_f(83) & _f(4) => _f(22));
  _f(1) & _f(2) & _f(12) & advance.54,(_f(83) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.53,(_f(82) & _f(4) => _f(62));
  _f(1) & _f(2) & _f(12) & advance.52,(_f(81) & _f(4) => _f(17));
  _f(1) & _f(2) & _f(12) & advance.51,(_f(81) & _f(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.50,(_f(77) & _f(4) => _f(80));
  _f(1) & _f(2) & _f(12) & advance.49,(_f(77) & _f(4) => _f(79));
  _f(1) & _f(2) & _f(12) & advance.48,(_f(77) & _f(4) => _f(78));
  _f(1) & _f(2) & _f(12) & advance.47,(_f(75) & _f(4) => _f(76));
  _f(1) & _f(2) & _f(12) & advance.46,(_f(73) & _f(4) => _f(74));
  _f(1) & _f(2) & _f(12) & advance.45,(_f(72) & _f(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.44,(_f(70) & _f(4) => _f(71));
  _f(1) & _f(2) & _f(12) & advance.43,(_f(70) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.42,(_f(69) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.41,(_f(67) & _f(4) => _f(68));
  _f(1) & _f(2) & _f(12) & advance.40,(_f(67) & _f(4) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.39,(_f(65) & _f(4) => _f(66));
  _f(1) & _f(2) & _f(12) & advance.38,(_f(63) & _f(4) => _f(22));
  _f(1) & _f(2) & _f(12) & advance.37,(_f(63) & _f(4) => _f(64));
  _f(1) & _f(2) & _f(12) & advance.36,(_f(61) & _f(4) => _f(62));
  _f(1) & _f(2) & _f(12) & advance.35,(_f(59) & _f(4) => _f(17));
  _f(1) & _f(2) & _f(12) & advance.34,(_f(59) & _f(4) => _f(60));
  _f(1) & _f(2) & _f(12) & advance.33,(_f(55) & _f(4) => _f(58));
  _f(1) & _f(2) & _f(12) & advance.32,(_f(55) & _f(4) => _f(57));
  _f(1) & _f(2) & _f(12) & advance.31,(_f(55) & _f(4) => _f(56));
  _f(1) & _f(2) & _f(12) & advance.30,(_f(54) & _f(4) => _f(6));
  _f(1) & _f(2) & _f(12) & advance.29,(_f(53) & _f(4) => _f(5));
  _f(1) & _f(2) & _f(12) & advance.28,(_f(52) & _f(4) => _f(49));
  _f(1) & _f(2) & _f(12) & advance.27,(_f(50) & _f(4) => _f(51));
  _f(1) & _f(2) & _f(12) & advance.26,(_f(48) & _f(4) => _f(49));
  _f(1) & _f(2) & _f(12) & advance.25,(_f(46) & _f(4) => _f(47));
  _f(1) & _f(2) & _f(12) & advance.24,(_f(44) & _f(4) => _f(45));
  _f(1) & _f(2) & _f(12) & advance.23,(_f(42) & _f(4) => _f(43));
  _f(1) & _f(2) & _f(12) & advance.22,(_f(42) & _f(4) => _f(6));
  _f(1) & _f(2) & _f(12) & advance.21,(_f(40) & _f(4) => _f(41));
  _f(1) & _f(2) & _f(12) & advance.20,(_f(38) & _f(4) => _f(39));
  _f(1) & _f(2) & _f(12) & advance.19,(_f(38) & _f(4) => _f(6));
  _f(1) & _f(2) & _f(12) & advance.18,(_f(35) & _f(4) => _f(37));
  _f(1) & _f(2) & _f(12) & advance.17,(_f(35) & _f(4) => _f(36));
  _f(1) & _f(2) & _f(12) & advance.16,(_f(33) & _f(4) => _f(34));
  _f(1) & _f(2) & _f(12) & advance.15,(_f(31) & _f(4) => _f(32));
  _f(1) & _f(2) & _f(12) & advance.14,(_f(30) & _f(4) => _f(16));
  _f(1) & _f(2) & _f(12) & advance.13,(_f(28) & _f(4) => _f(29));
  _f(1) & _f(2) & _f(12) & advance.12,(_f(28) & _f(4) => _f(21));
  _f(1) & _f(2) & _f(12) & advance.11,(_f(27) & _f(4) => _f(21));
  _f(1) & _f(2) & _f(12) & advance.10,(_f(25) & _f(4) => _f(26));
  _f(1) & _f(2) & _f(12) & advance.9,(_f(25) & _f(4) => _f(24));
  _f(1) & _f(2) & _f(12) & advance.8,(_f(23) & _f(4) => _f(24));
  _f(1) & _f(2) & _f(12) & advance.7,(_f(20) & _f(4) => _f(22));
  _f(1) & _f(2) & _f(12) & advance.6,(_f(20) & _f(4) => _f(21));
  _f(1) & _f(2) & _f(12) & advance.5,(_f(18) & _f(4) => _f(19));
  _f(1) & _f(2) & _f(12) & advance.4,(_f(15) & _f(4) => _f(17));
  _f(1) & _f(2) & _f(12) & advance.3,(_f(15) & _f(4) => _f(16));
  _f(1) & _f(2) & _f(12) & advance.2,(_f(4) => _f(14));
  _f(1) & _f(2) & _f(12) & advance.1,(_f(4) => _f(13));
  _f(1) & _f(2) & Initialisation.4,(_f(7) & _f(10) => _f(11));
  _f(1) & _f(2) & Initialisation.3,(_f(7) & _f(8) => _f(9));
  _f(1) & _f(2) & Initialisation.2,(_f(3) & _f(4) => _f(6));
  _f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & not((1..3)*{COLOR} = {}) & color_refine : (1..3)*{COLOR} +-> NATURAL & dom(color_refine) = (1..3)*{COLOR} & color_refine = {1|->COLOR|->0}\/{2|->COLOR|->1}\/{3|->COLOR|->2} & color_step : 0..2 +-> 0..2 & dom(color_step) = 0..2 & color_step = {0|->1}\/{1|->2}\/{2|->0} & WORD_LENGTH : INTEGER & 0<=WORD_LENGTH & INST_SZ : INTEGER & 0<=INST_SZ & NB_WORDS : INTEGER & 0<=NB_WORDS & NB_INSTRUCTIONS : INTEGER & 0<=NB_INSTRUCTIONS & WORD_LENGTH = 8 & NB_WORDS = 2**WORD_LENGTH & WORD = 0..NB_WORDS-1 & WORD_POSITION = 0..WORD_LENGTH-1 & NB_INSTRUCTIONS = 2**INST_SZ & INSTRUCTION_MAX = NB_INSTRUCTIONS-1 & INSTRUCTION = 0..INSTRUCTION_MAX & INSTRUCTION_NEXT : INSTRUCTION +-> INSTRUCTION & dom(INSTRUCTION_NEXT) = INSTRUCTION & INSTRUCTION_NEXT = SET(p,q).(p : INSTRUCTION & q : INSTRUCTION & 0<=p & p+1<=NB_INSTRUCTIONS-1 & q = p+1)\/{NB_INSTRUCTIONS-1|->0} & BV_TO_WORD : BV8 +-> WORD & dom(BV_TO_WORD) = BV8 & WORD_TO_BV : WORD +-> BV8 & dom(WORD_TO_BV) = WORD & !(w,v).(w : WORD & v : BV8 => (v = WORD_TO_BV(w) => w = 128*v(7)+64*v(6)+32*v(5)+16*v(4)+8*v(3)+4*v(2)+2*v(1)+v(0)) & (w = 128*v(7)+64*v(6)+32*v(5)+16*v(4)+8*v(3)+4*v(2)+2*v(1)+v(0) => v = WORD_TO_BV(w))) & BV_TO_WORD = WORD_TO_BV~ & !n.(n : INTEGER & 0<=n & 1<=n => 2**n = 2*2**(n-1)) & 2**0 = 1 & REGISTER : POW(INTEGER) & REGISTER = 0..127 & BIT = 0..1 & BIT_FLIP : BIT +-> BIT & dom(BIT_FLIP) = BIT & !b.(b : BIT => BIT_FLIP(b) = 1-b) & BIT_AND : BIT*BIT +-> BIT & dom(BIT_AND) = BIT*BIT & !(b1,b2).(b1 : BIT & b2 : BIT => (BIT_AND(b1,b2) = 1 => b1 = 1) & (b1 = 1 => BIT_AND(b1,b2) = 1) & b2 = 1) & BIT_IOR : BIT*BIT +-> BIT & dom(BIT_IOR) = BIT*BIT & !(b1,b2).(b1 : BIT & b2 : BIT => (BIT_IOR(b1,b2) = 1 => b1 = 1) & (b1 = 1 => BIT_IOR(b1,b2) = 1) or b2 = 1) & BIT_XOR : BIT*BIT +-> BIT & dom(BIT_XOR) = BIT*BIT & !(b1,b2).(b1 : BIT & b2 : BIT => (BIT_XOR(b1,b2) = 1 => b1 = 1 & b2 = 0 or (b1 = 0 & b2 = 1)) & ((b1 = 1 & b2 = 0 => BIT_XOR(b1,b2) = 1) & (b1 = 0 & b2 = 1 => BIT_XOR(b1,b2) = 1))) & BV8_INDEX = 0..7 & BV8 = BV8_INDEX --> BIT & BV8_SET_BIT : BV8*BV8_INDEX*BIT +-> BV8 & dom(BV8_SET_BIT) = BV8*BV8_INDEX*BIT & !(v,i,j,b).(v : BV8 & i : BV8_INDEX & j : BV8_INDEX & b : BIT & not(i = j) => BV8_SET_BIT(v,i,b)(j) = v(j)) & !(v,i,b).(v : BV8 & i : BV8_INDEX & b : BIT => BV8_SET_BIT(v,i,b)(i) = b) & BV8_COMPLEMENT : BV8 +-> BV8 & dom(BV8_COMPLEMENT) = BV8 & !(v,i).(v : BV8 & i : BV8_INDEX => BV8_COMPLEMENT(v)(i) = BIT_FLIP(v(i))) & BV8_ALL_ZEROES : BV8 & !i.(i : BV8_INDEX => BV8_ALL_ZEROES(i) = 0) & BV8_AND : BV8*BV8 +-> BV8 & dom(BV8_AND) = BV8*BV8 & !(v1,v2,i).(v1 : BV8 & v2 : BV8 & i : BV8_INDEX => BV8_AND(v1,v2)(i) = BIT_AND(v1(i),v2(i))) & BV8_IOR : BV8*BV8 +-> BV8 & dom(BV8_IOR) = BV8*BV8 & !(v1,v2,i).(v1 : BV8 & v2 : BV8 & i : BV8_INDEX => BV8_IOR(v1,v2)(i) = BIT_IOR(v1(i),v2(i))) & BV8_XOR : BV8*BV8 +-> BV8 & dom(BV8_XOR) = BV8*BV8 & !(v1,v2,i).(v1 : BV8 & v2 : BV8 & i : BV8_INDEX => BV8_XOR(v1,v2)(i) = BIT_XOR(v1(i),v2(i))));
  ("`Included,imported and extended machines invariants'" & mmem$1 : REGISTER +-> WORD & dom(mmem$1) = REGISTER & mw$1 : WORD & mz$1 : BOOL & mc$1 : BOOL & mpc$1 : INSTRUCTION & msp$1 : INTEGER & 0<=msp$1 & mstack$1 : NATURAL +-> INSTRUCTION & dom(mstack$1) = 0..msp$1-1 & "`Included,imported and extended machines assertions'" & ran(mmem$1) : POW(WORD) & "`Seen and used machines assertions'" & !c.(c : (1..3)*{COLOR} => c = 1|->COLOR or c = 2|->COLOR or c = 3|->COLOR) & color_refine(1|->COLOR) = 0 & color_refine(2|->COLOR) = 1 & color_refine(3|->COLOR) = 2 & color_step(0) = 1 & color_step(1) = 2 & color_step(2) = 0 & 2**8 = 256 & NB_WORDS = 256 & !n.(n : WORD => 0<=n) & !n.(n : WORD => n<=255) & WORD_POSITION = BV8_INDEX & BIT_FLIP(0) = 1 & BIT_FLIP(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1 & BIT_IOR(0,0) = 0 & BIT_IOR(0,1) = 0 & BIT_IOR(1,0) = 0 & BIT_IOR(1,1) = 1 & BIT_XOR(0,0) = 0 & BIT_XOR(0,1) = 1 & BIT_XOR(1,0) = 1 & BIT_XOR(1,1) = 0);
  ("`Local hypotheses'" & w$0 : WORD & mem$0 : REGISTER +-> WORD & dom(mem$0) = REGISTER & z$0 : BOOL & c$0 : BOOL & pc$0 : INSTRUCTION);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (0 : WORD);
  (0 : REGISTER);
  ("`Local hypotheses'" & w$0 : WORD & mem$0 : REGISTER +-> WORD & dom(mem$0) = REGISTER & z$0 : BOOL & c$0 : BOOL & pc$0 : INSTRUCTION & mem$0<+{0|->0} : REGISTER +-> WORD & dom(mem$0<+{0|->0}) = REGISTER & 0 : WORD & INSTRUCTION_NEXT(INSTRUCTION_NEXT(pc$0)) : INSTRUCTION & 0 : INTEGER & {} : NATURAL +-> INSTRUCTION & dom({}) = 0.. -1 & ran(mem$0<+{0|->0}) : POW(WORD));
  "`Check that the invariant (mmem(0) = counter) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'";
  ((mem$0<+{0|->0})(0) = 0);
  "`Check that the invariant (mmem(0) : 0..2) is established by the initialisation - ref 4.3, 5.4'";
  ((mem$0<+{0|->0})(0) : 0..2);
  ("`Previous components invariants'" & counter : INTEGER & 0<=counter & counter : 0..2 & counter = color_refine(color) & color : (1..3)*{COLOR} & "`Component invariant'" & mmem$1(0) : 0..2 & mmem$1(0) = counter);
  (0<=mpc$1);
  (mpc$1<=10);
  ("`Local hypotheses'" & mpc$1 = 1);
  (mmem$1(0) = 2);
  (counter = 2);
  ("`Local hypotheses'" & mpc$1 = 2);
  (not(mmem$1(0) = 2));
  ("`Local hypotheses'" & mpc$1 = 3);
  (mmem$1(0) = 1);
  (counter = 1);
  ("`Local hypotheses'" & mpc$1 = 4);
  (mmem$1(0) = 0);
  ("`Local hypotheses'" & mpc$1 = 5);
  (mw$1 = 1);
  ("`Local hypotheses'" & mpc$1 = 6);
  ("`Local hypotheses'" & mpc$1 = 7);
  (mw$1 = 2);
  ("`Local hypotheses'" & mpc$1 = 8);
  ("`Local hypotheses'" & mpc$1 = 9);
  (mw$1 = color_step(counter));
  ("`Local hypotheses'" & mpc$1 = 10);
  (mmem$1(0) = color_step(counter));
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)));
  (10-mpc$2 : INTEGER);
  (0<=10-mpc$2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & mpc$2 = 0);
  (1 : WORD_POSITION);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & mpc$2 = 1);
  (8 : INSTRUCTION);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & mpc$2 = 2);
  (0 : WORD_POSITION);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & mpc$2 = 3);
  (6 : INSTRUCTION);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & mpc$2 = 4);
  (1 : WORD);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & mpc$2 = 5);
  (9 : INSTRUCTION);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & mpc$2 = 6);
  (2 : WORD);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 9) & not(mpc$2 = 8) & mpc$2 = 7);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 9) & mpc$2 = 8);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 8) & mpc$2 = 9);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & bitget(mmem$2(0),1) = 0 & mpc$2 = 0);
  (10-INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2))+1<=10-mpc$2);
  (0<=INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)));
  (INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2))<=10);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & bitget(mmem$2(0),1) = 0 & mpc$2 = 0 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 1);
  (mmem$2(0) = 2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & bitget(mmem$2(0),1) = 0 & mpc$2 = 0 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 2);
  (not(mmem$2(0) = 2));
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & bitget(mmem$2(0),1) = 0 & mpc$2 = 0 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 3);
  (mmem$2(0) = 1);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & bitget(mmem$2(0),1) = 0 & mpc$2 = 0 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 4);
  (mmem$2(0) = 0);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & bitget(mmem$2(0),1) = 0 & mpc$2 = 0 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 5);
  (mw$2 = 1);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & bitget(mmem$2(0),1) = 0 & mpc$2 = 0 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 6);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & bitget(mmem$2(0),1) = 0 & mpc$2 = 0 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 7);
  (mw$2 = 2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & bitget(mmem$2(0),1) = 0 & mpc$2 = 0 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 8);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & bitget(mmem$2(0),1) = 0 & mpc$2 = 0 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 9);
  (mw$2 = color_step(counter));
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & bitget(mmem$2(0),1) = 0 & mpc$2 = 0 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 10);
  (mmem$2(0) = color_step(counter));
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & not(bitget(mmem$2(0),1) = 0) & mpc$2 = 0);
  (10-INSTRUCTION_NEXT(mpc$2)+1<=10-mpc$2);
  (0<=INSTRUCTION_NEXT(mpc$2));
  (INSTRUCTION_NEXT(mpc$2)<=10);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & not(bitget(mmem$2(0),1) = 0) & mpc$2 = 0 & INSTRUCTION_NEXT(mpc$2) = 1);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & not(bitget(mmem$2(0),1) = 0) & mpc$2 = 0 & INSTRUCTION_NEXT(mpc$2) = 2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & not(bitget(mmem$2(0),1) = 0) & mpc$2 = 0 & INSTRUCTION_NEXT(mpc$2) = 3);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & not(bitget(mmem$2(0),1) = 0) & mpc$2 = 0 & INSTRUCTION_NEXT(mpc$2) = 4);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & not(bitget(mmem$2(0),1) = 0) & mpc$2 = 0 & INSTRUCTION_NEXT(mpc$2) = 5);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & not(bitget(mmem$2(0),1) = 0) & mpc$2 = 0 & INSTRUCTION_NEXT(mpc$2) = 6);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & not(bitget(mmem$2(0),1) = 0) & mpc$2 = 0 & INSTRUCTION_NEXT(mpc$2) = 7);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & not(bitget(mmem$2(0),1) = 0) & mpc$2 = 0 & INSTRUCTION_NEXT(mpc$2) = 8);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & not(bitget(mmem$2(0),1) = 0) & mpc$2 = 0 & INSTRUCTION_NEXT(mpc$2) = 9);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(mpc$2 = 2) & not(mpc$2 = 1) & not(bitget(mmem$2(0),1) = 0) & mpc$2 = 0 & INSTRUCTION_NEXT(mpc$2) = 10);
  (3<=10-mpc$2);
  (mmem$2(0) = counter);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & bitget(mmem$2(0),0) = 0 & mpc$2 = 2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & bitget(mmem$2(0),0) = 0 & mpc$2 = 2 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 1);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & bitget(mmem$2(0),0) = 0 & mpc$2 = 2 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 3);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & bitget(mmem$2(0),0) = 0 & mpc$2 = 2 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 4);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & bitget(mmem$2(0),0) = 0 & mpc$2 = 2 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 5);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & bitget(mmem$2(0),0) = 0 & mpc$2 = 2 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 6);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & bitget(mmem$2(0),0) = 0 & mpc$2 = 2 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 7);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & bitget(mmem$2(0),0) = 0 & mpc$2 = 2 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 8);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & bitget(mmem$2(0),0) = 0 & mpc$2 = 2 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 9);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & bitget(mmem$2(0),0) = 0 & mpc$2 = 2 & INSTRUCTION_NEXT(INSTRUCTION_NEXT(mpc$2)) = 10);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(bitget(mmem$2(0),0) = 0) & mpc$2 = 2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(bitget(mmem$2(0),0) = 0) & mpc$2 = 2 & INSTRUCTION_NEXT(mpc$2) = 1);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(bitget(mmem$2(0),0) = 0) & mpc$2 = 2 & INSTRUCTION_NEXT(mpc$2) = 3);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(bitget(mmem$2(0),0) = 0) & mpc$2 = 2 & INSTRUCTION_NEXT(mpc$2) = 4);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(bitget(mmem$2(0),0) = 0) & mpc$2 = 2 & INSTRUCTION_NEXT(mpc$2) = 5);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(bitget(mmem$2(0),0) = 0) & mpc$2 = 2 & INSTRUCTION_NEXT(mpc$2) = 6);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(bitget(mmem$2(0),0) = 0) & mpc$2 = 2 & INSTRUCTION_NEXT(mpc$2) = 7);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(bitget(mmem$2(0),0) = 0) & mpc$2 = 2 & INSTRUCTION_NEXT(mpc$2) = 8);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(bitget(mmem$2(0),0) = 0) & mpc$2 = 2 & INSTRUCTION_NEXT(mpc$2) = 9);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & not(mpc$2 = 4) & not(mpc$2 = 3) & not(bitget(mmem$2(0),0) = 0) & mpc$2 = 2 & INSTRUCTION_NEXT(mpc$2) = 10);
  (5<=10-mpc$2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & mpc$2 = 4 & INSTRUCTION_NEXT(mpc$2) = 1);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & mpc$2 = 4 & INSTRUCTION_NEXT(mpc$2) = 2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & mpc$2 = 4 & INSTRUCTION_NEXT(mpc$2) = 3);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & mpc$2 = 4 & INSTRUCTION_NEXT(mpc$2) = 6);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & mpc$2 = 4 & INSTRUCTION_NEXT(mpc$2) = 7);
  (bfalse);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & mpc$2 = 4 & INSTRUCTION_NEXT(mpc$2) = 8);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & mpc$2 = 4 & INSTRUCTION_NEXT(mpc$2) = 9);
  (1 = color_step(counter));
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & not(mpc$2 = 6) & not(mpc$2 = 5) & mpc$2 = 4 & INSTRUCTION_NEXT(mpc$2) = 10);
  (2<=10-mpc$2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & mpc$2 = 6 & INSTRUCTION_NEXT(mpc$2) = 1);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & mpc$2 = 6 & INSTRUCTION_NEXT(mpc$2) = 2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & mpc$2 = 6 & INSTRUCTION_NEXT(mpc$2) = 3);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & mpc$2 = 6 & INSTRUCTION_NEXT(mpc$2) = 4);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & mpc$2 = 6 & INSTRUCTION_NEXT(mpc$2) = 5);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & mpc$2 = 6 & INSTRUCTION_NEXT(mpc$2) = 8);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & mpc$2 = 6 & INSTRUCTION_NEXT(mpc$2) = 9);
  (2 = color_step(counter));
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 9) & not(mpc$2 = 8) & not(mpc$2 = 7) & mpc$2 = 6 & INSTRUCTION_NEXT(mpc$2) = 10);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 9) & mpc$2 = 8 & INSTRUCTION_NEXT(mpc$2) = 1);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 9) & mpc$2 = 8 & INSTRUCTION_NEXT(mpc$2) = 2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 9) & mpc$2 = 8 & INSTRUCTION_NEXT(mpc$2) = 3);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 9) & mpc$2 = 8 & INSTRUCTION_NEXT(mpc$2) = 4);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 9) & mpc$2 = 8 & INSTRUCTION_NEXT(mpc$2) = 5);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 9) & mpc$2 = 8 & INSTRUCTION_NEXT(mpc$2) = 6);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 9) & mpc$2 = 8 & INSTRUCTION_NEXT(mpc$2) = 7);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 9) & mpc$2 = 8 & INSTRUCTION_NEXT(mpc$2) = 9);
  (0 = color_step(counter));
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 9) & mpc$2 = 8 & INSTRUCTION_NEXT(mpc$2) = 10);
  ((mmem$2<+{0|->mw$2})(0) : 0..2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 8) & mpc$2 = 9 & INSTRUCTION_NEXT(mpc$2) = 0);
  ((mmem$2<+{0|->mw$2})(0) = counter);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 8) & mpc$2 = 9 & INSTRUCTION_NEXT(mpc$2) = 1);
  ((mmem$2<+{0|->mw$2})(0) = 2);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 8) & mpc$2 = 9 & INSTRUCTION_NEXT(mpc$2) = 2);
  (not((mmem$2<+{0|->mw$2})(0) = 2));
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 8) & mpc$2 = 9 & INSTRUCTION_NEXT(mpc$2) = 3);
  ((mmem$2<+{0|->mw$2})(0) = 1);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 8) & mpc$2 = 9 & INSTRUCTION_NEXT(mpc$2) = 4);
  ((mmem$2<+{0|->mw$2})(0) = 0);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 8) & mpc$2 = 9 & INSTRUCTION_NEXT(mpc$2) = 5);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 8) & mpc$2 = 9 & INSTRUCTION_NEXT(mpc$2) = 6);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 8) & mpc$2 = 9 & INSTRUCTION_NEXT(mpc$2) = 7);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 8) & mpc$2 = 9 & INSTRUCTION_NEXT(mpc$2) = 8);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 8) & mpc$2 = 9 & INSTRUCTION_NEXT(mpc$2) = 9);
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 8) & mpc$2 = 9 & INSTRUCTION_NEXT(mpc$2) = 10);
  ((mmem$2<+{0|->mw$2})(0) = color_step(counter));
  ("`Local hypotheses'" & 0<=mpc$2 & mpc$2<=10 & mmem$2(0) : 0..2 & (mpc$2 = 0 => mmem$2(0) : 0..2 & mmem$2(0) = counter) & (mpc$2 = 1 => mmem$2(0) = 2 & counter = 2) & (mpc$2 = 2 => not(mmem$2(0) = 2) & mmem$2(0) = counter) & (mpc$2 = 3 => mmem$2(0) = 1 & counter = 1) & (mpc$2 = 4 => mmem$2(0) = 0 & mmem$2(0) = counter) & (mpc$2 = 5 => mmem$2(0) = 0 & mmem$2(0) = counter & mw$2 = 1) & (mpc$2 = 6 => mmem$2(0) = 1 & mmem$2(0) = counter) & (mpc$2 = 7 => mmem$2(0) = 1 & mmem$2(0) = counter & mw$2 = 2) & (mpc$2 = 8 => mmem$2(0) = 2 & mmem$2(0) = counter) & (mpc$2 = 9 => mmem$2(0) : 0..2 & mmem$2(0) = counter & mw$2 = color_step(counter)) & (mpc$2 = 10 => mmem$2(0) : 0..2 & mmem$2(0) = color_step(counter)) & mpc$2+1<=10 & not(mpc$2 = 0) & not(mpc$2 = 1) & not(mpc$2 = 2) & not(mpc$2 = 3) & not(mpc$2 = 4) & not(mpc$2 = 5) & not(mpc$2 = 6) & not(mpc$2 = 7) & not(mpc$2 = 8) & not(mpc$2 = 9));
  (10-mpc$2+1<=10-mpc$2);
  ("`Local hypotheses'" & not(mpcz$7777+1<=10) & 0<=mpcz$7777 & mpcz$7777<=10 & mmemz$7777(0) : 0..2 & (mpcz$7777 = 0 => mmemz$7777(0) : 0..2 & mmemz$7777(0) = counter) & (mpcz$7777 = 1 => mmemz$7777(0) = 2 & counter = 2) & (mpcz$7777 = 2 => not(mmemz$7777(0) = 2) & mmemz$7777(0) = counter) & (mpcz$7777 = 3 => mmemz$7777(0) = 1 & counter = 1) & (mpcz$7777 = 4 => mmemz$7777(0) = 0 & mmemz$7777(0) = counter) & (mpcz$7777 = 5 => mmemz$7777(0) = 0 & mmemz$7777(0) = counter & mwz$7777 = 1) & (mpcz$7777 = 6 => mmemz$7777(0) = 1 & mmemz$7777(0) = counter) & (mpcz$7777 = 7 => mmemz$7777(0) = 1 & mmemz$7777(0) = counter & mwz$7777 = 2) & (mpcz$7777 = 8 => mmemz$7777(0) = 2 & mmemz$7777(0) = counter) & (mpcz$7777 = 9 => mmemz$7777(0) : 0..2 & mmemz$7777(0) = counter & mwz$7777 = color_step(counter)) & (mpcz$7777 = 10 => mmemz$7777(0) : 0..2 & mmemz$7777(0) = color_step(counter)) & mmemz$7777 : REGISTER +-> WORD & dom(mmemz$7777) = REGISTER & mwz$7777 : WORD & mpcz$7777 : INSTRUCTION & ran(mmemz$7777) : POW(WORD));
  "`Check that the invariant (mmem(0) = counter) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (mmemz$7777(0) = color_step(counter));
  ("`Variables conservation'" & msp = msp$1 & mstack = mstack$1 & mpc = mpc$1 & mc = mc$1 & mz = mz$1 & mw = mw$1 & mmem = mmem$1);
  ("`Included,imported and extended machines invariants'" & mmem : REGISTER +-> WORD & dom(mmem) = REGISTER & mw : WORD & mz : BOOL & mc : BOOL & mpc : INSTRUCTION & msp : INTEGER & 0<=msp & mstack : NATURAL +-> INSTRUCTION & dom(mstack) = 0..msp-1 & "`Included,imported and extended machines assertions'" & ran(mmem) : POW(WORD) & "`Seen and used machines assertions'" & !c.(c : (1..3)*{COLOR} => c = 1|->COLOR or c = 2|->COLOR or c = 3|->COLOR) & color_refine(1|->COLOR) = 0 & color_refine(2|->COLOR) = 1 & color_refine(3|->COLOR) = 2 & color_step(0) = 1 & color_step(1) = 2 & color_step(2) = 0 & 2**8 = 256 & NB_WORDS = 256 & !n.(n : WORD => 0<=n) & !n.(n : WORD => n<=255) & WORD_POSITION = BV8_INDEX & BIT_FLIP(0) = 1 & BIT_FLIP(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1 & BIT_IOR(0,0) = 0 & BIT_IOR(0,1) = 0 & BIT_IOR(1,0) = 0 & BIT_IOR(1,1) = 1 & BIT_XOR(0,0) = 0 & BIT_XOR(0,1) = 1 & BIT_XOR(1,0) = 1 & BIT_XOR(1,1) = 0)
END
&
THEORY EnumerateX IS
  COLOR == {green,yellow,red}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
