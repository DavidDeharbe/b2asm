THEORY OPOBalanceX IS
  microcontroller,263;
  Initialisation,4;
  init_data,9;
  init,10;
  get_data,10;
  get_pc,10;
  set_end,10;
  get_end,10;
  nop,8;
  set_w,10;
  get_w,10;
  goto,10;
  iszero,19;
  isnotzero_simple,19;
  testgt,16;
  move,8;
  move_w_m,8;
  move_m_w,8;
  reset,8;
  reset_w,10;
  set_data,8;
  inc,9;
  dec,9;
  add,10;
  sub,10;
  mul,10;
  div,10
END
&
THEORY OPOProofList IS
  _f(1) & _f(44) & div.10,(_of(22) => _of(23));
  _f(1) & _f(44) & div.9,(_of(19) => _of(21));
  _f(1) & _f(44) & div.8,(_of(19) => _of(20));
  _f(1) & _f(44) & div.7,(_of(16) => _of(18));
  _f(1) & _f(44) & div.6,(_of(16) => _of(17));
  _f(1) & _f(44) & div.5,(_of(13) => _of(55));
  _f(1) & _f(44) & div.4,(_of(13) => _of(54));
  _f(1) & _f(44) & div.3,(_of(11) => _of(25));
  _f(1) & _f(44) & div.2,(_of(11) => _of(24));
  _f(1) & _f(44) & div.1,(_of(9) => _of(10));
  _f(1) & _f(43) & mul.10,(_of(22) => _of(23));
  _f(1) & _f(43) & mul.9,(_of(19) => _of(21));
  _f(1) & _f(43) & mul.8,(_of(19) => _of(20));
  _f(1) & _f(43) & mul.7,(_of(16) => _of(18));
  _f(1) & _f(43) & mul.6,(_of(16) => _of(17));
  _f(1) & _f(43) & mul.5,(_of(13) => _of(53));
  _f(1) & _f(43) & mul.4,(_of(13) => _of(52));
  _f(1) & _f(43) & mul.3,(_of(11) => _of(25));
  _f(1) & _f(43) & mul.2,(_of(11) => _of(24));
  _f(1) & _f(43) & mul.1,(_of(9) => _of(10));
  _f(1) & _f(42) & sub.10,(_of(22) => _of(23));
  _f(1) & _f(42) & sub.9,(_of(19) => _of(21));
  _f(1) & _f(42) & sub.8,(_of(19) => _of(20));
  _f(1) & _f(42) & sub.7,(_of(16) => _of(18));
  _f(1) & _f(42) & sub.6,(_of(16) => _of(17));
  _f(1) & _f(42) & sub.5,(_of(13) => _of(51));
  _f(1) & _f(42) & sub.4,(_of(13) => _of(50));
  _f(1) & _f(42) & sub.3,(_of(11) => _of(25));
  _f(1) & _f(42) & sub.2,(_of(11) => _of(24));
  _f(1) & _f(42) & sub.1,(_of(9) => _of(10));
  _f(1) & _f(41) & add.10,(_of(22) => _of(23));
  _f(1) & _f(41) & add.9,(_of(19) => _of(21));
  _f(1) & _f(41) & add.8,(_of(19) => _of(20));
  _f(1) & _f(41) & add.7,(_of(16) => _of(18));
  _f(1) & _f(41) & add.6,(_of(16) => _of(17));
  _f(1) & _f(41) & add.5,(_of(13) => _of(49));
  _f(1) & _f(41) & add.4,(_of(13) => _of(48));
  _f(1) & _f(41) & add.3,(_of(11) => _of(25));
  _f(1) & _f(41) & add.2,(_of(11) => _of(24));
  _f(1) & _f(41) & add.1,(_of(9) => _of(10));
  _f(1) & _f(39) & dec.9,(_of(22) => _of(34));
  _f(1) & _f(39) & dec.8,(_of(19) => _of(21));
  _f(1) & _f(39) & dec.7,(_of(19) => _of(20));
  _f(1) & _f(39) & dec.6,(_of(16) => _f(11));
  _f(1) & _f(39) & dec.5,(_of(16) => _f(10));
  _f(1) & _f(39) & dec.4,(_of(13) => _of(15));
  _f(1) & _f(39) & dec.3,(_of(13) => _of(14));
  _f(1) & _f(39) & dec.2,(_of(11) => _of(47));
  _f(1) & _f(39) & dec.1,(_of(9) => _of(10));
  _f(1) & _f(37) & inc.9,(_of(22) => _of(34));
  _f(1) & _f(37) & inc.8,(_of(19) => _of(21));
  _f(1) & _f(37) & inc.7,(_of(19) => _of(20));
  _f(1) & _f(37) & inc.6,(_of(16) => _f(11));
  _f(1) & _f(37) & inc.5,(_of(16) => _f(10));
  _f(1) & _f(37) & inc.4,(_of(13) => _of(15));
  _f(1) & _f(37) & inc.3,(_of(13) => _of(14));
  _f(1) & _f(37) & inc.2,(_of(11) => _of(46));
  _f(1) & _f(37) & inc.1,(_of(9) => _of(10));
  _f(1) & _f(35) & set_data.8,(_of(22) => _of(34));
  _f(1) & _f(35) & set_data.7,(_of(19) => _of(21));
  _f(1) & _f(35) & set_data.6,(_of(19) => _of(20));
  _f(1) & _f(35) & set_data.5,(_of(16) => _f(11));
  _f(1) & _f(35) & set_data.4,(_of(16) => _f(10));
  _f(1) & _f(35) & set_data.3,(_of(13) => _of(15));
  _f(1) & _f(35) & set_data.2,(_of(13) => _of(14));
  _f(1) & _f(35) & set_data.1,(_of(9) => _of(10));
  _f(1) & reset_w.10,(_of(22) => _of(23));
  _f(1) & reset_w.9,(_of(19) => _of(21));
  _f(1) & reset_w.8,(_of(19) => _of(20));
  _f(1) & reset_w.7,(_of(16) => _of(18));
  _f(1) & reset_w.6,(_of(16) => _of(17));
  _f(1) & reset_w.5,(_of(13) => _of(8));
  _f(1) & reset_w.4,(_of(13) => _of(6));
  _f(1) & reset_w.3,(_of(11) => _of(25));
  _f(1) & reset_w.2,(_of(11) => _of(24));
  _f(1) & reset_w.1,(_of(9) => _of(10));
  _f(1) & _f(32) & reset.8,(_of(22) => _of(34));
  _f(1) & _f(32) & reset.7,(_of(19) => _of(21));
  _f(1) & _f(32) & reset.6,(_of(19) => _of(20));
  _f(1) & _f(32) & reset.5,(_of(16) => _f(11));
  _f(1) & _f(32) & reset.4,(_of(16) => _f(10));
  _f(1) & _f(32) & reset.3,(_of(13) => _of(15));
  _f(1) & _f(32) & reset.2,(_of(13) => _of(14));
  _f(1) & _f(32) & reset.1,(_of(9) => _of(10));
  _f(1) & _f(28) & move_m_w.8,(_of(22) => _of(34));
  _f(1) & _f(28) & move_m_w.7,(_of(19) => _of(21));
  _f(1) & _f(28) & move_m_w.6,(_of(19) => _of(20));
  _f(1) & _f(28) & move_m_w.5,(_of(16) => _f(11));
  _f(1) & _f(28) & move_m_w.4,(_of(16) => _f(10));
  _f(1) & _f(28) & move_m_w.3,(_of(11) => _of(25));
  _f(1) & _f(28) & move_m_w.2,(_of(11) => _of(24));
  _f(1) & _f(28) & move_m_w.1,(_of(9) => _of(10));
  _f(1) & _f(25) & move_w_m.8,(_of(22) => _of(34));
  _f(1) & _f(25) & move_w_m.7,(_of(19) => _of(21));
  _f(1) & _f(25) & move_w_m.6,(_of(19) => _of(20));
  _f(1) & _f(25) & move_w_m.5,(_of(16) => _f(11));
  _f(1) & _f(25) & move_w_m.4,(_of(16) => _f(10));
  _f(1) & _f(25) & move_w_m.3,(_of(13) => _of(15));
  _f(1) & _f(25) & move_w_m.2,(_of(13) => _of(14));
  _f(1) & _f(25) & move_w_m.1,(_of(9) => _of(10));
  _f(1) & _f(22) & move.8,(_of(22) => _of(34));
  _f(1) & _f(22) & move.7,(_of(19) => _of(21));
  _f(1) & _f(22) & move.6,(_of(19) => _of(20));
  _f(1) & _f(22) & move.5,(_of(16) => _f(11));
  _f(1) & _f(22) & move.4,(_of(16) => _f(10));
  _f(1) & _f(22) & move.3,(_of(13) => _of(15));
  _f(1) & _f(22) & move.2,(_of(13) => _of(14));
  _f(1) & _f(22) & move.1,(_of(9) => _of(10));
  _f(1) & _f(16) & testgt.16,(_f(17) & _of(19) => _of(21));
  _f(1) & _f(16) & testgt.15,(_f(17) & _of(19) => _of(20));
  _f(1) & _f(16) & testgt.14,(_of(45) & _of(13) => _of(15));
  _f(1) & _f(16) & testgt.13,(_of(45) & _of(13) => _of(14));
  _f(1) & _f(16) & testgt.12,(_of(45) & _of(11) => _of(25));
  _f(1) & _f(16) & testgt.11,(_of(45) & _of(11) => _of(24));
  _f(1) & _f(16) & testgt.10,(_of(44) & _of(22) => _of(34));
  _f(1) & _f(16) & testgt.9,(_of(44) & _of(19) => _of(21));
  _f(1) & _f(16) & testgt.8,(_of(44) & _of(19) => _of(20));
  _f(1) & _f(16) & testgt.7,(_of(44) & _of(16) => _f(11));
  _f(1) & _f(16) & testgt.6,(_of(44) & _of(16) => _f(10));
  _f(1) & _f(16) & testgt.5,(_of(44) & _of(13) => _of(15));
  _f(1) & _f(16) & testgt.4,(_of(44) & _of(13) => _of(14));
  _f(1) & _f(16) & testgt.3,(_of(44) & _of(11) => _of(25));
  _f(1) & _f(16) & testgt.2,(_of(44) & _of(11) => _of(24));
  _f(1) & _f(16) & testgt.1,(_of(9) => _of(10));
  _f(1) & _f(15) & isnotzero_simple.19,(_of(37) & _of(22) => _of(34));
  _f(1) & _f(15) & isnotzero_simple.18,(_of(37) & _of(19) => _of(21));
  _f(1) & _f(15) & isnotzero_simple.17,(_of(37) & _of(19) => _of(20));
  _f(1) & _f(15) & isnotzero_simple.16,(_of(37) & _of(16) => _f(11));
  _f(1) & _f(15) & isnotzero_simple.15,(_of(37) & _of(16) => _f(10));
  _f(1) & _f(15) & isnotzero_simple.14,(_of(37) & _of(13) => _of(15));
  _f(1) & _f(15) & isnotzero_simple.13,(_of(37) & _of(13) => _of(14));
  _f(1) & _f(15) & isnotzero_simple.12,(_of(37) & _of(11) => _of(25));
  _f(1) & _f(15) & isnotzero_simple.11,(_of(37) & _of(11) => _of(24));
  _f(1) & _f(15) & isnotzero_simple.10,(_of(36) & _of(22) => _of(43));
  _f(1) & _f(15) & isnotzero_simple.9,(_of(36) & _of(19) => _of(21));
  _f(1) & _f(15) & isnotzero_simple.8,(_of(36) & _of(19) => _of(20));
  _f(1) & _f(15) & isnotzero_simple.7,(_of(36) & _of(16) => _of(42));
  _f(1) & _f(15) & isnotzero_simple.6,(_of(36) & _of(16) => _of(41));
  _f(1) & _f(15) & isnotzero_simple.5,(_of(36) & _of(13) => _of(15));
  _f(1) & _f(15) & isnotzero_simple.4,(_of(36) & _of(13) => _of(14));
  _f(1) & _f(15) & isnotzero_simple.3,(_of(36) & _of(11) => _of(25));
  _f(1) & _f(15) & isnotzero_simple.2,(_of(36) & _of(11) => _of(24));
  _f(1) & _f(15) & isnotzero_simple.1,(_of(9) => _of(10));
  _f(1) & _f(14) & iszero.19,(_of(37) & _of(22) => _of(40));
  _f(1) & _f(14) & iszero.18,(_of(37) & _of(19) => _of(21));
  _f(1) & _f(14) & iszero.17,(_of(37) & _of(19) => _of(20));
  _f(1) & _f(14) & iszero.16,(_of(37) & _of(16) => _of(39));
  _f(1) & _f(14) & iszero.15,(_of(37) & _of(16) => _of(38));
  _f(1) & _f(14) & iszero.14,(_of(37) & _of(13) => _of(15));
  _f(1) & _f(14) & iszero.13,(_of(37) & _of(13) => _of(14));
  _f(1) & _f(14) & iszero.12,(_of(37) & _of(11) => _of(25));
  _f(1) & _f(14) & iszero.11,(_of(37) & _of(11) => _of(24));
  _f(1) & _f(14) & iszero.10,(_of(36) & _of(22) => _of(34));
  _f(1) & _f(14) & iszero.9,(_of(36) & _of(19) => _of(21));
  _f(1) & _f(14) & iszero.8,(_of(36) & _of(19) => _of(20));
  _f(1) & _f(14) & iszero.7,(_of(36) & _of(16) => _f(11));
  _f(1) & _f(14) & iszero.6,(_of(36) & _of(16) => _f(10));
  _f(1) & _f(14) & iszero.5,(_of(36) & _of(13) => _of(15));
  _f(1) & _f(14) & iszero.4,(_of(36) & _of(13) => _of(14));
  _f(1) & _f(14) & iszero.3,(_of(36) & _of(11) => _of(25));
  _f(1) & _f(14) & iszero.2,(_of(36) & _of(11) => _of(24));
  _f(1) & _f(14) & iszero.1,(_of(9) => _of(10));
  _f(1) & _f(13) & goto.10,(_of(22) => _of(35));
  _f(1) & _f(13) & goto.9,(_of(19) => _of(21));
  _f(1) & _f(13) & goto.8,(_of(19) => _of(20));
  _f(1) & _f(13) & goto.7,(_of(16) => _of(32));
  _f(1) & _f(13) & goto.6,(_of(16) => _of(31));
  _f(1) & _f(13) & goto.5,(_of(13) => _of(15));
  _f(1) & _f(13) & goto.4,(_of(13) => _of(14));
  _f(1) & _f(13) & goto.3,(_of(11) => _of(25));
  _f(1) & _f(13) & goto.2,(_of(11) => _of(24));
  _f(1) & _f(13) & goto.1,(_of(9) => _of(10));
  _f(1) & get_w.10,(_of(22) => _of(23));
  _f(1) & get_w.9,(_of(19) => _of(21));
  _f(1) & get_w.8,(_of(19) => _of(20));
  _f(1) & get_w.7,(_of(16) => _of(18));
  _f(1) & get_w.6,(_of(16) => _of(17));
  _f(1) & get_w.5,(_of(13) => _of(15));
  _f(1) & get_w.4,(_of(13) => _of(14));
  _f(1) & get_w.3,(_of(11) => _of(25));
  _f(1) & get_w.2,(_of(11) => _of(24));
  _f(1) & get_w.1,(_of(9) => _of(10));
  _f(1) & _f(12) & set_w.10,(_of(22) => _of(23));
  _f(1) & _f(12) & set_w.9,(_of(19) => _of(21));
  _f(1) & _f(12) & set_w.8,(_of(19) => _of(20));
  _f(1) & _f(12) & set_w.7,(_of(16) => _of(18));
  _f(1) & _f(12) & set_w.6,(_of(16) => _of(17));
  _f(1) & _f(12) & set_w.5,(_of(13) => _of(32));
  _f(1) & _f(12) & set_w.4,(_of(13) => _of(31));
  _f(1) & _f(12) & set_w.3,(_of(11) => _of(25));
  _f(1) & _f(12) & set_w.2,(_of(11) => _of(24));
  _f(1) & _f(12) & set_w.1,(_of(9) => _of(10));
  _f(1) & _f(8) & nop.8,(_of(22) => _of(34));
  _f(1) & _f(8) & nop.7,(_of(19) => _of(21));
  _f(1) & _f(8) & nop.6,(_of(19) => _of(20));
  _f(1) & _f(8) & nop.5,(_of(13) => _of(15));
  _f(1) & _f(8) & nop.4,(_of(13) => _of(14));
  _f(1) & _f(8) & nop.3,(_of(11) => _of(25));
  _f(1) & _f(8) & nop.2,(_of(11) => _of(24));
  _f(1) & _f(8) & nop.1,(_of(9) => _of(10));
  _f(1) & get_end.10,(_of(22) => _of(23));
  _f(1) & get_end.9,(_of(19) => _of(21));
  _f(1) & get_end.8,(_of(19) => _of(20));
  _f(1) & get_end.7,(_of(16) => _of(18));
  _f(1) & get_end.6,(_of(16) => _of(17));
  _f(1) & get_end.5,(_of(13) => _of(15));
  _f(1) & get_end.4,(_of(13) => _of(14));
  _f(1) & get_end.3,(_of(11) => _of(25));
  _f(1) & get_end.2,(_of(11) => _of(24));
  _f(1) & get_end.1,(_of(9) => _of(10));
  _f(1) & _f(7) & set_end.10,(_of(22) => _of(33));
  _f(1) & _f(7) & set_end.9,(_of(19) => _of(32));
  _f(1) & _f(7) & set_end.8,(_of(19) => _of(31));
  _f(1) & _f(7) & set_end.7,(_of(16) => _of(18));
  _f(1) & _f(7) & set_end.6,(_of(16) => _of(17));
  _f(1) & _f(7) & set_end.5,(_of(13) => _of(15));
  _f(1) & _f(7) & set_end.4,(_of(13) => _of(14));
  _f(1) & _f(7) & set_end.3,(_of(11) => _of(25));
  _f(1) & _f(7) & set_end.2,(_of(11) => _of(24));
  _f(1) & _f(7) & set_end.1,(_of(9) => _of(10));
  _f(1) & get_pc.10,(_of(22) => _of(23));
  _f(1) & get_pc.9,(_of(19) => _of(21));
  _f(1) & get_pc.8,(_of(19) => _of(20));
  _f(1) & get_pc.7,(_of(16) => _of(18));
  _f(1) & get_pc.6,(_of(16) => _of(17));
  _f(1) & get_pc.5,(_of(13) => _of(15));
  _f(1) & get_pc.4,(_of(13) => _of(14));
  _f(1) & get_pc.3,(_of(11) => _of(25));
  _f(1) & get_pc.2,(_of(11) => _of(24));
  _f(1) & get_pc.1,(_of(9) => _of(10));
  _f(1) & _f(6) & get_data.10,(_of(22) => _of(23));
  _f(1) & _f(6) & get_data.9,(_of(19) => _of(21));
  _f(1) & _f(6) & get_data.8,(_of(19) => _of(20));
  _f(1) & _f(6) & get_data.7,(_of(16) => _of(18));
  _f(1) & _f(6) & get_data.6,(_of(16) => _of(17));
  _f(1) & _f(6) & get_data.5,(_of(13) => _of(15));
  _f(1) & _f(6) & get_data.4,(_of(13) => _of(14));
  _f(1) & _f(6) & get_data.3,(_of(11) => _of(25));
  _f(1) & _f(6) & get_data.2,(_of(11) => _of(24));
  _f(1) & _f(6) & get_data.1,(_of(9) => _of(10));
  _f(1) & _f(5) & init.10,(_of(22) => _of(30));
  _f(1) & _f(5) & init.9,(_of(19) => _of(29));
  _f(1) & _f(5) & init.8,(_of(19) => _of(28));
  _f(1) & _f(5) & init.7,(_of(16) => _of(27));
  _f(1) & _f(5) & init.6,(_of(16) => _of(26));
  _f(1) & _f(5) & init.5,(_of(13) => _of(15));
  _f(1) & _f(5) & init.4,(_of(13) => _of(14));
  _f(1) & _f(5) & init.3,(_of(11) => _of(25));
  _f(1) & _f(5) & init.2,(_of(11) => _of(24));
  _f(1) & _f(5) & init.1,(_of(9) => _of(10));
  _f(1) & _f(2) & init_data.9,(_of(22) => _of(23));
  _f(1) & _f(2) & init_data.8,(_of(19) => _of(21));
  _f(1) & _f(2) & init_data.7,(_of(19) => _of(20));
  _f(1) & _f(2) & init_data.6,(_of(16) => _of(18));
  _f(1) & _f(2) & init_data.5,(_of(16) => _of(17));
  _f(1) & _f(2) & init_data.4,(_of(13) => _of(15));
  _f(1) & _f(2) & init_data.3,(_of(13) => _of(14));
  _f(1) & _f(2) & init_data.2,(_of(11) => _of(12));
  _f(1) & _f(2) & init_data.1,(_of(9) => _of(10));
  Initialisation.4,(_of(1) & _of(7) => _of(8));
  Initialisation.3,(_of(1) & _of(5) => _of(6));
  Initialisation.2,(_of(1) & _of(2) => _of(4));
  Initialisation.1,(_of(1) & _of(2) => _of(3))
END
&
THEORY OPOFormulas IS
  ("`Local hypotheses'" & memory_data$0 : NATURAL +-> NATURAL & dom(memory_data$0) = NATURAL);
  "`Check that the invariant (memory_data : NATURAL --> NATURAL) is established by the initialisation - ref 3.3'";
  (memory_data$0 : NATURAL +-> NATURAL);
  (dom(memory_data$0) = NATURAL);
  "`Check that the invariant (w : NATURAL) is established by the initialisation - ref 3.3'" & "`Check that the invariant (pc : NATURAL) is established by the initialisation - ref 3.3'" & "`Check that the invariant (end : NATURAL) is established by the initialisation - ref 3.3'";
  (0 : INTEGER);
  "`Check that the invariant (w : NATURAL) is established by the initialisation - ref 3.3'" & "`Check that the invariant (pc : NATURAL) is established by the initialisation - ref 3.3'" & "`Check that the invariant (end : NATURAL) is established by the initialisation - ref 3.3'" & "`Check that the invariant (pc<=end) is established by the initialisation - ref 3.3'";
  (0<=0);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (btrue);
  "`Check that the invariant (memory_data : NATURAL --> NATURAL) is preserved by the operation - ref 3.4'";
  (dom(memory_data<+{address|->value}) = NATURAL);
  "`Check that the invariant (w : NATURAL) is preserved by the operation - ref 3.4'";
  (w : INTEGER);
  (0<=w);
  "`Check that the invariant (pc : NATURAL) is preserved by the operation - ref 3.4'";
  (pc : INTEGER);
  (0<=pc);
  "`Check that the invariant (end : NATURAL) is preserved by the operation - ref 3.4'";
  (end : INTEGER);
  (0<=end);
  "`Check that the invariant (pc<=end) is preserved by the operation - ref 3.4'";
  (pc<=end);
  (memory_data : NATURAL +-> NATURAL);
  (dom(memory_data) = NATURAL);
  (pc_ : INTEGER);
  (0<=pc_);
  (end_ : INTEGER);
  (0<=end_);
  (pc_<=end_);
  (value : INTEGER);
  (0<=value);
  (pc<=value);
  (pc+1<=end);
  (value<=end);
  ("`Local hypotheses'" & memory_data(address) = 0);
  ("`Local hypotheses'" & not(memory_data(address) = 0));
  (pc+2 : INTEGER);
  (0<=pc+2);
  (pc+2<=end);
  (pc+3 : INTEGER);
  (0<=pc+3);
  (pc+3<=end);
  ("`Local hypotheses'" & memory_data(address2)+1<=memory_data(address1));
  ("`Local hypotheses'" & not(memory_data(address2)+1<=memory_data(address1)));
  (dom(memory_data<+{address|->memory_data(address)+1}) = NATURAL);
  (dom(memory_data<+{address|->memory_data(address)-1}) = NATURAL);
  (memory_data(address1)+memory_data(address2) : INTEGER);
  (0<=memory_data(address1)+memory_data(address2));
  (memory_data(address1)-memory_data(address2) : INTEGER);
  (0<=memory_data(address1)-memory_data(address2));
  (memory_data(address1)*memory_data(address2) : INTEGER);
  (0<=memory_data(address1)*memory_data(address2));
  (memory_data(address1)/memory_data(address2) : INTEGER);
  (0<=memory_data(address1)/memory_data(address2))
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
