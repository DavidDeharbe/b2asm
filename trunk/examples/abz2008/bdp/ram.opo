THEORY OPOBalanceX IS
  ram,76;
  Initialisation,6;
  init,7;
  nop,6;
  set,4;
  inc,4;
  move,4;
  testgt,10;
  testeq,11;
  goto,8;
  get_data,8;
  get_pc,8
END
&
THEORY OPOProofList IS
  _f(1) & _f(2) & get_pc.8,(_of(24) => _of(35));
  _f(1) & _f(2) & get_pc.7,(_of(18) => _of(23));
  _f(1) & _f(2) & get_pc.6,(_of(18) => _of(22));
  _f(1) & _f(2) & get_pc.5,(_of(17) => _of(34));
  _f(1) & _f(2) & get_pc.4,(_of(17) => _of(33));
  _f(1) & _f(2) & get_pc.3,(_of(14) => _of(16));
  _f(1) & _f(2) & get_pc.2,(_of(14) => _of(15));
  _f(1) & _f(2) & get_pc.1,(_of(12) => _of(13));
  _f(1) & _f(2) & _f(29) & get_data.8,(_of(24) => _of(35));
  _f(1) & _f(2) & _f(29) & get_data.7,(_of(18) => _of(23));
  _f(1) & _f(2) & _f(29) & get_data.6,(_of(18) => _of(22));
  _f(1) & _f(2) & _f(29) & get_data.5,(_of(17) => _of(34));
  _f(1) & _f(2) & _f(29) & get_data.4,(_of(17) => _of(33));
  _f(1) & _f(2) & _f(29) & get_data.3,(_of(14) => _of(16));
  _f(1) & _f(2) & _f(29) & get_data.2,(_of(14) => _of(15));
  _f(1) & _f(2) & _f(29) & get_data.1,(_of(12) => _of(13));
  _f(1) & _f(2) & _f(28) & goto.8,(_of(24) => _of(32));
  _f(1) & _f(2) & _f(28) & goto.7,(_of(18) => _of(23));
  _f(1) & _f(2) & _f(28) & goto.6,(_of(18) => _of(22));
  _f(1) & _f(2) & _f(28) & goto.5,(_of(17) => _of(31));
  _f(1) & _f(2) & _f(28) & goto.4,(_of(17) => _of(30));
  _f(1) & _f(2) & _f(28) & goto.3,(_of(14) => _of(16));
  _f(1) & _f(2) & _f(28) & goto.2,(_of(14) => _of(15));
  _f(1) & _f(2) & _f(28) & goto.1,(_of(12) => _of(13));
  _f(1) & _f(2) & _f(25) & testeq.11,(_f(27) & _of(24) => _f(24));
  _f(1) & _f(2) & _f(25) & testeq.10,(_f(27) & _of(18) => _of(23));
  _f(1) & _f(2) & _f(25) & testeq.9,(_f(27) & _of(18) => _of(22));
  _f(1) & _f(2) & _f(25) & testeq.8,(_of(29) & _of(14) => _of(16));
  _f(1) & _f(2) & _f(25) & testeq.7,(_of(29) & _of(14) => _of(15));
  _f(1) & _f(2) & _f(25) & testeq.6,(_f(26) & _of(24) => _of(25));
  _f(1) & _f(2) & _f(25) & testeq.5,(_f(26) & _of(18) => _of(23));
  _f(1) & _f(2) & _f(25) & testeq.4,(_f(26) & _of(18) => _of(22));
  _f(1) & _f(2) & _f(25) & testeq.3,(_of(28) & _of(14) => _of(16));
  _f(1) & _f(2) & _f(25) & testeq.2,(_of(28) & _of(14) => _of(15));
  _f(1) & _f(2) & _f(25) & testeq.1,(_of(12) => _of(13));
  _f(1) & _f(2) & _f(18) & testgt.10,(_f(20) & _of(18) => _of(23));
  _f(1) & _f(2) & _f(18) & testgt.9,(_f(20) & _of(18) => _of(22));
  _f(1) & _f(2) & _f(18) & testgt.8,(_of(27) & _of(14) => _of(16));
  _f(1) & _f(2) & _f(18) & testgt.7,(_of(27) & _of(14) => _of(15));
  _f(1) & _f(2) & _f(18) & testgt.6,(_f(19) & _of(24) => _of(25));
  _f(1) & _f(2) & _f(18) & testgt.5,(_f(19) & _of(18) => _of(23));
  _f(1) & _f(2) & _f(18) & testgt.4,(_f(19) & _of(18) => _of(22));
  _f(1) & _f(2) & _f(18) & testgt.3,(_of(26) & _of(14) => _of(16));
  _f(1) & _f(2) & _f(18) & testgt.2,(_of(26) & _of(14) => _of(15));
  _f(1) & _f(2) & _f(18) & testgt.1,(_of(12) => _of(13));
  _f(1) & _f(2) & _f(15) & move.4,(_of(24) => _of(25));
  _f(1) & _f(2) & _f(15) & move.3,(_of(18) => _of(23));
  _f(1) & _f(2) & _f(15) & move.2,(_of(18) => _of(22));
  _f(1) & _f(2) & _f(15) & move.1,(_of(12) => _of(13));
  _f(1) & _f(2) & _f(12) & inc.4,(_of(24) => _of(25));
  _f(1) & _f(2) & _f(12) & inc.3,(_of(18) => _of(23));
  _f(1) & _f(2) & _f(12) & inc.2,(_of(18) => _of(22));
  _f(1) & _f(2) & _f(12) & inc.1,(_of(12) => _of(13));
  _f(1) & _f(2) & _f(8) & set.4,(_of(24) => _of(25));
  _f(1) & _f(2) & _f(8) & set.3,(_of(18) => _of(23));
  _f(1) & _f(2) & _f(8) & set.2,(_of(18) => _of(22));
  _f(1) & _f(2) & _f(8) & set.1,(_of(12) => _of(13));
  _f(1) & _f(2) & _f(4) & nop.6,(_of(24) => _of(25));
  _f(1) & _f(2) & _f(4) & nop.5,(_of(18) => _of(23));
  _f(1) & _f(2) & _f(4) & nop.4,(_of(18) => _of(22));
  _f(1) & _f(2) & _f(4) & nop.3,(_of(14) => _of(16));
  _f(1) & _f(2) & _f(4) & nop.2,(_of(14) => _of(15));
  _f(1) & _f(2) & _f(4) & nop.1,(_of(12) => _of(13));
  _f(1) & _f(2) & _f(3) & init.7,(_of(20) => _of(21));
  _f(1) & _f(2) & _f(3) & init.6,(_of(18) => _of(19));
  _f(1) & _f(2) & _f(3) & init.5,(_of(17) => _of(7));
  _f(1) & _f(2) & _f(3) & init.4,(_of(17) => _of(6));
  _f(1) & _f(2) & _f(3) & init.3,(_of(14) => _of(16));
  _f(1) & _f(2) & _f(3) & init.2,(_of(14) => _of(15));
  _f(1) & _f(2) & _f(3) & init.1,(_of(12) => _of(13));
  _f(1) & Initialisation.6,(_of(1) & _of(10) => _of(11));
  _f(1) & Initialisation.5,(_of(1) & _of(8) => _of(9));
  _f(1) & Initialisation.4,(_of(1) & _of(5) => _of(7));
  _f(1) & Initialisation.3,(_of(1) & _of(5) => _of(6));
  _f(1) & Initialisation.2,(_of(1) & _of(2) => _of(4));
  _f(1) & Initialisation.1,(_of(1) & _of(2) => _of(3))
END
&
THEORY OPOFormulas IS
  ("`Local hypotheses'" & end$0 : INTEGER & 0<=end$0 & mem$0 : NATURAL +-> uint32 & dom(mem$0) = NATURAL);
  "`Check that the invariant (mem : NATURAL --> uint32) is established by the initialisation - ref 3.3'";
  (mem$0 : NATURAL +-> uint32);
  (dom(mem$0) = NATURAL);
  "`Check that the invariant (pc : NATURAL) is established by the initialisation - ref 3.3'";
  (0 : INTEGER);
  (0<=0);
  "`Check that the invariant (end : NATURAL) is established by the initialisation - ref 3.3'";
  (end$0 : INTEGER);
  "`Check that the invariant (end : NATURAL) is established by the initialisation - ref 3.3'" & "`Check that the invariant (pc<=end) is established by the initialisation - ref 3.3'";
  (0<=end$0);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (btrue);
  "`Check that the invariant (mem : NATURAL --> uint32) is preserved by the operation - ref 3.4'";
  (mem : NATURAL +-> uint32);
  (dom(mem) = NATURAL);
  "`Check that the invariant (pc : NATURAL) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (end : NATURAL) is preserved by the operation - ref 3.4'";
  (sz : INTEGER);
  "`Check that the invariant (end : NATURAL) is preserved by the operation - ref 3.4'" & "`Check that the invariant (pc<=end) is preserved by the operation - ref 3.4'";
  (0<=sz);
  (end : INTEGER);
  (0<=end);
  "`Check that the invariant (pc<=end) is preserved by the operation - ref 3.4'";
  (pc+1<=end);
  ("`Local hypotheses'" & mem(addr2)+1<=mem(addr1));
  ("`Local hypotheses'" & not(mem(addr2)+1<=mem(addr1)));
  ("`Local hypotheses'" & mem(addr1) = mem(addr2));
  ("`Local hypotheses'" & not(mem(addr1) = mem(addr2)));
  (dest : INTEGER);
  (0<=dest);
  (dest<=end);
  (pc : INTEGER);
  (0<=pc);
  (pc<=end)
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
