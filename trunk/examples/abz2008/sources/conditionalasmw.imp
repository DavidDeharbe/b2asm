IMPLEMENTATION conditionalasmw
REFINES conditional
SEES types
IMPORTS uc.ram
INVARIANT
  max(st) = uc.mem(0)
INITIALISATION
  BEGIN
    uc.init(1);
    uc.set(0, 0)
  END
OPERATIONS
  add (v) =
  VAR pc, end IN
    pc := 0;
    end := 4;
    uc.init(end);
    WHILE pc < end DO
    BEGIN
      CASE pc OF
        EITHER 0 THEN uc.set(1,v)
        OR 1 THEN uc.testgt(1,0)
        OR 2 THEN uc.move(1,0)
        OR 3 THEN uc.nop
        END
      END;
      pc <-- uc.get_pc
    END
    INVARIANT 
      pc >= 0 & pc <= end &
      pc = uc.pc & end = uc.end &
      (pc = 0 => uc.mem(0) = max(st)) &
      (pc = 1 => uc.mem(0) = max(st) & uc.mem(1) = v) &
      (pc = 2 => uc.mem(0) = max(st) & uc.mem(1) = v & max(st) < v) &
      (pc = 3 => uc.mem(0) = max({v,max(st)})) &
      (pc = 4 => uc.mem(0) = max({v,max(st)}))
    VARIANT end - pc
    END
  END;
  res <-- largest =
    BEGIN
      res <-- uc.get_data(0)
    END
END
