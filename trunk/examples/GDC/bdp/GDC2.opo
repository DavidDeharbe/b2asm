THEORY OPOBalanceX IS
  GDC2,3441;
  Initialisation,7;
  update_controller,3434
END
&
THEORY OPOProofList IS
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3434,(_of(1281) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3433,(_of(1281) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3432,(_of(1281) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3431,(_of(1281) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3430,(_of(1281) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3429,(_of(1281) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3428,(_of(1281) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3427,(_of(1281) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3426,(_of(1281) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3425,(_of(1281) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3424,(_of(1281) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3423,(_of(1281) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3422,(_of(1281) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3421,(_of(1281) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3420,(_of(1281) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3419,(_of(1281) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3418,(_of(1281) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3417,(_of(1281) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3416,(_of(1281) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3415,(_of(1280) & _of(181) => _of(914));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3414,(_of(1279) & _of(105) => _of(911));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3413,(_of(1278) & _of(105) => _of(911));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3412,(_of(1276) & _of(108) => _of(1277));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3411,(_of(1274) & _of(111) => _of(1275));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3410,(_of(1273) & _of(477) => _of(909));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3409,(_of(1272) & _of(477) => _of(907));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3408,(_of(1270) & _of(108) => _of(1271));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3407,(_of(1269) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3406,(_of(1269) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3405,(_of(1269) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3404,(_of(1269) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3403,(_of(1269) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3402,(_of(1269) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3401,(_of(1269) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3400,(_of(1269) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3399,(_of(1269) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3398,(_of(1269) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3397,(_of(1269) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3396,(_of(1269) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3395,(_of(1269) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3394,(_of(1269) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3393,(_of(1269) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3392,(_of(1269) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3391,(_of(1269) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3390,(_of(1269) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3389,(_of(1269) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3388,(_of(1267) & _of(181) => _of(1268));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3387,(_of(1266) & _of(105) => _of(1265));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3386,(_of(1264) & _of(105) => _of(1265));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3385,(_of(1262) & _of(111) => _of(1263));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3384,(_of(1260) & _of(477) => _of(1261));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3383,(_of(1258) & _of(477) => _of(1259));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3382,(_of(1257) & _of(477) => _of(891));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3381,(_of(1256) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3380,(_of(1256) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3379,(_of(1256) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3378,(_of(1256) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3377,(_of(1256) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3376,(_of(1256) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3375,(_of(1256) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3374,(_of(1256) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3373,(_of(1256) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3372,(_of(1256) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3371,(_of(1256) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3370,(_of(1256) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3369,(_of(1256) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3368,(_of(1256) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3367,(_of(1256) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3366,(_of(1256) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3365,(_of(1256) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3364,(_of(1256) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3363,(_of(1256) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3362,(_of(1255) & _of(181) => _of(884));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3361,(_of(1254) & _of(105) => _of(881));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3360,(_of(1253) & _of(105) => _of(881));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3359,(_of(1251) & _of(108) => _of(1252));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3358,(_of(1249) & _of(111) => _of(1250));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3357,(_of(1248) & _of(477) => _of(879));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3356,(_of(1246) & _of(477) => _of(1247));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3355,(_of(1244) & _of(108) => _of(1245));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3354,(_of(1243) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3353,(_of(1243) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3352,(_of(1243) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3351,(_of(1243) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3350,(_of(1243) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3349,(_of(1243) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3348,(_of(1243) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3347,(_of(1243) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3346,(_of(1243) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3345,(_of(1243) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3344,(_of(1243) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3343,(_of(1243) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3342,(_of(1243) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3341,(_of(1243) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3340,(_of(1243) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3339,(_of(1243) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3338,(_of(1243) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3337,(_of(1243) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3336,(_of(1243) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3335,(_of(1241) & _of(181) => _of(1242));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3334,(_of(1240) & _of(105) => _of(1239));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3333,(_of(1238) & _of(105) => _of(1239));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3332,(_of(1236) & _of(111) => _of(1237));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3331,(_of(1234) & _of(477) => _of(1235));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3330,(_of(1233) & _of(116) => _of(844));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3329,(_of(1233) & _of(116) => _of(843));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3328,(_of(1233) & _of(116) => _of(842));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3327,(_of(1233) & _of(116) => _of(841));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3326,(_of(1233) & _of(116) => _of(840));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3325,(_of(1233) & _of(116) => _of(839));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3324,(_of(1233) & _of(116) => _of(838));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3323,(_of(1233) & _of(116) => _of(837));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3322,(_of(1233) & _of(116) => _of(836));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3321,(_of(1233) & _of(116) => _of(835));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3320,(_of(1233) & _of(116) => _of(834));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3319,(_of(1233) & _of(116) => _of(833));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3318,(_of(1233) & _of(116) => _of(832));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3317,(_of(1233) & _of(116) => _of(831));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3316,(_of(1233) & _of(116) => _of(830));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3315,(_of(1233) & _of(83) => _of(825));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3314,(_of(1233) & _of(81) => _of(824));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3313,(_of(1233) & _of(79) => _of(823));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3312,(_of(1233) & _of(77) => _of(822));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3311,(_of(1233) & _of(75) => _of(821));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3310,(_f(68) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3309,(_of(1232) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3308,(_of(1232) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3307,(_of(1232) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3306,(_of(1232) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3305,(_of(1232) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3304,(_of(1232) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3303,(_of(1232) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3302,(_of(1232) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3301,(_of(1232) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3300,(_of(1232) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3299,(_of(1232) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3298,(_of(1232) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3297,(_of(1232) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3296,(_of(1232) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3295,(_of(1232) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3294,(_of(1232) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3293,(_of(1231) & _of(105) => _of(817));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3292,(_of(1230) & _of(105) => _of(817));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3291,(_of(1228) & _of(108) => _of(1229));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3290,(_of(1226) & _of(111) => _of(1227));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3289,(_of(1225) & _of(477) => _of(815));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3288,(_of(1224) & _of(477) => _of(813));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3287,(_of(1201) & _of(116) => _of(1223));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3286,(_of(1201) & _of(116) => _of(1222));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3285,(_of(1201) & _of(116) => _of(1221));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3284,(_of(1201) & _of(116) => _of(1220));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3283,(_of(1201) & _of(116) => _of(1219));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3282,(_of(1201) & _of(116) => _of(1218));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3281,(_of(1201) & _of(116) => _of(1217));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3280,(_of(1201) & _of(116) => _of(1216));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3279,(_of(1201) & _of(116) => _of(1215));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3278,(_of(1201) & _of(116) => _of(1214));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3277,(_of(1201) & _of(116) => _of(1213));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3276,(_of(1201) & _of(116) => _of(1212));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3275,(_of(1201) & _of(116) => _of(1211));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3274,(_of(1201) & _of(116) => _of(1210));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3273,(_of(1201) & _of(116) => _of(1209));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3272,(_of(1207) & _of(108) => _of(1208));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3271,(_of(1201) & _of(83) => _of(1206));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3270,(_of(1201) & _of(81) => _of(1205));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3269,(_of(1201) & _of(79) => _of(1204));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3268,(_of(1201) & _of(77) => _of(1203));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3267,(_of(1201) & _of(75) => _of(1202));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3266,(_f(67) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3265,(_of(1200) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3264,(_of(1200) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3263,(_of(1200) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3262,(_of(1200) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3261,(_of(1200) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3260,(_of(1200) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3259,(_of(1200) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3258,(_of(1200) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3257,(_of(1200) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3256,(_of(1200) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3255,(_of(1200) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3254,(_of(1200) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3253,(_of(1200) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3252,(_of(1200) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3251,(_of(1200) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3250,(_of(1200) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3249,(_of(1199) & _of(105) => _of(1198));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3248,(_of(1197) & _of(105) => _of(1198));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3247,(_of(1195) & _of(111) => _of(1196));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3246,(_of(1193) & _of(477) => _of(1194));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3245,(_of(1191) & _of(477) => _of(1192));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3244,(_of(1189) & _of(116) => _of(778));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3243,(_of(1189) & _of(116) => _of(777));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3242,(_of(1189) & _of(116) => _of(776));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3241,(_of(1189) & _of(116) => _of(775));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3240,(_of(1189) & _of(116) => _of(774));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3239,(_of(1189) & _of(116) => _of(773));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3238,(_of(1189) & _of(116) => _of(772));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3237,(_of(1189) & _of(116) => _of(771));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3236,(_of(1189) & _of(116) => _of(770));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3235,(_of(1189) & _of(116) => _of(769));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3234,(_of(1189) & _of(116) => _of(768));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3233,(_of(1189) & _of(116) => _of(767));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3232,(_of(1189) & _of(116) => _of(766));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3231,(_of(1189) & _of(116) => _of(765));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3230,(_of(1189) & _of(116) => _of(764));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3229,(_of(1190) & _of(477) => _of(763));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3228,(_of(1189) & _of(83) => _of(757));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3227,(_of(1189) & _of(81) => _of(756));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3226,(_of(1189) & _of(79) => _of(755));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3225,(_of(1189) & _of(77) => _of(754));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3224,(_of(1189) & _of(75) => _of(753));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3223,(_f(66) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3222,(_of(1188) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3221,(_of(1188) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3220,(_of(1188) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3219,(_of(1188) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3218,(_of(1188) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3217,(_of(1188) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3216,(_of(1188) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3215,(_of(1188) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3214,(_of(1188) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3213,(_of(1188) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3212,(_of(1188) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3211,(_of(1188) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3210,(_of(1188) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3209,(_of(1188) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3208,(_of(1188) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3207,(_of(1188) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3206,(_of(1187) & _of(105) => _of(749));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3205,(_of(1186) & _of(105) => _of(749));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3204,(_of(1184) & _of(108) => _of(1185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3203,(_of(1182) & _of(111) => _of(1183));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3202,(_of(1181) & _of(477) => _of(747));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3201,(_of(1156) & _of(116) => _of(1180));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3200,(_of(1156) & _of(116) => _of(1179));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3199,(_of(1156) & _of(116) => _of(1178));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3198,(_of(1156) & _of(116) => _of(1177));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3197,(_of(1156) & _of(116) => _of(1176));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3196,(_of(1156) & _of(116) => _of(1175));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3195,(_of(1156) & _of(116) => _of(1174));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3194,(_of(1156) & _of(116) => _of(1173));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3193,(_of(1156) & _of(116) => _of(1172));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3192,(_of(1156) & _of(116) => _of(1171));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3191,(_of(1156) & _of(116) => _of(1170));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3190,(_of(1156) & _of(116) => _of(1169));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3189,(_of(1156) & _of(116) => _of(1168));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3188,(_of(1156) & _of(116) => _of(1167));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3187,(_of(1156) & _of(116) => _of(1166));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3186,(_of(1164) & _of(477) => _of(1165));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3185,(_of(1162) & _of(108) => _of(1163));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3184,(_of(1156) & _of(83) => _of(1161));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3183,(_of(1156) & _of(81) => _of(1160));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3182,(_of(1156) & _of(79) => _of(1159));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3181,(_of(1156) & _of(77) => _of(1158));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3180,(_of(1156) & _of(75) => _of(1157));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3179,(_f(65) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3178,(_of(1155) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3177,(_of(1155) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3176,(_of(1155) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3175,(_of(1155) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3174,(_of(1155) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3173,(_of(1155) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3172,(_of(1155) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3171,(_of(1155) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3170,(_of(1155) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3169,(_of(1155) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3168,(_of(1155) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3167,(_of(1155) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3166,(_of(1155) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3165,(_of(1155) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3164,(_of(1155) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3163,(_of(1155) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3162,(_of(1154) & _of(105) => _of(1153));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3161,(_of(1152) & _of(105) => _of(1153));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3160,(_of(1150) & _of(111) => _of(1151));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3159,(_of(1148) & _of(477) => _of(1149));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3158,(_of(1147) & _of(105) => _of(708));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3157,(_of(1146) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3156,(_of(1146) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3155,(_of(1146) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3154,(_of(1146) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3153,(_of(1146) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3152,(_of(1146) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3151,(_of(1146) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3150,(_of(1146) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3149,(_of(1146) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3148,(_of(1146) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3147,(_of(1146) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3146,(_of(1146) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3145,(_of(1146) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3144,(_of(1146) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3143,(_of(1146) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3142,(_of(1146) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3141,(_of(1146) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3140,(_of(1146) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3139,(_of(1146) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3138,(_of(1145) & _of(181) => _of(703));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3137,(_of(1144) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3136,(_of(1144) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3135,(_of(1144) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3134,(_of(1144) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3133,(_of(1144) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3132,(_of(1144) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3131,(_of(1144) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3130,(_of(1144) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3129,(_of(1144) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3128,(_of(1144) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3127,(_of(1144) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3126,(_of(1144) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3125,(_of(1144) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3124,(_of(1144) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3123,(_of(1144) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3122,(_of(1144) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3121,(_of(1144) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3120,(_of(1144) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3119,(_of(1144) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3118,(_of(1143) & _of(181) => _of(703));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3117,(_of(1142) & _of(108) => _of(1133));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3116,(_of(1141) & _of(111) => _of(1131));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3115,(_of(1140) & _of(477) => _of(701));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3114,(_of(1139) & _of(477) => _of(699));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3113,(_of(1138) & _of(105) => _of(708));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3112,(_of(1137) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3111,(_of(1137) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3110,(_of(1137) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3109,(_of(1137) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3108,(_of(1137) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3107,(_of(1137) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3106,(_of(1137) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3105,(_of(1137) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3104,(_of(1137) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3103,(_of(1137) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3102,(_of(1137) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3101,(_of(1137) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3100,(_of(1137) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3099,(_of(1137) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3098,(_of(1137) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3097,(_of(1137) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3096,(_of(1137) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3095,(_of(1137) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3094,(_of(1137) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3093,(_of(1136) & _of(181) => _of(703));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3092,(_of(1135) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3091,(_of(1135) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3090,(_of(1135) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3089,(_of(1135) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3088,(_of(1135) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3087,(_of(1135) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3086,(_of(1135) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3085,(_of(1135) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3084,(_of(1135) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3083,(_of(1135) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3082,(_of(1135) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3081,(_of(1135) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3080,(_of(1135) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3079,(_of(1135) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3078,(_of(1135) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3077,(_of(1135) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3076,(_of(1135) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3075,(_of(1135) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3074,(_of(1135) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3073,(_of(1134) & _of(181) => _of(703));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3072,(_of(1132) & _of(108) => _of(1133));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3071,(_of(1130) & _of(111) => _of(1131));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3070,(_of(1129) & _of(477) => _of(701));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3069,(_of(1128) & _of(477) => _of(699));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3068,(_of(1127) & _of(108) => _of(1118));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3067,(_of(1126) & _of(105) => _of(1116));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3066,(_of(1125) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3065,(_of(1125) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3064,(_of(1125) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3063,(_of(1125) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3062,(_of(1125) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3061,(_of(1125) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3060,(_of(1125) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3059,(_of(1125) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3058,(_of(1125) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3057,(_of(1125) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3056,(_of(1125) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3055,(_of(1125) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3054,(_of(1125) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3053,(_of(1125) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3052,(_of(1125) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3051,(_of(1125) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3050,(_of(1125) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3049,(_of(1125) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3048,(_of(1125) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3047,(_of(1124) & _of(181) => _of(1111));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3046,(_of(1123) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3045,(_of(1123) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3044,(_of(1123) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3043,(_of(1123) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3042,(_of(1123) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3041,(_of(1123) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3040,(_of(1123) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3039,(_of(1123) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3038,(_of(1123) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3037,(_of(1123) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3036,(_of(1123) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3035,(_of(1123) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3034,(_of(1123) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3033,(_of(1123) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3032,(_of(1123) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3031,(_of(1123) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3030,(_of(1123) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3029,(_of(1123) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3028,(_of(1123) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3027,(_of(1122) & _of(181) => _of(1111));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3026,(_of(1121) & _of(111) => _of(1109));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3025,(_of(1120) & _of(477) => _of(1107));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3024,(_of(1119) & _of(477) => _of(1105));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3023,(_of(1117) & _of(108) => _of(1118));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3022,(_of(1115) & _of(105) => _of(1116));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3021,(_of(1114) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3020,(_of(1114) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3019,(_of(1114) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3018,(_of(1114) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3017,(_of(1114) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3016,(_of(1114) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3015,(_of(1114) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3014,(_of(1114) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3013,(_of(1114) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3012,(_of(1114) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3011,(_of(1114) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3010,(_of(1114) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3009,(_of(1114) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3008,(_of(1114) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3007,(_of(1114) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3006,(_of(1114) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3005,(_of(1114) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3004,(_of(1114) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3003,(_of(1114) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3002,(_of(1113) & _of(181) => _of(1111));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3001,(_of(1112) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3000,(_of(1112) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2999,(_of(1112) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2998,(_of(1112) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2997,(_of(1112) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2996,(_of(1112) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2995,(_of(1112) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2994,(_of(1112) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2993,(_of(1112) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2992,(_of(1112) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2991,(_of(1112) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2990,(_of(1112) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2989,(_of(1112) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2988,(_of(1112) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2987,(_of(1112) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2986,(_of(1112) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2985,(_of(1112) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2984,(_of(1112) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2983,(_of(1112) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2982,(_of(1110) & _of(181) => _of(1111));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2981,(_of(1108) & _of(111) => _of(1109));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2980,(_of(1106) & _of(477) => _of(1107));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2979,(_of(1104) & _of(477) => _of(1105));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2978,(_of(1103) & _of(477) => _of(664));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2977,(_of(1102) & _of(105) => _of(658));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2976,(_of(1101) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2975,(_of(1101) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2974,(_of(1101) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2973,(_of(1101) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2972,(_of(1101) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2971,(_of(1101) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2970,(_of(1101) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2969,(_of(1101) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2968,(_of(1101) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2967,(_of(1101) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2966,(_of(1101) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2965,(_of(1101) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2964,(_of(1101) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2963,(_of(1101) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2962,(_of(1101) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2961,(_of(1101) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2960,(_of(1101) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2959,(_of(1101) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2958,(_of(1101) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2957,(_of(1100) & _of(181) => _of(653));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2956,(_of(1099) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2955,(_of(1099) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2954,(_of(1099) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2953,(_of(1099) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2952,(_of(1099) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2951,(_of(1099) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2950,(_of(1099) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2949,(_of(1099) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2948,(_of(1099) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2947,(_of(1099) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2946,(_of(1099) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2945,(_of(1099) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2944,(_of(1099) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2943,(_of(1099) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2942,(_of(1099) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2941,(_of(1099) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2940,(_of(1099) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2939,(_of(1099) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2938,(_of(1099) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2937,(_of(1098) & _of(181) => _of(653));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2936,(_of(1097) & _of(108) => _of(1088));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2935,(_of(1096) & _of(111) => _of(1086));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2934,(_of(1095) & _of(477) => _of(651));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2933,(_of(1094) & _of(477) => _of(664));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2932,(_of(1093) & _of(105) => _of(658));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2931,(_of(1092) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2930,(_of(1092) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2929,(_of(1092) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2928,(_of(1092) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2927,(_of(1092) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2926,(_of(1092) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2925,(_of(1092) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2924,(_of(1092) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2923,(_of(1092) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2922,(_of(1092) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2921,(_of(1092) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2920,(_of(1092) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2919,(_of(1092) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2918,(_of(1092) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2917,(_of(1092) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2916,(_of(1092) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2915,(_of(1092) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2914,(_of(1092) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2913,(_of(1092) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2912,(_of(1091) & _of(181) => _of(653));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2911,(_of(1090) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2910,(_of(1090) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2909,(_of(1090) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2908,(_of(1090) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2907,(_of(1090) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2906,(_of(1090) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2905,(_of(1090) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2904,(_of(1090) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2903,(_of(1090) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2902,(_of(1090) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2901,(_of(1090) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2900,(_of(1090) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2899,(_of(1090) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2898,(_of(1090) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2897,(_of(1090) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2896,(_of(1090) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2895,(_of(1090) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2894,(_of(1090) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2893,(_of(1090) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2892,(_of(1089) & _of(181) => _of(653));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2891,(_of(1087) & _of(108) => _of(1088));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2890,(_of(1085) & _of(111) => _of(1086));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2889,(_of(1084) & _of(477) => _of(651));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2888,(_of(1083) & _of(477) => _of(1074));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2887,(_of(1082) & _of(108) => _of(1072));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2886,(_of(1081) & _of(105) => _of(1070));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2885,(_of(1080) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2884,(_of(1080) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2883,(_of(1080) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2882,(_of(1080) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2881,(_of(1080) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2880,(_of(1080) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2879,(_of(1080) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2878,(_of(1080) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2877,(_of(1080) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2876,(_of(1080) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2875,(_of(1080) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2874,(_of(1080) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2873,(_of(1080) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2872,(_of(1080) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2871,(_of(1080) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2870,(_of(1080) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2869,(_of(1080) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2868,(_of(1080) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2867,(_of(1080) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2866,(_of(1079) & _of(181) => _of(1065));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2865,(_of(1078) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2864,(_of(1078) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2863,(_of(1078) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2862,(_of(1078) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2861,(_of(1078) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2860,(_of(1078) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2859,(_of(1078) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2858,(_of(1078) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2857,(_of(1078) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2856,(_of(1078) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2855,(_of(1078) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2854,(_of(1078) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2853,(_of(1078) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2852,(_of(1078) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2851,(_of(1078) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2850,(_of(1078) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2849,(_of(1078) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2848,(_of(1078) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2847,(_of(1078) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2846,(_of(1077) & _of(181) => _of(1065));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2845,(_of(1076) & _of(111) => _of(1063));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2844,(_of(1075) & _of(477) => _of(1061));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2843,(_of(1073) & _of(477) => _of(1074));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2842,(_of(1071) & _of(108) => _of(1072));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2841,(_of(1069) & _of(105) => _of(1070));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2840,(_of(1068) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2839,(_of(1068) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2838,(_of(1068) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2837,(_of(1068) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2836,(_of(1068) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2835,(_of(1068) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2834,(_of(1068) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2833,(_of(1068) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2832,(_of(1068) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2831,(_of(1068) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2830,(_of(1068) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2829,(_of(1068) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2828,(_of(1068) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2827,(_of(1068) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2826,(_of(1068) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2825,(_of(1068) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2824,(_of(1068) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2823,(_of(1068) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2822,(_of(1068) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2821,(_of(1067) & _of(181) => _of(1065));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2820,(_of(1066) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2819,(_of(1066) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2818,(_of(1066) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2817,(_of(1066) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2816,(_of(1066) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2815,(_of(1066) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2814,(_of(1066) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2813,(_of(1066) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2812,(_of(1066) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2811,(_of(1066) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2810,(_of(1066) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2809,(_of(1066) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2808,(_of(1066) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2807,(_of(1066) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2806,(_of(1066) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2805,(_of(1066) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2804,(_of(1066) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2803,(_of(1066) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2802,(_of(1066) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2801,(_of(1064) & _of(181) => _of(1065));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2800,(_of(1062) & _of(111) => _of(1063));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2799,(_of(1060) & _of(477) => _of(1061));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2798,(_of(1058) & _of(116) => _of(597));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2797,(_of(1058) & _of(116) => _of(596));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2796,(_of(1058) & _of(116) => _of(595));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2795,(_of(1058) & _of(116) => _of(594));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2794,(_of(1058) & _of(116) => _of(593));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2793,(_of(1058) & _of(116) => _of(592));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2792,(_of(1058) & _of(116) => _of(591));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2791,(_of(1058) & _of(116) => _of(590));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2790,(_of(1058) & _of(116) => _of(589));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2789,(_of(1058) & _of(116) => _of(588));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2788,(_of(1058) & _of(116) => _of(587));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2787,(_of(1058) & _of(116) => _of(586));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2786,(_of(1058) & _of(116) => _of(585));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2785,(_of(1058) & _of(116) => _of(584));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2784,(_of(1058) & _of(116) => _of(583));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2783,(_of(1059) & _of(105) => _of(578));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2782,(_of(1058) & _of(83) => _of(574));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2781,(_of(1058) & _of(81) => _of(573));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2780,(_of(1058) & _of(79) => _of(572));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2779,(_of(1058) & _of(77) => _of(571));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2778,(_of(1058) & _of(75) => _of(570));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2777,(_f(64) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2776,(_of(1057) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2775,(_of(1057) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2774,(_of(1057) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2773,(_of(1057) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2772,(_of(1057) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2771,(_of(1057) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2770,(_of(1057) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2769,(_of(1057) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2768,(_of(1057) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2767,(_of(1057) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2766,(_of(1057) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2765,(_of(1057) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2764,(_of(1057) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2763,(_of(1057) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2762,(_of(1057) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2761,(_of(1057) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2760,(_of(1056) & _of(83) => _of(574));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2759,(_of(1056) & _of(81) => _of(573));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2758,(_of(1056) & _of(79) => _of(572));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2757,(_of(1056) & _of(77) => _of(571));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2756,(_of(1056) & _of(75) => _of(570));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2755,(_f(63) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2754,(_of(1055) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2753,(_of(1055) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2752,(_of(1055) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2751,(_of(1055) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2750,(_of(1055) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2749,(_of(1055) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2748,(_of(1055) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2747,(_of(1055) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2746,(_of(1055) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2745,(_of(1055) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2744,(_of(1055) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2743,(_of(1055) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2742,(_of(1055) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2741,(_of(1055) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2740,(_of(1055) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2739,(_of(1055) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2738,(_of(1054) & _of(108) => _of(1045));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2737,(_of(1053) & _of(111) => _of(1043));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2736,(_of(1052) & _of(477) => _of(567));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2735,(_of(1051) & _of(477) => _of(565));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2734,(_of(1047) & _of(116) => _of(597));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2733,(_of(1047) & _of(116) => _of(596));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2732,(_of(1047) & _of(116) => _of(595));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2731,(_of(1047) & _of(116) => _of(594));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2730,(_of(1047) & _of(116) => _of(593));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2729,(_of(1047) & _of(116) => _of(592));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2728,(_of(1047) & _of(116) => _of(591));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2727,(_of(1047) & _of(116) => _of(590));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2726,(_of(1047) & _of(116) => _of(589));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2725,(_of(1047) & _of(116) => _of(588));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2724,(_of(1047) & _of(116) => _of(587));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2723,(_of(1047) & _of(116) => _of(586));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2722,(_of(1047) & _of(116) => _of(585));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2721,(_of(1047) & _of(116) => _of(584));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2720,(_of(1047) & _of(116) => _of(583));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2719,(_of(1050) & _of(105) => _of(578));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2718,(_of(1049) & _of(83) => _of(574));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2717,(_of(1049) & _of(81) => _of(573));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2716,(_of(1049) & _of(79) => _of(572));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2715,(_of(1049) & _of(77) => _of(571));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2714,(_of(1049) & _of(75) => _of(570));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2713,(_f(62) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2712,(_of(1048) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2711,(_of(1048) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2710,(_of(1048) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2709,(_of(1048) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2708,(_of(1048) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2707,(_of(1048) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2706,(_of(1048) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2705,(_of(1048) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2704,(_of(1048) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2703,(_of(1048) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2702,(_of(1048) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2701,(_of(1048) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2700,(_of(1048) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2699,(_of(1048) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2698,(_of(1048) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2697,(_of(1048) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2696,(_of(1047) & _of(83) => _of(574));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2695,(_of(1047) & _of(81) => _of(573));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2694,(_of(1047) & _of(79) => _of(572));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2693,(_of(1047) & _of(77) => _of(571));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2692,(_of(1047) & _of(75) => _of(570));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2691,(_f(61) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2690,(_of(1046) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2689,(_of(1046) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2688,(_of(1046) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2687,(_of(1046) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2686,(_of(1046) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2685,(_of(1046) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2684,(_of(1046) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2683,(_of(1046) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2682,(_of(1046) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2681,(_of(1046) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2680,(_of(1046) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2679,(_of(1046) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2678,(_of(1046) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2677,(_of(1046) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2676,(_of(1046) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2675,(_of(1046) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2674,(_of(1044) & _of(108) => _of(1045));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2673,(_of(1042) & _of(111) => _of(1043));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2672,(_of(1041) & _of(477) => _of(567));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2671,(_of(1040) & _of(477) => _of(565));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2670,(_of(1037) & _of(116) => _of(1030));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2669,(_of(1037) & _of(116) => _of(1029));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2668,(_of(1037) & _of(116) => _of(1028));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2667,(_of(1037) & _of(116) => _of(1027));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2666,(_of(1037) & _of(116) => _of(1026));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2665,(_of(1037) & _of(116) => _of(1025));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2664,(_of(1037) & _of(116) => _of(1024));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2663,(_of(1037) & _of(116) => _of(1023));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2662,(_of(1037) & _of(116) => _of(1022));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2661,(_of(1037) & _of(116) => _of(1021));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2660,(_of(1037) & _of(116) => _of(1020));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2659,(_of(1037) & _of(116) => _of(1019));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2658,(_of(1037) & _of(116) => _of(1018));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2657,(_of(1037) & _of(116) => _of(1017));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2656,(_of(1037) & _of(116) => _of(1016));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2655,(_of(1039) & _of(108) => _of(1015));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2654,(_of(1038) & _of(105) => _of(1013));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2653,(_of(1037) & _of(83) => _of(1009));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2652,(_of(1037) & _of(81) => _of(1008));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2651,(_of(1037) & _of(79) => _of(1007));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2650,(_of(1037) & _of(77) => _of(1006));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2649,(_of(1037) & _of(75) => _of(1005));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2648,(_f(60) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2647,(_of(1036) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2646,(_of(1036) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2645,(_of(1036) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2644,(_of(1036) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2643,(_of(1036) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2642,(_of(1036) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2641,(_of(1036) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2640,(_of(1036) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2639,(_of(1036) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2638,(_of(1036) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2637,(_of(1036) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2636,(_of(1036) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2635,(_of(1036) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2634,(_of(1036) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2633,(_of(1036) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2632,(_of(1036) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2631,(_of(1035) & _of(83) => _of(1009));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2630,(_of(1035) & _of(81) => _of(1008));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2629,(_of(1035) & _of(79) => _of(1007));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2628,(_of(1035) & _of(77) => _of(1006));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2627,(_of(1035) & _of(75) => _of(1005));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2626,(_f(59) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2625,(_of(1034) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2624,(_of(1034) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2623,(_of(1034) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2622,(_of(1034) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2621,(_of(1034) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2620,(_of(1034) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2619,(_of(1034) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2618,(_of(1034) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2617,(_of(1034) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2616,(_of(1034) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2615,(_of(1034) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2614,(_of(1034) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2613,(_of(1034) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2612,(_of(1034) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2611,(_of(1034) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2610,(_of(1034) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2609,(_of(1033) & _of(111) => _of(1002));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2608,(_of(1032) & _of(477) => _of(1000));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2607,(_of(1031) & _of(477) => _of(998));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2606,(_of(1004) & _of(116) => _of(1030));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2605,(_of(1004) & _of(116) => _of(1029));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2604,(_of(1004) & _of(116) => _of(1028));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2603,(_of(1004) & _of(116) => _of(1027));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2602,(_of(1004) & _of(116) => _of(1026));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2601,(_of(1004) & _of(116) => _of(1025));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2600,(_of(1004) & _of(116) => _of(1024));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2599,(_of(1004) & _of(116) => _of(1023));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2598,(_of(1004) & _of(116) => _of(1022));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2597,(_of(1004) & _of(116) => _of(1021));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2596,(_of(1004) & _of(116) => _of(1020));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2595,(_of(1004) & _of(116) => _of(1019));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2594,(_of(1004) & _of(116) => _of(1018));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2593,(_of(1004) & _of(116) => _of(1017));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2592,(_of(1004) & _of(116) => _of(1016));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2591,(_of(1014) & _of(108) => _of(1015));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2590,(_of(1012) & _of(105) => _of(1013));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2589,(_of(1011) & _of(83) => _of(1009));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2588,(_of(1011) & _of(81) => _of(1008));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2587,(_of(1011) & _of(79) => _of(1007));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2586,(_of(1011) & _of(77) => _of(1006));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2585,(_of(1011) & _of(75) => _of(1005));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2584,(_f(58) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2583,(_of(1010) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2582,(_of(1010) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2581,(_of(1010) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2580,(_of(1010) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2579,(_of(1010) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2578,(_of(1010) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2577,(_of(1010) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2576,(_of(1010) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2575,(_of(1010) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2574,(_of(1010) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2573,(_of(1010) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2572,(_of(1010) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2571,(_of(1010) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2570,(_of(1010) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2569,(_of(1010) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2568,(_of(1010) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2567,(_of(1004) & _of(83) => _of(1009));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2566,(_of(1004) & _of(81) => _of(1008));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2565,(_of(1004) & _of(79) => _of(1007));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2564,(_of(1004) & _of(77) => _of(1006));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2563,(_of(1004) & _of(75) => _of(1005));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2562,(_f(57) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2561,(_of(1003) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2560,(_of(1003) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2559,(_of(1003) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2558,(_of(1003) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2557,(_of(1003) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2556,(_of(1003) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2555,(_of(1003) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2554,(_of(1003) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2553,(_of(1003) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2552,(_of(1003) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2551,(_of(1003) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2550,(_of(1003) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2549,(_of(1003) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2548,(_of(1003) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2547,(_of(1003) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2546,(_of(1003) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2545,(_of(1001) & _of(111) => _of(1002));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2544,(_of(999) & _of(477) => _of(1000));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2543,(_of(997) & _of(477) => _of(998));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2542,(_of(994) & _of(116) => _of(511));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2541,(_of(994) & _of(116) => _of(510));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2540,(_of(994) & _of(116) => _of(509));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2539,(_of(994) & _of(116) => _of(508));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2538,(_of(994) & _of(116) => _of(507));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2537,(_of(994) & _of(116) => _of(506));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2536,(_of(994) & _of(116) => _of(505));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2535,(_of(994) & _of(116) => _of(504));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2534,(_of(994) & _of(116) => _of(503));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2533,(_of(994) & _of(116) => _of(502));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2532,(_of(994) & _of(116) => _of(501));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2531,(_of(994) & _of(116) => _of(500));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2530,(_of(994) & _of(116) => _of(499));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2529,(_of(994) & _of(116) => _of(498));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2528,(_of(994) & _of(116) => _of(497));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2527,(_of(996) & _of(477) => _of(496));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2526,(_of(995) & _of(105) => _of(490));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2525,(_of(994) & _of(83) => _of(486));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2524,(_of(994) & _of(81) => _of(485));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2523,(_of(994) & _of(79) => _of(484));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2522,(_of(994) & _of(77) => _of(483));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2521,(_of(994) & _of(75) => _of(482));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2520,(_f(56) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2519,(_of(993) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2518,(_of(993) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2517,(_of(993) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2516,(_of(993) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2515,(_of(993) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2514,(_of(993) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2513,(_of(993) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2512,(_of(993) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2511,(_of(993) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2510,(_of(993) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2509,(_of(993) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2508,(_of(993) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2507,(_of(993) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2506,(_of(993) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2505,(_of(993) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2504,(_of(993) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2503,(_of(992) & _of(83) => _of(486));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2502,(_of(992) & _of(81) => _of(485));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2501,(_of(992) & _of(79) => _of(484));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2500,(_of(992) & _of(77) => _of(483));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2499,(_of(992) & _of(75) => _of(482));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2498,(_f(55) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2497,(_of(991) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2496,(_of(991) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2495,(_of(991) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2494,(_of(991) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2493,(_of(991) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2492,(_of(991) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2491,(_of(991) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2490,(_of(991) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2489,(_of(991) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2488,(_of(991) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2487,(_of(991) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2486,(_of(991) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2485,(_of(991) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2484,(_of(991) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2483,(_of(991) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2482,(_of(991) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2481,(_of(990) & _of(108) => _of(981));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2480,(_of(989) & _of(111) => _of(979));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2479,(_of(988) & _of(477) => _of(478));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2478,(_of(983) & _of(116) => _of(511));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2477,(_of(983) & _of(116) => _of(510));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2476,(_of(983) & _of(116) => _of(509));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2475,(_of(983) & _of(116) => _of(508));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2474,(_of(983) & _of(116) => _of(507));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2473,(_of(983) & _of(116) => _of(506));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2472,(_of(983) & _of(116) => _of(505));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2471,(_of(983) & _of(116) => _of(504));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2470,(_of(983) & _of(116) => _of(503));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2469,(_of(983) & _of(116) => _of(502));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2468,(_of(983) & _of(116) => _of(501));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2467,(_of(983) & _of(116) => _of(500));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2466,(_of(983) & _of(116) => _of(499));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2465,(_of(983) & _of(116) => _of(498));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2464,(_of(983) & _of(116) => _of(497));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2463,(_of(987) & _of(477) => _of(496));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2462,(_of(986) & _of(105) => _of(490));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2461,(_of(985) & _of(83) => _of(486));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2460,(_of(985) & _of(81) => _of(485));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2459,(_of(985) & _of(79) => _of(484));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2458,(_of(985) & _of(77) => _of(483));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2457,(_of(985) & _of(75) => _of(482));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2456,(_f(54) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2455,(_of(984) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2454,(_of(984) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2453,(_of(984) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2452,(_of(984) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2451,(_of(984) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2450,(_of(984) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2449,(_of(984) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2448,(_of(984) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2447,(_of(984) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2446,(_of(984) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2445,(_of(984) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2444,(_of(984) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2443,(_of(984) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2442,(_of(984) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2441,(_of(984) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2440,(_of(984) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2439,(_of(983) & _of(83) => _of(486));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2438,(_of(983) & _of(81) => _of(485));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2437,(_of(983) & _of(79) => _of(484));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2436,(_of(983) & _of(77) => _of(483));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2435,(_of(983) & _of(75) => _of(482));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2434,(_f(53) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2433,(_of(982) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2432,(_of(982) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2431,(_of(982) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2430,(_of(982) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2429,(_of(982) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2428,(_of(982) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2427,(_of(982) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2426,(_of(982) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2425,(_of(982) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2424,(_of(982) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2423,(_of(982) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2422,(_of(982) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2421,(_of(982) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2420,(_of(982) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2419,(_of(982) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2418,(_of(982) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2417,(_of(980) & _of(108) => _of(981));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2416,(_of(978) & _of(111) => _of(979));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2415,(_of(977) & _of(477) => _of(478));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2414,(_of(973) & _of(116) => _of(967));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2413,(_of(973) & _of(116) => _of(966));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2412,(_of(973) & _of(116) => _of(965));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2411,(_of(973) & _of(116) => _of(964));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2410,(_of(973) & _of(116) => _of(963));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2409,(_of(973) & _of(116) => _of(962));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2408,(_of(973) & _of(116) => _of(961));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2407,(_of(973) & _of(116) => _of(960));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2406,(_of(973) & _of(116) => _of(959));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2405,(_of(973) & _of(116) => _of(958));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2404,(_of(973) & _of(116) => _of(957));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2403,(_of(973) & _of(116) => _of(956));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2402,(_of(973) & _of(116) => _of(955));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2401,(_of(973) & _of(116) => _of(954));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2400,(_of(973) & _of(116) => _of(953));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2399,(_of(976) & _of(477) => _of(952));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2398,(_of(975) & _of(108) => _of(950));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2397,(_of(974) & _of(105) => _of(948));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2396,(_of(973) & _of(83) => _of(944));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2395,(_of(973) & _of(81) => _of(943));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2394,(_of(973) & _of(79) => _of(942));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2393,(_of(973) & _of(77) => _of(941));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2392,(_of(973) & _of(75) => _of(940));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2391,(_f(52) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2390,(_of(972) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2389,(_of(972) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2388,(_of(972) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2387,(_of(972) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2386,(_of(972) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2385,(_of(972) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2384,(_of(972) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2383,(_of(972) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2382,(_of(972) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2381,(_of(972) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2380,(_of(972) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2379,(_of(972) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2378,(_of(972) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2377,(_of(972) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2376,(_of(972) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2375,(_of(972) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2374,(_of(971) & _of(83) => _of(944));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2373,(_of(971) & _of(81) => _of(943));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2372,(_of(971) & _of(79) => _of(942));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2371,(_of(971) & _of(77) => _of(941));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2370,(_of(971) & _of(75) => _of(940));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2369,(_f(51) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2368,(_of(970) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2367,(_of(970) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2366,(_of(970) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2365,(_of(970) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2364,(_of(970) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2363,(_of(970) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2362,(_of(970) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2361,(_of(970) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2360,(_of(970) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2359,(_of(970) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2358,(_of(970) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2357,(_of(970) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2356,(_of(970) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2355,(_of(970) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2354,(_of(970) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2353,(_of(970) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2352,(_of(969) & _of(111) => _of(937));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2351,(_of(968) & _of(477) => _of(935));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2350,(_of(939) & _of(116) => _of(967));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2349,(_of(939) & _of(116) => _of(966));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2348,(_of(939) & _of(116) => _of(965));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2347,(_of(939) & _of(116) => _of(964));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2346,(_of(939) & _of(116) => _of(963));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2345,(_of(939) & _of(116) => _of(962));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2344,(_of(939) & _of(116) => _of(961));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2343,(_of(939) & _of(116) => _of(960));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2342,(_of(939) & _of(116) => _of(959));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2341,(_of(939) & _of(116) => _of(958));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2340,(_of(939) & _of(116) => _of(957));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2339,(_of(939) & _of(116) => _of(956));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2338,(_of(939) & _of(116) => _of(955));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2337,(_of(939) & _of(116) => _of(954));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2336,(_of(939) & _of(116) => _of(953));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2335,(_of(951) & _of(477) => _of(952));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2334,(_of(949) & _of(108) => _of(950));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2333,(_of(947) & _of(105) => _of(948));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2332,(_of(946) & _of(83) => _of(944));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2331,(_of(946) & _of(81) => _of(943));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2330,(_of(946) & _of(79) => _of(942));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2329,(_of(946) & _of(77) => _of(941));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2328,(_of(946) & _of(75) => _of(940));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2327,(_f(50) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2326,(_of(945) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2325,(_of(945) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2324,(_of(945) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2323,(_of(945) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2322,(_of(945) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2321,(_of(945) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2320,(_of(945) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2319,(_of(945) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2318,(_of(945) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2317,(_of(945) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2316,(_of(945) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2315,(_of(945) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2314,(_of(945) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2313,(_of(945) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2312,(_of(945) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2311,(_of(945) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2310,(_of(939) & _of(83) => _of(944));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2309,(_of(939) & _of(81) => _of(943));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2308,(_of(939) & _of(79) => _of(942));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2307,(_of(939) & _of(77) => _of(941));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2306,(_of(939) & _of(75) => _of(940));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2305,(_f(49) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2304,(_of(938) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2303,(_of(938) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2302,(_of(938) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2301,(_of(938) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2300,(_of(938) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2299,(_of(938) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2298,(_of(938) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2297,(_of(938) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2296,(_of(938) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2295,(_of(938) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2294,(_of(938) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2293,(_of(938) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2292,(_of(938) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2291,(_of(938) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2290,(_of(938) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2289,(_of(938) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2288,(_of(936) & _of(111) => _of(937));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2287,(_of(934) & _of(477) => _of(935));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2286,(_of(932) & _of(111) => _of(933));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2285,(_of(931) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2284,(_of(931) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2283,(_of(931) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2282,(_of(931) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2281,(_of(931) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2280,(_of(931) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2279,(_of(931) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2278,(_of(931) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2277,(_of(931) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2276,(_of(931) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2275,(_of(931) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2274,(_of(931) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2273,(_of(931) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2272,(_of(931) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2271,(_of(931) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2270,(_of(931) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2269,(_of(931) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2268,(_of(931) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2267,(_of(931) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2266,(_of(929) & _of(181) => _of(930));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2265,(_of(928) & _of(105) => _of(927));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2264,(_of(926) & _of(105) => _of(927));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2263,(_of(924) & _of(108) => _of(925));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2262,(_of(922) & _of(477) => _of(923));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2261,(_of(920) & _of(477) => _of(921));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2260,(_of(918) & _of(111) => _of(919));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2259,(_of(916) & _of(108) => _of(917));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2258,(_of(915) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2257,(_of(915) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2256,(_of(915) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2255,(_of(915) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2254,(_of(915) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2253,(_of(915) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2252,(_of(915) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2251,(_of(915) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2250,(_of(915) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2249,(_of(915) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2248,(_of(915) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2247,(_of(915) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2246,(_of(915) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2245,(_of(915) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2244,(_of(915) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2243,(_of(915) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2242,(_of(915) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2241,(_of(915) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2240,(_of(915) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2239,(_of(913) & _of(181) => _of(914));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2238,(_of(912) & _of(105) => _of(911));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2237,(_of(910) & _of(105) => _of(911));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2236,(_of(908) & _of(477) => _of(909));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2235,(_of(906) & _of(477) => _of(907));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2234,(_of(904) & _of(477) => _of(905));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2233,(_of(902) & _of(111) => _of(903));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2232,(_of(901) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2231,(_of(901) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2230,(_of(901) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2229,(_of(901) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2228,(_of(901) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2227,(_of(901) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2226,(_of(901) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2225,(_of(901) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2224,(_of(901) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2223,(_of(901) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2222,(_of(901) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2221,(_of(901) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2220,(_of(901) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2219,(_of(901) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2218,(_of(901) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2217,(_of(901) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2216,(_of(901) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2215,(_of(901) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2214,(_of(901) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2213,(_of(899) & _of(181) => _of(900));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2212,(_of(898) & _of(105) => _of(897));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2211,(_of(896) & _of(105) => _of(897));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2210,(_of(894) & _of(108) => _of(895));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2209,(_of(892) & _of(477) => _of(893));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2208,(_of(890) & _of(477) => _of(891));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2207,(_of(888) & _of(111) => _of(889));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2206,(_of(886) & _of(108) => _of(887));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2205,(_of(885) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2204,(_of(885) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2203,(_of(885) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2202,(_of(885) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2201,(_of(885) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2200,(_of(885) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2199,(_of(885) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2198,(_of(885) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2197,(_of(885) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2196,(_of(885) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2195,(_of(885) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2194,(_of(885) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2193,(_of(885) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2192,(_of(885) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2191,(_of(885) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2190,(_of(885) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2189,(_of(885) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2188,(_of(885) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2187,(_of(885) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2186,(_of(883) & _of(181) => _of(884));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2185,(_of(882) & _of(105) => _of(881));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2184,(_of(880) & _of(105) => _of(881));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2183,(_of(878) & _of(477) => _of(879));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2182,(_of(855) & _of(116) => _of(877));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2181,(_of(855) & _of(116) => _of(876));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2180,(_of(855) & _of(116) => _of(875));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2179,(_of(855) & _of(116) => _of(874));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2178,(_of(855) & _of(116) => _of(873));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2177,(_of(855) & _of(116) => _of(872));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2176,(_of(855) & _of(116) => _of(871));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2175,(_of(855) & _of(116) => _of(870));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2174,(_of(855) & _of(116) => _of(869));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2173,(_of(855) & _of(116) => _of(868));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2172,(_of(855) & _of(116) => _of(867));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2171,(_of(855) & _of(116) => _of(866));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2170,(_of(855) & _of(116) => _of(865));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2169,(_of(855) & _of(116) => _of(864));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2168,(_of(855) & _of(116) => _of(863));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2167,(_of(861) & _of(111) => _of(862));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2166,(_of(855) & _of(83) => _of(860));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2165,(_of(855) & _of(81) => _of(859));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2164,(_of(855) & _of(79) => _of(858));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2163,(_of(855) & _of(77) => _of(857));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2162,(_of(855) & _of(75) => _of(856));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2161,(_f(48) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2160,(_of(854) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2159,(_of(854) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2158,(_of(854) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2157,(_of(854) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2156,(_of(854) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2155,(_of(854) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2154,(_of(854) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2153,(_of(854) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2152,(_of(854) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2151,(_of(854) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2150,(_of(854) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2149,(_of(854) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2148,(_of(854) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2147,(_of(854) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2146,(_of(854) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2145,(_of(854) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2144,(_of(853) & _of(105) => _of(852));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2143,(_of(851) & _of(105) => _of(852));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2142,(_of(849) & _of(108) => _of(850));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2141,(_of(847) & _of(477) => _of(848));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2140,(_of(845) & _of(477) => _of(846));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2139,(_of(820) & _of(116) => _of(844));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2138,(_of(820) & _of(116) => _of(843));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2137,(_of(820) & _of(116) => _of(842));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2136,(_of(820) & _of(116) => _of(841));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2135,(_of(820) & _of(116) => _of(840));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2134,(_of(820) & _of(116) => _of(839));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2133,(_of(820) & _of(116) => _of(838));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2132,(_of(820) & _of(116) => _of(837));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2131,(_of(820) & _of(116) => _of(836));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2130,(_of(820) & _of(116) => _of(835));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2129,(_of(820) & _of(116) => _of(834));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2128,(_of(820) & _of(116) => _of(833));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2127,(_of(820) & _of(116) => _of(832));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2126,(_of(820) & _of(116) => _of(831));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2125,(_of(820) & _of(116) => _of(830));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2124,(_of(828) & _of(111) => _of(829));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2123,(_of(826) & _of(108) => _of(827));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2122,(_of(820) & _of(83) => _of(825));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2121,(_of(820) & _of(81) => _of(824));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2120,(_of(820) & _of(79) => _of(823));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2119,(_of(820) & _of(77) => _of(822));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2118,(_of(820) & _of(75) => _of(821));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2117,(_f(47) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2116,(_of(819) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2115,(_of(819) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2114,(_of(819) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2113,(_of(819) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2112,(_of(819) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2111,(_of(819) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2110,(_of(819) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2109,(_of(819) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2108,(_of(819) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2107,(_of(819) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2106,(_of(819) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2105,(_of(819) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2104,(_of(819) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2103,(_of(819) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2102,(_of(819) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2101,(_of(819) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2100,(_of(818) & _of(105) => _of(817));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2099,(_of(816) & _of(105) => _of(817));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2098,(_of(814) & _of(477) => _of(815));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2097,(_of(812) & _of(477) => _of(813));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2096,(_of(787) & _of(116) => _of(811));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2095,(_of(787) & _of(116) => _of(810));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2094,(_of(787) & _of(116) => _of(809));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2093,(_of(787) & _of(116) => _of(808));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2092,(_of(787) & _of(116) => _of(807));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2091,(_of(787) & _of(116) => _of(806));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2090,(_of(787) & _of(116) => _of(805));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2089,(_of(787) & _of(116) => _of(804));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2088,(_of(787) & _of(116) => _of(803));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2087,(_of(787) & _of(116) => _of(802));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2086,(_of(787) & _of(116) => _of(801));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2085,(_of(787) & _of(116) => _of(800));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2084,(_of(787) & _of(116) => _of(799));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2083,(_of(787) & _of(116) => _of(798));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2082,(_of(787) & _of(116) => _of(797));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2081,(_of(795) & _of(477) => _of(796));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2080,(_of(793) & _of(111) => _of(794));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2079,(_of(787) & _of(83) => _of(792));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2078,(_of(787) & _of(81) => _of(791));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2077,(_of(787) & _of(79) => _of(790));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2076,(_of(787) & _of(77) => _of(789));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2075,(_of(787) & _of(75) => _of(788));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2074,(_f(46) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2073,(_of(786) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2072,(_of(786) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2071,(_of(786) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2070,(_of(786) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2069,(_of(786) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2068,(_of(786) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2067,(_of(786) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2066,(_of(786) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2065,(_of(786) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2064,(_of(786) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2063,(_of(786) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2062,(_of(786) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2061,(_of(786) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2060,(_of(786) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2059,(_of(786) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2058,(_of(786) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2057,(_of(785) & _of(105) => _of(784));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2056,(_of(783) & _of(105) => _of(784));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2055,(_of(781) & _of(108) => _of(782));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2054,(_of(779) & _of(477) => _of(780));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2053,(_of(752) & _of(116) => _of(778));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2052,(_of(752) & _of(116) => _of(777));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2051,(_of(752) & _of(116) => _of(776));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2050,(_of(752) & _of(116) => _of(775));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2049,(_of(752) & _of(116) => _of(774));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2048,(_of(752) & _of(116) => _of(773));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2047,(_of(752) & _of(116) => _of(772));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2046,(_of(752) & _of(116) => _of(771));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2045,(_of(752) & _of(116) => _of(770));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2044,(_of(752) & _of(116) => _of(769));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2043,(_of(752) & _of(116) => _of(768));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2042,(_of(752) & _of(116) => _of(767));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2041,(_of(752) & _of(116) => _of(766));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2040,(_of(752) & _of(116) => _of(765));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2039,(_of(752) & _of(116) => _of(764));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2038,(_of(762) & _of(477) => _of(763));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2037,(_of(760) & _of(111) => _of(761));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2036,(_of(758) & _of(108) => _of(759));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2035,(_of(752) & _of(83) => _of(757));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2034,(_of(752) & _of(81) => _of(756));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2033,(_of(752) & _of(79) => _of(755));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2032,(_of(752) & _of(77) => _of(754));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2031,(_of(752) & _of(75) => _of(753));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2030,(_f(45) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2029,(_of(751) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2028,(_of(751) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2027,(_of(751) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2026,(_of(751) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2025,(_of(751) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2024,(_of(751) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2023,(_of(751) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2022,(_of(751) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2021,(_of(751) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2020,(_of(751) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2019,(_of(751) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2018,(_of(751) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2017,(_of(751) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2016,(_of(751) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2015,(_of(751) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2014,(_of(751) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2013,(_of(750) & _of(105) => _of(749));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2012,(_of(748) & _of(105) => _of(749));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2011,(_of(746) & _of(477) => _of(747));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2010,(_of(745) & _of(111) => _of(736));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2009,(_of(744) & _of(105) => _of(734));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2008,(_of(743) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2007,(_of(743) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2006,(_of(743) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2005,(_of(743) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2004,(_of(743) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2003,(_of(743) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2002,(_of(743) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2001,(_of(743) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2000,(_of(743) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1999,(_of(743) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1998,(_of(743) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1997,(_of(743) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1996,(_of(743) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1995,(_of(743) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1994,(_of(743) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1993,(_of(743) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1992,(_of(743) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1991,(_of(743) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1990,(_of(743) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1989,(_of(742) & _of(181) => _of(729));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1988,(_of(741) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1987,(_of(741) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1986,(_of(741) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1985,(_of(741) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1984,(_of(741) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1983,(_of(741) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1982,(_of(741) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1981,(_of(741) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1980,(_of(741) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1979,(_of(741) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1978,(_of(741) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1977,(_of(741) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1976,(_of(741) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1975,(_of(741) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1974,(_of(741) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1973,(_of(741) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1972,(_of(741) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1971,(_of(741) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1970,(_of(741) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1969,(_of(740) & _of(181) => _of(729));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1968,(_of(739) & _of(108) => _of(727));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1967,(_of(738) & _of(477) => _of(725));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1966,(_of(737) & _of(477) => _of(723));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1965,(_of(735) & _of(111) => _of(736));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1964,(_of(733) & _of(105) => _of(734));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1963,(_of(732) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1962,(_of(732) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1961,(_of(732) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1960,(_of(732) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1959,(_of(732) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1958,(_of(732) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1957,(_of(732) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1956,(_of(732) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1955,(_of(732) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1954,(_of(732) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1953,(_of(732) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1952,(_of(732) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1951,(_of(732) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1950,(_of(732) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1949,(_of(732) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1948,(_of(732) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1947,(_of(732) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1946,(_of(732) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1945,(_of(732) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1944,(_of(731) & _of(181) => _of(729));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1943,(_of(730) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1942,(_of(730) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1941,(_of(730) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1940,(_of(730) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1939,(_of(730) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1938,(_of(730) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1937,(_of(730) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1936,(_of(730) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1935,(_of(730) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1934,(_of(730) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1933,(_of(730) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1932,(_of(730) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1931,(_of(730) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1930,(_of(730) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1929,(_of(730) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1928,(_of(730) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1927,(_of(730) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1926,(_of(730) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1925,(_of(730) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1924,(_of(728) & _of(181) => _of(729));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1923,(_of(726) & _of(108) => _of(727));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1922,(_of(724) & _of(477) => _of(725));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1921,(_of(722) & _of(477) => _of(723));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1920,(_of(721) & _of(111) => _of(712));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1919,(_of(720) & _of(108) => _of(710));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1918,(_of(719) & _of(105) => _of(708));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1917,(_of(718) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1916,(_of(718) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1915,(_of(718) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1914,(_of(718) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1913,(_of(718) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1912,(_of(718) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1911,(_of(718) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1910,(_of(718) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1909,(_of(718) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1908,(_of(718) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1907,(_of(718) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1906,(_of(718) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1905,(_of(718) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1904,(_of(718) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1903,(_of(718) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1902,(_of(718) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1901,(_of(718) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1900,(_of(718) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1899,(_of(718) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1898,(_of(717) & _of(181) => _of(703));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1897,(_of(716) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1896,(_of(716) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1895,(_of(716) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1894,(_of(716) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1893,(_of(716) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1892,(_of(716) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1891,(_of(716) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1890,(_of(716) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1889,(_of(716) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1888,(_of(716) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1887,(_of(716) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1886,(_of(716) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1885,(_of(716) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1884,(_of(716) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1883,(_of(716) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1882,(_of(716) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1881,(_of(716) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1880,(_of(716) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1879,(_of(716) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1878,(_of(715) & _of(181) => _of(703));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1877,(_of(714) & _of(477) => _of(701));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1876,(_of(713) & _of(477) => _of(699));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1875,(_of(711) & _of(111) => _of(712));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1874,(_of(709) & _of(108) => _of(710));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1873,(_of(707) & _of(105) => _of(708));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1872,(_of(706) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1871,(_of(706) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1870,(_of(706) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1869,(_of(706) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1868,(_of(706) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1867,(_of(706) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1866,(_of(706) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1865,(_of(706) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1864,(_of(706) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1863,(_of(706) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1862,(_of(706) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1861,(_of(706) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1860,(_of(706) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1859,(_of(706) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1858,(_of(706) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1857,(_of(706) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1856,(_of(706) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1855,(_of(706) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1854,(_of(706) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1853,(_of(705) & _of(181) => _of(703));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1852,(_of(704) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1851,(_of(704) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1850,(_of(704) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1849,(_of(704) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1848,(_of(704) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1847,(_of(704) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1846,(_of(704) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1845,(_of(704) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1844,(_of(704) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1843,(_of(704) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1842,(_of(704) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1841,(_of(704) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1840,(_of(704) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1839,(_of(704) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1838,(_of(704) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1837,(_of(704) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1836,(_of(704) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1835,(_of(704) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1834,(_of(704) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1833,(_of(702) & _of(181) => _of(703));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1832,(_of(700) & _of(477) => _of(701));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1831,(_of(698) & _of(477) => _of(699));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1830,(_of(697) & _of(477) => _of(688));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1829,(_of(696) & _of(111) => _of(686));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1828,(_of(695) & _of(105) => _of(684));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1827,(_of(694) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1826,(_of(694) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1825,(_of(694) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1824,(_of(694) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1823,(_of(694) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1822,(_of(694) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1821,(_of(694) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1820,(_of(694) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1819,(_of(694) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1818,(_of(694) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1817,(_of(694) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1816,(_of(694) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1815,(_of(694) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1814,(_of(694) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1813,(_of(694) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1812,(_of(694) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1811,(_of(694) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1810,(_of(694) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1809,(_of(694) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1808,(_of(693) & _of(181) => _of(679));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1807,(_of(692) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1806,(_of(692) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1805,(_of(692) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1804,(_of(692) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1803,(_of(692) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1802,(_of(692) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1801,(_of(692) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1800,(_of(692) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1799,(_of(692) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1798,(_of(692) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1797,(_of(692) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1796,(_of(692) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1795,(_of(692) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1794,(_of(692) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1793,(_of(692) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1792,(_of(692) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1791,(_of(692) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1790,(_of(692) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1789,(_of(692) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1788,(_of(691) & _of(181) => _of(679));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1787,(_of(690) & _of(108) => _of(677));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1786,(_of(689) & _of(477) => _of(675));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1785,(_of(687) & _of(477) => _of(688));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1784,(_of(685) & _of(111) => _of(686));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1783,(_of(683) & _of(105) => _of(684));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1782,(_of(682) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1781,(_of(682) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1780,(_of(682) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1779,(_of(682) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1778,(_of(682) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1777,(_of(682) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1776,(_of(682) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1775,(_of(682) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1774,(_of(682) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1773,(_of(682) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1772,(_of(682) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1771,(_of(682) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1770,(_of(682) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1769,(_of(682) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1768,(_of(682) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1767,(_of(682) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1766,(_of(682) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1765,(_of(682) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1764,(_of(682) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1763,(_of(681) & _of(181) => _of(679));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1762,(_of(680) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1761,(_of(680) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1760,(_of(680) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1759,(_of(680) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1758,(_of(680) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1757,(_of(680) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1756,(_of(680) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1755,(_of(680) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1754,(_of(680) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1753,(_of(680) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1752,(_of(680) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1751,(_of(680) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1750,(_of(680) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1749,(_of(680) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1748,(_of(680) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1747,(_of(680) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1746,(_of(680) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1745,(_of(680) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1744,(_of(680) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1743,(_of(678) & _of(181) => _of(679));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1742,(_of(676) & _of(108) => _of(677));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1741,(_of(674) & _of(477) => _of(675));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1740,(_of(673) & _of(477) => _of(664));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1739,(_of(672) & _of(111) => _of(662));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1738,(_of(671) & _of(108) => _of(660));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1737,(_of(670) & _of(105) => _of(658));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1736,(_of(669) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1735,(_of(669) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1734,(_of(669) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1733,(_of(669) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1732,(_of(669) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1731,(_of(669) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1730,(_of(669) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1729,(_of(669) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1728,(_of(669) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1727,(_of(669) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1726,(_of(669) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1725,(_of(669) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1724,(_of(669) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1723,(_of(669) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1722,(_of(669) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1721,(_of(669) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1720,(_of(669) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1719,(_of(669) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1718,(_of(669) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1717,(_of(668) & _of(181) => _of(653));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1716,(_of(667) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1715,(_of(667) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1714,(_of(667) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1713,(_of(667) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1712,(_of(667) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1711,(_of(667) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1710,(_of(667) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1709,(_of(667) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1708,(_of(667) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1707,(_of(667) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1706,(_of(667) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1705,(_of(667) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1704,(_of(667) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1703,(_of(667) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1702,(_of(667) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1701,(_of(667) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1700,(_of(667) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1699,(_of(667) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1698,(_of(667) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1697,(_of(666) & _of(181) => _of(653));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1696,(_of(665) & _of(477) => _of(651));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1695,(_of(663) & _of(477) => _of(664));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1694,(_of(661) & _of(111) => _of(662));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1693,(_of(659) & _of(108) => _of(660));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1692,(_of(657) & _of(105) => _of(658));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1691,(_of(656) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1690,(_of(656) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1689,(_of(656) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1688,(_of(656) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1687,(_of(656) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1686,(_of(656) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1685,(_of(656) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1684,(_of(656) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1683,(_of(656) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1682,(_of(656) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1681,(_of(656) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1680,(_of(656) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1679,(_of(656) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1678,(_of(656) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1677,(_of(656) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1676,(_of(656) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1675,(_of(656) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1674,(_of(656) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1673,(_of(656) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1672,(_of(655) & _of(181) => _of(653));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1671,(_of(654) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1670,(_of(654) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1669,(_of(654) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1668,(_of(654) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1667,(_of(654) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1666,(_of(654) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1665,(_of(654) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1664,(_of(654) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1663,(_of(654) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1662,(_of(654) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1661,(_of(654) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1660,(_of(654) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1659,(_of(654) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1658,(_of(654) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1657,(_of(654) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1656,(_of(654) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1655,(_of(654) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1654,(_of(654) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1653,(_of(654) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1652,(_of(652) & _of(181) => _of(653));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1651,(_of(650) & _of(477) => _of(651));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1650,(_of(647) & _of(116) => _of(640));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1649,(_of(647) & _of(116) => _of(639));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1648,(_of(647) & _of(116) => _of(638));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1647,(_of(647) & _of(116) => _of(637));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1646,(_of(647) & _of(116) => _of(636));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1645,(_of(647) & _of(116) => _of(635));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1644,(_of(647) & _of(116) => _of(634));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1643,(_of(647) & _of(116) => _of(633));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1642,(_of(647) & _of(116) => _of(632));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1641,(_of(647) & _of(116) => _of(631));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1640,(_of(647) & _of(116) => _of(630));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1639,(_of(647) & _of(116) => _of(629));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1638,(_of(647) & _of(116) => _of(628));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1637,(_of(647) & _of(116) => _of(627));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1636,(_of(647) & _of(116) => _of(626));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1635,(_of(649) & _of(111) => _of(625));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1634,(_of(648) & _of(105) => _of(623));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1633,(_of(647) & _of(83) => _of(619));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1632,(_of(647) & _of(81) => _of(618));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1631,(_of(647) & _of(79) => _of(617));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1630,(_of(647) & _of(77) => _of(616));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1629,(_of(647) & _of(75) => _of(615));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1628,(_f(44) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1627,(_of(646) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1626,(_of(646) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1625,(_of(646) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1624,(_of(646) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1623,(_of(646) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1622,(_of(646) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1621,(_of(646) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1620,(_of(646) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1619,(_of(646) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1618,(_of(646) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1617,(_of(646) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1616,(_of(646) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1615,(_of(646) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1614,(_of(646) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1613,(_of(646) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1612,(_of(646) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1611,(_of(645) & _of(83) => _of(619));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1610,(_of(645) & _of(81) => _of(618));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1609,(_of(645) & _of(79) => _of(617));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1608,(_of(645) & _of(77) => _of(616));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1607,(_of(645) & _of(75) => _of(615));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1606,(_f(43) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1605,(_of(644) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1604,(_of(644) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1603,(_of(644) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1602,(_of(644) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1601,(_of(644) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1600,(_of(644) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1599,(_of(644) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1598,(_of(644) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1597,(_of(644) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1596,(_of(644) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1595,(_of(644) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1594,(_of(644) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1593,(_of(644) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1592,(_of(644) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1591,(_of(644) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1590,(_of(644) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1589,(_of(643) & _of(108) => _of(612));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1588,(_of(642) & _of(477) => _of(610));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1587,(_of(641) & _of(477) => _of(608));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1586,(_of(614) & _of(116) => _of(640));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1585,(_of(614) & _of(116) => _of(639));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1584,(_of(614) & _of(116) => _of(638));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1583,(_of(614) & _of(116) => _of(637));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1582,(_of(614) & _of(116) => _of(636));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1581,(_of(614) & _of(116) => _of(635));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1580,(_of(614) & _of(116) => _of(634));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1579,(_of(614) & _of(116) => _of(633));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1578,(_of(614) & _of(116) => _of(632));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1577,(_of(614) & _of(116) => _of(631));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1576,(_of(614) & _of(116) => _of(630));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1575,(_of(614) & _of(116) => _of(629));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1574,(_of(614) & _of(116) => _of(628));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1573,(_of(614) & _of(116) => _of(627));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1572,(_of(614) & _of(116) => _of(626));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1571,(_of(624) & _of(111) => _of(625));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1570,(_of(622) & _of(105) => _of(623));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1569,(_of(621) & _of(83) => _of(619));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1568,(_of(621) & _of(81) => _of(618));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1567,(_of(621) & _of(79) => _of(617));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1566,(_of(621) & _of(77) => _of(616));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1565,(_of(621) & _of(75) => _of(615));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1564,(_f(42) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1563,(_of(620) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1562,(_of(620) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1561,(_of(620) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1560,(_of(620) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1559,(_of(620) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1558,(_of(620) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1557,(_of(620) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1556,(_of(620) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1555,(_of(620) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1554,(_of(620) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1553,(_of(620) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1552,(_of(620) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1551,(_of(620) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1550,(_of(620) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1549,(_of(620) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1548,(_of(620) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1547,(_of(614) & _of(83) => _of(619));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1546,(_of(614) & _of(81) => _of(618));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1545,(_of(614) & _of(79) => _of(617));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1544,(_of(614) & _of(77) => _of(616));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1543,(_of(614) & _of(75) => _of(615));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1542,(_f(41) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1541,(_of(613) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1540,(_of(613) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1539,(_of(613) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1538,(_of(613) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1537,(_of(613) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1536,(_of(613) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1535,(_of(613) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1534,(_of(613) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1533,(_of(613) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1532,(_of(613) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1531,(_of(613) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1530,(_of(613) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1529,(_of(613) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1528,(_of(613) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1527,(_of(613) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1526,(_of(613) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1525,(_of(611) & _of(108) => _of(612));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1524,(_of(609) & _of(477) => _of(610));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1523,(_of(607) & _of(477) => _of(608));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1522,(_of(603) & _of(116) => _of(597));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1521,(_of(603) & _of(116) => _of(596));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1520,(_of(603) & _of(116) => _of(595));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1519,(_of(603) & _of(116) => _of(594));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1518,(_of(603) & _of(116) => _of(593));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1517,(_of(603) & _of(116) => _of(592));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1516,(_of(603) & _of(116) => _of(591));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1515,(_of(603) & _of(116) => _of(590));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1514,(_of(603) & _of(116) => _of(589));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1513,(_of(603) & _of(116) => _of(588));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1512,(_of(603) & _of(116) => _of(587));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1511,(_of(603) & _of(116) => _of(586));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1510,(_of(603) & _of(116) => _of(585));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1509,(_of(603) & _of(116) => _of(584));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1508,(_of(603) & _of(116) => _of(583));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1507,(_of(606) & _of(111) => _of(582));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1506,(_of(605) & _of(108) => _of(580));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1505,(_of(604) & _of(105) => _of(578));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1504,(_of(603) & _of(83) => _of(574));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1503,(_of(603) & _of(81) => _of(573));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1502,(_of(603) & _of(79) => _of(572));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1501,(_of(603) & _of(77) => _of(571));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1500,(_of(603) & _of(75) => _of(570));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1499,(_f(40) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1498,(_of(602) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1497,(_of(602) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1496,(_of(602) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1495,(_of(602) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1494,(_of(602) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1493,(_of(602) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1492,(_of(602) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1491,(_of(602) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1490,(_of(602) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1489,(_of(602) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1488,(_of(602) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1487,(_of(602) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1486,(_of(602) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1485,(_of(602) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1484,(_of(602) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1483,(_of(602) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1482,(_of(601) & _of(83) => _of(574));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1481,(_of(601) & _of(81) => _of(573));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1480,(_of(601) & _of(79) => _of(572));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1479,(_of(601) & _of(77) => _of(571));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1478,(_of(601) & _of(75) => _of(570));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1477,(_f(39) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1476,(_of(600) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1475,(_of(600) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1474,(_of(600) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1473,(_of(600) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1472,(_of(600) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1471,(_of(600) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1470,(_of(600) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1469,(_of(600) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1468,(_of(600) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1467,(_of(600) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1466,(_of(600) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1465,(_of(600) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1464,(_of(600) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1463,(_of(600) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1462,(_of(600) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1461,(_of(600) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1460,(_of(599) & _of(477) => _of(567));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1459,(_of(598) & _of(477) => _of(565));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1458,(_of(569) & _of(116) => _of(597));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1457,(_of(569) & _of(116) => _of(596));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1456,(_of(569) & _of(116) => _of(595));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1455,(_of(569) & _of(116) => _of(594));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1454,(_of(569) & _of(116) => _of(593));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1453,(_of(569) & _of(116) => _of(592));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1452,(_of(569) & _of(116) => _of(591));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1451,(_of(569) & _of(116) => _of(590));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1450,(_of(569) & _of(116) => _of(589));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1449,(_of(569) & _of(116) => _of(588));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1448,(_of(569) & _of(116) => _of(587));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1447,(_of(569) & _of(116) => _of(586));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1446,(_of(569) & _of(116) => _of(585));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1445,(_of(569) & _of(116) => _of(584));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1444,(_of(569) & _of(116) => _of(583));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1443,(_of(581) & _of(111) => _of(582));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1442,(_of(579) & _of(108) => _of(580));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1441,(_of(577) & _of(105) => _of(578));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1440,(_of(576) & _of(83) => _of(574));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1439,(_of(576) & _of(81) => _of(573));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1438,(_of(576) & _of(79) => _of(572));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1437,(_of(576) & _of(77) => _of(571));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1436,(_of(576) & _of(75) => _of(570));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1435,(_f(38) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1434,(_of(575) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1433,(_of(575) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1432,(_of(575) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1431,(_of(575) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1430,(_of(575) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1429,(_of(575) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1428,(_of(575) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1427,(_of(575) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1426,(_of(575) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1425,(_of(575) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1424,(_of(575) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1423,(_of(575) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1422,(_of(575) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1421,(_of(575) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1420,(_of(575) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1419,(_of(575) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1418,(_of(569) & _of(83) => _of(574));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1417,(_of(569) & _of(81) => _of(573));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1416,(_of(569) & _of(79) => _of(572));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1415,(_of(569) & _of(77) => _of(571));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1414,(_of(569) & _of(75) => _of(570));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1413,(_f(37) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1412,(_of(568) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1411,(_of(568) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1410,(_of(568) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1409,(_of(568) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1408,(_of(568) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1407,(_of(568) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1406,(_of(568) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1405,(_of(568) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1404,(_of(568) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1403,(_of(568) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1402,(_of(568) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1401,(_of(568) & _of(90) => _of(6));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1400,(_of(568) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1399,(_of(568) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1398,(_of(568) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1397,(_of(568) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1396,(_of(566) & _of(477) => _of(567));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1395,(_of(564) & _of(477) => _of(565));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1394,(_of(560) & _of(116) => _of(554));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1393,(_of(560) & _of(116) => _of(553));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1392,(_of(560) & _of(116) => _of(552));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1391,(_of(560) & _of(116) => _of(551));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1390,(_of(560) & _of(116) => _of(550));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1389,(_of(560) & _of(116) => _of(549));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1388,(_of(560) & _of(116) => _of(548));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1387,(_of(560) & _of(116) => _of(547));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1386,(_of(560) & _of(116) => _of(546));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1385,(_of(560) & _of(116) => _of(545));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1384,(_of(560) & _of(116) => _of(544));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1383,(_of(560) & _of(116) => _of(543));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1382,(_of(560) & _of(116) => _of(542));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1381,(_of(560) & _of(116) => _of(541));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1380,(_of(560) & _of(116) => _of(540));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1379,(_of(563) & _of(477) => _of(539));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1378,(_of(562) & _of(111) => _of(537));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1377,(_of(561) & _of(105) => _of(535));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1376,(_of(560) & _of(83) => _of(531));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1375,(_of(560) & _of(81) => _of(530));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1374,(_of(560) & _of(79) => _of(529));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1373,(_of(560) & _of(77) => _of(528));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1372,(_of(560) & _of(75) => _of(527));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1371,(_f(36) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1370,(_of(559) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1369,(_of(559) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1368,(_of(559) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1367,(_of(559) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1366,(_of(559) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1365,(_of(559) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1364,(_of(559) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1363,(_of(559) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1362,(_of(559) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1361,(_of(559) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1360,(_of(559) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1359,(_of(559) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1358,(_of(559) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1357,(_of(559) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1356,(_of(559) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1355,(_of(559) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1354,(_of(558) & _of(83) => _of(531));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1353,(_of(558) & _of(81) => _of(530));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1352,(_of(558) & _of(79) => _of(529));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1351,(_of(558) & _of(77) => _of(528));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1350,(_of(558) & _of(75) => _of(527));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1349,(_f(35) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1348,(_of(557) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1347,(_of(557) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1346,(_of(557) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1345,(_of(557) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1344,(_of(557) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1343,(_of(557) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1342,(_of(557) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1341,(_of(557) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1340,(_of(557) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1339,(_of(557) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1338,(_of(557) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1337,(_of(557) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1336,(_of(557) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1335,(_of(557) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1334,(_of(557) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1333,(_of(557) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1332,(_of(556) & _of(108) => _of(524));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1331,(_of(555) & _of(477) => _of(522));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1330,(_of(526) & _of(116) => _of(554));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1329,(_of(526) & _of(116) => _of(553));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1328,(_of(526) & _of(116) => _of(552));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1327,(_of(526) & _of(116) => _of(551));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1326,(_of(526) & _of(116) => _of(550));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1325,(_of(526) & _of(116) => _of(549));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1324,(_of(526) & _of(116) => _of(548));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1323,(_of(526) & _of(116) => _of(547));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1322,(_of(526) & _of(116) => _of(546));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1321,(_of(526) & _of(116) => _of(545));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1320,(_of(526) & _of(116) => _of(544));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1319,(_of(526) & _of(116) => _of(543));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1318,(_of(526) & _of(116) => _of(542));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1317,(_of(526) & _of(116) => _of(541));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1316,(_of(526) & _of(116) => _of(540));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1315,(_of(538) & _of(477) => _of(539));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1314,(_of(536) & _of(111) => _of(537));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1313,(_of(534) & _of(105) => _of(535));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1312,(_of(533) & _of(83) => _of(531));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1311,(_of(533) & _of(81) => _of(530));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1310,(_of(533) & _of(79) => _of(529));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1309,(_of(533) & _of(77) => _of(528));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1308,(_of(533) & _of(75) => _of(527));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1307,(_f(34) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1306,(_of(532) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1305,(_of(532) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1304,(_of(532) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1303,(_of(532) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1302,(_of(532) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1301,(_of(532) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1300,(_of(532) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1299,(_of(532) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1298,(_of(532) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1297,(_of(532) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1296,(_of(532) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1295,(_of(532) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1294,(_of(532) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1293,(_of(532) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1292,(_of(532) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1291,(_of(532) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1290,(_of(526) & _of(83) => _of(531));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1289,(_of(526) & _of(81) => _of(530));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1288,(_of(526) & _of(79) => _of(529));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1287,(_of(526) & _of(77) => _of(528));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1286,(_of(526) & _of(75) => _of(527));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1285,(_f(33) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1284,(_of(525) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1283,(_of(525) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1282,(_of(525) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1281,(_of(525) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1280,(_of(525) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1279,(_of(525) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1278,(_of(525) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1277,(_of(525) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1276,(_of(525) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1275,(_of(525) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1274,(_of(525) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1273,(_of(525) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1272,(_of(525) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1271,(_of(525) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1270,(_of(525) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1269,(_of(525) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1268,(_of(523) & _of(108) => _of(524));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1267,(_of(521) & _of(477) => _of(522));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1266,(_of(516) & _of(116) => _of(511));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1265,(_of(516) & _of(116) => _of(510));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1264,(_of(516) & _of(116) => _of(509));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1263,(_of(516) & _of(116) => _of(508));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1262,(_of(516) & _of(116) => _of(507));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1261,(_of(516) & _of(116) => _of(506));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1260,(_of(516) & _of(116) => _of(505));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1259,(_of(516) & _of(116) => _of(504));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1258,(_of(516) & _of(116) => _of(503));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1257,(_of(516) & _of(116) => _of(502));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1256,(_of(516) & _of(116) => _of(501));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1255,(_of(516) & _of(116) => _of(500));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1254,(_of(516) & _of(116) => _of(499));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1253,(_of(516) & _of(116) => _of(498));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1252,(_of(516) & _of(116) => _of(497));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1251,(_of(520) & _of(477) => _of(496));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1250,(_of(519) & _of(111) => _of(494));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1249,(_of(518) & _of(108) => _of(492));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1248,(_of(517) & _of(105) => _of(490));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1247,(_of(516) & _of(83) => _of(486));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1246,(_of(516) & _of(81) => _of(485));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1245,(_of(516) & _of(79) => _of(484));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1244,(_of(516) & _of(77) => _of(483));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1243,(_of(516) & _of(75) => _of(482));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1242,(_f(32) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1241,(_of(515) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1240,(_of(515) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1239,(_of(515) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1238,(_of(515) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1237,(_of(515) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1236,(_of(515) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1235,(_of(515) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1234,(_of(515) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1233,(_of(515) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1232,(_of(515) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1231,(_of(515) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1230,(_of(515) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1229,(_of(515) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1228,(_of(515) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1227,(_of(515) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1226,(_of(515) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1225,(_of(514) & _of(83) => _of(486));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1224,(_of(514) & _of(81) => _of(485));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1223,(_of(514) & _of(79) => _of(484));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1222,(_of(514) & _of(77) => _of(483));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1221,(_of(514) & _of(75) => _of(482));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1220,(_f(31) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1219,(_of(513) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1218,(_of(513) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1217,(_of(513) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1216,(_of(513) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1215,(_of(513) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1214,(_of(513) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1213,(_of(513) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1212,(_of(513) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1211,(_of(513) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1210,(_of(513) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1209,(_of(513) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1208,(_of(513) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1207,(_of(513) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1206,(_of(513) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1205,(_of(513) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1204,(_of(513) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1203,(_of(512) & _of(477) => _of(478));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1202,(_of(481) & _of(116) => _of(511));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1201,(_of(481) & _of(116) => _of(510));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1200,(_of(481) & _of(116) => _of(509));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1199,(_of(481) & _of(116) => _of(508));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1198,(_of(481) & _of(116) => _of(507));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1197,(_of(481) & _of(116) => _of(506));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1196,(_of(481) & _of(116) => _of(505));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1195,(_of(481) & _of(116) => _of(504));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1194,(_of(481) & _of(116) => _of(503));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1193,(_of(481) & _of(116) => _of(502));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1192,(_of(481) & _of(116) => _of(501));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1191,(_of(481) & _of(116) => _of(500));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1190,(_of(481) & _of(116) => _of(499));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1189,(_of(481) & _of(116) => _of(498));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1188,(_of(481) & _of(116) => _of(497));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1187,(_of(495) & _of(477) => _of(496));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1186,(_of(493) & _of(111) => _of(494));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1185,(_of(491) & _of(108) => _of(492));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1184,(_of(489) & _of(105) => _of(490));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1183,(_of(488) & _of(83) => _of(486));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1182,(_of(488) & _of(81) => _of(485));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1181,(_of(488) & _of(79) => _of(484));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1180,(_of(488) & _of(77) => _of(483));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1179,(_of(488) & _of(75) => _of(482));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1178,(_f(30) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1177,(_of(487) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1176,(_of(487) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1175,(_of(487) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1174,(_of(487) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1173,(_of(487) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1172,(_of(487) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1171,(_of(487) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1170,(_of(487) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1169,(_of(487) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1168,(_of(487) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1167,(_of(487) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1166,(_of(487) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1165,(_of(487) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1164,(_of(487) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1163,(_of(487) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1162,(_of(487) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1161,(_of(481) & _of(83) => _of(486));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1160,(_of(481) & _of(81) => _of(485));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1159,(_of(481) & _of(79) => _of(484));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1158,(_of(481) & _of(77) => _of(483));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1157,(_of(481) & _of(75) => _of(482));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1156,(_f(29) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1155,(_of(479) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1154,(_of(479) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1153,(_of(479) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1152,(_of(479) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1151,(_of(479) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1150,(_of(479) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1149,(_of(479) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1148,(_of(479) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1147,(_of(479) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1146,(_of(479) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1145,(_of(479) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1144,(_of(479) & _of(90) => _of(480));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1143,(_of(479) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1142,(_of(479) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1141,(_of(479) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1140,(_of(479) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1139,(_of(476) & _of(477) => _of(478));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1138,(_of(475) & _of(114) => _of(304));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1137,(_of(474) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1136,(_of(474) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1135,(_of(474) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1134,(_of(474) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1133,(_of(474) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1132,(_of(474) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1131,(_of(474) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1130,(_of(474) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1129,(_of(474) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1128,(_of(474) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1127,(_of(474) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1126,(_of(474) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1125,(_of(474) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1124,(_of(474) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1123,(_of(474) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1122,(_of(474) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1121,(_of(474) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1120,(_of(474) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1119,(_of(474) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1118,(_of(473) & _of(181) => _of(297));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1117,(_of(472) & _of(105) => _of(294));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1116,(_of(471) & _of(105) => _of(294));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1115,(_of(469) & _of(108) => _of(470));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1114,(_of(467) & _of(111) => _of(468));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1113,(_of(465) & _of(114) => _of(466));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1112,(_of(463) & _of(108) => _of(464));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1111,(_of(462) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1110,(_of(462) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1109,(_of(462) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1108,(_of(462) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1107,(_of(462) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1106,(_of(462) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1105,(_of(462) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1104,(_of(462) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1103,(_of(462) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1102,(_of(462) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1101,(_of(462) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1100,(_of(462) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1099,(_of(462) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1098,(_of(462) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1097,(_of(462) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1096,(_of(462) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1095,(_of(462) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1094,(_of(462) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1093,(_of(462) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1092,(_of(460) & _of(181) => _of(461));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1091,(_of(459) & _of(105) => _of(458));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1090,(_of(457) & _of(105) => _of(458));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1089,(_of(455) & _of(111) => _of(456));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1088,(_of(453) & _of(116) => _of(261));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1087,(_of(453) & _of(116) => _of(260));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1086,(_of(453) & _of(116) => _of(259));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1085,(_of(453) & _of(116) => _of(258));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1084,(_of(453) & _of(116) => _of(257));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1083,(_of(453) & _of(116) => _of(256));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1082,(_of(453) & _of(116) => _of(255));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1081,(_of(453) & _of(116) => _of(254));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1080,(_of(453) & _of(116) => _of(253));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1079,(_of(453) & _of(116) => _of(252));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1078,(_of(453) & _of(116) => _of(251));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1077,(_of(453) & _of(116) => _of(250));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1076,(_of(453) & _of(116) => _of(249));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1075,(_of(453) & _of(116) => _of(248));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1074,(_of(453) & _of(116) => _of(247));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1073,(_of(454) & _of(114) => _of(246));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1072,(_of(453) & _of(83) => _of(240));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1071,(_of(453) & _of(81) => _of(239));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1070,(_of(453) & _of(79) => _of(238));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1069,(_of(453) & _of(77) => _of(237));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1068,(_of(453) & _of(75) => _of(236));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1067,(_f(28) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1066,(_of(452) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1065,(_of(452) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1064,(_of(452) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1063,(_of(452) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1062,(_of(452) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1061,(_of(452) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1060,(_of(452) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1059,(_of(452) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1058,(_of(452) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1057,(_of(452) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1056,(_of(452) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1055,(_of(452) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1054,(_of(452) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1053,(_of(452) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1052,(_of(452) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1051,(_of(452) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1050,(_of(451) & _of(105) => _of(232));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1049,(_of(450) & _of(105) => _of(232));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1048,(_of(448) & _of(108) => _of(449));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1047,(_of(446) & _of(111) => _of(447));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1046,(_of(421) & _of(116) => _of(445));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1045,(_of(421) & _of(116) => _of(444));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1044,(_of(421) & _of(116) => _of(443));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1043,(_of(421) & _of(116) => _of(442));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1042,(_of(421) & _of(116) => _of(441));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1041,(_of(421) & _of(116) => _of(440));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1040,(_of(421) & _of(116) => _of(439));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1039,(_of(421) & _of(116) => _of(438));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1038,(_of(421) & _of(116) => _of(437));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1037,(_of(421) & _of(116) => _of(436));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1036,(_of(421) & _of(116) => _of(435));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1035,(_of(421) & _of(116) => _of(434));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1034,(_of(421) & _of(116) => _of(433));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1033,(_of(421) & _of(116) => _of(432));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1032,(_of(421) & _of(116) => _of(431));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1031,(_of(429) & _of(114) => _of(430));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1030,(_of(427) & _of(108) => _of(428));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1029,(_of(421) & _of(83) => _of(426));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1028,(_of(421) & _of(81) => _of(425));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1027,(_of(421) & _of(79) => _of(424));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1026,(_of(421) & _of(77) => _of(423));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1025,(_of(421) & _of(75) => _of(422));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1024,(_f(27) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1023,(_of(420) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1022,(_of(420) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1021,(_of(420) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1020,(_of(420) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1019,(_of(420) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1018,(_of(420) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1017,(_of(420) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1016,(_of(420) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1015,(_of(420) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1014,(_of(420) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1013,(_of(420) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1012,(_of(420) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1011,(_of(420) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1010,(_of(420) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1009,(_of(420) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1008,(_of(420) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1007,(_of(419) & _of(105) => _of(418));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1006,(_of(417) & _of(105) => _of(418));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1005,(_of(415) & _of(111) => _of(416));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1004,(_of(414) & _of(114) => _of(201));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1003,(_of(413) & _of(105) => _of(195));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1002,(_of(412) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1001,(_of(412) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1000,(_of(412) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.999,(_of(412) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.998,(_of(412) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.997,(_of(412) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.996,(_of(412) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.995,(_of(412) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.994,(_of(412) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.993,(_of(412) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.992,(_of(412) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.991,(_of(412) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.990,(_of(412) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.989,(_of(412) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.988,(_of(412) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.987,(_of(412) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.986,(_of(412) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.985,(_of(412) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.984,(_of(412) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.983,(_of(411) & _of(181) => _of(182));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.982,(_of(410) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.981,(_of(410) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.980,(_of(410) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.979,(_of(410) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.978,(_of(410) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.977,(_of(410) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.976,(_of(410) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.975,(_of(410) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.974,(_of(410) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.973,(_of(410) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.972,(_of(410) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.971,(_of(410) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.970,(_of(410) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.969,(_of(410) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.968,(_of(410) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.967,(_of(410) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.966,(_of(410) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.965,(_of(410) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.964,(_of(410) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.963,(_of(409) & _of(181) => _of(182));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.962,(_of(408) & _of(108) => _of(400));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.961,(_of(407) & _of(111) => _of(398));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.960,(_of(406) & _of(114) => _of(201));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.959,(_of(405) & _of(105) => _of(195));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.958,(_of(404) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.957,(_of(404) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.956,(_of(404) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.955,(_of(404) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.954,(_of(404) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.953,(_of(404) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.952,(_of(404) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.951,(_of(404) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.950,(_of(404) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.949,(_of(404) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.948,(_of(404) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.947,(_of(404) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.946,(_of(404) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.945,(_of(404) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.944,(_of(404) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.943,(_of(404) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.942,(_of(404) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.941,(_of(404) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.940,(_of(404) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.939,(_of(403) & _of(181) => _of(182));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.938,(_of(402) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.937,(_of(402) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.936,(_of(402) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.935,(_of(402) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.934,(_of(402) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.933,(_of(402) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.932,(_of(402) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.931,(_of(402) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.930,(_of(402) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.929,(_of(402) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.928,(_of(402) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.927,(_of(402) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.926,(_of(402) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.925,(_of(402) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.924,(_of(402) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.923,(_of(402) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.922,(_of(402) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.921,(_of(402) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.920,(_of(402) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.919,(_of(401) & _of(181) => _of(182));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.918,(_of(399) & _of(108) => _of(400));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.917,(_of(397) & _of(111) => _of(398));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.916,(_of(396) & _of(114) => _of(388));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.915,(_of(395) & _of(108) => _of(386));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.914,(_of(394) & _of(105) => _of(384));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.913,(_of(393) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.912,(_of(393) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.911,(_of(393) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.910,(_of(393) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.909,(_of(393) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.908,(_of(393) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.907,(_of(393) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.906,(_of(393) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.905,(_of(393) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.904,(_of(393) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.903,(_of(393) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.902,(_of(393) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.901,(_of(393) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.900,(_of(393) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.899,(_of(393) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.898,(_of(393) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.897,(_of(393) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.896,(_of(393) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.895,(_of(393) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.894,(_of(392) & _of(181) => _of(379));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.893,(_of(391) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.892,(_of(391) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.891,(_of(391) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.890,(_of(391) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.889,(_of(391) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.888,(_of(391) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.887,(_of(391) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.886,(_of(391) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.885,(_of(391) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.884,(_of(391) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.883,(_of(391) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.882,(_of(391) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.881,(_of(391) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.880,(_of(391) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.879,(_of(391) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.878,(_of(391) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.877,(_of(391) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.876,(_of(391) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.875,(_of(391) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.874,(_of(390) & _of(181) => _of(379));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.873,(_of(389) & _of(111) => _of(377));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.872,(_of(387) & _of(114) => _of(388));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.871,(_of(385) & _of(108) => _of(386));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.870,(_of(383) & _of(105) => _of(384));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.869,(_of(382) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.868,(_of(382) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.867,(_of(382) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.866,(_of(382) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.865,(_of(382) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.864,(_of(382) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.863,(_of(382) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.862,(_of(382) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.861,(_of(382) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.860,(_of(382) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.859,(_of(382) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.858,(_of(382) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.857,(_of(382) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.856,(_of(382) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.855,(_of(382) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.854,(_of(382) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.853,(_of(382) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.852,(_of(382) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.851,(_of(382) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.850,(_of(381) & _of(181) => _of(379));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.849,(_of(380) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.848,(_of(380) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.847,(_of(380) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.846,(_of(380) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.845,(_of(380) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.844,(_of(380) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.843,(_of(380) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.842,(_of(380) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.841,(_of(380) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.840,(_of(380) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.839,(_of(380) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.838,(_of(380) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.837,(_of(380) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.836,(_of(380) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.835,(_of(380) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.834,(_of(380) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.833,(_of(380) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.832,(_of(380) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.831,(_of(380) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.830,(_of(378) & _of(181) => _of(379));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.829,(_of(376) & _of(111) => _of(377));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.828,(_of(373) & _of(116) => _of(131));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.827,(_of(373) & _of(116) => _of(130));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.826,(_of(373) & _of(116) => _of(129));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.825,(_of(373) & _of(116) => _of(128));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.824,(_of(373) & _of(116) => _of(127));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.823,(_of(373) & _of(116) => _of(126));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.822,(_of(373) & _of(116) => _of(125));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.821,(_of(373) & _of(116) => _of(124));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.820,(_of(373) & _of(116) => _of(123));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.819,(_of(373) & _of(116) => _of(122));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.818,(_of(373) & _of(116) => _of(121));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.817,(_of(373) & _of(116) => _of(120));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.816,(_of(373) & _of(116) => _of(119));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.815,(_of(373) & _of(116) => _of(118));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.814,(_of(373) & _of(116) => _of(117));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.813,(_of(375) & _of(114) => _of(115));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.812,(_of(374) & _of(105) => _of(106));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.811,(_of(373) & _of(83) => _of(84));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.810,(_of(373) & _of(81) => _of(82));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.809,(_of(373) & _of(79) => _of(80));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.808,(_of(373) & _of(77) => _of(78));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.807,(_of(373) & _of(75) => _of(76));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.806,(_f(26) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.805,(_of(372) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.804,(_of(372) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.803,(_of(372) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.802,(_of(372) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.801,(_of(372) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.800,(_of(372) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.799,(_of(372) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.798,(_of(372) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.797,(_of(372) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.796,(_of(372) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.795,(_of(372) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.794,(_of(372) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.793,(_of(372) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.792,(_of(372) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.791,(_of(372) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.790,(_of(372) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.789,(_of(371) & _of(83) => _of(84));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.788,(_of(371) & _of(81) => _of(82));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.787,(_of(371) & _of(79) => _of(80));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.786,(_of(371) & _of(77) => _of(78));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.785,(_of(371) & _of(75) => _of(76));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.784,(_f(25) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.783,(_of(370) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.782,(_of(370) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.781,(_of(370) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.780,(_of(370) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.779,(_of(370) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.778,(_of(370) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.777,(_of(370) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.776,(_of(370) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.775,(_of(370) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.774,(_of(370) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.773,(_of(370) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.772,(_of(370) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.771,(_of(370) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.770,(_of(370) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.769,(_of(370) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.768,(_of(370) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.767,(_of(369) & _of(108) => _of(361));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.766,(_of(368) & _of(111) => _of(359));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.765,(_of(363) & _of(116) => _of(131));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.764,(_of(363) & _of(116) => _of(130));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.763,(_of(363) & _of(116) => _of(129));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.762,(_of(363) & _of(116) => _of(128));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.761,(_of(363) & _of(116) => _of(127));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.760,(_of(363) & _of(116) => _of(126));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.759,(_of(363) & _of(116) => _of(125));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.758,(_of(363) & _of(116) => _of(124));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.757,(_of(363) & _of(116) => _of(123));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.756,(_of(363) & _of(116) => _of(122));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.755,(_of(363) & _of(116) => _of(121));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.754,(_of(363) & _of(116) => _of(120));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.753,(_of(363) & _of(116) => _of(119));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.752,(_of(363) & _of(116) => _of(118));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.751,(_of(363) & _of(116) => _of(117));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.750,(_of(367) & _of(114) => _of(115));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.749,(_of(366) & _of(105) => _of(106));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.748,(_of(365) & _of(83) => _of(84));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.747,(_of(365) & _of(81) => _of(82));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.746,(_of(365) & _of(79) => _of(80));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.745,(_of(365) & _of(77) => _of(78));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.744,(_of(365) & _of(75) => _of(76));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.743,(_f(24) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.742,(_of(364) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.741,(_of(364) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.740,(_of(364) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.739,(_of(364) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.738,(_of(364) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.737,(_of(364) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.736,(_of(364) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.735,(_of(364) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.734,(_of(364) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.733,(_of(364) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.732,(_of(364) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.731,(_of(364) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.730,(_of(364) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.729,(_of(364) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.728,(_of(364) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.727,(_of(364) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.726,(_of(363) & _of(83) => _of(84));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.725,(_of(363) & _of(81) => _of(82));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.724,(_of(363) & _of(79) => _of(80));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.723,(_of(363) & _of(77) => _of(78));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.722,(_of(363) & _of(75) => _of(76));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.721,(_f(23) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.720,(_of(362) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.719,(_of(362) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.718,(_of(362) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.717,(_of(362) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.716,(_of(362) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.715,(_of(362) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.714,(_of(362) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.713,(_of(362) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.712,(_of(362) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.711,(_of(362) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.710,(_of(362) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.709,(_of(362) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.708,(_of(362) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.707,(_of(362) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.706,(_of(362) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.705,(_of(362) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.704,(_of(360) & _of(108) => _of(361));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.703,(_of(358) & _of(111) => _of(359));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.702,(_of(354) & _of(116) => _of(349));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.701,(_of(354) & _of(116) => _of(348));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.700,(_of(354) & _of(116) => _of(347));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.699,(_of(354) & _of(116) => _of(346));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.698,(_of(354) & _of(116) => _of(345));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.697,(_of(354) & _of(116) => _of(344));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.696,(_of(354) & _of(116) => _of(343));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.695,(_of(354) & _of(116) => _of(342));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.694,(_of(354) & _of(116) => _of(341));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.693,(_of(354) & _of(116) => _of(340));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.692,(_of(354) & _of(116) => _of(339));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.691,(_of(354) & _of(116) => _of(338));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.690,(_of(354) & _of(116) => _of(337));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.689,(_of(354) & _of(116) => _of(336));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.688,(_of(354) & _of(116) => _of(335));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.687,(_of(357) & _of(114) => _of(334));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.686,(_of(356) & _of(108) => _of(332));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.685,(_of(355) & _of(105) => _of(330));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.684,(_of(354) & _of(83) => _of(326));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.683,(_of(354) & _of(81) => _of(325));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.682,(_of(354) & _of(79) => _of(324));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.681,(_of(354) & _of(77) => _of(323));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.680,(_of(354) & _of(75) => _of(322));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.679,(_f(22) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.678,(_of(353) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.677,(_of(353) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.676,(_of(353) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.675,(_of(353) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.674,(_of(353) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.673,(_of(353) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.672,(_of(353) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.671,(_of(353) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.670,(_of(353) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.669,(_of(353) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.668,(_of(353) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.667,(_of(353) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.666,(_of(353) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.665,(_of(353) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.664,(_of(353) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.663,(_of(353) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.662,(_of(352) & _of(83) => _of(326));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.661,(_of(352) & _of(81) => _of(325));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.660,(_of(352) & _of(79) => _of(324));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.659,(_of(352) & _of(77) => _of(323));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.658,(_of(352) & _of(75) => _of(322));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.657,(_f(21) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.656,(_of(351) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.655,(_of(351) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.654,(_of(351) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.653,(_of(351) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.652,(_of(351) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.651,(_of(351) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.650,(_of(351) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.649,(_of(351) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.648,(_of(351) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.647,(_of(351) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.646,(_of(351) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.645,(_of(351) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.644,(_of(351) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.643,(_of(351) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.642,(_of(351) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.641,(_of(351) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.640,(_of(350) & _of(111) => _of(318));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.639,(_of(321) & _of(116) => _of(349));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.638,(_of(321) & _of(116) => _of(348));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.637,(_of(321) & _of(116) => _of(347));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.636,(_of(321) & _of(116) => _of(346));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.635,(_of(321) & _of(116) => _of(345));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.634,(_of(321) & _of(116) => _of(344));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.633,(_of(321) & _of(116) => _of(343));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.632,(_of(321) & _of(116) => _of(342));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.631,(_of(321) & _of(116) => _of(341));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.630,(_of(321) & _of(116) => _of(340));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.629,(_of(321) & _of(116) => _of(339));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.628,(_of(321) & _of(116) => _of(338));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.627,(_of(321) & _of(116) => _of(337));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.626,(_of(321) & _of(116) => _of(336));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.625,(_of(321) & _of(116) => _of(335));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.624,(_of(333) & _of(114) => _of(334));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.623,(_of(331) & _of(108) => _of(332));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.622,(_of(329) & _of(105) => _of(330));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.621,(_of(328) & _of(83) => _of(326));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.620,(_of(328) & _of(81) => _of(325));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.619,(_of(328) & _of(79) => _of(324));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.618,(_of(328) & _of(77) => _of(323));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.617,(_of(328) & _of(75) => _of(322));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.616,(_f(20) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.615,(_of(327) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.614,(_of(327) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.613,(_of(327) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.612,(_of(327) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.611,(_of(327) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.610,(_of(327) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.609,(_of(327) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.608,(_of(327) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.607,(_of(327) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.606,(_of(327) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.605,(_of(327) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.604,(_of(327) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.603,(_of(327) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.602,(_of(327) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.601,(_of(327) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.600,(_of(327) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.599,(_of(321) & _of(83) => _of(326));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.598,(_of(321) & _of(81) => _of(325));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.597,(_of(321) & _of(79) => _of(324));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.596,(_of(321) & _of(77) => _of(323));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.595,(_of(321) & _of(75) => _of(322));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.594,(_f(19) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.593,(_of(319) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.592,(_of(319) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.591,(_of(319) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.590,(_of(319) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.589,(_of(319) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.588,(_of(319) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.587,(_of(319) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.586,(_of(319) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.585,(_of(319) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.584,(_of(319) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.583,(_of(319) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.582,(_of(319) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.581,(_of(319) & _of(89) => _of(320));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.580,(_of(319) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.579,(_of(319) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.578,(_of(319) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.577,(_of(317) & _of(111) => _of(318));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.576,(_of(315) & _of(114) => _of(316));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.575,(_of(313) & _of(111) => _of(314));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.574,(_of(312) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.573,(_of(312) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.572,(_of(312) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.571,(_of(312) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.570,(_of(312) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.569,(_of(312) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.568,(_of(312) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.567,(_of(312) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.566,(_of(312) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.565,(_of(312) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.564,(_of(312) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.563,(_of(312) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.562,(_of(312) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.561,(_of(312) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.560,(_of(312) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.559,(_of(312) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.558,(_of(312) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.557,(_of(312) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.556,(_of(312) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.555,(_of(310) & _of(181) => _of(311));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.554,(_of(309) & _of(105) => _of(308));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.553,(_of(307) & _of(105) => _of(308));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.552,(_of(305) & _of(108) => _of(306));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.551,(_of(303) & _of(114) => _of(304));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.550,(_of(301) & _of(111) => _of(302));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.549,(_of(299) & _of(108) => _of(300));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.548,(_of(298) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.547,(_of(298) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.546,(_of(298) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.545,(_of(298) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.544,(_of(298) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.543,(_of(298) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.542,(_of(298) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.541,(_of(298) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.540,(_of(298) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.539,(_of(298) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.538,(_of(298) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.537,(_of(298) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.536,(_of(298) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.535,(_of(298) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.534,(_of(298) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.533,(_of(298) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.532,(_of(298) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.531,(_of(298) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.530,(_of(298) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.529,(_of(296) & _of(181) => _of(297));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.528,(_of(295) & _of(105) => _of(294));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.527,(_of(293) & _of(105) => _of(294));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.526,(_of(268) & _of(116) => _of(292));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.525,(_of(268) & _of(116) => _of(291));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.524,(_of(268) & _of(116) => _of(290));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.523,(_of(268) & _of(116) => _of(289));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.522,(_of(268) & _of(116) => _of(288));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.521,(_of(268) & _of(116) => _of(287));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.520,(_of(268) & _of(116) => _of(286));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.519,(_of(268) & _of(116) => _of(285));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.518,(_of(268) & _of(116) => _of(284));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.517,(_of(268) & _of(116) => _of(283));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.516,(_of(268) & _of(116) => _of(282));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.515,(_of(268) & _of(116) => _of(281));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.514,(_of(268) & _of(116) => _of(280));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.513,(_of(268) & _of(116) => _of(279));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.512,(_of(268) & _of(116) => _of(278));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.511,(_of(276) & _of(114) => _of(277));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.510,(_of(274) & _of(111) => _of(275));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.509,(_of(268) & _of(83) => _of(273));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.508,(_of(268) & _of(81) => _of(272));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.507,(_of(268) & _of(79) => _of(271));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.506,(_of(268) & _of(77) => _of(270));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.505,(_of(268) & _of(75) => _of(269));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.504,(_f(18) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.503,(_of(267) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.502,(_of(267) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.501,(_of(267) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.500,(_of(267) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.499,(_of(267) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.498,(_of(267) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.497,(_of(267) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.496,(_of(267) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.495,(_of(267) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.494,(_of(267) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.493,(_of(267) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.492,(_of(267) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.491,(_of(267) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.490,(_of(267) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.489,(_of(267) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.488,(_of(267) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.487,(_of(266) & _of(105) => _of(265));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.486,(_of(264) & _of(105) => _of(265));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.485,(_of(262) & _of(108) => _of(263));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.484,(_of(235) & _of(116) => _of(261));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.483,(_of(235) & _of(116) => _of(260));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.482,(_of(235) & _of(116) => _of(259));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.481,(_of(235) & _of(116) => _of(258));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.480,(_of(235) & _of(116) => _of(257));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.479,(_of(235) & _of(116) => _of(256));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.478,(_of(235) & _of(116) => _of(255));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.477,(_of(235) & _of(116) => _of(254));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.476,(_of(235) & _of(116) => _of(253));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.475,(_of(235) & _of(116) => _of(252));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.474,(_of(235) & _of(116) => _of(251));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.473,(_of(235) & _of(116) => _of(250));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.472,(_of(235) & _of(116) => _of(249));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.471,(_of(235) & _of(116) => _of(248));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.470,(_of(235) & _of(116) => _of(247));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.469,(_of(245) & _of(114) => _of(246));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.468,(_of(243) & _of(111) => _of(244));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.467,(_of(241) & _of(108) => _of(242));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.466,(_of(235) & _of(83) => _of(240));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.465,(_of(235) & _of(81) => _of(239));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.464,(_of(235) & _of(79) => _of(238));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.463,(_of(235) & _of(77) => _of(237));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.462,(_of(235) & _of(75) => _of(236));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.461,(_f(17) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.460,(_of(234) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.459,(_of(234) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.458,(_of(234) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.457,(_of(234) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.456,(_of(234) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.455,(_of(234) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.454,(_of(234) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.453,(_of(234) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.452,(_of(234) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.451,(_of(234) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.450,(_of(234) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.449,(_of(234) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.448,(_of(234) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.447,(_of(234) & _of(88) => _of(4));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.446,(_of(234) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.445,(_of(234) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.444,(_of(233) & _of(105) => _of(232));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.443,(_of(231) & _of(105) => _of(232));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.442,(_of(230) & _of(114) => _of(222));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.441,(_of(229) & _of(111) => _of(220));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.440,(_of(228) & _of(105) => _of(218));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.439,(_of(227) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.438,(_of(227) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.437,(_of(227) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.436,(_of(227) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.435,(_of(227) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.434,(_of(227) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.433,(_of(227) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.432,(_of(227) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.431,(_of(227) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.430,(_of(227) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.429,(_of(227) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.428,(_of(227) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.427,(_of(227) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.426,(_of(227) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.425,(_of(227) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.424,(_of(227) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.423,(_of(227) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.422,(_of(227) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.421,(_of(227) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.420,(_of(226) & _of(181) => _of(213));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.419,(_of(225) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.418,(_of(225) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.417,(_of(225) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.416,(_of(225) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.415,(_of(225) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.414,(_of(225) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.413,(_of(225) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.412,(_of(225) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.411,(_of(225) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.410,(_of(225) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.409,(_of(225) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.408,(_of(225) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.407,(_of(225) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.406,(_of(225) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.405,(_of(225) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.404,(_of(225) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.403,(_of(225) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.402,(_of(225) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.401,(_of(225) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.400,(_of(224) & _of(181) => _of(213));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.399,(_of(223) & _of(108) => _of(211));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.398,(_of(221) & _of(114) => _of(222));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.397,(_of(219) & _of(111) => _of(220));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.396,(_of(217) & _of(105) => _of(218));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.395,(_of(216) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.394,(_of(216) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.393,(_of(216) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.392,(_of(216) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.391,(_of(216) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.390,(_of(216) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.389,(_of(216) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.388,(_of(216) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.387,(_of(216) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.386,(_of(216) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.385,(_of(216) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.384,(_of(216) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.383,(_of(216) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.382,(_of(216) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.381,(_of(216) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.380,(_of(216) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.379,(_of(216) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.378,(_of(216) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.377,(_of(216) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.376,(_of(215) & _of(181) => _of(213));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.375,(_of(214) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.374,(_of(214) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.373,(_of(214) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.372,(_of(214) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.371,(_of(214) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.370,(_of(214) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.369,(_of(214) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.368,(_of(214) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.367,(_of(214) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.366,(_of(214) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.365,(_of(214) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.364,(_of(214) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.363,(_of(214) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.362,(_of(214) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.361,(_of(214) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.360,(_of(214) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.359,(_of(214) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.358,(_of(214) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.357,(_of(214) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.356,(_of(212) & _of(181) => _of(213));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.355,(_of(210) & _of(108) => _of(211));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.354,(_of(209) & _of(114) => _of(201));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.353,(_of(208) & _of(111) => _of(199));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.352,(_of(207) & _of(108) => _of(197));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.351,(_of(206) & _of(105) => _of(195));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.350,(_of(205) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.349,(_of(205) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.348,(_of(205) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.347,(_of(205) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.346,(_of(205) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.345,(_of(205) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.344,(_of(205) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.343,(_of(205) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.342,(_of(205) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.341,(_of(205) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.340,(_of(205) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.339,(_of(205) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.338,(_of(205) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.337,(_of(205) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.336,(_of(205) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.335,(_of(205) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.334,(_of(205) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.333,(_of(205) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.332,(_of(205) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.331,(_of(204) & _of(181) => _of(182));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.330,(_of(203) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.329,(_of(203) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.328,(_of(203) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.327,(_of(203) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.326,(_of(203) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.325,(_of(203) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.324,(_of(203) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.323,(_of(203) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.322,(_of(203) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.321,(_of(203) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.320,(_of(203) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.319,(_of(203) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.318,(_of(203) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.317,(_of(203) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.316,(_of(203) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.315,(_of(203) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.314,(_of(203) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.313,(_of(203) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.312,(_of(203) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.311,(_of(202) & _of(181) => _of(182));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.310,(_of(200) & _of(114) => _of(201));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.309,(_of(198) & _of(111) => _of(199));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.308,(_of(196) & _of(108) => _of(197));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.307,(_of(194) & _of(105) => _of(195));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.306,(_of(193) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.305,(_of(193) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.304,(_of(193) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.303,(_of(193) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.302,(_of(193) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.301,(_of(193) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.300,(_of(193) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.299,(_of(193) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.298,(_of(193) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.297,(_of(193) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.296,(_of(193) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.295,(_of(193) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.294,(_of(193) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.293,(_of(193) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.292,(_of(193) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.291,(_of(193) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.290,(_of(193) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.289,(_of(193) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.288,(_of(193) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.287,(_of(192) & _of(181) => _of(182));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.286,(_of(183) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.285,(_of(183) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.284,(_of(183) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.283,(_of(183) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.282,(_of(183) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.281,(_of(183) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.280,(_of(183) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.279,(_of(183) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.278,(_of(183) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.277,(_of(183) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.276,(_of(183) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.275,(_of(183) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.274,(_of(183) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.273,(_of(183) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.272,(_of(183) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.271,(_of(183) & _of(190) => _of(191));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.270,(_of(183) & _of(188) => _of(189));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.269,(_of(183) & _of(186) => _of(187));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.268,(_of(183) & _of(184) => _of(185));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.267,(_of(180) & _of(181) => _of(182));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.266,(_of(176) & _of(116) => _of(171));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.265,(_of(176) & _of(116) => _of(170));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.264,(_of(176) & _of(116) => _of(169));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.263,(_of(176) & _of(116) => _of(168));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.262,(_of(176) & _of(116) => _of(167));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.261,(_of(176) & _of(116) => _of(166));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.260,(_of(176) & _of(116) => _of(165));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.259,(_of(176) & _of(116) => _of(164));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.258,(_of(176) & _of(116) => _of(163));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.257,(_of(176) & _of(116) => _of(162));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.256,(_of(176) & _of(116) => _of(161));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.255,(_of(176) & _of(116) => _of(160));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.254,(_of(176) & _of(116) => _of(159));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.253,(_of(176) & _of(116) => _of(158));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.252,(_of(176) & _of(116) => _of(157));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.251,(_of(179) & _of(114) => _of(156));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.250,(_of(178) & _of(111) => _of(154));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.249,(_of(177) & _of(105) => _of(152));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.248,(_of(176) & _of(83) => _of(148));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.247,(_of(176) & _of(81) => _of(147));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.246,(_of(176) & _of(79) => _of(146));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.245,(_of(176) & _of(77) => _of(145));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.244,(_of(176) & _of(75) => _of(144));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.243,(_f(16) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.242,(_of(175) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.241,(_of(175) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.240,(_of(175) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.239,(_of(175) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.238,(_of(175) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.237,(_of(175) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.236,(_of(175) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.235,(_of(175) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.234,(_of(175) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.233,(_of(175) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.232,(_of(175) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.231,(_of(175) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.230,(_of(175) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.229,(_of(175) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.228,(_of(175) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.227,(_of(175) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.226,(_of(174) & _of(83) => _of(148));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.225,(_of(174) & _of(81) => _of(147));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.224,(_of(174) & _of(79) => _of(146));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.223,(_of(174) & _of(77) => _of(145));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.222,(_of(174) & _of(75) => _of(144));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.221,(_f(15) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.220,(_of(173) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.219,(_of(173) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.218,(_of(173) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.217,(_of(173) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.216,(_of(173) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.215,(_of(173) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.214,(_of(173) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.213,(_of(173) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.212,(_of(173) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.211,(_of(173) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.210,(_of(173) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.209,(_of(173) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.208,(_of(173) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.207,(_of(173) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.206,(_of(173) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.205,(_of(173) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.204,(_of(172) & _of(108) => _of(141));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.203,(_of(143) & _of(116) => _of(171));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.202,(_of(143) & _of(116) => _of(170));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.201,(_of(143) & _of(116) => _of(169));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.200,(_of(143) & _of(116) => _of(168));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.199,(_of(143) & _of(116) => _of(167));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.198,(_of(143) & _of(116) => _of(166));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.197,(_of(143) & _of(116) => _of(165));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.196,(_of(143) & _of(116) => _of(164));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.195,(_of(143) & _of(116) => _of(163));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.194,(_of(143) & _of(116) => _of(162));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.193,(_of(143) & _of(116) => _of(161));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.192,(_of(143) & _of(116) => _of(160));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.191,(_of(143) & _of(116) => _of(159));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.190,(_of(143) & _of(116) => _of(158));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.189,(_of(143) & _of(116) => _of(157));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.188,(_of(155) & _of(114) => _of(156));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.187,(_of(153) & _of(111) => _of(154));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.186,(_of(151) & _of(105) => _of(152));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.185,(_of(150) & _of(83) => _of(148));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.184,(_of(150) & _of(81) => _of(147));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.183,(_of(150) & _of(79) => _of(146));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.182,(_of(150) & _of(77) => _of(145));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.181,(_of(150) & _of(75) => _of(144));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.180,(_f(14) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.179,(_of(149) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.178,(_of(149) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.177,(_of(149) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.176,(_of(149) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.175,(_of(149) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.174,(_of(149) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.173,(_of(149) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.172,(_of(149) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.171,(_of(149) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.170,(_of(149) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.169,(_of(149) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.168,(_of(149) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.167,(_of(149) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.166,(_of(149) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.165,(_of(149) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.164,(_of(149) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.163,(_of(143) & _of(83) => _of(148));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.162,(_of(143) & _of(81) => _of(147));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.161,(_of(143) & _of(79) => _of(146));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.160,(_of(143) & _of(77) => _of(145));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.159,(_of(143) & _of(75) => _of(144));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.158,(_f(13) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.157,(_of(142) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.156,(_of(142) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.155,(_of(142) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.154,(_of(142) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.153,(_of(142) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.152,(_of(142) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.151,(_of(142) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.150,(_of(142) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.149,(_of(142) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.148,(_of(142) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.147,(_of(142) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.146,(_of(142) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.145,(_of(142) & _of(89) => _of(10));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.144,(_of(142) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.143,(_of(142) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.142,(_of(142) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.141,(_of(140) & _of(108) => _of(141));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.140,(_of(135) & _of(116) => _of(131));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.139,(_of(135) & _of(116) => _of(130));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.138,(_of(135) & _of(116) => _of(129));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.137,(_of(135) & _of(116) => _of(128));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.136,(_of(135) & _of(116) => _of(127));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.135,(_of(135) & _of(116) => _of(126));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.134,(_of(135) & _of(116) => _of(125));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.133,(_of(135) & _of(116) => _of(124));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.132,(_of(135) & _of(116) => _of(123));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.131,(_of(135) & _of(116) => _of(122));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.130,(_of(135) & _of(116) => _of(121));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.129,(_of(135) & _of(116) => _of(120));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.128,(_of(135) & _of(116) => _of(119));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.127,(_of(135) & _of(116) => _of(118));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.126,(_of(135) & _of(116) => _of(117));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.125,(_of(139) & _of(114) => _of(115));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.124,(_of(138) & _of(111) => _of(112));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.123,(_of(137) & _of(108) => _of(109));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.122,(_of(136) & _of(105) => _of(106));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.121,(_of(135) & _of(83) => _of(84));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.120,(_of(135) & _of(81) => _of(82));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.119,(_of(135) & _of(79) => _of(80));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.118,(_of(135) & _of(77) => _of(78));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.117,(_of(135) & _of(75) => _of(76));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.116,(_f(12) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.115,(_of(134) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.114,(_of(134) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.113,(_of(134) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.112,(_of(134) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.111,(_of(134) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.110,(_of(134) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.109,(_of(134) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.108,(_of(134) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.107,(_of(134) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.106,(_of(134) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.105,(_of(134) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.104,(_of(134) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.103,(_of(134) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.102,(_of(134) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.101,(_of(134) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.100,(_of(134) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.99,(_of(133) & _of(83) => _of(84));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.98,(_of(133) & _of(81) => _of(82));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.97,(_of(133) & _of(79) => _of(80));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.96,(_of(133) & _of(77) => _of(78));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.95,(_of(133) & _of(75) => _of(76));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.94,(_f(11) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.93,(_of(132) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.92,(_of(132) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.91,(_of(132) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.90,(_of(132) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.89,(_of(132) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.88,(_of(132) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.87,(_of(132) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.86,(_of(132) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.85,(_of(132) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.84,(_of(132) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.83,(_of(132) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.82,(_of(132) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.81,(_of(132) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.80,(_of(132) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.79,(_of(132) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.78,(_of(132) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.77,(_of(74) & _of(116) => _of(131));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.76,(_of(74) & _of(116) => _of(130));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.75,(_of(74) & _of(116) => _of(129));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.74,(_of(74) & _of(116) => _of(128));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.73,(_of(74) & _of(116) => _of(127));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.72,(_of(74) & _of(116) => _of(126));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.71,(_of(74) & _of(116) => _of(125));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.70,(_of(74) & _of(116) => _of(124));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.69,(_of(74) & _of(116) => _of(123));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.68,(_of(74) & _of(116) => _of(122));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.67,(_of(74) & _of(116) => _of(121));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.66,(_of(74) & _of(116) => _of(120));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.65,(_of(74) & _of(116) => _of(119));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.64,(_of(74) & _of(116) => _of(118));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.63,(_of(74) & _of(116) => _of(117));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.62,(_of(113) & _of(114) => _of(115));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.61,(_of(110) & _of(111) => _of(112));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.60,(_of(107) & _of(108) => _of(109));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.59,(_of(104) & _of(105) => _of(106));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.58,(_of(103) & _of(83) => _of(84));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.57,(_of(103) & _of(81) => _of(82));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.56,(_of(103) & _of(79) => _of(80));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.55,(_of(103) & _of(77) => _of(78));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.54,(_of(103) & _of(75) => _of(76));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.53,(_f(9) & _of(102) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.52,(_of(85) & _of(101) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.51,(_of(85) & _of(100) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.50,(_of(85) & _of(99) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.49,(_of(85) & _of(98) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.48,(_of(85) & _of(97) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.47,(_of(85) & _of(96) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.46,(_of(85) & _of(95) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.45,(_of(85) & _of(94) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.44,(_of(85) & _of(93) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.43,(_of(85) & _of(92) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.42,(_of(85) & _of(91) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.41,(_of(85) & _of(90) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.40,(_of(85) & _of(89) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.39,(_of(85) & _of(88) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.38,(_of(85) & _of(87) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.37,(_of(85) & _of(86) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.36,(_of(74) & _of(83) => _of(84));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.35,(_of(74) & _of(81) => _of(82));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.34,(_of(74) & _of(79) => _of(80));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.33,(_of(74) & _of(77) => _of(78));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.32,(_of(74) & _of(75) => _of(76));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.31,(_f(5) & _of(73) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.30,(_of(41) & _of(71) => _of(72));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.29,(_of(41) & _of(69) => _of(70));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.28,(_of(41) & _of(67) => _of(68));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.27,(_of(41) & _of(65) => _of(66));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.26,(_of(41) & _of(63) => _of(64));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.25,(_of(41) & _of(61) => _of(62));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.24,(_of(41) & _of(59) => _of(60));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.23,(_of(41) & _of(57) => _of(58));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.22,(_of(41) & _of(55) => _of(56));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.21,(_of(41) & _of(53) => _of(54));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.20,(_of(41) & _of(51) => _of(52));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.19,(_of(41) & _of(49) => _of(50));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.18,(_of(41) & _of(47) => _of(48));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.17,(_of(41) & _of(46) => _of(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.16,(_of(41) & _of(44) => _of(45));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.15,(_of(41) & _of(42) => _of(43));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.14,(_of(40) & _of(1) => _of(2));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.13,(_of(38) => _of(39));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.12,(_of(36) => _of(37));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.11,(_of(34) => _of(35));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.10,(_of(32) => _of(33));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.9,(_of(30) => _of(31));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.8,(_of(28) => _of(29));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.7,(_of(26) => _of(27));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.6,(_of(24) => _of(25));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.5,(_of(22) => _of(23));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.4,(_of(20) => _of(21));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3,(_of(18) => _of(19));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2,(_of(16) => _of(17));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1,(_of(14) => _of(15));
  _f(1) & _f(2) & Initialisation.7,(_of(13) => _of(2));
  _f(1) & _f(2) & Initialisation.6,(_of(11) => _of(12));
  _f(1) & _f(2) & Initialisation.5,(_of(9) => _of(10));
  _f(1) & _f(2) & Initialisation.4,(_of(7) => _of(8));
  _f(1) & _f(2) & Initialisation.3,(_of(5) => _of(6));
  _f(1) & _f(2) & Initialisation.2,(_of(3) => _of(4));
  _f(1) & _f(2) & Initialisation.1,(_of(1) => _of(2))
END
&
THEORY OPOFormulas IS
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (btrue);
  "`Check that the invariant (slow_speed = slow_speed$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'" & "`Check that the invariant (traction = traction$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'" & "`Check that the invariant (manual = manual$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'" & "`Check that the invariant (Leftclose_doors = Leftclose_doors$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'" & "`Check that the invariant (Rightclose_doors = Rightclose_doors$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'";
  (TRUE = TRUE);
  "`Check that the invariant (cabin = cabin$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'";
  (NONE = NONE);
  "`Check that the invariant (leader = leader$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'" & "`Check that the invariant (opposite = opposite$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'" & "`Check that the invariant (controlled = controlled$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'" & "`Check that the invariant (Leftopen_doors = Leftopen_doors$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'" & "`Check that the invariant (Lefttl_sensor_open = Lefttl_sensor_open$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'" & "`Check that the invariant (Leftvisual_open = Leftvisual_open$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'" & "`Check that the invariant (Rightopen_doors = Rightopen_doors$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'" & "`Check that the invariant (Righttl_sensor_open = Righttl_sensor_open$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'" & "`Check that the invariant (Rightvisual_open = Rightvisual_open$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'";
  (FALSE = FALSE);
  "`Check that the invariant (conduction = conduction$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'";
  (MANUAL = MANUAL);
  "`Check that the invariant (Leftcommand_mem = Leftcommand_mem$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'" & "`Check that the invariant (Lefttl_command = Lefttl_command$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'" & "`Check that the invariant (Rightcommand_mem = Rightcommand_mem$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'" & "`Check that the invariant (Righttl_command = Righttl_command$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'";
  (CLOSE_DOORS = CLOSE_DOORS);
  "`Check that the invariant (Rightvisual_open = Rightvisual_open$1) is established by the initialisation - ref 4.3, 5.4'" & "`Check initialisation refinement - ref 4.3, 5.4'";
  "`Check precondition (i_open_left_doors : BOOL) deduction'";
  (i_open_left_doors : BOOL);
  "`Check precondition (i_close_left_doors : BOOL) deduction'";
  (i_close_left_doors : BOOL);
  "`Check precondition (i_tl_sensor_left_open : BOOL) deduction'";
  (i_tl_sensor_left_open : BOOL);
  "`Check precondition (i_open_right_doors : BOOL) deduction'";
  (i_open_right_doors : BOOL);
  "`Check precondition (i_close_right_doors : BOOL) deduction'";
  (i_close_right_doors : BOOL);
  "`Check precondition (i_tl_sensor_right_open : BOOL) deduction'";
  (i_tl_sensor_right_open : BOOL);
  "`Check precondition (i_leader : BOOL) deduction'";
  (i_leader : BOOL);
  "`Check precondition (i_opposite : BOOL) deduction'";
  (i_opposite : BOOL);
  "`Check precondition (i_manual : BOOL) deduction'";
  (i_manual : BOOL);
  "`Check precondition (i_controlled : BOOL) deduction'";
  (i_controlled : BOOL);
  "`Check precondition (i_slow_speed : BOOL) deduction'";
  (i_slow_speed : BOOL);
  "`Check precondition (i_tl_left_command : COMMAND) deduction'";
  (i_tl_left_command : COMMAND);
  "`Check precondition (i_tl_right_command : COMMAND) deduction'";
  (i_tl_right_command : COMMAND);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  "`Check that the invariant (Rightcommand_mem = Rightcommand_mem$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'" & "`Check that the invariant (Righttl_command = Righttl_command$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1));
  "`Check that the invariant (Leftcommand_mem = Leftcommand_mem$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'" & "`Check that the invariant (Lefttl_command = Lefttl_command$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1));
  "`Check that the invariant (traction = traction$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  "`Check that the invariant (conduction = conduction$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (CONDUCTION_OFF = CONDUCTION_OFF);
  "`Check that the invariant (cabin = cabin$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (LEADER = LEADER);
  "`Check that the invariant (leader = leader$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (i_leader = i_leader);
  "`Check that the invariant (opposite = opposite$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (i_opposite = i_opposite);
  "`Check that the invariant (slow_speed = slow_speed$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (i_slow_speed = i_slow_speed);
  "`Check that the invariant (manual = manual$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (i_manual = i_manual);
  "`Check that the invariant (controlled = controlled$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (i_controlled = i_controlled);
  "`Check that the invariant (Leftopen_doors = Leftopen_doors$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (i_open_left_doors = i_open_left_doors);
  "`Check that the invariant (Leftclose_doors = Leftclose_doors$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (i_close_left_doors = i_close_left_doors);
  "`Check that the invariant (Lefttl_sensor_open = Lefttl_sensor_open$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'" & "`Check that the invariant (Leftvisual_open = Leftvisual_open$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (i_tl_sensor_left_open = i_tl_sensor_left_open);
  "`Check that the invariant (Rightopen_doors = Rightopen_doors$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (i_open_right_doors = i_open_right_doors);
  "`Check that the invariant (Rightclose_doors = Rightclose_doors$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (i_close_right_doors = i_close_right_doors);
  "`Check that the invariant (Righttl_sensor_open = Righttl_sensor_open$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'" & "`Check that the invariant (Rightvisual_open = Rightvisual_open$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (i_tl_sensor_right_open = i_tl_sensor_right_open);
  "`Check operation refinement - ref 4.4, 5.5'";
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  "`Check that the invariant (Rightcommand_mem = Rightcommand_mem$1 & Righttl_command = Righttl_command$1 & Leftcommand_mem = Leftcommand_mem$1 & Lefttl_command = Lefttl_command$1 & traction = traction$1 & conduction = conduction$1 & cabin = cabin$1 & leader = leader$1 & opposite = opposite$1 & slow_speed = slow_speed$1 & manual = manual$1 & controlled = controlled$1 & Leftopen_doors = Leftopen_doors$1 & Leftclose_doors = Leftclose_doors$1 & Lefttl_sensor_open = Lefttl_sensor_open$1 & Leftvisual_open = Leftvisual_open$1 & Rightopen_doors = Rightopen_doors$1 & Rightclose_doors = Rightclose_doors$1 & Righttl_sensor_open = Righttl_sensor_open$1 & Rightvisual_open = Rightvisual_open$1) is preserved by the operation - ref 4.4, 5.5'";
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  "`Check that the invariant (Righttl_command = Righttl_command$1 & Leftcommand_mem = Leftcommand_mem$1 & Lefttl_command = Lefttl_command$1 & traction = traction$1 & conduction = conduction$1 & cabin = cabin$1 & leader = leader$1 & opposite = opposite$1 & slow_speed = slow_speed$1 & manual = manual$1 & controlled = controlled$1 & Leftopen_doors = Leftopen_doors$1 & Leftclose_doors = Leftclose_doors$1 & Lefttl_sensor_open = Lefttl_sensor_open$1 & Leftvisual_open = Leftvisual_open$1 & Rightopen_doors = Rightopen_doors$1 & Rightclose_doors = Rightclose_doors$1 & Righttl_sensor_open = Righttl_sensor_open$1 & Rightvisual_open = Rightvisual_open$1 & Rightcommand_mem = Rightcommand_mem$1 & Rightcommand_mem = Rightcommand_mem$1) is preserved by the operation - ref 4.4, 5.5'";
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  "`Check that the invariant (Leftcommand_mem = Leftcommand_mem$1 & Lefttl_command = Lefttl_command$1 & traction = traction$1 & conduction = conduction$1 & cabin = cabin$1 & leader = leader$1 & opposite = opposite$1 & slow_speed = slow_speed$1 & manual = manual$1 & controlled = controlled$1 & Leftopen_doors = Leftopen_doors$1 & Leftclose_doors = Leftclose_doors$1 & Lefttl_sensor_open = Lefttl_sensor_open$1 & Leftvisual_open = Leftvisual_open$1 & Rightopen_doors = Rightopen_doors$1 & Rightclose_doors = Rightclose_doors$1 & Righttl_sensor_open = Righttl_sensor_open$1 & Rightvisual_open = Rightvisual_open$1 & Righttl_command = Righttl_command$1 & Rightcommand_mem = Rightcommand_mem$1 & Rightcommand_mem = Rightcommand_mem$1) is preserved by the operation - ref 4.4, 5.5'";
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  "`Check that the invariant (Lefttl_command = Lefttl_command$1 & traction = traction$1 & conduction = conduction$1 & cabin = cabin$1 & leader = leader$1 & opposite = opposite$1 & slow_speed = slow_speed$1 & manual = manual$1 & controlled = controlled$1 & Leftopen_doors = Leftopen_doors$1 & Leftclose_doors = Leftclose_doors$1 & Lefttl_sensor_open = Lefttl_sensor_open$1 & Leftvisual_open = Leftvisual_open$1 & Rightopen_doors = Rightopen_doors$1 & Rightclose_doors = Rightclose_doors$1 & Righttl_sensor_open = Righttl_sensor_open$1 & Rightvisual_open = Rightvisual_open$1 & Leftcommand_mem = Leftcommand_mem$1 & Righttl_command = Righttl_command$1 & Rightcommand_mem = Rightcommand_mem$1 & Rightcommand_mem = Rightcommand_mem$1) is preserved by the operation - ref 4.4, 5.5'";
  (not(!(cl$0).(cl = i_tl_left_command & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  "`Check that the invariant (Rightcommand_mem = Rightcommand_mem$1 & Righttl_command = Righttl_command$1 & Lefttl_command = Lefttl_command$1 & Leftcommand_mem = Leftcommand_mem$1 & traction = traction$1 & conduction = conduction$1 & cabin = cabin$1 & leader = leader$1 & opposite = opposite$1 & slow_speed = slow_speed$1 & manual = manual$1 & controlled = controlled$1 & Leftopen_doors = Leftopen_doors$1 & Leftclose_doors = Leftclose_doors$1 & Lefttl_sensor_open = Lefttl_sensor_open$1 & Leftvisual_open = Leftvisual_open$1 & Rightopen_doors = Rightopen_doors$1 & Rightclose_doors = Rightclose_doors$1 & Righttl_sensor_open = Righttl_sensor_open$1 & Rightvisual_open = Rightvisual_open$1) is preserved by the operation - ref 4.4, 5.5'";
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  "`Check that the invariant (Rightcommand_mem = Rightcommand_mem$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (Righttl_command = Righttl_command$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (Leftcommand_mem = Leftcommand_mem$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (Lefttl_command = Lefttl_command$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (traction = traction$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (conduction = conduction$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (cabin = cabin$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (leader = leader$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (opposite = opposite$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (slow_speed = slow_speed$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (manual = manual$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (controlled = controlled$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (Leftopen_doors = Leftopen_doors$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (Leftclose_doors = Leftclose_doors$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (Lefttl_sensor_open = Lefttl_sensor_open$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (Leftvisual_open = Leftvisual_open$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (Rightopen_doors = Rightopen_doors$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (Rightclose_doors = Rightclose_doors$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (Righttl_sensor_open = Righttl_sensor_open$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check that the invariant (Rightvisual_open = Rightvisual_open$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (Rightvisual_open = Rightvisual_open$1) is preserved by the operation - ref 4.4, 5.5'";
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  "`Check that the invariant (traction = traction$1 & conduction = conduction$1 & cabin = cabin$1 & leader = leader$1 & opposite = opposite$1 & slow_speed = slow_speed$1 & manual = manual$1 & controlled = controlled$1 & Leftopen_doors = Leftopen_doors$1 & Leftclose_doors = Leftclose_doors$1 & Lefttl_sensor_open = Lefttl_sensor_open$1 & Leftvisual_open = Leftvisual_open$1 & Rightopen_doors = Rightopen_doors$1 & Rightclose_doors = Rightclose_doors$1 & Righttl_sensor_open = Righttl_sensor_open$1 & Rightvisual_open = Rightvisual_open$1 & Lefttl_command = Lefttl_command$1 & Leftcommand_mem = Leftcommand_mem$1 & Righttl_command = Righttl_command$1 & Rightcommand_mem = Rightcommand_mem$1 & Leftcommand_mem = Leftcommand_mem$1) is preserved by the operation - ref 4.4, 5.5'";
  (not(!(cond$7777).(FALSE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_controlled = TRUE));
  "`Check that the invariant (conduction = conduction$1 & cabin = cabin$1 & leader = leader$1 & opposite = opposite$1 & slow_speed = slow_speed$1 & manual = manual$1 & controlled = controlled$1 & Leftopen_doors = Leftopen_doors$1 & Leftclose_doors = Leftclose_doors$1 & Lefttl_sensor_open = Lefttl_sensor_open$1 & Leftvisual_open = Leftvisual_open$1 & Rightopen_doors = Rightopen_doors$1 & Rightclose_doors = Rightclose_doors$1 & Righttl_sensor_open = Righttl_sensor_open$1 & Rightvisual_open = Rightvisual_open$1 & traction = traction$1 & Lefttl_command = Lefttl_command$1 & Leftcommand_mem = Leftcommand_mem$1 & Righttl_command = Righttl_command$1 & Rightcommand_mem = Rightcommand_mem$1 & Leftcommand_mem = Leftcommand_mem$1) is preserved by the operation - ref 4.4, 5.5'";
  (not(!(cond$7777).(CONDUCTION_OFF = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_manual = TRUE));
  "`Check that the invariant (conduction = conduction$1 & conduction = conduction$1 & cabin = cabin$1 & leader = leader$1 & opposite = opposite$1 & slow_speed = slow_speed$1 & manual = manual$1 & controlled = controlled$1 & Leftopen_doors = Leftopen_doors$1 & Leftclose_doors = Leftclose_doors$1 & Lefttl_sensor_open = Lefttl_sensor_open$1 & Leftvisual_open = Leftvisual_open$1 & Rightopen_doors = Rightopen_doors$1 & Rightclose_doors = Rightclose_doors$1 & Righttl_sensor_open = Righttl_sensor_open$1 & Rightvisual_open = Rightvisual_open$1 & traction = traction$1 & Lefttl_command = Lefttl_command$1 & Leftcommand_mem = Leftcommand_mem$1 & Righttl_command = Righttl_command$1 & Rightcommand_mem = Rightcommand_mem$1 & Leftcommand_mem = Leftcommand_mem$1) is preserved by the operation - ref 4.4, 5.5'";
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_leader = TRUE));
  "`Check that the invariant (cabin = cabin$1 & cabin = cabin$1 & leader = leader$1 & opposite = opposite$1 & slow_speed = slow_speed$1 & manual = manual$1 & controlled = controlled$1 & conduction = conduction$1 & Leftopen_doors = Leftopen_doors$1 & Leftclose_doors = Leftclose_doors$1 & Lefttl_sensor_open = Lefttl_sensor_open$1 & Leftvisual_open = Leftvisual_open$1 & Rightopen_doors = Rightopen_doors$1 & Rightclose_doors = Rightclose_doors$1 & Righttl_sensor_open = Righttl_sensor_open$1 & Rightvisual_open = Rightvisual_open$1 & traction = traction$1 & Lefttl_command = Lefttl_command$1 & Leftcommand_mem = Leftcommand_mem$1 & Righttl_command = Righttl_command$1 & Rightcommand_mem = Rightcommand_mem$1 & Leftcommand_mem = Leftcommand_mem$1) is preserved by the operation - ref 4.4, 5.5'";
  (not(!(cond$7777).(i_opposite = TRUE & LEADER = OPPOSITE or (not(i_opposite = TRUE) & LEADER = NONE) & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  "`Check that the invariant (slow_speed = slow_speed$1 & traction = traction$1 & cabin = cabin$1 & leader = leader$1 & opposite = opposite$1 & conduction = conduction$1 & manual = manual$1 & controlled = controlled$1 & Leftcommand_mem = Leftcommand_mem$1 & Leftopen_doors = Leftopen_doors$1 & Leftclose_doors = Leftclose_doors$1 & Lefttl_sensor_open = Lefttl_sensor_open$1 & Lefttl_command = Lefttl_command$1 & Leftvisual_open = Leftvisual_open$1 & Rightcommand_mem = Rightcommand_mem$1 & Rightopen_doors = Rightopen_doors$1 & Rightclose_doors = Rightclose_doors$1 & Righttl_sensor_open = Righttl_sensor_open$1 & Righttl_command = Righttl_command$1 & Rightvisual_open = Rightvisual_open$1) is preserved by the operation - ref 4.4, 5.5'";
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_manual = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_leader = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_controlled = TRUE);
  (not(!(cond$7777).(MANUAL = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & FALSE = FALSE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & FALSE = FALSE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_leader = TRUE));
  (not(!(cond$7777).(i_opposite = TRUE & LEADER = OPPOSITE or (not(i_opposite = TRUE) & LEADER = NONE) & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_manual = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_leader = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  "`Check that the invariant (Lefttl_command = Lefttl_command$1 & Lefttl_command = Lefttl_command$1 & Leftcommand_mem = Leftcommand_mem$1 & Righttl_command = Righttl_command$1 & Rightcommand_mem = Rightcommand_mem$1 & traction = traction$1 & conduction = conduction$1 & cabin = cabin$1 & leader = leader$1 & opposite = opposite$1 & slow_speed = slow_speed$1 & manual = manual$1 & controlled = controlled$1 & Leftopen_doors = Leftopen_doors$1 & Leftclose_doors = Leftclose_doors$1 & Lefttl_sensor_open = Lefttl_sensor_open$1 & Leftvisual_open = Leftvisual_open$1 & Rightopen_doors = Rightopen_doors$1 & Rightclose_doors = Rightclose_doors$1 & Righttl_sensor_open = Righttl_sensor_open$1 & Rightvisual_open = Rightvisual_open$1) is preserved by the operation - ref 4.4, 5.5'";
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  "`Check that the invariant (Rightcommand_mem = Rightcommand_mem$1) is preserved by the operation - ref 4.4, 5.5'";
  (Rightcommand_mem$1 = Rightcommand_mem$1);
  "`Check that the invariant (Righttl_command = Righttl_command$1) is preserved by the operation - ref 4.4, 5.5'";
  (Righttl_command$1 = Righttl_command$1);
  "`Check that the invariant (Lefttl_command = Lefttl_command$1) is preserved by the operation - ref 4.4, 5.5'";
  (Lefttl_command$1 = Lefttl_command$1);
  "`Check that the invariant (Leftcommand_mem = Leftcommand_mem$1) is preserved by the operation - ref 4.4, 5.5'";
  (Leftcommand_mem$1 = Leftcommand_mem$1);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONDUCTION_OFF = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_leader = TRUE));
  (not(!(cond$7777).(i_opposite = TRUE & LEADER = OPPOSITE or (not(i_opposite = TRUE) & LEADER = NONE) & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_manual = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_leader = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_controlled = TRUE);
  (not(!(cond$7777).(MANUAL = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & FALSE = FALSE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_leader = TRUE));
  (not(!(cond$7777).(i_opposite = TRUE & LEADER = OPPOSITE or (not(i_opposite = TRUE) & LEADER = NONE) & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_manual = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_leader = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONDUCTION_OFF = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & not(i_leader = TRUE));
  (not(!(cond$7777).(i_opposite = TRUE & LEADER = OPPOSITE or (not(i_opposite = TRUE) & LEADER = NONE) & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_controlled = TRUE);
  (not(!(cond$7777).(MANUAL = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & TRUE = TRUE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & TRUE = TRUE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & not(i_leader = TRUE));
  (not(!(cond$7777).(i_opposite = TRUE & LEADER = OPPOSITE or (not(i_opposite = TRUE) & LEADER = NONE) & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONDUCTION_OFF = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & not(i_leader = TRUE));
  (not(!(cond$7777).(i_opposite = TRUE & LEADER = OPPOSITE or (not(i_opposite = TRUE) & LEADER = NONE) & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_controlled = TRUE);
  (not(!(cond$7777).(MANUAL = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & TRUE = TRUE & MANUAL = MANUAL & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & not(i_leader = TRUE));
  (not(!(cond$7777).(i_opposite = TRUE & LEADER = OPPOSITE or (not(i_opposite = TRUE) & LEADER = NONE) & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  (CONTROLLED = CONTROLLED);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & FALSE = FALSE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & FALSE = FALSE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONTROLLED = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_leader = TRUE));
  (not(!(cond$7777).(i_opposite = TRUE & LEADER = OPPOSITE or (not(i_opposite = TRUE) & LEADER = NONE) & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_manual = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_leader = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_controlled = TRUE);
  (not(!(cond$7777).(CONDUCTION_OFF = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_leader = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_manual = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_leader = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & FALSE = FALSE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONTROLLED = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_leader = TRUE));
  (not(!(cond$7777).(i_opposite = TRUE & LEADER = OPPOSITE or (not(i_opposite = TRUE) & LEADER = NONE) & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_manual = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_leader = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_controlled = TRUE);
  (not(!(cond$7777).(CONDUCTION_OFF = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_leader = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_manual = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_leader = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & TRUE = TRUE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & TRUE = TRUE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONTROLLED = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & not(i_leader = TRUE));
  (not(!(cond$7777).(i_opposite = TRUE & LEADER = OPPOSITE or (not(i_opposite = TRUE) & LEADER = NONE) & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = LEADER & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_controlled = TRUE);
  (not(!(cond$7777).(CONDUCTION_OFF = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & not(i_leader = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & TRUE = TRUE & CONTROLLED = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONTROLLED = CONDUCTION_OFF & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_controlled = TRUE & not(i_leader = TRUE));
  (not(!(cond$7777).(i_opposite = TRUE & LEADER = OPPOSITE or (not(i_opposite = TRUE) & LEADER = NONE) & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL) & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_controlled = TRUE);
  (not(!(cond$7777).(CONDUCTION_OFF = CONTROLLED & LEADER = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_controlled = TRUE) & not(i_leader = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  "`Check that the invariant (cabin = cabin$1 & leader = leader$1 & opposite = opposite$1 & slow_speed = slow_speed$1 & manual = manual$1 & controlled = controlled$1 & conduction = conduction$1 & Leftopen_doors = Leftopen_doors$1 & Leftclose_doors = Leftclose_doors$1 & Lefttl_sensor_open = Lefttl_sensor_open$1 & Leftvisual_open = Leftvisual_open$1 & Rightopen_doors = Rightopen_doors$1 & Rightclose_doors = Rightclose_doors$1 & Righttl_sensor_open = Righttl_sensor_open$1 & Rightvisual_open = Rightvisual_open$1 & traction = traction$1 & Lefttl_command = Lefttl_command$1 & Leftcommand_mem = Leftcommand_mem$1 & Righttl_command = Righttl_command$1 & Rightcommand_mem = Rightcommand_mem$1 & Leftcommand_mem = Leftcommand_mem$1) is preserved by the operation - ref 4.4, 5.5'";
  (not(!(cond$7777).(OPPOSITE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  (OPPOSITE = OPPOSITE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONDUCTION_OFF = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_opposite = TRUE));
  (not(!(cond$7777).(OPPOSITE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_manual = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_opposite = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(OPPOSITE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_controlled = TRUE);
  (not(!(cond$7777).(MANUAL = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & FALSE = FALSE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & FALSE = FALSE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_opposite = TRUE));
  (not(!(cond$7777).(OPPOSITE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_manual = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_opposite = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(NONE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_opposite = TRUE);
  (not(!(cond$7777).(NONE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONDUCTION_OFF = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_opposite = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_manual = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(NONE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_opposite = TRUE);
  (not(!(cond$7777).(NONE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_controlled = TRUE);
  (not(!(cond$7777).(MANUAL = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & FALSE = FALSE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & FALSE = FALSE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_opposite = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_manual = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(OPPOSITE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONDUCTION_OFF = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_opposite = TRUE));
  (not(!(cond$7777).(OPPOSITE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_manual = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_opposite = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(OPPOSITE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_controlled = TRUE);
  (not(!(cond$7777).(MANUAL = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & FALSE = FALSE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_opposite = TRUE));
  (not(!(cond$7777).(OPPOSITE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_manual = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_opposite = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(NONE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_opposite = TRUE);
  (not(!(cond$7777).(NONE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & FALSE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONDUCTION_OFF = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_opposite = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_manual = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(NONE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_opposite = TRUE);
  (not(!(cond$7777).(NONE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_controlled = TRUE);
  (not(!(cond$7777).(MANUAL = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & FALSE = FALSE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_opposite = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_manual = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(OPPOSITE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONDUCTION_OFF = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & not(i_opposite = TRUE));
  (not(!(cond$7777).(OPPOSITE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_leader = TRUE);
  (not(!(cond$7777).(OPPOSITE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_controlled = TRUE);
  (not(!(cond$7777).(MANUAL = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & TRUE = TRUE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & TRUE = TRUE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & not(i_opposite = TRUE));
  (not(!(cond$7777).(OPPOSITE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(NONE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_opposite = TRUE);
  (not(!(cond$7777).(NONE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONDUCTION_OFF = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONDUCTION_OFF & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_leader = TRUE);
  (not(!(cond$7777).(NONE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_opposite = TRUE);
  (not(!(cond$7777).(NONE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_controlled = TRUE);
  (not(!(cond$7777).(MANUAL = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & TRUE = TRUE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & TRUE = TRUE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = MANUAL & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(OPPOSITE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONDUCTION_OFF = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & not(i_opposite = TRUE));
  (not(!(cond$7777).(OPPOSITE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_leader = TRUE);
  (not(!(cond$7777).(OPPOSITE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_controlled = TRUE);
  (not(!(cond$7777).(MANUAL = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & TRUE = TRUE & MANUAL = MANUAL & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & not(i_opposite = TRUE));
  (not(!(cond$7777).(OPPOSITE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(NONE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_opposite = TRUE);
  (not(!(cond$7777).(NONE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & TRUE = TRUE & CONDUCTION_OFF = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONDUCTION_OFF = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONTROLLED or (not(i_controlled = TRUE) & CONDUCTION_OFF = CONDUCTION_OFF) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_leader = TRUE);
  (not(!(cond$7777).(NONE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_opposite = TRUE);
  (not(!(cond$7777).(NONE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & MANUAL = CONDUCTION_OFF or (not(i_controlled = TRUE) & MANUAL = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_controlled = TRUE);
  (not(!(cond$7777).(MANUAL = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & TRUE = TRUE & MANUAL = MANUAL & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & not(i_manual = TRUE));
  (not(!(cond$7777).(i_controlled = TRUE & MANUAL = CONTROLLED or (not(i_controlled = TRUE) & MANUAL = CONDUCTION_OFF) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(OPPOSITE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & FALSE = FALSE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & FALSE = FALSE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONTROLLED = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_opposite = TRUE));
  (not(!(cond$7777).(OPPOSITE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_manual = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_opposite = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_controlled = TRUE);
  (not(!(cond$7777).(CONDUCTION_OFF = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_opposite = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_manual = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_opposite = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(NONE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_opposite = TRUE);
  (not(!(cond$7777).(NONE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & FALSE = FALSE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & FALSE = FALSE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & FALSE = FALSE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONTROLLED = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = FALSE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_opposite = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_manual = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_opposite = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_controlled = TRUE);
  (not(!(cond$7777).(CONDUCTION_OFF = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_opposite = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_manual = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(OPPOSITE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & FALSE = FALSE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONTROLLED = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_opposite = TRUE));
  (not(!(cond$7777).(OPPOSITE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_manual = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_opposite = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_controlled = TRUE);
  (not(!(cond$7777).(CONDUCTION_OFF = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_opposite = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_manual = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_opposite = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(NONE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_opposite = TRUE);
  (not(!(cond$7777).(NONE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & FALSE = FALSE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  (not(!(cond$7777).(FALSE = TRUE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONTROLLED = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_opposite = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_manual = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_opposite = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_controlled = TRUE);
  (not(!(cond$7777).(CONDUCTION_OFF = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & FALSE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & FALSE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_opposite = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_manual = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(OPPOSITE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & TRUE = TRUE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & TRUE = TRUE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONTROLLED = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & not(i_opposite = TRUE));
  (not(!(cond$7777).(OPPOSITE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = OPPOSITE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_controlled = TRUE);
  (not(!(cond$7777).(CONDUCTION_OFF = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & not(i_opposite = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(NONE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_opposite = TRUE);
  (not(!(cond$7777).(NONE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  (not(!(cl$0).(cr = i_tl_right_command & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND => not(btrue))));
  (not(!(cl$0).(cr = i_tl_right_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & TRUE = TRUE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cl$0).(cl = i_tl_left_command & TRUE = TRUE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)) & select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : COMMAND & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command)) => not(btrue))));
  (not(!(cond$7777).(cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1 & TRUE = TRUE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONTROLLED = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = cl & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = cl & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = cr & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = cr & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  (not(btrue & !mm.(mm : COMMAND => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : COMMAND => select_command(TRUE,FALSE,TRUE,mm) = OPEN_DOORS) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : COMMAND => select_command(ss,TRUE,oo,mm) = CLOSE_DOORS) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : COMMAND => select_command(FALSE,cc,oo,mm) = CLOSE_DOORS) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE & btrue & !(traction$7777,Rightvisual_open$7777,Rightclose_doors$7777,Leftvisual_open$7777,Leftclose_doors$7777,conduction$7777,manual$7777,cabin$7777,leader$7777,opposite$7777,slow_speed$7777,controlled$7777,Leftopen_doors$7777,Lefttl_sensor_open$7777,Rightopen_doors$7777,Righttl_sensor_open$7777,cond$7777,Rightcommand_mem$7777,Righttl_command$7777,Lefttl_command$7777,Leftcommand_mem$7777).(leader$7777 = i_leader & opposite$7777 = i_opposite & (i_leader = TRUE & cabin$7777 = LEADER or (not(i_leader = TRUE) & (i_opposite = TRUE & cabin$7777 = OPPOSITE or (not(i_opposite = TRUE) & cabin$7777 = NONE)))) & slow_speed$7777 = i_slow_speed & manual$7777 = i_manual & controlled$7777 = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & conduction$7777 = CONDUCTION_OFF or (not(i_controlled = TRUE) & conduction$7777 = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & conduction$7777 = CONTROLLED or (not(i_controlled = TRUE) & conduction$7777 = CONDUCTION_OFF)))) & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Rightvisual_open$7777 = i_tl_sensor_right_open & #cond.(cond$7777 = conduction_p(i_leader,i_manual,i_controlled) & (cond$7777 = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (cond$7777 = TRUE & Lefttl_command$7777 = cl or (not(cond$7777 = TRUE) & Lefttl_command$7777 = i_tl_left_command) & (cond$7777 = TRUE & Leftcommand_mem$7777 = cl or (not(cond$7777 = TRUE) & Leftcommand_mem$7777 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (cond$7777 = TRUE & Righttl_command$7777 = cr or (not(cond$7777 = TRUE) & Righttl_command$7777 = i_tl_right_command) & (cond$7777 = TRUE & Rightcommand_mem$7777 = cr or (not(cond$7777 = TRUE) & Rightcommand_mem$7777 = i_tl_right_command))))) or (not(cond$7777 = TRUE) & (Rightcommand_mem$7777 = Rightcommand_mem$1 & Righttl_command$7777 = Righttl_command$1 & Lefttl_command$7777 = Lefttl_command$1 & Leftcommand_mem$7777 = Leftcommand_mem$1)))) & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & traction$7777 = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & traction$7777 = TRUE)) => not(slow_speed$7777 = i_slow_speed & traction$7777 = TRUE & cabin$7777 = NONE & leader$7777 = i_leader & opposite$7777 = i_opposite & conduction$7777 = CONTROLLED & manual$7777 = i_manual & controlled$7777 = i_controlled & Leftcommand_mem$7777 = i_tl_left_command & Leftopen_doors$7777 = i_open_left_doors & Leftclose_doors$7777 = i_close_left_doors & Lefttl_sensor_open$7777 = i_tl_sensor_left_open & Lefttl_command$7777 = i_tl_left_command & Leftvisual_open$7777 = i_tl_sensor_left_open & Rightcommand_mem$7777 = i_tl_right_command & Rightopen_doors$7777 = i_open_right_doors & Rightclose_doors$7777 = i_close_right_doors & Righttl_sensor_open$7777 = i_tl_sensor_right_open & Righttl_command$7777 = i_tl_right_command & Rightvisual_open$7777 = i_tl_sensor_right_open & btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_opposite = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_controlled = TRUE);
  (not(!(cond$7777).(CONDUCTION_OFF = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#(cl$0).(cl$0 : COMMAND & cl$0 = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl = cl$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cl = i_tl_left_command)))) & #(cr$0).(cr$0 : COMMAND & cr$0 = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & cr = cr$0 or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & cr = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (cr = Rightcommand_mem$1 & cr = Righttl_command$1 & cl = Lefttl_command$1 & cl = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(OPPOSITE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & TRUE = TRUE & CONTROLLED = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONTROLLED = CONDUCTION_OFF & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & i_controlled = TRUE & not(i_opposite = TRUE));
  (not(!(cond$7777).(OPPOSITE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL) & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_controlled = TRUE);
  (not(!(cond$7777).(CONDUCTION_OFF = CONTROLLED & OPPOSITE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & i_opposite = TRUE & not(i_controlled = TRUE) & not(i_opposite = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_leader = TRUE);
  (not(!(cond$7777).(NONE = LEADER & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_opposite = TRUE);
  (not(!(cond$7777).(NONE = OPPOSITE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & (i_manual = TRUE & (i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL)) or (not(i_manual = TRUE) & (i_controlled = TRUE & CONTROLLED = CONTROLLED or (not(i_controlled = TRUE) & CONTROLLED = CONDUCTION_OFF)))) & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONTROLLED = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONTROLLED = MANUAL) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  (not(!(cond$7777).(TRUE = FALSE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  (not(!(cond$7777).(#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command)))) & TRUE = TRUE & CONTROLLED = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & i_controlled = TRUE & not(i_controlled = TRUE));
  (not(!(cond$7777).(CONTROLLED = CONDUCTION_OFF & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_leader = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_opposite = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_manual = TRUE);
  (not(!(cond$7777).(i_controlled = TRUE & CONDUCTION_OFF = CONDUCTION_OFF or (not(i_controlled = TRUE) & CONDUCTION_OFF = MANUAL) & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_controlled = TRUE);
  (not(!(cond$7777).(CONDUCTION_OFF = CONTROLLED & NONE = NONE & i_leader = i_leader & i_opposite = i_opposite & i_slow_speed = i_slow_speed & i_manual = i_manual & i_controlled = i_controlled & i_open_left_doors = i_open_left_doors & i_close_left_doors = i_close_left_doors & i_tl_sensor_left_open = i_tl_sensor_left_open & i_tl_sensor_left_open = i_tl_sensor_left_open & i_open_right_doors = i_open_right_doors & i_close_right_doors = i_close_right_doors & i_tl_sensor_right_open = i_tl_sensor_right_open & i_tl_sensor_right_open = i_tl_sensor_right_open & (i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE & TRUE = FALSE or (not(i_tl_sensor_left_open = TRUE or i_tl_sensor_right_open = TRUE) & TRUE = TRUE)) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & (#cl.(cl : COMMAND & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Lefttl_command$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Lefttl_command$1 = i_tl_left_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Leftcommand_mem$1 = cl or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Leftcommand_mem$1 = i_tl_left_command)))) & #cr.(cr : COMMAND & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Righttl_command$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Righttl_command$1 = i_tl_right_command) & (conduction_p(i_leader,i_manual,i_controlled) = TRUE & Rightcommand_mem$1 = cr or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & Rightcommand_mem$1 = i_tl_right_command))))) or (not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & (Rightcommand_mem$1 = Rightcommand_mem$1 & Righttl_command$1 = Righttl_command$1 & Lefttl_command$1 = Lefttl_command$1 & Leftcommand_mem$1 = Leftcommand_mem$1))) => not(btrue))));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & not(conduction_p(i_leader,i_manual,i_controlled) = TRUE) & not(i_opposite = TRUE) & not(i_controlled = TRUE))
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
