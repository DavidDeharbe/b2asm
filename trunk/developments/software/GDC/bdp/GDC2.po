THEORY ProofList IS
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.120,(_f(68) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.119,(_f(68) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.118,(_f(67) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.117,(_f(67) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.116,(_f(66) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.115,(_f(66) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.114,(_f(65) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.113,(_f(65) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.112,(_f(64) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.111,(_f(64) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.110,(_f(63) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.109,(_f(63) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.108,(_f(62) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.107,(_f(62) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.106,(_f(61) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.105,(_f(61) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.104,(_f(60) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.103,(_f(60) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.102,(_f(59) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.101,(_f(59) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.100,(_f(58) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.99,(_f(58) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.98,(_f(57) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.97,(_f(57) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.96,(_f(56) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.95,(_f(56) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.94,(_f(55) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.93,(_f(55) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.92,(_f(54) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.91,(_f(54) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.90,(_f(53) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.89,(_f(53) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.88,(_f(52) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.87,(_f(52) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.86,(_f(51) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.85,(_f(51) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.84,(_f(50) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.83,(_f(50) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.82,(_f(49) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.81,(_f(49) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.80,(_f(48) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.79,(_f(48) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.78,(_f(47) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.77,(_f(47) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.76,(_f(46) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.75,(_f(46) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.74,(_f(45) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.73,(_f(45) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.72,(_f(44) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.71,(_f(44) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.70,(_f(43) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.69,(_f(43) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.68,(_f(42) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.67,(_f(42) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.66,(_f(41) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.65,(_f(41) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.64,(_f(40) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.63,(_f(40) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.62,(_f(39) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.61,(_f(39) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.60,(_f(38) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.59,(_f(38) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.58,(_f(37) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.57,(_f(37) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.56,(_f(36) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.55,(_f(36) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.54,(_f(35) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.53,(_f(35) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.52,(_f(34) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.51,(_f(34) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.50,(_f(33) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.49,(_f(33) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.48,(_f(32) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.47,(_f(32) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.46,(_f(31) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.45,(_f(31) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.44,(_f(30) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.43,(_f(30) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.42,(_f(29) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.41,(_f(29) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.40,(_f(28) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.39,(_f(28) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.38,(_f(27) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.37,(_f(27) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.36,(_f(26) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.35,(_f(26) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.34,(_f(25) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.33,(_f(25) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.32,(_f(24) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.31,(_f(24) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.30,(_f(23) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.29,(_f(23) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.28,(_f(22) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.27,(_f(22) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.26,(_f(21) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.25,(_f(21) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.24,(_f(20) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.23,(_f(20) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.22,(_f(19) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.21,(_f(19) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.20,(_f(18) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.19,(_f(18) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.18,(_f(17) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.17,(_f(17) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.16,(_f(16) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.15,(_f(16) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.14,(_f(15) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.13,(_f(15) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.12,(_f(14) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.11,(_f(14) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.10,(_f(13) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.9,(_f(13) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.8,(_f(12) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.7,(_f(12) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.6,(_f(11) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.5,(_f(11) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.4,(_f(9) & _f(10) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.3,(_f(9) & _f(10) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.2,(_f(5) & _f(6) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & update_controller.1,(_f(5) & _f(6) => _f(7))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & not((1..3)*{STATE} = {}) & not((1..3)*{CONDUCTION} = {}) & not((1..2)*{DOORS} = {}) & not((1..3)*{COMMAND} = {}) & conduction_p : BOOL*BOOL*BOOL +-> BOOL & dom(conduction_p) = BOOL*BOOL*BOOL & conduction_p = %(leader,manual,controlled).(leader : BOOL & manual : BOOL & controlled : BOOL | bool(leader = TRUE & xor(manual,controlled) = TRUE)) & !(l,m,c).(l : BOOL & m : BOOL & c : BOOL => conduction_p(l,m,c) = bool(l = TRUE & xor(m,c) = TRUE)) & select_command : BOOL*BOOL*BOOL*((1..3)*{COMMAND}) +-> (1..3)*{COMMAND} & dom(select_command) = BOOL*BOOL*BOOL*((1..3)*{COMMAND}) & !(slow,close,open,mem).(slow : BOOL & close : BOOL & open : BOOL & mem : (1..3)*{COMMAND} => (slow = FALSE => select_command(slow,close,open,mem) = 3|->COMMAND) & (close = TRUE => select_command(slow,close,open,mem) = 3|->COMMAND) & (slow = TRUE & close = FALSE & open = TRUE => select_command(slow,close,open,mem) = 2|->COMMAND) & (slow = TRUE & close = FALSE & open = FALSE => select_command(slow,close,open,mem) = mem)) & xor : BOOL*BOOL +-> BOOL & dom(xor) = BOOL*BOOL & !(a,b).(a : BOOL & b : BOOL => xor(a,b) = bool(not(a = b))));
  ("`Seen and used machines assertions'" & !mm.(mm : (1..3)*{COMMAND} => select_command(TRUE,FALSE,FALSE,mm) = mm) & !mm.(mm : (1..3)*{COMMAND} => select_command(TRUE,FALSE,TRUE,mm) = 2|->COMMAND) & !(ss,oo,mm).(ss : BOOL & oo : BOOL & mm : (1..3)*{COMMAND} => select_command(ss,TRUE,oo,mm) = 3|->COMMAND) & !(cc,oo,mm).(cc : BOOL & oo : BOOL & mm : (1..3)*{COMMAND} => select_command(FALSE,cc,oo,mm) = 3|->COMMAND) & !(mm,cc).(mm : BOOL & cc : BOOL => conduction_p(FALSE,mm,cc) = FALSE) & conduction_p(TRUE,FALSE,FALSE) = FALSE & conduction_p(TRUE,TRUE,TRUE) = FALSE & conduction_p(TRUE,FALSE,TRUE) = TRUE & conduction_p(TRUE,TRUE,FALSE) = TRUE & xor(FALSE,FALSE) = FALSE & xor(TRUE,TRUE) = FALSE & xor(FALSE,TRUE) = TRUE & xor(TRUE,FALSE) = TRUE);
  ("`Previous components invariants'" & slow_speed$1 : BOOL & traction$1 : BOOL & cabin$1 : (1..3)*{STATE} & leader$1 : BOOL & opposite$1 : BOOL & not(leader$1 = TRUE & opposite$1 = TRUE) & (leader$1 = TRUE => cabin$1 = 1|->STATE) & (cabin$1 = 1|->STATE => leader$1 = TRUE) & (opposite$1 = TRUE => cabin$1 = 3|->STATE) & (cabin$1 = 3|->STATE => opposite$1 = TRUE) & (leader$1 = FALSE & opposite$1 = FALSE => cabin$1 = 2|->STATE) & (cabin$1 = 2|->STATE => leader$1 = FALSE & opposite$1 = FALSE) & conduction$1 : (1..3)*{CONDUCTION} & manual$1 : BOOL & controlled$1 : BOOL & (conduction$1 = 1|->CONDUCTION => manual$1 = TRUE & controlled$1 = FALSE) & (manual$1 = TRUE & controlled$1 = FALSE => conduction$1 = 1|->CONDUCTION) & (conduction$1 = 2|->CONDUCTION => manual$1 = FALSE & controlled$1 = TRUE) & (manual$1 = FALSE & controlled$1 = TRUE => conduction$1 = 2|->CONDUCTION) & (conduction$1 = 3|->CONDUCTION => manual$1 = FALSE & controlled$1 = FALSE or (manual$1 = TRUE & controlled$1 = TRUE)) & (manual$1 = FALSE & controlled$1 = FALSE => conduction$1 = 3|->CONDUCTION) & (manual$1 = TRUE & controlled$1 = TRUE => conduction$1 = 3|->CONDUCTION) & Leftcommand_mem$1 : (1..3)*{COMMAND} & Lefttl_command$1 : (1..3)*{COMMAND} & Leftopen_doors$1 : BOOL & Leftclose_doors$1 : BOOL & Lefttl_sensor_open$1 : BOOL & Leftvisual_open$1 : BOOL & Leftvisual_open$1 = Lefttl_sensor_open$1 & Rightcommand_mem$1 : (1..3)*{COMMAND} & Righttl_command$1 : (1..3)*{COMMAND} & Rightopen_doors$1 : BOOL & Rightclose_doors$1 : BOOL & Righttl_sensor_open$1 : BOOL & Rightvisual_open$1 : BOOL & Rightvisual_open$1 = Righttl_sensor_open$1 & (cabin$1 = 1|->STATE & (conduction$1 = 1|->CONDUCTION or conduction$1 = 2|->CONDUCTION) => (slow_speed$1 = FALSE => Lefttl_command$1 = 3|->COMMAND & Righttl_command$1 = 3|->COMMAND) & ((Lefttl_sensor_open$1 = TRUE => traction$1 = FALSE) & (Righttl_sensor_open$1 = TRUE => traction$1 = FALSE))) & "`Component invariant'" & slow_speed = slow_speed$1 & traction = traction$1 & cabin = cabin$1 & leader = leader$1 & opposite = opposite$1 & conduction = conduction$1 & manual = manual$1 & controlled = controlled$1 & Leftcommand_mem = Leftcommand_mem$1 & Leftopen_doors = Leftopen_doors$1 & Leftclose_doors = Leftclose_doors$1 & Lefttl_sensor_open = Lefttl_sensor_open$1 & Lefttl_command = Lefttl_command$1 & Leftvisual_open = Leftvisual_open$1 & Rightcommand_mem = Rightcommand_mem$1 & Rightopen_doors = Rightopen_doors$1 & Rightclose_doors = Rightclose_doors$1 & Righttl_sensor_open = Righttl_sensor_open$1 & Righttl_command = Righttl_command$1 & Rightvisual_open = Rightvisual_open$1);
  ("`update_controller preconditions in previous components'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  "`Check operation refinement - ref 4.4, 5.5'";
  (select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) : (1..3)*{COMMAND});
  (select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) : (1..3)*{COMMAND});
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  "`Check that the invariant (Rightvisual_open = Rightvisual_open$1) is preserved by the operation - ref 4.4, 5.5'";
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & i_leader = TRUE & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & i_manual = TRUE & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_left_open = TRUE & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE & i_tl_sensor_left_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE) & i_tl_sensor_right_open = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & i_opposite = TRUE & not(i_controlled = TRUE));
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & i_controlled = TRUE);
  ("`update_controller preconditions in this component'" & i_open_left_doors : BOOL & i_close_left_doors : BOOL & i_tl_sensor_left_open : BOOL & i_open_right_doors : BOOL & i_close_right_doors : BOOL & i_tl_sensor_right_open : BOOL & i_leader : BOOL & i_opposite : BOOL & i_manual : BOOL & i_controlled : BOOL & i_slow_speed : BOOL & i_tl_left_command : (1..3)*{COMMAND} & i_tl_right_command : (1..3)*{COMMAND} & not(i_leader = TRUE & i_opposite = TRUE) & "`Local hypotheses'" & not(i_leader = TRUE) & not(i_manual = TRUE) & not(i_tl_sensor_left_open = TRUE) & not(i_tl_sensor_right_open = TRUE) & conduction_p(i_leader,i_manual,i_controlled) = TRUE & cl : (1..3)*{COMMAND} & cl = select_command(i_slow_speed,i_close_left_doors,i_open_left_doors,Leftcommand_mem$1) & cr : (1..3)*{COMMAND} & cr = select_command(i_slow_speed,i_close_right_doors,i_open_right_doors,Rightcommand_mem$1) & not(i_opposite = TRUE) & not(i_controlled = TRUE))
END
&
THEORY EnumerateX IS
  STATE == {LEADER,NONE,OPPOSITE};
  CONDUCTION == {MANUAL,CONTROLLED,CONDUCTION_OFF};
  DOORS == {OPENED,CLOSED};
  COMMAND == {NO_COMMAND,OPEN_DOORS,CLOSE_DOORS}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
