/*************************************************************************
Copyright (c) 2008 David Deharbe, Valerio Medeiros Jr

All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * Neither the name of the Universidade Federal do Rio Grande do Norte nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*************************************************************************/
IMPLEMENTATION
   traffic_light_ass2
REFINES 
   traffic_light_data_refinement
SEES
   definitions, data_refinement

IMPORTS
   uc.Microcontroller

INVARIANT
   uc.memory_data(0) : 0..2 &
   uc.memory_data(0) = counter


INITIALISATION 
   uc.init_data(0,0)

OPERATIONS
        
advance =

BEGIN 

   uc.init(0,10);

   WHILE uc.pc < uc.end DO
    BEGIN
      CASE uc.pc OF
        EITHER 0  THEN uc.isequal(0,0)                  
            OR 1  THEN uc.goto(5)
            OR 2  THEN uc.isequal(0,1)
            OR 3  THEN uc.goto(7)
            OR 4  THEN uc.goto(9)
            OR 5  THEN uc.set_data(0,1)
            OR 6  THEN uc.goto(10)
            OR 7  THEN uc.set_data(0,2)
            OR 8  THEN uc.goto(10)
            OR 9  THEN uc.set_data(0,0)
        END
      END
    END
    INVARIANT 
      0 <= uc.pc & uc.pc <= 10 & 
      uc.memory_data(0) : 0..2 &
      ((uc.pc = 0) => (uc.memory_data(0) :  0..2 & uc.memory_data(0) = counter)) &
      ((uc.pc = 1) => uc.memory_data(0) = 0 & counter = 0) &
      ((uc.pc = 2) => uc.memory_data(0) /= 0 & uc.memory_data(0) = counter) &
      ((uc.pc = 3) => uc.memory_data(0) = 1 & counter = 1) &
      ((uc.pc = 4) => uc.memory_data(0) = 2 & uc.memory_data(0) = counter) &
      ((uc.pc = 5) => uc.memory_data(0) = 0 & counter = 0) &
      ((uc.pc = 6) => uc.memory_data(0) = 1 & counter = 0) &
      ((uc.pc = 7) => uc.memory_data(0) = 1 & counter = 1) &
      ((uc.pc = 8) => uc.memory_data(0) = 2 & counter = 1) &
      ((uc.pc = 9) => uc.memory_data(0) = 2 & counter = 2) &
      ((uc.pc = 10) => (uc.memory_data(0) :  0..2 & uc.memory_data(0) = color_step(counter)))

    VARIANT (uc.end - uc.pc)
   END
  END

 END

/* Original David 
   INVARIANT 
      0 <= uc.pc & uc.pc <= 10 &
      0 <= uc.memory_data(0) & uc.memory_data(0)<=2 &
      (uc.memory_data(0) = 0) <=> (color = red) &
      (uc.memory_data(0) = 1) <=> (color = green) &
      (uc.memory_data(0) = 2) <=> (color = yellow)
      & ((uc.pc = 1) => (uc.memory_data(0) = 0))
      & ((uc.pc = 2) => (uc.memory_data(0) /= 0))
      & ((uc.pc = 3) => (uc.memory_data(0) /= 0 & uc.memory_data(0) = 1))
      & ((uc.pc = 4) => (uc.memory_data(0) /= 0 & uc.memory_data(0) /= 1))
      & ((uc.pc = 5) => (uc.memory_data(0) = 0))
      & ((uc.pc = 6) => (uc.memory_data(0) = 1))
      & ((uc.pc = 7) => (uc.memory_data(0) /= 0 & uc.memory_data(0) = 1))
      & ((uc.pc = 8) => (uc.memory_data(0) = 2))
      & ((uc.pc = 9) => (uc.memory_data(0) /= 0 & uc.memory_data(0) /= 1))
    VARIANT (uc.end - uc.pc)
*/