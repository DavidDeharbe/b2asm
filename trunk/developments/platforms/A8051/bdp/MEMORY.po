THEORY ProofList
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & MAX_ADDR : INTEGER & 0<=MAX_ADDR & RAM_ADDR = 0..127 & SFR_ADDR = 128..MAX_ADDR & MAX_ADDR = 255 & MEM_ADDR = 0..MAX_ADDR & NB_WORD : INTEGER & 0<=NB_WORD & WORD_LEN : INTEGER & 0<=WORD_LEN & WORD_LEN = 8 & WORD_POSITION = 0..WORD_LEN-1 & NB_WORD = 2**WORD_LEN & WORD = 0..NB_WORD-1 & NB_INSTRUCTIONS = 256 & INSTRUCTION_MAX = NB_INSTRUCTIONS-1 & INSTRUCTION = 0..INSTRUCTION_MAX & INSTRUCTION_IJUMP : INSTRUCTION*INSTRUCTION +-> INSTRUCTION & dom(INSTRUCTION_IJUMP) = INSTRUCTION*INSTRUCTION & !(i,j).(i : INSTRUCTION & j : INSTRUCTION & (i+j : INTEGER & 0<=i+j) => (255<=i+j => INSTRUCTION_IJUMP(i,j) = 0) & (i+j+1<=255 => INSTRUCTION_IJUMP(i,j) = i+j+1)) & INSTRUCTION_NEXT : INSTRUCTION +-> INSTRUCTION & dom(INSTRUCTION_NEXT) = INSTRUCTION & ran(INSTRUCTION_NEXT) = INSTRUCTION & !i.(i : INSTRUCTION => (i = 255 => INSTRUCTION_NEXT(i) = 0) & (i+1<=255 => INSTRUCTION_NEXT(i) = i+1)) & WORD_TO_INT : WORD +-> INT & dom(WORD_TO_INT) = WORD & ran(WORD_TO_INT) = INT & !i.(i : WORD & (i+0 : INTEGER & 0<=i+0) & 1<=i & i<=255 & 1<=i+0 & i+0<=255 => WORD_TO_INT(i) = i+0) & BV_TO_WORD : BV8 +-> WORD & dom(BV_TO_WORD) = BV8 & WORD_TO_BV : WORD +-> BV8 & dom(WORD_TO_BV) = WORD & !(w,v).(w : WORD & v : BV8 => (v = WORD_TO_BV(w) => w = 128*v(7)+64*v(6)+32*v(5)+16*v(4)+8*v(3)+4*v(2)+2*v(1)+v(0)) & (w = 128*v(7)+64*v(6)+32*v(5)+16*v(4)+8*v(3)+4*v(2)+2*v(1)+v(0) => v = WORD_TO_BV(w))) & BV_TO_WORD = WORD_TO_BV~ & BIT_ADDRESS = WORD*WORD_POSITION & BV8_INDEX = 0..7 & BV8 = BV8_INDEX --> BIT & BV8_SET_BIT : BV8*BV8_INDEX*BIT +-> BV8 & dom(BV8_SET_BIT) = BV8*BV8_INDEX*BIT & !(v,i,j,b).(v : BV8 & i : BV8_INDEX & j : BV8_INDEX & b : BIT & not(i = j) => BV8_SET_BIT(v,i,b)(j) = v(j)) & !(v,i,b).(v : BV8 & i : BV8_INDEX & b : BIT => BV8_SET_BIT(v,i,b)(i) = b) & BV8_COMPLEMENT : BV8 +-> BV8 & dom(BV8_COMPLEMENT) = BV8 & !(v,i).(v : BV8 & i : BV8_INDEX => BV8_COMPLEMENT(v)(i) = BIT_FLIP(v(i))) & BV8_ALL_ZEROES : BV8 & !i.(i : BV8_INDEX => BV8_ALL_ZEROES(i) = 0) & BV8_AND : BV8*BV8 +-> BV8 & dom(BV8_AND) = BV8*BV8 & !(v1,v2,i).(v1 : BV8 & v2 : BV8 & i : BV8_INDEX => BV8_AND(v1,v2)(i) = BIT_AND(v1(i),v2(i))) & BV8_IOR : BV8*BV8 +-> BV8 & dom(BV8_IOR) = BV8*BV8 & !(v1,v2,i).(v1 : BV8 & v2 : BV8 & i : BV8_INDEX => BV8_IOR(v1,v2)(i) = BIT_IOR(v1(i),v2(i))) & BV8_XOR : BV8*BV8 +-> BV8 & dom(BV8_XOR) = BV8*BV8 & !(v1,v2,i).(v1 : BV8 & v2 : BV8 & i : BV8_INDEX => BV8_XOR(v1,v2)(i) = BIT_XOR(v1(i),v2(i))) & BV8_PAR : BV8 +-> BIT & dom(BV8_PAR) = BV8 & !v1.(v1 : BV8 & BIT_XOR(v1(7),v1(6)) : BIT & BIT_XOR(v1(5),v1(4)) : BIT & BIT_XOR(v1(3),v1(2)) : BIT & BIT_XOR(v1(1),v1(0)) : BIT => BV8_PAR(v1) = BIT_XOR(BIT_XOR(BIT_XOR(v1(7),v1(6)),BIT_XOR(v1(5),v1(4))),BIT_XOR(BIT_XOR(v1(3),v1(2)),BIT_XOR(v1(1),v1(0))))) & BIT = 0..1 & BIT_FLIP : BIT +-> BIT & dom(BIT_FLIP) = BIT & !b.(b : BIT => BIT_FLIP(b) = 1-b) & BIT_AND : BIT*BIT +-> BIT & dom(BIT_AND) = BIT*BIT & !(b1,b2).(b1 : BIT & b2 : BIT => (BIT_AND(b1,b2) = 1 => b1 = 1) & (b1 = 1 => BIT_AND(b1,b2) = 1) & b2 = 1) & BIT_IOR : BIT*BIT +-> BIT & dom(BIT_IOR) = BIT*BIT & !(b1,b2).(b1 : BIT & b2 : BIT => (BIT_IOR(b1,b2) = 1 => b1 = 1) & (b1 = 1 => BIT_IOR(b1,b2) = 1) or b2 = 1) & BIT_XOR : BIT*BIT +-> BIT & dom(BIT_XOR) = BIT*BIT & !(b1,b2).(b1 : BIT & b2 : BIT => (BIT_XOR(b1,b2) = 1 => b1 = 1 & b2 = 0 or (b1 = 0 & b2 = 1)) & ((b1 = 1 & b2 = 0 => BIT_XOR(b1,b2) = 1) & (b1 = 0 & b2 = 1 => BIT_XOR(b1,b2) = 1))) & "`Component properties'" & sbuf = 153 & A = 240 & ACC = 240 & BE0 : BIT_ADDRESS & BE1 : BIT_ADDRESS & BE2 : BIT_ADDRESS & BE3 : BIT_ADDRESS & BE4 : BIT_ADDRESS & BE5 : BIT_ADDRESS & BE6 : BIT_ADDRESS & BE7 : BIT_ADDRESS & BE0 = ACC|->0 & BE1 = ACC|->1 & BE2 = ACC|->2 & BE3 = ACC|->3 & BE4 = ACC|->4 & BE5 = ACC|->5 & BE6 = ACC|->6 & BE7 = ACC|->7 & R0 = 0 & R1 = 1 & R2 = 2 & R3 = 3 & R4 = 4 & R5 = 5 & R6 = 6 & R7 = 7 & P0 = 128 & P0_0 : BIT_ADDRESS & P0_1 : BIT_ADDRESS & P0_2 : BIT_ADDRESS & P0_3 : BIT_ADDRESS & P0_4 : BIT_ADDRESS & P0_5 : BIT_ADDRESS & P0_6 : BIT_ADDRESS & P0_7 : BIT_ADDRESS & B80 : BIT_ADDRESS & B81 : BIT_ADDRESS & B82 : BIT_ADDRESS & B83 : BIT_ADDRESS & B84 : BIT_ADDRESS & B85 : BIT_ADDRESS & B86 : BIT_ADDRESS & B87 : BIT_ADDRESS & P0_0 = P0|->0 & P0_1 = P0|->1 & P0_2 = P0|->2 & P0_3 = P0|->3 & P0_4 = P0|->4 & P0_5 = P0|->5 & P0_6 = P0|->6 & P0_7 = P0|->7 & B80 = P0|->0 & B81 = P0|->1 & B82 = P0|->2 & B83 = P0|->3 & B84 = P0|->4 & B85 = P0|->5 & B86 = P0|->6 & B87 = P0|->7 & P1 = 144 & P1_0 : BIT_ADDRESS & P1_1 : BIT_ADDRESS & P1_2 : BIT_ADDRESS & P1_3 : BIT_ADDRESS & P1_4 : BIT_ADDRESS & P1_5 : BIT_ADDRESS & P1_6 : BIT_ADDRESS & P1_7 : BIT_ADDRESS & B90 : BIT_ADDRESS & B91 : BIT_ADDRESS & B92 : BIT_ADDRESS & B93 : BIT_ADDRESS & B94 : BIT_ADDRESS & B95 : BIT_ADDRESS & B96 : BIT_ADDRESS & B97 : BIT_ADDRESS & P1_0 = P1|->0 & P1_1 = P1|->1 & P1_2 = P1|->2 & P1_3 = P1|->3 & P1_4 = P1|->4 & P1_5 = P1|->5 & P1_6 = P1|->6 & P1_7 = P1|->7 & B90 = P1|->0 & B91 = P1|->1 & B92 = P1|->2 & B93 = P1|->3 & B94 = P1|->4 & B95 = P1|->5 & B96 = P1|->6 & B97 = P1|->7 & P2 = 160 & P2_0 : BIT_ADDRESS & P2_1 : BIT_ADDRESS & P2_2 : BIT_ADDRESS & P2_3 : BIT_ADDRESS & P2_4 : BIT_ADDRESS & P2_5 : BIT_ADDRESS & P2_6 : BIT_ADDRESS & P2_7 : BIT_ADDRESS & BA0 : BIT_ADDRESS & BA1 : BIT_ADDRESS & BA2 : BIT_ADDRESS & BA3 : BIT_ADDRESS & BA4 : BIT_ADDRESS & BA5 : BIT_ADDRESS & BA6 : BIT_ADDRESS & BA7 : BIT_ADDRESS & P2_0 = P2|->0 & P2_1 = P2|->1 & P2_2 = P2|->2 & P2_3 = P2|->3 & P2_4 = P2|->4 & P2_5 = P2|->5 & P2_6 = P2|->6 & P2_7 = P2|->7 & BA0 = P2|->0 & BA1 = P2|->1 & BA2 = P2|->2 & BA3 = P2|->3 & BA4 = P2|->4 & BA5 = P2|->5 & BA6 = P2|->6 & BA7 = P2|->7 & P3 = 176 & P3_0 : BIT_ADDRESS & P3_1 : BIT_ADDRESS & P3_2 : BIT_ADDRESS & P3_3 : BIT_ADDRESS & P3_4 : BIT_ADDRESS & P3_5 : BIT_ADDRESS & P3_6 : BIT_ADDRESS & P3_7 : BIT_ADDRESS & BB0 : BIT_ADDRESS & BB1 : BIT_ADDRESS & BB2 : BIT_ADDRESS & BB3 : BIT_ADDRESS & BB4 : BIT_ADDRESS & BB5 : BIT_ADDRESS & BB6 : BIT_ADDRESS & BB7 : BIT_ADDRESS & P3_0 = P3|->0 & P3_1 = P3|->1 & P3_2 = P3|->2 & P3_3 = P3|->3 & P3_4 = P3|->4 & P3_5 = P3|->5 & P3_6 = P3|->6 & P3_7 = P3|->7 & BB0 = P3|->0 & BB1 = P3|->1 & BB2 = P3|->2 & BB3 = P3|->3 & BB4 = P3|->4 & BB5 = P3|->5 & BB6 = P3|->6 & BB7 = P3|->7 & scon = 152 & psw = 208 & BD0 : BIT_ADDRESS & BD1 : BIT_ADDRESS & BD2 : BIT_ADDRESS & BD3 : BIT_ADDRESS & BD4 : BIT_ADDRESS & BD5 : BIT_ADDRESS & BD6 : BIT_ADDRESS & BD7 : BIT_ADDRESS & BD0 = psw|->0 & BD1 = psw|->1 & BD2 = psw|->2 & BD3 = psw|->3 & BD4 = psw|->4 & BD5 = psw|->5 & BD6 = psw|->6 & BD7 = psw|->7 & PSW_0 : BIT_ADDRESS & PSW_1 : BIT_ADDRESS & PSW_2 : BIT_ADDRESS & PSW_3 : BIT_ADDRESS & PSW_4 : BIT_ADDRESS & PSW_5 : BIT_ADDRESS & PSW_6 : BIT_ADDRESS & PSW_7 : BIT_ADDRESS & PSW_0 = psw|->0 & PSW_1 = psw|->1 & PSW_2 = psw|->2 & PSW_3 = psw|->3 & PSW_4 = psw|->4 & PSW_5 = psw|->5 & PSW_6 = psw|->6 & PSW_7 = psw|->7 & P : BIT_ADDRESS & OV : BIT_ADDRESS & RS0 : BIT_ADDRESS & RS1 : BIT_ADDRESS & F0 : BIT_ADDRESS & AC : BIT_ADDRESS & CY : BIT_ADDRESS & P = psw|->0 & OV = psw|->2 & RS0 = psw|->3 & RS1 = psw|->4 & F0 = psw|->5 & AC = psw|->6 & CY = psw|->7);
  ("`Seen and used machines assertions'" & NB_WORD = 256 & !n.(n : WORD => 0<=n & n<=255) & INSTRUCTION_IJUMP(5,1) = 7 & INSTRUCTION_IJUMP(0,2) = 3 & INSTRUCTION_IJUMP(2,4) = 7 & INSTRUCTION_IJUMP(3,2) = 6 & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_IJUMP(3,3) = 7 & MEM_ADDR : POW(WORD) & RAM_ADDR : POW(WORD) & SFR_ADDR : POW(WORD) & MEM_ADDR = RAM_ADDR\/SFR_ADDR & BIT_FLIP(0) = 1 & BIT_FLIP(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1 & BIT_IOR(0,0) = 0 & BIT_IOR(0,1) = 0 & BIT_IOR(1,0) = 0 & BIT_IOR(1,1) = 1 & BIT_XOR(0,0) = 0 & BIT_XOR(0,1) = 1 & BIT_XOR(1,0) = 1 & BIT_XOR(1,1) = 0)
END
&
THEORY EnumerateX 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
