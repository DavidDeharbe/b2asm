THEORY BalanceX IS
  Z80_LogAri,108,38,0,48,22,0,0;
  InstanciatedConstraintsLemmas,0,0,0,0,0,0,0;
  AssertionLemmas,62,17,0,43,2,0,0;
  Initialisation,6,1,0,5,0,0,0;
  ADD_A_r,2,1,0,0,1,0,0;
  ADD_A_n,2,1,0,0,1,0,0;
  ADD_A_9HL0,2,1,0,0,1,0,0;
  ADD_A_9IX_d0,2,1,0,0,1,0,0;
  ADD_A_9IY_d0,2,1,0,0,1,0,0;
  ADC_A_r,2,1,0,0,1,0,0;
  ADC_A_n,2,1,0,0,1,0,0;
  ADC_A_9HL0,2,1,0,0,1,0,0;
  ADC_A_9IX_d0,2,1,0,0,1,0,0;
  ADC_A_9IY_d0,2,1,0,0,1,0,0;
  SUB_A_r,2,1,0,0,1,0,0;
  SUB_A_n,2,1,0,0,1,0,0;
  SUB_A_9HL0,2,1,0,0,1,0,0;
  SUB_A_9IX_d0,2,1,0,0,1,0,0;
  SUB_A_9IY_d0,2,1,0,0,1,0,0;
  SBC_A_r,2,1,0,0,1,0,0;
  SBC_A_n,2,1,0,0,1,0,0;
  SBC_A_9HL0,2,1,0,0,1,0,0;
  SBC_A_9IX_d0,2,1,0,0,1,0,0;
  SBC_A_9IY_d0,2,1,0,0,1,0,0
END
&
THEORY ProofState IS
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0)
END
&
THEORY MethodList IS
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,1,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,1,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,1,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,1,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,1,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,1,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,1,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,1,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,1,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,1,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,0,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,0,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,0,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(m,uchar_byte(b),f0,[j,i,h,1,g,1,f,d],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & pr & ah(ran(uchar_byte) = BYTE) & ss & pr & ss & pr & pr & pr & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,0,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,0,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,0,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,0,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr,yy|->yyr}) = id_reg_8 & dom(rgs8<+{xx|->xxr,yy|->yyr}) = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(a0,uchar_byte(sum),f0,[carry,0,carry,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr,yy|->yyr}) = id_reg_8 & dom(rgs8<+{xx|->xxr,yy|->yyr}) = id_reg_8))) & ss & pr & ah(ran(uchar_byte) = BYTE) & pp(rt.0) & ss & pr & ar(BIT_VECTOR.1,Once) & pr & pr & pr & pr & ss & pr & pr & pr & pr & pr;
  pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(m,b,f0,[j,i,h,1,g,1,f,d],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & pr & pr & ss & pr & pr & pr & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  eh(update_flag_reg,_h,Goal) & dd & ss & ar(BIT_VECTOR.1,Once) & pr & pr & pr & pr & pr & pr & pr & pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
  pp(rt.0);
  dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
  pp(rt.0);
  dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
  pp(rt.0);
  dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
  dd & pr(Tac(Update_flag));
  dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
  dd & pr(Tac(Update_flag));
  dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
  dd & pr(Tac(Update_flag));
  dd & ss & eh(dom(rgs8),_h,Goal) & pr;
  dd & pr(Tac(Update_flag));
  dd & ss & eh(dom(rgs8),_h,Goal) & pr;
  dd & pr(Tac(Update_flag));
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & eh(id_reg_8,_h,Goal) & pr;
  pr
END
&
THEORY PassList IS
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(1),(?;0);
  Force(1),?;
  Force(0),(?;0);
  Force(1),?;
  Force(0),(?;0);
  Force(1),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),(?;0);
  Force(0),?;
  Force(0),?;
  Force(1),(?;0);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?
END
&
THEORY ManForms 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO,genDivergencePO == KO,local_op == OK);
  PRVersion("V3.3.3.p39")(CLT == "V3.7.6")
END
