
THEORY ProofList IS
_f(5) & _f(4) & Properties.21,(_f(52) => _f(53));
_f(5) & _f(4) & Properties.20,(_f(50) => _f(51));
_f(5) & _f(4) & Properties.19,(_f(48) => _f(49));
_f(5) & _f(4) & Properties.18,(_f(46) => _f(47));
_f(5) & _f(4) & Properties.17,(_f(44) => _f(45));
_f(5) & _f(4) & Properties.16,(_f(42) => _f(43));
_f(5) & _f(4) & Properties.15,(_f(40) => _f(41));
_f(5) & _f(4) & Properties.14,(_f(38) => _f(39));
_f(5) & _f(4) & Properties.13,(_f(36) => _f(37));
_f(5) & _f(4) & Properties.12,(_f(34) => _f(35));
_f(5) & _f(4) & Properties.11,(_f(32) => _f(33));
_f(5) & _f(4) & Properties.10,(_f(30) => _f(31));
_f(5) & _f(4) & Properties.9,(_f(28) => _f(29));
_f(5) & _f(4) & Properties.8,(_f(26) => _f(27));
_f(5) & _f(4) & Properties.7,(_f(24) => _f(25));
_f(5) & _f(4) & Properties.6,(_f(22) => _f(23));
_f(5) & _f(4) & Properties.5,(_f(20) => _f(21));
_f(5) & _f(4) & Properties.4,(_f(18) => _f(19));
_f(5) & _f(4) & Properties.3,(_f(16) => _f(17));
_f(5) & _f(4) & Properties.2,(_f(14) => _f(15));
_f(5) & _f(4) & Properties.1,(_f(12) => _f(13))

END
&

THEORY Formulas IS
("`Component constraints'" & btrue);
("`Used machines constraints'" & btrue);
("`Component properties'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1 | BV_TO_BYTE(bv_set(byte,ind))) & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 0 | BV_TO_BYTE(bv_clear(byte,ind))) & BYTE_COMPLEMENT: BYTE +-> BYTE & dom(BYTE_COMPLEMENT) = BYTE & BYTE_COMPLEMENT = %byte.(byte: BYTE | BV_TO_BYTE(bv_not(byte))) & BYTE_AND: BYTE*BYTE +-> BYTE & dom(BYTE_AND) = BYTE*BYTE & BYTE_AND = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_and(byte1,byte2))) & BYTE_OR: BYTE*BYTE +-> BYTE & dom(BYTE_OR) = BYTE*BYTE & BYTE_OR = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_or(byte1,byte2))) & BYTE_XOR: BYTE*BYTE +-> BYTE & dom(BYTE_XOR) = BYTE*BYTE & BYTE_XOR = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_xor(byte1,byte2))) & BYTE_PAR: BYTE +-> BIT & dom(BYTE_PAR) = BYTE & !byte.(byte: BYTE & size(byte|>{1}): INTEGER & 0<=size(byte|>{1}) & (size(byte|>{1}) mod 2 = 0 => BYTE_PAR(byte) = 0 & not(size(byte|>{1}) mod 2 = 0)) => BYTE_PAR(byte) = 1) & BYTE_ZERO: BYTE & BYTE_ZERO = BYTE_INDEX*{0});
("`Seen and used machines properties'" & BIT_VECTOR = seq(BIT)-{{}} & bv_catenate: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_catenate) = BIT_VECTOR*BIT_VECTOR & bv_catenate = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR | v2^v1) & bv_sub: BIT_VECTOR*NATURAL*NATURAL +-> BIT_VECTOR & dom(bv_sub) = BIT_VECTOR*NATURAL*NATURAL & bv_sub = %(bv,low,high).(bv: BIT_VECTOR & low: INTEGER & 0<=low & high: INTEGER & 0<=high & low<=high | 0..high-low<|bv) & bv_zero: NATURAL-{0} +-> BIT_VECTOR & dom(bv_zero) = NATURAL-{0} & bv_zero = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{0}) & bv_one: NATURAL-{0} +-> BIT_VECTOR & dom(bv_one) = NATURAL-{0} & bv_one = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{1}) & bv_not: BIT_VECTOR +-> BIT_VECTOR & dom(bv_not) = BIT_VECTOR & bv_not = %v1.(v1: BIT_VECTOR | %idx.(idx: 1..size(v1) | bit_not(v1(idx)))) & bv_and: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_and) = BIT_VECTOR*BIT_VECTOR & bv_and = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & size(v1) = size(v2) | %idx.(idx: 1..size(v1) | bit_and(v1(idx),v2(idx)))) & bv_or: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_or) = BIT_VECTOR*BIT_VECTOR & bv_or = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & size(v1) = size(v2) | %idx.(idx: 1..size(v1) | bit_or(v1(idx),v2(idx)))) & bv_xor: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_xor) = BIT_VECTOR*BIT_VECTOR & bv_xor = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & size(v1) = size(v2) | %idx.(idx: 1..size(v1) | bit_xor(v1(idx),v2(idx)))) & bv_at: BIT_VECTOR*NATURAL +-> BIT & dom(bv_at) = BIT_VECTOR*NATURAL & bv_at = %(v1,idx).(v1: BIT_VECTOR & idx: INTEGER & 0<=idx & idx+1<=size(v1) | v1(idx+1)) & bv_set: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_set) = BIT_VECTOR*NATURAL & bv_set = %(v1,idx).(v1: BIT_VECTOR & idx: INTEGER & 0<=idx & idx+1<=size(v1) | v1<+{idx+1|->1}) & bv_clear: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_clear) = BIT_VECTOR*NATURAL & bv_clear = %(v1,idx).(v1: BIT_VECTOR & idx: INTEGER & 0<=idx & idx+1<=size(v1) | v1<+{idx+1|->0}) & BIT = 0..1 & bit_not: BIT +-> BIT & dom(bit_not) = BIT & !bb.(bb: BIT => bit_not(bb) = 1-bb) & bit_and: BIT*BIT +-> BIT & dom(bit_and) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_and(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_and(b1,b2) = 1) & b2 = 1) & bit_or: BIT*BIT +-> BIT & dom(bit_or) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_or(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_or(b1,b2) = 1) or b2 = 1) & bit_xor: BIT*BIT +-> BIT & dom(bit_xor) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_xor(b1,b2) = 1 => not(b1 = b2)) & (not(b1 = b2) => bit_xor(b1,b2) = 1)) & bool_to_bit: BOOL +-> BIT & dom(bool_to_bit) = BOOL & bool_to_bit = {TRUE|->1}\/{FALSE|->0} & bit_to_bool: BIT +-> BOOL & dom(bit_to_bool) = BIT & bit_to_bool = bool_to_bit~);
("`Included,imported and extended machines properties'" & btrue);
("`Component invariant'" & btrue);
("`Seen and used machines invariants'" & btrue);
("`Included,imported and extended machines invariants'" & btrue);
("`Component assertions'" & BYTE_INDEX: POW(NATURAL));
("`Seen and used machines assertions'" & !bv.(bv: BIT_VECTOR => ran(bv): POW(BIT)) & !bv.(bv: BIT_VECTOR => bv: seq(BIT)) & !bv.(bv: BIT_VECTOR => size(bv_not(bv)) = size(bv)) & !bv.(bv: BIT_VECTOR => bv_not(bv_not(bv)) = bv) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR => size(bv_catenate(v1,v2)) = size(v1)+size(v2)) & !(bv,low,high).(bv: BIT_VECTOR & low: INTEGER & 0<=low & high: INTEGER & 0<=high & low<=high => size(bv_sub(bv,low,high)) = 1+high-low) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & size(v1) = size(v2) => size(bv_and(v1,v2)) = size(v2)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & size(v1) = size(v2) => bv_and(v1,v2) = bv_and(v2,v1)) & !(v1,v2,v3).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & size(v1) = size(v2) & size(v1) = size(v3) => bv_and(v1,bv_and(v2,v3)) = bv_and(bv_and(v1,v2),v3)) & !bv.(bv: BIT_VECTOR => bv_and(bv,bv_zero(size(bv))) = bv_zero(size(bv))) & !bv.(bv: BIT_VECTOR => bv_and(bv,bv_one(size(bv))) = bv) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & size(v1) = size(v2) => size(bv_or(v1,v2)) = size(v1)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & size(v1) = size(v2) => size(bv_or(v1,v2)) = size(v2)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & size(v1) = size(v2) => bv_or(v1,v2) = bv_or(v2,v1)) & !(v1,v2,v3).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & size(v1) = size(v2) & size(v1) = size(v3) => bv_or(v1,bv_or(v2,v3)) = bv_or(bv_or(v1,v2),v3)) & !bv.(bv: BIT_VECTOR => bv_or(bv,bv_one(size(bv))) = bv_one(size(bv))) & !bv.(bv: BIT_VECTOR => bv_or(bv,bv_zero(size(bv))) = bv) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & size(v1) = size(v2) => size(bv_xor(v1,v2)) = size(v1)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & size(v1) = size(v2) => size(bv_xor(v1,v2)) = size(v2)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & size(v1) = size(v2) => bv_xor(v1,v2) = bv_xor(v2,v1)) & !bv.(bv: BIT_VECTOR => bv_xor(bv,bv) = bv_zero(size(bv))) & bit_not(0) = 1 & bit_not(1) = 0 & !bb.(bb: BIT => bit_not(bit_not(bb)) = bb) & bit_and(0,0) = 0 & bit_and(0,1) = 0 & bit_and(1,0) = 0 & bit_and(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3)) & !b1.(b1: BIT => bit_and(b1,1) = b1) & !b1.(b1: BIT => bit_and(b1,0) = 0) & bit_or(0,0) = 0 & bit_or(0,1) = 1 & bit_or(1,0) = 1 & bit_or(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3)) & !b1.(b1: BIT => bit_or(b1,1) = 1) & !b1.(b1: BIT => bit_or(b1,0) = b1) & bit_xor(0,0) = 0 & bit_xor(0,1) = 1 & bit_xor(1,0) = 1 & bit_xor(1,1) = 0 & !(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3)) & !bb.(bb: BIT => bit_xor(bb,bb) = 0) & bool_to_bit(TRUE) = 1 & bool_to_bit(FALSE) = 0 & bit_to_bool(1) = TRUE & bit_to_bool(0) = FALSE);
("`Included,imported and extended machines assertions'" & btrue);
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & bv: BIT_VECTOR);
(bv: seq(ran(bv)));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX);
(ind: dom(BV_TO_BYTE(bv)));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX);
(BV_TO_BYTE(bv): dom(BV_TO_BYTE(bv)) +-> ran(BV_TO_BYTE(bv)));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX);
(ind: dom(bv));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX);
(bv: dom(bv) +-> ran(bv));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1);
(byte,ind: dom(bv_set));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1);
(bv_set(byte,ind): dom(BV_TO_BYTE));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1 | BV_TO_BYTE(bv_set(byte,ind))) & byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 0);
(byte,ind: dom(bv_clear));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1 | BV_TO_BYTE(bv_set(byte,ind))) & byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 0);
(bv_clear(byte,ind): dom(BV_TO_BYTE));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1 | BV_TO_BYTE(bv_set(byte,ind))) & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 0 | BV_TO_BYTE(bv_clear(byte,ind))) & BYTE_COMPLEMENT: BYTE +-> BYTE & dom(BYTE_COMPLEMENT) = BYTE & byte: BYTE);
(byte: dom(bv_not));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1 | BV_TO_BYTE(bv_set(byte,ind))) & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 0 | BV_TO_BYTE(bv_clear(byte,ind))) & BYTE_COMPLEMENT: BYTE +-> BYTE & dom(BYTE_COMPLEMENT) = BYTE & byte: BYTE);
(bv_not(byte): dom(BV_TO_BYTE));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1 | BV_TO_BYTE(bv_set(byte,ind))) & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 0 | BV_TO_BYTE(bv_clear(byte,ind))) & BYTE_COMPLEMENT: BYTE +-> BYTE & dom(BYTE_COMPLEMENT) = BYTE & BYTE_COMPLEMENT = %byte.(byte: BYTE | BV_TO_BYTE(bv_not(byte))) & BYTE_AND: BYTE*BYTE +-> BYTE & dom(BYTE_AND) = BYTE*BYTE & byte1: BYTE & byte2: BYTE);
(byte1,byte2: dom(bv_and));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1 | BV_TO_BYTE(bv_set(byte,ind))) & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 0 | BV_TO_BYTE(bv_clear(byte,ind))) & BYTE_COMPLEMENT: BYTE +-> BYTE & dom(BYTE_COMPLEMENT) = BYTE & BYTE_COMPLEMENT = %byte.(byte: BYTE | BV_TO_BYTE(bv_not(byte))) & BYTE_AND: BYTE*BYTE +-> BYTE & dom(BYTE_AND) = BYTE*BYTE & byte1: BYTE & byte2: BYTE);
(bv_and(byte1,byte2): dom(BV_TO_BYTE));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1 | BV_TO_BYTE(bv_set(byte,ind))) & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 0 | BV_TO_BYTE(bv_clear(byte,ind))) & BYTE_COMPLEMENT: BYTE +-> BYTE & dom(BYTE_COMPLEMENT) = BYTE & BYTE_COMPLEMENT = %byte.(byte: BYTE | BV_TO_BYTE(bv_not(byte))) & BYTE_AND: BYTE*BYTE +-> BYTE & dom(BYTE_AND) = BYTE*BYTE & BYTE_AND = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_and(byte1,byte2))) & BYTE_OR: BYTE*BYTE +-> BYTE & dom(BYTE_OR) = BYTE*BYTE & byte1: BYTE & byte2: BYTE);
(byte1,byte2: dom(bv_or));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1 | BV_TO_BYTE(bv_set(byte,ind))) & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 0 | BV_TO_BYTE(bv_clear(byte,ind))) & BYTE_COMPLEMENT: BYTE +-> BYTE & dom(BYTE_COMPLEMENT) = BYTE & BYTE_COMPLEMENT = %byte.(byte: BYTE | BV_TO_BYTE(bv_not(byte))) & BYTE_AND: BYTE*BYTE +-> BYTE & dom(BYTE_AND) = BYTE*BYTE & BYTE_AND = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_and(byte1,byte2))) & BYTE_OR: BYTE*BYTE +-> BYTE & dom(BYTE_OR) = BYTE*BYTE & byte1: BYTE & byte2: BYTE);
(bv_or(byte1,byte2): dom(BV_TO_BYTE));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1 | BV_TO_BYTE(bv_set(byte,ind))) & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 0 | BV_TO_BYTE(bv_clear(byte,ind))) & BYTE_COMPLEMENT: BYTE +-> BYTE & dom(BYTE_COMPLEMENT) = BYTE & BYTE_COMPLEMENT = %byte.(byte: BYTE | BV_TO_BYTE(bv_not(byte))) & BYTE_AND: BYTE*BYTE +-> BYTE & dom(BYTE_AND) = BYTE*BYTE & BYTE_AND = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_and(byte1,byte2))) & BYTE_OR: BYTE*BYTE +-> BYTE & dom(BYTE_OR) = BYTE*BYTE & BYTE_OR = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_or(byte1,byte2))) & BYTE_XOR: BYTE*BYTE +-> BYTE & dom(BYTE_XOR) = BYTE*BYTE & byte1: BYTE & byte2: BYTE);
(byte1,byte2: dom(bv_xor));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1 | BV_TO_BYTE(bv_set(byte,ind))) & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 0 | BV_TO_BYTE(bv_clear(byte,ind))) & BYTE_COMPLEMENT: BYTE +-> BYTE & dom(BYTE_COMPLEMENT) = BYTE & BYTE_COMPLEMENT = %byte.(byte: BYTE | BV_TO_BYTE(bv_not(byte))) & BYTE_AND: BYTE*BYTE +-> BYTE & dom(BYTE_AND) = BYTE*BYTE & BYTE_AND = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_and(byte1,byte2))) & BYTE_OR: BYTE*BYTE +-> BYTE & dom(BYTE_OR) = BYTE*BYTE & BYTE_OR = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_or(byte1,byte2))) & BYTE_XOR: BYTE*BYTE +-> BYTE & dom(BYTE_XOR) = BYTE*BYTE & byte1: BYTE & byte2: BYTE);
(bv_xor(byte1,byte2): dom(BV_TO_BYTE));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1 | BV_TO_BYTE(bv_set(byte,ind))) & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 0 | BV_TO_BYTE(bv_clear(byte,ind))) & BYTE_COMPLEMENT: BYTE +-> BYTE & dom(BYTE_COMPLEMENT) = BYTE & BYTE_COMPLEMENT = %byte.(byte: BYTE | BV_TO_BYTE(bv_not(byte))) & BYTE_AND: BYTE*BYTE +-> BYTE & dom(BYTE_AND) = BYTE*BYTE & BYTE_AND = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_and(byte1,byte2))) & BYTE_OR: BYTE*BYTE +-> BYTE & dom(BYTE_OR) = BYTE*BYTE & BYTE_OR = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_or(byte1,byte2))) & BYTE_XOR: BYTE*BYTE +-> BYTE & dom(BYTE_XOR) = BYTE*BYTE & BYTE_XOR = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_xor(byte1,byte2))) & BYTE_PAR: BYTE +-> BIT & dom(BYTE_PAR) = BYTE & byte: BYTE);
(byte|>{1}: seq(ran(byte|>{1})));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1 | BV_TO_BYTE(bv_set(byte,ind))) & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 0 | BV_TO_BYTE(bv_clear(byte,ind))) & BYTE_COMPLEMENT: BYTE +-> BYTE & dom(BYTE_COMPLEMENT) = BYTE & BYTE_COMPLEMENT = %byte.(byte: BYTE | BV_TO_BYTE(bv_not(byte))) & BYTE_AND: BYTE*BYTE +-> BYTE & dom(BYTE_AND) = BYTE*BYTE & BYTE_AND = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_and(byte1,byte2))) & BYTE_OR: BYTE*BYTE +-> BYTE & dom(BYTE_OR) = BYTE*BYTE & BYTE_OR = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_or(byte1,byte2))) & BYTE_XOR: BYTE*BYTE +-> BYTE & dom(BYTE_XOR) = BYTE*BYTE & BYTE_XOR = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_xor(byte1,byte2))) & BYTE_PAR: BYTE +-> BIT & dom(BYTE_PAR) = BYTE & byte: BYTE & size(byte|>{1}): INTEGER);
(byte|>{1}: seq(ran(byte|>{1})));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1 | BV_TO_BYTE(bv_set(byte,ind))) & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 0 | BV_TO_BYTE(bv_clear(byte,ind))) & BYTE_COMPLEMENT: BYTE +-> BYTE & dom(BYTE_COMPLEMENT) = BYTE & BYTE_COMPLEMENT = %byte.(byte: BYTE | BV_TO_BYTE(bv_not(byte))) & BYTE_AND: BYTE*BYTE +-> BYTE & dom(BYTE_AND) = BYTE*BYTE & BYTE_AND = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_and(byte1,byte2))) & BYTE_OR: BYTE*BYTE +-> BYTE & dom(BYTE_OR) = BYTE*BYTE & BYTE_OR = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_or(byte1,byte2))) & BYTE_XOR: BYTE*BYTE +-> BYTE & dom(BYTE_XOR) = BYTE*BYTE & BYTE_XOR = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_xor(byte1,byte2))) & BYTE_PAR: BYTE +-> BIT & dom(BYTE_PAR) = BYTE & byte: BYTE & size(byte|>{1}): INTEGER & 0<=size(byte|>{1}));
(byte|>{1}: seq(ran(byte|>{1})));
("`Local hypotheses'" & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(bv).(bv: BIT_VECTOR & size(bv) = BYTE_WIDTH) & BV_TO_BYTE: BIT_VECTOR +-> BYTE & dom(BV_TO_BYTE) = BIT_VECTOR & !(bv,byte,ind).(bv: BIT_VECTOR & byte: BYTE & ind: BYTE_INDEX => BV_TO_BYTE(bv)(ind) = bv(ind)) & BYTE_SET_BIT: BYTE*BYTE_INDEX*BIT +-> BYTE & dom(BYTE_SET_BIT) = BYTE*BYTE_INDEX*BIT & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 1 | BV_TO_BYTE(bv_set(byte,ind))) & BYTE_SET_BIT = %(byte,ind,bit).(byte: BYTE & ind: BYTE_INDEX & bit: BIT & bit = 0 | BV_TO_BYTE(bv_clear(byte,ind))) & BYTE_COMPLEMENT: BYTE +-> BYTE & dom(BYTE_COMPLEMENT) = BYTE & BYTE_COMPLEMENT = %byte.(byte: BYTE | BV_TO_BYTE(bv_not(byte))) & BYTE_AND: BYTE*BYTE +-> BYTE & dom(BYTE_AND) = BYTE*BYTE & BYTE_AND = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_and(byte1,byte2))) & BYTE_OR: BYTE*BYTE +-> BYTE & dom(BYTE_OR) = BYTE*BYTE & BYTE_OR = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_or(byte1,byte2))) & BYTE_XOR: BYTE*BYTE +-> BYTE & dom(BYTE_XOR) = BYTE*BYTE & BYTE_XOR = %(byte1,byte2).(byte1: BYTE & byte2: BYTE | BV_TO_BYTE(bv_xor(byte1,byte2))) & BYTE_PAR: BYTE +-> BIT & dom(BYTE_PAR) = BYTE & byte: BYTE & size(byte|>{1}): INTEGER & 0<=size(byte|>{1}) & size(byte|>{1}) mod 2 = 0 & BYTE_PAR(byte) = 0);
(byte|>{1}: seq(ran(byte|>{1})))

END
&

THEORY EnumerateX 

END
