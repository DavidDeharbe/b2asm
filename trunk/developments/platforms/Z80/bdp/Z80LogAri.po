THEORY ProofList IS
  _f(1) & _f(2) & _f(10) & _f(70) & DEC_9IY_d0.4,(_f(157) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & DEC_9IY_d0.3,(_f(157) & _f(73) => _f(169));
  _f(1) & _f(2) & _f(10) & _f(70) & DEC_9IY_d0.2,(_f(157) & _f(73) => _f(168));
  _f(1) & _f(2) & _f(10) & _f(70) & DEC_9IY_d0.1,(_f(155) & _f(145) => _f(156));
  _f(1) & _f(2) & _f(10) & _f(70) & DEC_9IX_d0.4,(_f(152) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & DEC_9IX_d0.3,(_f(152) & _f(73) => _f(167));
  _f(1) & _f(2) & _f(10) & _f(70) & DEC_9IX_d0.2,(_f(152) & _f(73) => _f(166));
  _f(1) & _f(2) & _f(10) & _f(70) & DEC_9IX_d0.1,(_f(150) & _f(145) => _f(151));
  _f(1) & _f(2) & _f(10) & _f(70) & DEC_9HL0.4,(_f(147) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & DEC_9HL0.3,(_f(147) & _f(73) => _f(165));
  _f(1) & _f(2) & _f(10) & _f(70) & DEC_9HL0.2,(_f(147) & _f(73) => _f(164));
  _f(1) & _f(2) & _f(10) & _f(70) & DEC_9HL0.1,(_f(144) & _f(145) => _f(146));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(160) & DEC_r.3,(_f(161) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(160) & DEC_r.2,(_f(161) & _f(73) => _f(163));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(160) & DEC_r.1,(_f(161) & _f(73) => _f(162));
  _f(1) & _f(2) & _f(10) & _f(70) & INC_9IY_d0.4,(_f(157) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & INC_9IY_d0.3,(_f(157) & _f(73) => _f(159));
  _f(1) & _f(2) & _f(10) & _f(70) & INC_9IY_d0.2,(_f(157) & _f(73) => _f(158));
  _f(1) & _f(2) & _f(10) & _f(70) & INC_9IY_d0.1,(_f(155) & _f(145) => _f(156));
  _f(1) & _f(2) & _f(10) & _f(70) & INC_9IX_d0.4,(_f(152) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & INC_9IX_d0.3,(_f(152) & _f(73) => _f(154));
  _f(1) & _f(2) & _f(10) & _f(70) & INC_9IX_d0.2,(_f(152) & _f(73) => _f(153));
  _f(1) & _f(2) & _f(10) & _f(70) & INC_9IX_d0.1,(_f(150) & _f(145) => _f(151));
  _f(1) & _f(2) & _f(10) & _f(70) & INC_9HL0.4,(_f(147) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & INC_9HL0.3,(_f(147) & _f(73) => _f(149));
  _f(1) & _f(2) & _f(10) & _f(70) & INC_9HL0.2,(_f(147) & _f(73) => _f(148));
  _f(1) & _f(2) & _f(10) & _f(70) & INC_9HL0.1,(_f(144) & _f(145) => _f(146));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(140) & INC_r.3,(_f(141) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(140) & INC_r.2,(_f(141) & _f(73) => _f(143));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(140) & INC_r.1,(_f(141) & _f(73) => _f(142));
  _f(1) & _f(2) & _f(10) & _f(70) & CP_A_9IY_d0.3,(_f(139) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & CP_A_9IY_d0.2,(_f(139) & _f(73) => _f(134));
  _f(1) & _f(2) & _f(10) & _f(70) & CP_A_9IY_d0.1,(_f(139) & _f(73) => _f(133));
  _f(1) & _f(2) & _f(10) & _f(70) & CP_A_9IX_d0.3,(_f(138) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & CP_A_9IX_d0.2,(_f(138) & _f(73) => _f(134));
  _f(1) & _f(2) & _f(10) & _f(70) & CP_A_9IX_d0.1,(_f(138) & _f(73) => _f(133));
  _f(1) & _f(2) & _f(10) & _f(70) & CP_A_9HL0.3,(_f(137) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & CP_A_9HL0.2,(_f(137) & _f(73) => _f(134));
  _f(1) & _f(2) & _f(10) & _f(70) & CP_A_9HL0.1,(_f(137) & _f(73) => _f(133));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(135) & CP_A_n.3,(_f(136) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(135) & CP_A_n.2,(_f(136) & _f(73) => _f(134));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(135) & CP_A_n.1,(_f(136) & _f(73) => _f(133));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(131) & CP_A_r.3,(_f(132) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(131) & CP_A_r.2,(_f(132) & _f(73) => _f(134));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(131) & CP_A_r.1,(_f(132) & _f(73) => _f(133));
  _f(1) & _f(2) & _f(10) & _f(70) & XOR_A_9IY_d0.3,(_f(130) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & XOR_A_9IY_d0.2,(_f(130) & _f(73) => _f(114));
  _f(1) & _f(2) & _f(10) & _f(70) & XOR_A_9IY_d0.1,(_f(130) & _f(73) => _f(113));
  _f(1) & _f(2) & _f(10) & _f(70) & XOR_A_9IX_d0.3,(_f(129) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & XOR_A_9IX_d0.2,(_f(129) & _f(73) => _f(114));
  _f(1) & _f(2) & _f(10) & _f(70) & XOR_A_9IX_d0.1,(_f(129) & _f(73) => _f(113));
  _f(1) & _f(2) & _f(10) & _f(70) & XOR_A_9HL0.3,(_f(128) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & XOR_A_9HL0.2,(_f(128) & _f(73) => _f(114));
  _f(1) & _f(2) & _f(10) & _f(70) & XOR_A_9HL0.1,(_f(128) & _f(73) => _f(113));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(126) & XOR_A_n.3,(_f(127) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(126) & XOR_A_n.2,(_f(127) & _f(73) => _f(109));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(126) & XOR_A_n.1,(_f(127) & _f(73) => _f(108));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(124) & XOR_A_r.3,(_f(125) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(124) & XOR_A_r.2,(_f(125) & _f(73) => _f(109));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(124) & XOR_A_r.1,(_f(125) & _f(73) => _f(108));
  _f(1) & _f(2) & _f(10) & _f(70) & OR_A_9IY_d0.3,(_f(123) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & OR_A_9IY_d0.2,(_f(123) & _f(73) => _f(114));
  _f(1) & _f(2) & _f(10) & _f(70) & OR_A_9IY_d0.1,(_f(123) & _f(73) => _f(113));
  _f(1) & _f(2) & _f(10) & _f(70) & OR_A_9IX_d0.3,(_f(122) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & OR_A_9IX_d0.2,(_f(122) & _f(73) => _f(114));
  _f(1) & _f(2) & _f(10) & _f(70) & OR_A_9IX_d0.1,(_f(122) & _f(73) => _f(113));
  _f(1) & _f(2) & _f(10) & _f(70) & OR_A_9HL0.3,(_f(121) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & OR_A_9HL0.2,(_f(121) & _f(73) => _f(114));
  _f(1) & _f(2) & _f(10) & _f(70) & OR_A_9HL0.1,(_f(121) & _f(73) => _f(113));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(119) & OR_A_n.3,(_f(120) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(119) & OR_A_n.2,(_f(120) & _f(73) => _f(109));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(119) & OR_A_n.1,(_f(120) & _f(73) => _f(108));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(117) & OR_A_r.3,(_f(118) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(117) & OR_A_r.2,(_f(118) & _f(73) => _f(109));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(117) & OR_A_r.1,(_f(118) & _f(73) => _f(108));
  _f(1) & _f(2) & _f(10) & _f(70) & AND_A_9IY_d0.3,(_f(116) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & AND_A_9IY_d0.2,(_f(116) & _f(73) => _f(114));
  _f(1) & _f(2) & _f(10) & _f(70) & AND_A_9IY_d0.1,(_f(116) & _f(73) => _f(113));
  _f(1) & _f(2) & _f(10) & _f(70) & AND_A_9IX_d0.3,(_f(115) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & AND_A_9IX_d0.2,(_f(115) & _f(73) => _f(114));
  _f(1) & _f(2) & _f(10) & _f(70) & AND_A_9IX_d0.1,(_f(115) & _f(73) => _f(113));
  _f(1) & _f(2) & _f(10) & _f(70) & AND_A_9HL0.3,(_f(112) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & AND_A_9HL0.2,(_f(112) & _f(73) => _f(114));
  _f(1) & _f(2) & _f(10) & _f(70) & AND_A_9HL0.1,(_f(112) & _f(73) => _f(113));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(110) & AND_A_n.3,(_f(111) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(110) & AND_A_n.2,(_f(111) & _f(73) => _f(109));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(110) & AND_A_n.1,(_f(111) & _f(73) => _f(108));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(106) & AND_A_r.3,(_f(107) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(106) & AND_A_r.2,(_f(107) & _f(73) => _f(109));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(106) & AND_A_r.1,(_f(107) & _f(73) => _f(108));
  _f(1) & _f(2) & _f(10) & _f(70) & SBC_A_9IY_d0.3,(_f(105) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & SBC_A_9IY_d0.2,(_f(105) & _f(73) => _f(93));
  _f(1) & _f(2) & _f(10) & _f(70) & SBC_A_9IY_d0.1,(_f(105) & _f(73) => _f(92));
  _f(1) & _f(2) & _f(10) & _f(70) & SBC_A_9IX_d0.3,(_f(104) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & SBC_A_9IX_d0.2,(_f(104) & _f(73) => _f(93));
  _f(1) & _f(2) & _f(10) & _f(70) & SBC_A_9IX_d0.1,(_f(104) & _f(73) => _f(92));
  _f(1) & _f(2) & _f(10) & _f(70) & SBC_A_9HL0.3,(_f(103) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & SBC_A_9HL0.2,(_f(103) & _f(73) => _f(93));
  _f(1) & _f(2) & _f(10) & _f(70) & SBC_A_9HL0.1,(_f(103) & _f(73) => _f(92));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(101) & SBC_A_n.3,(_f(102) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(101) & SBC_A_n.2,(_f(102) & _f(73) => _f(93));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(101) & SBC_A_n.1,(_f(102) & _f(73) => _f(92));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(99) & SBC_A_r.3,(_f(100) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(99) & SBC_A_r.2,(_f(100) & _f(73) => _f(93));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(99) & SBC_A_r.1,(_f(100) & _f(73) => _f(92));
  _f(1) & _f(2) & _f(10) & _f(70) & SUB_A_9IY_d0.3,(_f(98) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & SUB_A_9IY_d0.2,(_f(98) & _f(73) => _f(93));
  _f(1) & _f(2) & _f(10) & _f(70) & SUB_A_9IY_d0.1,(_f(98) & _f(73) => _f(92));
  _f(1) & _f(2) & _f(10) & _f(70) & SUB_A_9IX_d0.3,(_f(97) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & SUB_A_9IX_d0.2,(_f(97) & _f(73) => _f(93));
  _f(1) & _f(2) & _f(10) & _f(70) & SUB_A_9IX_d0.1,(_f(97) & _f(73) => _f(92));
  _f(1) & _f(2) & _f(10) & _f(70) & SUB_A_9HL0.3,(_f(96) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & SUB_A_9HL0.2,(_f(96) & _f(73) => _f(93));
  _f(1) & _f(2) & _f(10) & _f(70) & SUB_A_9HL0.1,(_f(96) & _f(73) => _f(92));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(94) & SUB_A_n.3,(_f(95) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(94) & SUB_A_n.2,(_f(95) & _f(73) => _f(93));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(94) & SUB_A_n.1,(_f(95) & _f(73) => _f(92));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(90) & SUB_A_r.3,(_f(91) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(90) & SUB_A_r.2,(_f(91) & _f(73) => _f(93));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(90) & SUB_A_r.1,(_f(91) & _f(73) => _f(92));
  _f(1) & _f(2) & _f(10) & _f(70) & ADC_A_9IY_d0.3,(_f(89) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & ADC_A_9IY_d0.2,(_f(89) & _f(73) => _f(75));
  _f(1) & _f(2) & _f(10) & _f(70) & ADC_A_9IY_d0.1,(_f(89) & _f(73) => _f(74));
  _f(1) & _f(2) & _f(10) & _f(70) & ADC_A_9IX_d0.3,(_f(88) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & ADC_A_9IX_d0.2,(_f(88) & _f(73) => _f(75));
  _f(1) & _f(2) & _f(10) & _f(70) & ADC_A_9IX_d0.1,(_f(88) & _f(73) => _f(74));
  _f(1) & _f(2) & _f(10) & _f(70) & ADC_A_9HL0.3,(_f(87) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & ADC_A_9HL0.2,(_f(87) & _f(73) => _f(75));
  _f(1) & _f(2) & _f(10) & _f(70) & ADC_A_9HL0.1,(_f(87) & _f(73) => _f(74));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(85) & ADC_A_n.3,(_f(86) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(85) & ADC_A_n.2,(_f(86) & _f(73) => _f(75));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(85) & ADC_A_n.1,(_f(86) & _f(73) => _f(74));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(83) & ADC_A_r.3,(_f(84) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(83) & ADC_A_r.2,(_f(84) & _f(73) => _f(75));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(83) & ADC_A_r.1,(_f(84) & _f(73) => _f(74));
  _f(1) & _f(2) & _f(10) & _f(70) & ADD_A_9IY_d0.3,(_f(82) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & ADD_A_9IY_d0.2,(_f(82) & _f(73) => _f(75));
  _f(1) & _f(2) & _f(10) & _f(70) & ADD_A_9IY_d0.1,(_f(82) & _f(73) => _f(74));
  _f(1) & _f(2) & _f(10) & _f(70) & ADD_A_9IX_d0.3,(_f(81) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & ADD_A_9IX_d0.2,(_f(81) & _f(73) => _f(75));
  _f(1) & _f(2) & _f(10) & _f(70) & ADD_A_9IX_d0.1,(_f(81) & _f(73) => _f(74));
  _f(1) & _f(2) & _f(10) & _f(70) & ADD_A_9HL0.3,(_f(80) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & ADD_A_9HL0.2,(_f(80) & _f(73) => _f(75));
  _f(1) & _f(2) & _f(10) & _f(70) & ADD_A_9HL0.1,(_f(80) & _f(73) => _f(74));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(78) & ADD_A_n.3,(_f(79) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(78) & ADD_A_n.2,(_f(79) & _f(73) => _f(75));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(78) & ADD_A_n.1,(_f(79) & _f(73) => _f(74));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(71) & ADD_A_r.3,(_f(72) & _f(76) => _f(77));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(71) & ADD_A_r.2,(_f(72) & _f(73) => _f(75));
  _f(1) & _f(2) & _f(10) & _f(70) & _f(71) & ADD_A_r.1,(_f(72) & _f(73) => _f(74));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.29,(_f(68) => _f(69));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.28,(_f(66) => _f(67));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.27,(_f(64) => _f(65));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.26,(_f(62) => _f(63));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.25,(_f(60) => _f(61));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.24,(_f(58) => _f(59));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.23,(_f(56) => _f(57));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.22,(_f(54) => _f(55));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.21,(_f(52) => _f(53));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.20,(_f(50) => _f(51));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.19,(_f(48) => _f(49));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.18,(_f(46) => _f(47));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.17,(_f(44) => _f(45));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.16,(_f(42) => _f(43));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.15,(_f(40) => _f(41));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.14,(_f(38) => _f(39));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.13,(_f(36) => _f(37));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.12,(_f(33) & _f(34) => _f(35));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.11,(_f(31) => _f(32));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.10,(_f(29) => _f(30));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.9,(_f(27) => _f(28));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.8,(_f(25) => _f(26));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.7,(_f(23) => _f(24));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.6,(_f(21) => _f(22));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.5,(_f(19) => _f(20));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.4,(_f(17) => _f(18));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.3,(_f(15) => _f(16));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.2,(_f(13) => _f(14));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.1,(_f(11) => _f(12));
  _f(1) & _f(2) & Initialisation.3,(_f(3) & _f(8) => _f(9));
  _f(1) & _f(2) & Initialisation.2,(_f(3) & _f(6) => _f(7));
  _f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & SCHAR_LENGTH: INTEGER & 0<=SCHAR_LENGTH & SCHAR_LENGTH = 8 & NB_SCHARS: INTEGER & 0<=NB_SCHARS & NB_SCHARS = 2**SCHAR_LENGTH & SCHAR = -128..127 & SCHAR_POSITION = 0..SCHAR_LENGTH-1 & UCHAR = 0..255 & SSHORTINT_LENGTH: INTEGER & 0<=SSHORTINT_LENGTH & SSHORTINT_LENGTH = 16 & NB_SSHORTINTS: INTEGER & 0<=NB_SSHORTINTS & NB_SSHORTINTS = 2**SSHORTINT_LENGTH & SSHORTINT = -32768..32767 & SSHORTINT_POSITION = 0..SSHORTINT_LENGTH-1 & BV16: POW(BIT_VECTOR) & BV16 = SET(vv).(vv: BIT_VECTOR & size(vv) = SSHORTINT_LENGTH) & BYTE_TO_UCHAR: BYTE +-> UCHAR & dom(BYTE_TO_UCHAR) = BYTE & BYTE_TO_UCHAR = %v0.(v0: BYTE | (-128)*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & UCHAR_TO_BYTE: UCHAR +-> BYTE & dom(UCHAR_TO_BYTE) = UCHAR & UCHAR_TO_BYTE = BYTE_TO_UCHAR~ & USHORTINT = 0..65535 & NB_INSTRUCTIONS: INTEGER & 0<=NB_INSTRUCTIONS & INST_SZ: INTEGER & 0<=INST_SZ & INST_SZ = 16 & NB_INSTRUCTIONS = 2**INST_SZ & INSTRUCTION_MAX = NB_INSTRUCTIONS-1 & INSTRUCTION = USHORTINT & INSTRUCTION_NEXT: USHORTINT +-> USHORTINT & dom(INSTRUCTION_NEXT) = USHORTINT & INSTRUCTION_NEXT = SET(p0,q0).(p0: INSTRUCTION & q0: INSTRUCTION & 0<=p0 & p0+1<=NB_INSTRUCTIONS-1 & q0 = p0+1)\/{NB_INSTRUCTIONS-1|->0} & INSTRUCTION_JUMP = %(p0,e0).(p0: INSTRUCTION & e0: -126..129 | p0+e0) & BYTE_TO_SCHAR: BYTE +-> SCHAR & dom(BYTE_TO_SCHAR) = BYTE & BYTE_TO_SCHAR = %v0.(v0: BYTE | (-128)*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & SCHAR_TO_BYTE: SCHAR +-> BYTE & dom(SCHAR_TO_BYTE) = SCHAR & SCHAR_TO_BYTE = BYTE_TO_SCHAR~ & BV16_TO_SSHORTINT: BV16 +-> SSHORTINT & dom(BV16_TO_SSHORTINT) = BV16 & BV16_TO_SSHORTINT = %v0.(v0: BV16 | (-32768)*v0(15)+16384*v0(14)+8192*v0(13)+4096*v0(12)+2048*v0(11)+1024*v0(10)+512*v0(9)+256*v0(8)+128*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & SSHORTINT_TO_BV16: SSHORTINT +-> BV16 & dom(SSHORTINT_TO_BV16) = SSHORTINT & SSHORTINT_TO_BV16 = BV16_TO_SSHORTINT~ & BYTE_TO_BV16: BYTE*BYTE +-> BV16 & dom(BYTE_TO_BV16) = BYTE*BYTE & BYTE_TO_BV16 = %(v1,v2).(v1: BV16 & v2: BV16 | {0|->v2(0)}\/{1|->v2(1)}\/{2|->v2(2)}\/{3|->v2(3)}\/{4|->v2(4)}\/{5|->v2(5)}\/{6|->v2(6)}\/{7|->v2(7)}\/{8|->v1(0)}\/{9|->v1(1)}\/{10|->v1(2)}\/{11|->v1(3)}\/{12|->v1(4)}\/{13|->v1(5)}\/{14|->v1(6)}\/{15|->v1(7)}) & BV16_TO_BYTE: BV16 +-> BYTE*BYTE & dom(BV16_TO_BYTE) = BV16 & BV16_TO_BYTE = BYTE_TO_BV16~ & SCHAR_TO_SSHORTINT: SCHAR*SCHAR +-> SSHORTINT & dom(SCHAR_TO_SSHORTINT) = SCHAR*SCHAR & SCHAR_TO_SSHORTINT = %(w1,w2).(w1: SCHAR & w2: SCHAR | BV16_TO_SSHORTINT(BYTE_TO_BV16(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))) & SSHORTINT_TO_SCHAR: SSHORTINT +-> SCHAR*SCHAR & dom(SSHORTINT_TO_SCHAR) = SSHORTINT & SSHORTINT_TO_SCHAR = SCHAR_TO_SSHORTINT~ & BV16_TO_USHORTINT: BV16 +-> USHORTINT & dom(BV16_TO_USHORTINT) = BV16 & BV16_TO_USHORTINT = %v0.(v0: BV16 | (-32768)*v0(15)+16384*v0(14)+8192*v0(13)+4096*v0(12)+2048*v0(11)+1024*v0(10)+512*v0(9)+256*v0(8)+128*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & USHORTINT_TO_BV16: USHORTINT +-> BV16 & dom(USHORTINT_TO_BV16) = USHORTINT & USHORTINT_TO_BV16 = BV16_TO_USHORTINT~ & parity_bit_from_BYTE: BIT_VECTOR +-> BIT & dom(parity_bit_from_BYTE) = BIT_VECTOR & parity_bit_from_BYTE = %bv.(bv: BIT_VECTOR | SIGMA(idx).(idx: dom(bv) | bv(idx)) mod 2) & SSHORTINT_TO_USHORTINT: SSHORTINT +-> USHORTINT & dom(SSHORTINT_TO_USHORTINT) = SSHORTINT & SSHORTINT_TO_USHORTINT = %v0.(v0: SSHORTINT | v0-32768) & USHORTINT_TO_SSHORTINT: USHORTINT +-> SSHORTINT & dom(USHORTINT_TO_SSHORTINT) = USHORTINT & USHORTINT_TO_SSHORTINT = SSHORTINT_TO_USHORTINT~ & BIT = 0..1 & bit_not: BIT +-> BIT & dom(bit_not) = BIT & !bb.(bb: BIT => bit_not(bb) = 1-bb) & bit_and: BIT*BIT +-> BIT & dom(bit_and) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_and(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_and(b1,b2) = 1) & b2 = 1) & bit_or: BIT*BIT +-> BIT & dom(bit_or) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_or(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_or(b1,b2) = 1) or b2 = 1) & bit_xor: BIT*BIT +-> BIT & dom(bit_xor) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_xor(b1,b2) = 1 => not(b1 = b2)) & (not(b1 = b2) => bit_xor(b1,b2) = 1)) & bool_to_bit: BOOL +-> BIT & dom(bool_to_bit) = BOOL & bool_to_bit = {TRUE|->1}\/{FALSE|->0} & BIT_VECTOR = SET(bt).(bt: NATURAL +-> BIT)-{{}} & bv_size: BIT_VECTOR +-> NATURAL-{0} & dom(bv_size) = BIT_VECTOR & bv_size = %bv.(bv: BIT_VECTOR | size(bv)) & BV_INDX: BIT_VECTOR +-> POW(NATURAL) & dom(BV_INDX) = BIT_VECTOR & BV_INDX = %bv.(bv: BIT_VECTOR | 0..bv_size(bv)-1) & bv_catenate: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_catenate) = BIT_VECTOR*BIT_VECTOR & bv_catenate = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR | v1^v2) & bv_sub: BIT_VECTOR*NATURAL*NATURAL +-> BIT_VECTOR & dom(bv_sub) = BIT_VECTOR*NATURAL*NATURAL & bv_sub = %(bv,low,high).(bv: BIT_VECTOR & low: BV_INDX(bv) & high: BV_INDX(bv) & low<=high | low..high<|bv) & bv_zero: NATURAL-{0} +-> BIT_VECTOR & dom(bv_zero) = NATURAL-{0} & bv_zero = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (0..sz)*{0}) & bv_one: NATURAL-{0} +-> BIT_VECTOR & dom(bv_one) = NATURAL-{0} & bv_one = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (0..sz)*{1}) & bv_not: BIT_VECTOR +-> BIT_VECTOR & dom(bv_not) = BIT_VECTOR & bv_not = %v1.(v1: BIT_VECTOR | %idx.(idx: BV_INDX(v1) | bit_not(v1(idx)))) & bv_and: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_and) = BIT_VECTOR*BIT_VECTOR & bv_and = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: BV_INDX(v1) | bit_and(v1(idx),v2(idx)))) & bv_or: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_or) = BIT_VECTOR*BIT_VECTOR & bv_or = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: BV_INDX(v1) | bit_or(v1(idx),v2(idx)))) & bv_xor: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_xor) = BIT_VECTOR*BIT_VECTOR & bv_xor = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: BV_INDX(v1) | bit_xor(v1(idx),v2(idx)))) & bv_at: BIT_VECTOR*NATURAL +-> BIT & dom(bv_at) = BIT_VECTOR*NATURAL & bv_at = %(v1,idx).(v1: BIT_VECTOR & idx: BV_INDX(v1) | v1(idx)) & bv_set: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_set) = BIT_VECTOR*NATURAL & bv_set = %(v1,idx).(v1: BIT_VECTOR & idx: BV_INDX(v1) | v1<+{idx|->1}) & bv_clear: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_clear) = BIT_VECTOR*NATURAL & bv_clear = %(v1,idx).(v1: BIT_VECTOR & idx: BV_INDX(v1) | v1<+{idx|->0}) & bv_put: BIT_VECTOR*NATURAL*BIT +-> BIT_VECTOR & dom(bv_put) = BIT_VECTOR*NATURAL*BIT & bv_put = %(v1,idx,bit).(v1: BIT_VECTOR & idx: BV_INDX(v1) & bit: BIT | v1<+{idx|->bit}) & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(vv).(vv: BIT_VECTOR & bv_size(vv) = BYTE_WIDTH) & BYTE_ZERO: BYTE & BYTE_ZERO = BYTE_INDEX*{0} & is_zeroSCHAR: SCHAR +-> BIT & dom(is_zeroSCHAR) = SCHAR & is_zeroSCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & is_negative: SCHAR +-> BIT & dom(is_negative) = SCHAR & is_negative = %w1.(w1: SCHAR | bool_to_bit(bool(w1+1<=0))) & halfSCHAR: SCHAR +-> SCHAR & dom(halfSCHAR) = SCHAR & halfSCHAR = %ww.(ww: SCHAR | ww mod 16) & add8SCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL*BOOL*BOOL & dom(add8SCHAR) = SCHAR*SCHAR & add8SCHAR = %(w1,w2).(w1: UCHAR & w2: UCHAR & w1+w2+1<= -128 | 256-(w1+w2),bool(w1+w2+1<=0),TRUE,bool(16<=halfSCHAR(w1)+halfSCHAR(w2)),FALSE)\/%(w1,w2).(w1: UCHAR & w2: UCHAR & not(w1+w2+1<= -128) | (w1+w2) mod 128,bool(w1+w2+1<=0),bool(128<=w1+w2),bool(16<=halfSCHAR(w1)+halfSCHAR(w2)),bool(w1 = 0)) & substract8SCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL*BOOL*BOOL & dom(substract8SCHAR) = SCHAR*SCHAR & substract8SCHAR = %(w1,w2).(w1: UCHAR & w2: UCHAR & w1-w2+1<= -128 | 256-(w1-w2),bool(w1-w2+1<=0),TRUE,bool(16<=halfSCHAR(w1)-halfSCHAR(w2)),FALSE)\/%(w1,w2).(w1: UCHAR & w2: UCHAR & not(w1-w2+1<= -128) | (w1-w2) mod 128,bool(w1-w2+1<=0),bool(128<=w1-w2),bool(16<=halfSCHAR(w1)-halfSCHAR(w2)),bool(w1 = 0)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & (w1+w2: INTEGER & 0<=w1+w2) => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION & i0 = 7 | 1-(w0+2**7)/128 mod 2)\/%(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION & not(i0 = 7) | (w0+2**7)/2**i0 mod 2) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & bitsetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION & bitgetSCHAR(w0,i0) = 1 | w0)\/%(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION & not(bitgetSCHAR(w0,i0) = 1) | w0+2**i0) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & bitclearSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION & bitgetSCHAR(w0,i0) = 0 | w0)\/%(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION & not(bitgetSCHAR(w0,i0) = 0) & i0 = 7 | w0+128)\/%(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION & not(bitgetSCHAR(w0,i0) = 0) & not(i0 = 7) | w0-2**i0) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & complementSCHAR = %w0.(w0: SCHAR | 255-w0) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotaterightSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(1)}\/{1|->SCHAR_TO_BYTE(w0)(2)}\/{2|->SCHAR_TO_BYTE(w0)(3)}\/{3|->SCHAR_TO_BYTE(w0)(4)}\/{4|->SCHAR_TO_BYTE(w0)(5)}\/{5|->SCHAR_TO_BYTE(w0)(6)}\/{6|->SCHAR_TO_BYTE(w0)(7)}\/{7|->SCHAR_TO_BYTE(w0)(0)})|->bool(SCHAR_TO_BYTE(w0)(0) = 1)) & "`Component properties'" & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..18)*{id_reg_8}*((1..18)*{id_reg_8}) & dom(REG16_TO_REG8) = (1..5)*{id_reg_16} & !(r1,r2,r3).(r1: (1..5)*{id_reg_16} & r2: (1..18)*{id_reg_8} & r3: (1..18)*{id_reg_8} => (r1 = 1|->id_reg_16 => REG16_TO_REG8(r1) = 5|->id_reg_8|->(6|->id_reg_8)) & (r1 = 2|->id_reg_16 => REG16_TO_REG8(r1) = 9|->id_reg_8|->(10|->id_reg_8)) & (r1 = 3|->id_reg_16 => REG16_TO_REG8(r1) = 13|->id_reg_8|->(14|->id_reg_8)) & (r1 = 5|->id_reg_16 => REG16_TO_REG8(r1) = 1|->id_reg_8|->(2|->id_reg_8))) & REG8_TO_REG16 = REG16_TO_REG8~ & update_flag_register = %(rgs8_$0,c0$0,n_add_sub$0,pv2$0,h4$0,z6$0,s7$0).(rgs8_$0: (1..18)*{id_reg_8} +-> SCHAR & dom(rgs8_$0) = (1..18)*{id_reg_8} & c0$0: BOOL & n_add_sub$0: BOOL & pv2$0: BOOL & h4$0: BOOL & z6$0: BOOL & s7$0: BOOL | rgs8_$0<+{2|->id_reg_8|->BYTE_TO_SCHAR(SCHAR_TO_BYTE(rgs8_$0(2|->id_reg_8))<+({7|->bool_to_bit(s7$0)}\/{6|->bool_to_bit(z6$0)}\/{4|->bool_to_bit(h4$0)}\/{2|->bool_to_bit(pv2$0)}\/{1|->bool_to_bit(n_add_sub$0)}\/{0|->bool_to_bit(c0$0)}))}) & get_new_flag_register = %(rgs8_$0,c0$0,n_add_sub$0,pv2$0,h4$0,z6$0,s7$0).(rgs8_$0: (1..18)*{id_reg_8} +-> SCHAR & dom(rgs8_$0) = (1..18)*{id_reg_8} & c0$0: BOOL & n_add_sub$0: BOOL & pv2$0: BOOL & h4$0: BOOL & z6$0: BOOL & s7$0: BOOL | 2|->id_reg_8|->BYTE_TO_SCHAR(SCHAR_TO_BYTE(rgs8_$0(2|->id_reg_8))<+({7|->bool_to_bit(s7$0)}\/{6|->bool_to_bit(z6$0)}\/{4|->bool_to_bit(h4$0)}\/{2|->bool_to_bit(pv2$0)}\/{1|->bool_to_bit(n_add_sub$0)}\/{0|->bool_to_bit(c0$0)}))) & (1..18)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..18)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}));
  ("`Included,imported and extended machines invariants'" & stack: USHORTINT +-> SCHAR & dom(stack) = USHORTINT & mem: USHORTINT +-> SCHAR & dom(mem) = USHORTINT & "`Seen and used machines assertions'" & NB_SCHARS = 256 & !n0.(n0: SCHAR => 0<=n0) & !n0.(n0: SCHAR => n0<=255) & 2**16 = 65536 & INSTRUCTION_NEXT: USHORTINT +-> USHORTINT & dom(INSTRUCTION_NEXT) = USHORTINT & 0 = SCHAR_TO_SSHORTINT(0,0) & bit_not(0) = 1 & bit_not(1) = 0 & !bb.(bb: BIT => bit_not(bit_not(bb)) = bb) & bit_and(0,0) = 0 & bit_and(0,1) = 0 & bit_and(1,0) = 0 & bit_and(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 1 => bit_and(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 0 => bit_and(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3)) & !b1.(b1: BIT => bit_and(b1,1) = b1) & !b1.(b1: BIT => bit_and(b1,0) = 0) & bit_or(0,0) = 0 & bit_or(0,1) = 1 & bit_or(1,0) = 1 & bit_or(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 1 => bit_or(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 0 => bit_or(b2,b1) = 0) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 1 => b1 = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 0 => b1 = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3)) & !b1.(b1: BIT => bit_or(b1,1) = 1) & !b1.(b1: BIT => bit_or(b1,0) = b1) & !b1.(b1: BIT => bit_or(1,b1) = 1) & !b1.(b1: BIT => bit_or(0,b1) = b1) & bit_xor(0,0) = 0 & bit_xor(0,1) = 1 & bit_xor(1,0) = 1 & bit_xor(1,1) = 0 & !(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 1 => bit_xor(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 0 => bit_xor(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3)) & !bb.(bb: BIT => bit_xor(bb,bb) = 0) & bool_to_bit(TRUE) = 1 & bool_to_bit(FALSE) = 0 & !bb.(bb: BIT => bb = 0 or bb = 1) & !bb.(bb: BIT & not(bb = 0) => bb = 1) & !bb.(bb: BIT & not(bb = 1) => bb = 0) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_xor(bv,bv)(indx) = bv_zero(bv_size(bv))(indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: BV_INDX(v1) => bv_xor(v1,v2)(indx) = bv_xor(v2,v1)(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v2)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_or(bv,bv_zero(bv_size(bv)))(indx) = bv(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_or(bv,bv_one(bv_size(bv)))(indx) = bv_one(bv_size(bv))(indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: BV_INDX(v1) => bv_or(v1,bv_or(v2,v3))(indx) = bv_or(bv_or(v1,v2),v3)(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v2)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: BV_INDX(v1) => bv_or(v1,v2)(indx) = bv_or(v2,v1)(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_and(bv,bv_one(bv_size(bv)))(indx) = bv(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_and(bv,bv_zero(bv_size(bv)))(indx) = bv_zero(bv_size(bv))(indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: BV_INDX(v1) => bv_and(v1,bv_and(v2,v3))(indx) = bv_and(bv_and(v1,v2),v3)(indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: BV_INDX(v1) => bv_and(v1,v2)(indx) = bv_and(v2,v1)(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_and(v1,v2)) = bv_size(v2)) & !(bv,low,high).(bv: BIT_VECTOR & low: BV_INDX(bv) & high: BV_INDX(bv) & low<=high => bv_size(bv_sub(bv,low,high)) = high-low) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR => bv_size(bv_catenate(v1,v2)) = bv_size(v1)+bv_size(v2)) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_not(bv_not(bv))(indx) = bv(indx)) & !bv.(bv: BIT_VECTOR => bv_size(bv_not(bv)) = bv_size(bv)) & dom(add8SCHAR) = SCHAR*SCHAR & ran(add8SCHAR): POW(SCHAR*BOOL*BOOL*BOOL*BOOL) & dom(substract8SCHAR) = SCHAR*SCHAR & ran(substract8SCHAR): POW(SCHAR*BOOL*BOOL*BOOL*BOOL) & dom(andSCHAR) = SCHAR*SCHAR & ran(andSCHAR): POW(SCHAR*BOOL) & dom(iorSCHAR) = SCHAR*SCHAR & ran(iorSCHAR): POW(SCHAR*BOOL) & dom(xorSCHAR) = SCHAR*SCHAR & ran(xorSCHAR): POW(SCHAR*BOOL) & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & ran(bitclearSCHAR): POW(SCHAR) & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & ran(bitsetSCHAR): POW(SCHAR) & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & ran(bitgetSCHAR): POW(BIT) & dom(complementSCHAR) = SCHAR & ran(complementSCHAR): POW(SCHAR) & dom(swapSCHAR) = SCHAR & ran(swapSCHAR): POW(SCHAR) & ran(rotateleftSCHAR): POW(SCHAR*BOOL) & dom(rotateleftSCHAR) = SCHAR & dom(rotaterightSCHAR) = SCHAR & ran(rotaterightSCHAR): POW(SCHAR*BOOL) & !(w0,idx).(w0: SCHAR & idx: SCHAR_POSITION => bitgetSCHAR(w0,idx) = SCHAR_TO_BYTE(w0)(idx)) & max(SCHAR) = 127 & 2**15 = 32768 & 2**14 = 16384 & 2**13 = 8192 & 2**12 = 4096 & 2**11 = 2048 & 2**10 = 1024 & 2**9 = 512 & 2**8 = 256 & 2**7 = 128 & 2**6 = 64 & 2**5 = 32 & 2**4 = 16 & 2**3 = 8 & 2**2 = 4 & 2**1 = 2 & 2**0 = 1);
  ("`Local hypotheses'" & stack$0: USHORTINT +-> SCHAR & dom(stack$0) = USHORTINT & mem$0: USHORTINT +-> SCHAR & dom(mem$0) = USHORTINT & iy$0: SSHORTINT & i_o_ports$0: UCHAR +-> SCHAR & dom(i_o_ports$0) = UCHAR & ix$0: SSHORTINT & sp$0: SSHORTINT & pc$0: USHORTINT & rgs8$0: (1..18)*{id_reg_8} +-> SCHAR & dom(rgs8$0) = (1..18)*{id_reg_8} & ran(rgs8$0) = SCHAR);
  "`Check that the invariant (sp: USHORTINT) is established by the initialisation - ref 3.3'";
  (sp$0: USHORTINT);
  "`Check that the invariant (ix: USHORTINT) is established by the initialisation - ref 3.3'";
  (ix$0: USHORTINT);
  "`Check that the invariant (iy: USHORTINT) is established by the initialisation - ref 3.3'";
  (iy$0: USHORTINT);
  ("`Component invariant'" & stack: USHORTINT +-> SCHAR & dom(stack) = USHORTINT & rgs8: (1..18)*{id_reg_8} +-> SCHAR & dom(rgs8) = (1..18)*{id_reg_8} & pc: USHORTINT & sp: USHORTINT & ix: USHORTINT & iy: USHORTINT & i_o_ports: UCHAR +-> SCHAR & dom(i_o_ports) = UCHAR);
  "`Check assertion (mem(SSHORTINT_TO_USHORTINT(iy)): SCHAR) deduction - ref 3.2, 4.2, 5.3'";
  (mem(SSHORTINT_TO_USHORTINT(iy)): SCHAR);
  "`Check assertion (mem(SSHORTINT_TO_USHORTINT(ix)): SCHAR) deduction - ref 3.2, 4.2, 5.3'";
  (mem(SSHORTINT_TO_USHORTINT(ix)): SCHAR);
  "`Check assertion (mem(SSHORTINT_TO_USHORTINT(sp)): SCHAR) deduction - ref 3.2, 4.2, 5.3'";
  (mem(SSHORTINT_TO_USHORTINT(sp)): SCHAR);
  "`Check assertion (mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(a0),rgs8(f0)))))): SCHAR) deduction - ref 3.2, 4.2, 5.3'";
  (mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)))))): SCHAR);
  "`Check assertion (mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(a0),rgs8(f0)))): SCHAR) deduction - ref 3.2, 4.2, 5.3'";
  (mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)))): SCHAR);
  "`Check assertion (mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(h0),rgs8(l0)))))): SCHAR) deduction - ref 3.2, 4.2, 5.3'";
  (mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))))): SCHAR);
  "`Check assertion (mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(h0),rgs8(l0)))): SCHAR) deduction - ref 3.2, 4.2, 5.3'";
  (mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))): SCHAR);
  "`Check assertion (mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(d0),rgs8(e0)))))): SCHAR) deduction - ref 3.2, 4.2, 5.3'";
  (mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))))): SCHAR);
  "`Check assertion (mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(d0),rgs8(e0)))): SCHAR) deduction - ref 3.2, 4.2, 5.3'";
  (mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR);
  "`Check assertion (mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(b0),rgs8(c0)))))): SCHAR) deduction - ref 3.2, 4.2, 5.3'";
  (mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): SCHAR);
  "`Check assertion (mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(b0),rgs8(c0)))): SCHAR) deduction - ref 3.2, 4.2, 5.3'";
  (mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR);
  ("`Local hypotheses'" & vec: BYTE & in0: 0..7);
  "`Check assertion (!(vec,in0).(vec: BYTE & in0: 0..7 => bitgetSCHAR(BYTE_TO_SCHAR(vec),in0) = vec(in0))) deduction - ref 3.2, 4.2, 5.3'";
  (bitgetSCHAR(BYTE_TO_SCHAR(vec),in0) = vec(in0));
  "`Check assertion (INSTRUCTION_NEXT(13) = 14) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(13) = 14);
  "`Check assertion (INSTRUCTION_NEXT(12) = 13) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(12) = 13);
  "`Check assertion (INSTRUCTION_NEXT(11) = 12) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(11) = 12);
  "`Check assertion (INSTRUCTION_NEXT(10) = 11) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(10) = 11);
  "`Check assertion (INSTRUCTION_NEXT(9) = 10) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(9) = 10);
  "`Check assertion (INSTRUCTION_NEXT(8) = 9) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(8) = 9);
  "`Check assertion (INSTRUCTION_NEXT(7) = 8) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(7) = 8);
  "`Check assertion (INSTRUCTION_NEXT(6) = 7) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(6) = 7);
  "`Check assertion (INSTRUCTION_NEXT(5) = 6) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(5) = 6);
  "`Check assertion (INSTRUCTION_NEXT(4) = 5) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(4) = 5);
  "`Check assertion (INSTRUCTION_NEXT(3) = 4) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(3) = 4);
  "`Check assertion (INSTRUCTION_NEXT(2) = 3) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(2) = 3);
  "`Check assertion (INSTRUCTION_NEXT(1) = 2) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(1) = 2);
  "`Check assertion (INSTRUCTION_NEXT(0) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(0) = 1);
  "`Check assertion (ran(rgs8) <: SCHAR) deduction - ref 3.2, 4.2, 5.3'";
  (ran(rgs8): POW(SCHAR));
  "`Check assertion (ran(mem) <: SCHAR) deduction - ref 3.2, 4.2, 5.3'";
  (ran(mem): POW(SCHAR));
  "`Check assertion (ran(stack) <: SCHAR) deduction - ref 3.2, 4.2, 5.3'";
  (ran(stack): POW(SCHAR));
  ("`Component assertions'" & dom(stack) = USHORTINT & ran(stack): POW(SCHAR) & ran(mem): POW(SCHAR) & dom(mem) = USHORTINT & ran(rgs8): POW(SCHAR) & dom(rgs8) = (1..18)*{id_reg_8} & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & !(vec,in0).(vec: BYTE & in0: 0..7 => bitgetSCHAR(BYTE_TO_SCHAR(vec),in0) = vec(in0)) & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))))): SCHAR & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))))): SCHAR & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))))): SCHAR & mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)))): SCHAR & mem(SSHORTINT_TO_USHORTINT(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)))))): SCHAR & mem(SSHORTINT_TO_USHORTINT(sp)): SCHAR & mem(SSHORTINT_TO_USHORTINT(ix)): SCHAR & mem(SSHORTINT_TO_USHORTINT(iy)): SCHAR);
  ("`ADD_A_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = add8SCHAR(rgs8(1|->id_reg_8),rgs8(rr)));
  "`Check that the invariant (rgs8: id_reg_8 --> SCHAR) is preserved by the operation - ref 3.4'";
  (rgs8<+({1|->id_reg_8|->sum$0}\/{get_new_flag_register(rgs8,carry$0,FALSE,carry$0,digit_carry$0,zero$0,is_negative$0)}): (1..18)*{id_reg_8} +-> SCHAR);
  (dom(rgs8<+({1|->id_reg_8|->sum$0}\/{get_new_flag_register(rgs8,carry$0,FALSE,carry$0,digit_carry$0,zero$0,is_negative$0)})) = (1..18)*{id_reg_8});
  "`Check that the invariant (pc: USHORTINT) is preserved by the operation - ref 3.4'";
  (INSTRUCTION_NEXT(pc): USHORTINT);
  ("`ADD_A_n preconditions in this component'" & nn: SCHAR);
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = add8SCHAR(rgs8(1|->id_reg_8),nn));
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = add8SCHAR(rgs8(1|->id_reg_8),mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))));
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = add8SCHAR(rgs8(1|->id_reg_8),mem(256-(ix+rgs8(9|->id_reg_8)))));
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = add8SCHAR(rgs8(1|->id_reg_8),mem(256-(iy+rgs8(9|->id_reg_8)))));
  ("`ADC_A_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = add8SCHAR(rgs8(1|->id_reg_8),rgs8(rr)+bitgetSCHAR(rgs8(2|->id_reg_8),0)));
  ("`ADC_A_n preconditions in this component'" & nn: SCHAR);
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = add8SCHAR(rgs8(1|->id_reg_8),nn+bitgetSCHAR(rgs8(2|->id_reg_8),0)));
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = add8SCHAR(rgs8(1|->id_reg_8),mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))+bitgetSCHAR(rgs8(2|->id_reg_8),0)));
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = add8SCHAR(rgs8(1|->id_reg_8),mem(256-(ix+rgs8(9|->id_reg_8)))+bitgetSCHAR(rgs8(2|->id_reg_8),0)));
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = add8SCHAR(rgs8(1|->id_reg_8),mem(256-(iy+rgs8(9|->id_reg_8)))+bitgetSCHAR(rgs8(2|->id_reg_8),0)));
  ("`SUB_A_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = substract8SCHAR(rgs8(1|->id_reg_8),rgs8(rr)));
  (rgs8<+({1|->id_reg_8|->sum$0}\/{get_new_flag_register(rgs8,carry$0,TRUE,carry$0,digit_carry$0,zero$0,is_negative$0)}): (1..18)*{id_reg_8} +-> SCHAR);
  (dom(rgs8<+({1|->id_reg_8|->sum$0}\/{get_new_flag_register(rgs8,carry$0,TRUE,carry$0,digit_carry$0,zero$0,is_negative$0)})) = (1..18)*{id_reg_8});
  ("`SUB_A_n preconditions in this component'" & nn: SCHAR);
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = substract8SCHAR(rgs8(1|->id_reg_8),nn));
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = substract8SCHAR(rgs8(1|->id_reg_8),mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))));
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = substract8SCHAR(rgs8(1|->id_reg_8),mem(256-(ix+rgs8(9|->id_reg_8)))));
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = substract8SCHAR(rgs8(1|->id_reg_8),mem(256-(iy+rgs8(9|->id_reg_8)))));
  ("`SBC_A_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = substract8SCHAR(rgs8(1|->id_reg_8),rgs8(rr)-bitgetSCHAR(rgs8(2|->id_reg_8),0)));
  ("`SBC_A_n preconditions in this component'" & nn: SCHAR);
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = add8SCHAR(rgs8(1|->id_reg_8),nn-bitgetSCHAR(rgs8(2|->id_reg_8),0)));
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = add8SCHAR(rgs8(1|->id_reg_8),mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))-bitgetSCHAR(rgs8(2|->id_reg_8),0)));
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = add8SCHAR(rgs8(1|->id_reg_8),mem(256-(ix+rgs8(9|->id_reg_8)))-bitgetSCHAR(rgs8(2|->id_reg_8),0)));
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & sum$0,is_negative$0,carry$0,digit_carry$0,zero$0 = add8SCHAR(rgs8(1|->id_reg_8),mem(256-(iy+rgs8(9|->id_reg_8)))-bitgetSCHAR(rgs8(2|->id_reg_8),0)));
  ("`AND_A_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & add_sub$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,zero$0 = andSCHAR(rgs8(1|->id_reg_8),rgs8(rr)) & carry$0 = FALSE & add_sub$0 = FALSE & pv$0 = FALSE & halfcarry$0 = FALSE & is_negative$0 = bool(result$0+1<=0));
  (rgs8<+({1|->id_reg_8|->result$0}\/{get_new_flag_register(rgs8,carry$0,add_sub$0,pv$0,halfcarry$0,zero$0,is_negative$0)}): (1..18)*{id_reg_8} +-> SCHAR);
  (dom(rgs8<+({1|->id_reg_8|->result$0}\/{get_new_flag_register(rgs8,carry$0,add_sub$0,pv$0,halfcarry$0,zero$0,is_negative$0)})) = (1..18)*{id_reg_8});
  ("`AND_A_n preconditions in this component'" & nn: SCHAR);
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & add_sub$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,zero$0 = andSCHAR(rgs8(1|->id_reg_8),nn) & carry$0 = FALSE & add_sub$0 = FALSE & pv$0 = FALSE & halfcarry$0 = FALSE & is_negative$0 = bool(result$0+1<=0));
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & nn$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,zero$0 = andSCHAR(rgs8(1|->id_reg_8),mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) & carry$0 = FALSE & nn$0 = FALSE & pv$0 = FALSE & halfcarry$0 = FALSE & is_negative$0 = bool(result$0+1<=0));
  (rgs8<+({1|->id_reg_8|->result$0}\/{get_new_flag_register(rgs8,carry$0,nn$0,pv$0,halfcarry$0,zero$0,is_negative$0)}): (1..18)*{id_reg_8} +-> SCHAR);
  (dom(rgs8<+({1|->id_reg_8|->result$0}\/{get_new_flag_register(rgs8,carry$0,nn$0,pv$0,halfcarry$0,zero$0,is_negative$0)})) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & nn$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,zero$0 = andSCHAR(rgs8(1|->id_reg_8),mem(256-(ix+rgs8(9|->id_reg_8)))) & carry$0 = FALSE & nn$0 = FALSE & pv$0 = FALSE & halfcarry$0 = FALSE & is_negative$0 = bool(result$0+1<=0));
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & nn$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,zero$0 = andSCHAR(rgs8(1|->id_reg_8),mem(256-(iy+rgs8(9|->id_reg_8)))) & carry$0 = FALSE & nn$0 = FALSE & pv$0 = FALSE & halfcarry$0 = FALSE & is_negative$0 = bool(result$0+1<=0));
  ("`OR_A_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & add_sub$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,zero$0 = iorSCHAR(rgs8(1|->id_reg_8),rgs8(rr)) & carry$0 = FALSE & add_sub$0 = FALSE & pv$0 = FALSE & halfcarry$0 = FALSE & is_negative$0 = bool(result$0+1<=0));
  ("`OR_A_n preconditions in this component'" & nn: SCHAR);
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & add_sub$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,zero$0 = iorSCHAR(rgs8(1|->id_reg_8),nn) & carry$0 = FALSE & add_sub$0 = FALSE & pv$0 = FALSE & halfcarry$0 = FALSE & is_negative$0 = bool(result$0+1<=0));
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & nn$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,zero$0 = iorSCHAR(rgs8(1|->id_reg_8),mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) & carry$0 = FALSE & nn$0 = FALSE & pv$0 = FALSE & halfcarry$0 = FALSE & is_negative$0 = bool(result$0+1<=0));
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & nn$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,zero$0 = iorSCHAR(rgs8(1|->id_reg_8),mem(256-(ix+rgs8(9|->id_reg_8)))) & carry$0 = FALSE & nn$0 = FALSE & pv$0 = FALSE & halfcarry$0 = FALSE & is_negative$0 = bool(result$0+1<=0));
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & nn$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,zero$0 = iorSCHAR(rgs8(1|->id_reg_8),mem(256-(iy+rgs8(9|->id_reg_8)))) & carry$0 = FALSE & nn$0 = FALSE & pv$0 = FALSE & halfcarry$0 = FALSE & is_negative$0 = bool(result$0+1<=0));
  ("`XOR_A_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & add_sub$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,zero$0 = xorSCHAR(rgs8(1|->id_reg_8),rgs8(rr)) & carry$0 = FALSE & add_sub$0 = FALSE & pv$0 = FALSE & halfcarry$0 = FALSE & is_negative$0 = bool(result$0+1<=0));
  ("`XOR_A_n preconditions in this component'" & nn: SCHAR);
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & add_sub$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,zero$0 = xorSCHAR(rgs8(1|->id_reg_8),nn) & carry$0 = FALSE & add_sub$0 = FALSE & pv$0 = FALSE & halfcarry$0 = FALSE & is_negative$0 = bool(result$0+1<=0));
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & nn$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,zero$0 = xorSCHAR(rgs8(1|->id_reg_8),mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) & carry$0 = FALSE & nn$0 = FALSE & pv$0 = FALSE & halfcarry$0 = FALSE & is_negative$0 = bool(result$0+1<=0));
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & nn$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,zero$0 = xorSCHAR(rgs8(1|->id_reg_8),mem(256-(ix+rgs8(9|->id_reg_8)))) & carry$0 = FALSE & nn$0 = FALSE & pv$0 = FALSE & halfcarry$0 = FALSE & is_negative$0 = bool(result$0+1<=0));
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & nn$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,zero$0 = xorSCHAR(rgs8(1|->id_reg_8),mem(256-(iy+rgs8(9|->id_reg_8)))) & carry$0 = FALSE & nn$0 = FALSE & pv$0 = FALSE & halfcarry$0 = FALSE & is_negative$0 = bool(result$0+1<=0));
  ("`CP_A_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & n_add_sub$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,is_negative$0,carry$0,halfcarry$0,zero$0 = substract8SCHAR(rgs8(1|->id_reg_8),rgs8(rr)) & n_add_sub$0 = TRUE & pv$0 = carry$0);
  (rgs8<+({1|->id_reg_8|->result$0}\/{get_new_flag_register(rgs8,carry$0,n_add_sub$0,pv$0,halfcarry$0,zero$0,is_negative$0)}): (1..18)*{id_reg_8} +-> SCHAR);
  (dom(rgs8<+({1|->id_reg_8|->result$0}\/{get_new_flag_register(rgs8,carry$0,n_add_sub$0,pv$0,halfcarry$0,zero$0,is_negative$0)})) = (1..18)*{id_reg_8});
  ("`CP_A_n preconditions in this component'" & nn: SCHAR);
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & n_add_sub$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,is_negative$0,carry$0,halfcarry$0,zero$0 = substract8SCHAR(rgs8(1|->id_reg_8),nn) & n_add_sub$0 = TRUE & pv$0 = carry$0);
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & n_add_sub$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,is_negative$0,carry$0,halfcarry$0,zero$0 = substract8SCHAR(rgs8(1|->id_reg_8),mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) & n_add_sub$0 = TRUE & pv$0 = carry$0);
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & n_add_sub$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,is_negative$0,carry$0,halfcarry$0,zero$0 = substract8SCHAR(rgs8(1|->id_reg_8),mem(256-(ix+rgs8(9|->id_reg_8)))) & n_add_sub$0 = TRUE & pv$0 = carry$0);
  ("`Local hypotheses'" & result$0: SCHAR & carry$0: BOOL & n_add_sub$0: BOOL & pv$0: BOOL & halfcarry$0: BOOL & zero$0: BOOL & is_negative$0: BOOL & result$0,is_negative$0,carry$0,halfcarry$0,zero$0 = substract8SCHAR(rgs8(1|->id_reg_8),mem(256-(iy+rgs8(9|->id_reg_8)))) & n_add_sub$0 = TRUE & pv$0 = carry$0);
  ("`INC_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & add8SCHAR(rgs8(rr),1) = (sum$0,is_negative$0,carry$0,digit_carry$0)|->zero$0);
  (rgs8<+({rr|->sum$0}\/{get_new_flag_register(rgs8,carry$0,FALSE,bool(rgs8(rr) = 127),digit_carry$0,zero$0,is_negative$0)}): (1..18)*{id_reg_8} +-> SCHAR);
  (dom(rgs8<+({rr|->sum$0}\/{get_new_flag_register(rgs8,carry$0,FALSE,bool(rgs8(rr) = 127),digit_carry$0,zero$0,is_negative$0)})) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & add8SCHAR(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),1) = (sum$0,is_negative$0,carry$0,digit_carry$0)|->zero$0);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))): USHORTINT);
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & add8SCHAR(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),1) = (sum$0,is_negative$0,carry$0,digit_carry$0)|->zero$0 & mem<+{mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))|->sum$0}: USHORTINT +-> SCHAR & dom(mem<+{mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))|->sum$0}) = USHORTINT);
  (rgs8<+{get_new_flag_register(rgs8,carry$0,FALSE,bool(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) = 127),digit_carry$0,zero$0,is_negative$0)}: (1..18)*{id_reg_8} +-> SCHAR);
  (dom(rgs8<+{get_new_flag_register(rgs8,carry$0,FALSE,bool(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) = 127),digit_carry$0,zero$0,is_negative$0)}) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & add8SCHAR(mem(256-(ix+rgs8(9|->id_reg_8))),1) = (sum$0,is_negative$0,carry$0,digit_carry$0)|->zero$0);
  (mem(256-(ix+rgs8(9|->id_reg_8))): USHORTINT);
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & add8SCHAR(mem(256-(ix+rgs8(9|->id_reg_8))),1) = (sum$0,is_negative$0,carry$0,digit_carry$0)|->zero$0 & mem<+{mem(256-(ix+rgs8(9|->id_reg_8)))|->sum$0}: USHORTINT +-> SCHAR & dom(mem<+{mem(256-(ix+rgs8(9|->id_reg_8)))|->sum$0}) = USHORTINT);
  (rgs8<+{get_new_flag_register(rgs8,carry$0,FALSE,bool(mem(256-(ix+rgs8(9|->id_reg_8))) = 127),digit_carry$0,zero$0,is_negative$0)}: (1..18)*{id_reg_8} +-> SCHAR);
  (dom(rgs8<+{get_new_flag_register(rgs8,carry$0,FALSE,bool(mem(256-(ix+rgs8(9|->id_reg_8))) = 127),digit_carry$0,zero$0,is_negative$0)}) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & add8SCHAR(mem(256-(iy+rgs8(9|->id_reg_8))),1) = (sum$0,is_negative$0,carry$0,digit_carry$0)|->zero$0);
  (mem(256-(iy+rgs8(9|->id_reg_8))): USHORTINT);
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & add8SCHAR(mem(256-(iy+rgs8(9|->id_reg_8))),1) = (sum$0,is_negative$0,carry$0,digit_carry$0)|->zero$0 & mem<+{mem(256-(iy+rgs8(9|->id_reg_8)))|->sum$0}: USHORTINT +-> SCHAR & dom(mem<+{mem(256-(iy+rgs8(9|->id_reg_8)))|->sum$0}) = USHORTINT);
  (rgs8<+{get_new_flag_register(rgs8,carry$0,FALSE,bool(mem(256-(iy+rgs8(9|->id_reg_8))) = 127),digit_carry$0,zero$0,is_negative$0)}: (1..18)*{id_reg_8} +-> SCHAR);
  (dom(rgs8<+{get_new_flag_register(rgs8,carry$0,FALSE,bool(mem(256-(iy+rgs8(9|->id_reg_8))) = 127),digit_carry$0,zero$0,is_negative$0)}) = (1..18)*{id_reg_8});
  ("`DEC_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & sum$0: SCHAR & is_negative$0: BOOL & carry$0: BOOL & digit_carry$0: BOOL & zero$0: BOOL & substract8SCHAR(rgs8(rr),1) = (sum$0,is_negative$0,carry$0,digit_carry$0)|->zero$0);
  (rgs8<+({rr|->sum$0}\/{get_new_flag_register(rgs8,carry$0,TRUE,bool(rgs8(rr) = -128),digit_carry$0,zero$0,is_negative$0)}): (1..18)*{id_reg_8} +-> SCHAR);
  (dom(rgs8<+({rr|->sum$0}\/{get_new_flag_register(rgs8,carry$0,TRUE,bool(rgs8(rr) = -128),digit_carry$0,zero$0,is_negative$0)})) = (1..18)*{id_reg_8});
  (rgs8<+{get_new_flag_register(rgs8,carry$0,TRUE,bool(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) = -128),digit_carry$0,zero$0,is_negative$0)}: (1..18)*{id_reg_8} +-> SCHAR);
  (dom(rgs8<+{get_new_flag_register(rgs8,carry$0,TRUE,bool(mem(SSHORTINT_TO_USHORTINT(SCHAR_TO_SSHORTINT(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) = -128),digit_carry$0,zero$0,is_negative$0)}) = (1..18)*{id_reg_8});
  (rgs8<+{get_new_flag_register(rgs8,carry$0,TRUE,bool(mem(256-(ix+rgs8(9|->id_reg_8))) = -128),digit_carry$0,zero$0,is_negative$0)}: (1..18)*{id_reg_8} +-> SCHAR);
  (dom(rgs8<+{get_new_flag_register(rgs8,carry$0,TRUE,bool(mem(256-(ix+rgs8(9|->id_reg_8))) = -128),digit_carry$0,zero$0,is_negative$0)}) = (1..18)*{id_reg_8});
  (rgs8<+{get_new_flag_register(rgs8,carry$0,TRUE,bool(mem(256-(iy+rgs8(9|->id_reg_8))) = -128),digit_carry$0,zero$0,is_negative$0)}: (1..18)*{id_reg_8} +-> SCHAR);
  (dom(rgs8<+{get_new_flag_register(rgs8,carry$0,TRUE,bool(mem(256-(iy+rgs8(9|->id_reg_8))) = -128),digit_carry$0,zero$0,is_negative$0)}) = (1..18)*{id_reg_8})
END
&
THEORY EnumerateX IS
  id_reg_8 == {a0,f0,f_0,a_0,b0,c0,b_0,c_0,d0,e0,d_0,e_0,h0,l0,h_0,l_0,i0,r0};
  id_reg_16 == {BC,DE,HL,SP,AF}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, local_op == OK)
END
