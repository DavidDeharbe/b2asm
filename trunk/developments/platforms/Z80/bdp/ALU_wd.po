
THEORY ProofList IS
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.5,(_f(298) => _f(299));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.4,(_f(296) => _f(297));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.3,(_f(294) => _f(295));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.2,(_f(292) => _f(293));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.1,(_f(290) => _f(291));
_f(5) & _f(4) & Properties.139,(_f(288) => _f(289));
_f(5) & _f(4) & Properties.138,(_f(286) => _f(287));
_f(5) & _f(4) & Properties.137,(_f(284) => _f(285));
_f(5) & _f(4) & Properties.136,(_f(282) => _f(283));
_f(5) & _f(4) & Properties.135,(_f(280) => _f(281));
_f(5) & _f(4) & Properties.134,(_f(278) => _f(279));
_f(5) & _f(4) & Properties.133,(_f(276) => _f(277));
_f(5) & _f(4) & Properties.132,(_f(274) => _f(275));
_f(5) & _f(4) & Properties.131,(_f(272) => _f(273));
_f(5) & _f(4) & Properties.130,(_f(270) => _f(271));
_f(5) & _f(4) & Properties.129,(_f(268) => _f(269));
_f(5) & _f(4) & Properties.128,(_f(266) => _f(267));
_f(5) & _f(4) & Properties.127,(_f(264) => _f(265));
_f(5) & _f(4) & Properties.126,(_f(262) => _f(263));
_f(5) & _f(4) & Properties.125,(_f(260) => _f(261));
_f(5) & _f(4) & Properties.124,(_f(258) => _f(259));
_f(5) & _f(4) & Properties.123,(_f(256) => _f(257));
_f(5) & _f(4) & Properties.122,(_f(254) => _f(255));
_f(5) & _f(4) & Properties.121,(_f(252) => _f(253));
_f(5) & _f(4) & Properties.120,(_f(250) => _f(251));
_f(5) & _f(4) & Properties.119,(_f(248) => _f(249));
_f(5) & _f(4) & Properties.118,(_f(246) => _f(247));
_f(5) & _f(4) & Properties.117,(_f(244) => _f(245));
_f(5) & _f(4) & Properties.116,(_f(242) => _f(243));
_f(5) & _f(4) & Properties.115,(_f(240) => _f(241));
_f(5) & _f(4) & Properties.114,(_f(238) => _f(239));
_f(5) & _f(4) & Properties.113,(_f(236) => _f(237));
_f(5) & _f(4) & Properties.112,(_f(234) => _f(235));
_f(5) & _f(4) & Properties.111,(_f(232) => _f(233));
_f(5) & _f(4) & Properties.110,(_f(230) => _f(231));
_f(5) & _f(4) & Properties.109,(_f(228) => _f(229));
_f(5) & _f(4) & Properties.108,(_f(226) => _f(227));
_f(5) & _f(4) & Properties.107,(_f(224) => _f(225));
_f(5) & _f(4) & Properties.106,(_f(222) => _f(223));
_f(5) & _f(4) & Properties.105,(_f(220) => _f(221));
_f(5) & _f(4) & Properties.104,(_f(218) => _f(219));
_f(5) & _f(4) & Properties.103,(_f(216) => _f(217));
_f(5) & _f(4) & Properties.102,(_f(214) => _f(215));
_f(5) & _f(4) & Properties.101,(_f(212) => _f(213));
_f(5) & _f(4) & Properties.100,(_f(210) => _f(211));
_f(5) & _f(4) & Properties.99,(_f(208) => _f(209));
_f(5) & _f(4) & Properties.98,(_f(206) => _f(207));
_f(5) & _f(4) & Properties.97,(_f(204) => _f(205));
_f(5) & _f(4) & Properties.96,(_f(202) => _f(203));
_f(5) & _f(4) & Properties.95,(_f(200) => _f(201));
_f(5) & _f(4) & Properties.94,(_f(198) => _f(199));
_f(5) & _f(4) & Properties.93,(_f(196) => _f(197));
_f(5) & _f(4) & Properties.92,(_f(194) => _f(195));
_f(5) & _f(4) & Properties.91,(_f(192) => _f(193));
_f(5) & _f(4) & Properties.90,(_f(190) => _f(191));
_f(5) & _f(4) & Properties.89,(_f(188) => _f(189));
_f(5) & _f(4) & Properties.88,(_f(186) => _f(187));
_f(5) & _f(4) & Properties.87,(_f(184) => _f(185));
_f(5) & _f(4) & Properties.86,(_f(182) => _f(183));
_f(5) & _f(4) & Properties.85,(_f(180) => _f(181));
_f(5) & _f(4) & Properties.84,(_f(178) => _f(179));
_f(5) & _f(4) & Properties.83,(_f(176) => _f(177));
_f(5) & _f(4) & Properties.82,(_f(174) => _f(175));
_f(5) & _f(4) & Properties.81,(_f(172) => _f(173));
_f(5) & _f(4) & Properties.80,(_f(170) => _f(171));
_f(5) & _f(4) & Properties.79,(_f(168) => _f(169));
_f(5) & _f(4) & Properties.78,(_f(166) => _f(167));
_f(5) & _f(4) & Properties.77,(_f(164) => _f(165));
_f(5) & _f(4) & Properties.76,(_f(162) => _f(163));
_f(5) & _f(4) & Properties.75,(_f(160) => _f(161));
_f(5) & _f(4) & Properties.74,(_f(158) => _f(159));
_f(5) & _f(4) & Properties.73,(_f(156) => _f(157));
_f(5) & _f(4) & Properties.72,(_f(154) => _f(155));
_f(5) & _f(4) & Properties.71,(_f(152) => _f(153));
_f(5) & _f(4) & Properties.70,(_f(150) => _f(151));
_f(5) & _f(4) & Properties.69,(_f(148) => _f(149));
_f(5) & _f(4) & Properties.68,(_f(146) => _f(147));
_f(5) & _f(4) & Properties.67,(_f(144) => _f(145));
_f(5) & _f(4) & Properties.66,(_f(142) => _f(143));
_f(5) & _f(4) & Properties.65,(_f(140) => _f(141));
_f(5) & _f(4) & Properties.64,(_f(138) => _f(139));
_f(5) & _f(4) & Properties.63,(_f(136) => _f(137));
_f(5) & _f(4) & Properties.62,(_f(134) => _f(135));
_f(5) & _f(4) & Properties.61,(_f(132) => _f(133));
_f(5) & _f(4) & Properties.60,(_f(130) => _f(131));
_f(5) & _f(4) & Properties.59,(_f(128) => _f(129));
_f(5) & _f(4) & Properties.58,(_f(126) => _f(127));
_f(5) & _f(4) & Properties.57,(_f(124) => _f(125));
_f(5) & _f(4) & Properties.56,(_f(122) => _f(123));
_f(5) & _f(4) & Properties.55,(_f(120) => _f(121));
_f(5) & _f(4) & Properties.54,(_f(118) => _f(119));
_f(5) & _f(4) & Properties.53,(_f(116) => _f(117));
_f(5) & _f(4) & Properties.52,(_f(114) => _f(115));
_f(5) & _f(4) & Properties.51,(_f(112) => _f(113));
_f(5) & _f(4) & Properties.50,(_f(110) => _f(111));
_f(5) & _f(4) & Properties.49,(_f(108) => _f(109));
_f(5) & _f(4) & Properties.48,(_f(106) => _f(107));
_f(5) & _f(4) & Properties.47,(_f(104) => _f(105));
_f(5) & _f(4) & Properties.46,(_f(102) => _f(103));
_f(5) & _f(4) & Properties.45,(_f(100) => _f(101));
_f(5) & _f(4) & Properties.44,(_f(98) => _f(99));
_f(5) & _f(4) & Properties.43,(_f(96) => _f(97));
_f(5) & _f(4) & Properties.42,(_f(94) => _f(95));
_f(5) & _f(4) & Properties.41,(_f(92) => _f(93));
_f(5) & _f(4) & Properties.40,(_f(90) => _f(91));
_f(5) & _f(4) & Properties.39,(_f(88) => _f(89));
_f(5) & _f(4) & Properties.38,(_f(86) => _f(87));
_f(5) & _f(4) & Properties.37,(_f(84) => _f(85));
_f(5) & _f(4) & Properties.36,(_f(82) => _f(83));
_f(5) & _f(4) & Properties.35,(_f(80) => _f(81));
_f(5) & _f(4) & Properties.34,(_f(78) => _f(79));
_f(5) & _f(4) & Properties.33,(_f(76) => _f(77));
_f(5) & _f(4) & Properties.32,(_f(74) => _f(75));
_f(5) & _f(4) & Properties.31,(_f(72) => _f(73));
_f(5) & _f(4) & Properties.30,(_f(70) => _f(71));
_f(5) & _f(4) & Properties.29,(_f(68) => _f(69));
_f(5) & _f(4) & Properties.28,(_f(66) => _f(67));
_f(5) & _f(4) & Properties.27,(_f(64) => _f(65));
_f(5) & _f(4) & Properties.26,(_f(62) => _f(63));
_f(5) & _f(4) & Properties.25,(_f(60) => _f(61));
_f(5) & _f(4) & Properties.24,(_f(58) => _f(59));
_f(5) & _f(4) & Properties.23,(_f(56) => _f(57));
_f(5) & _f(4) & Properties.22,(_f(54) => _f(55));
_f(5) & _f(4) & Properties.21,(_f(52) => _f(53));
_f(5) & _f(4) & Properties.20,(_f(50) => _f(51));
_f(5) & _f(4) & Properties.19,(_f(48) => _f(49));
_f(5) & _f(4) & Properties.18,(_f(46) => _f(47));
_f(5) & _f(4) & Properties.17,(_f(44) => _f(45));
_f(5) & _f(4) & Properties.16,(_f(42) => _f(43));
_f(5) & _f(4) & Properties.15,(_f(40) => _f(41));
_f(5) & _f(4) & Properties.14,(_f(38) => _f(39));
_f(5) & _f(4) & Properties.13,(_f(36) => _f(37));
_f(5) & _f(4) & Properties.12,(_f(34) => _f(35));
_f(5) & _f(4) & Properties.11,(_f(32) => _f(33));
_f(5) & _f(4) & Properties.10,(_f(30) => _f(31));
_f(5) & _f(4) & Properties.9,(_f(28) => _f(29));
_f(5) & _f(4) & Properties.8,(_f(26) => _f(27));
_f(5) & _f(4) & Properties.7,(_f(24) => _f(25));
_f(5) & _f(4) & Properties.6,(_f(22) => _f(23));
_f(5) & _f(4) & Properties.5,(_f(20) => _f(21));
_f(5) & _f(4) & Properties.4,(_f(18) => _f(19));
_f(5) & _f(4) & Properties.3,(_f(16) => _f(17));
_f(5) & _f(4) & Properties.2,(_f(14) => _f(15));
_f(5) & _f(4) & Properties.1,(_f(12) => _f(13))

END
&

THEORY Formulas IS
("`Component constraints'" & btrue);
("`Used machines constraints'" & btrue);
("`Component properties'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotaterightSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(1)}\/{1|->SCHAR_TO_BYTE(w0)(2)}\/{2|->SCHAR_TO_BYTE(w0)(3)}\/{3|->SCHAR_TO_BYTE(w0)(4)}\/{4|->SCHAR_TO_BYTE(w0)(5)}\/{5|->SCHAR_TO_BYTE(w0)(6)}\/{6|->SCHAR_TO_BYTE(w0)(7)}\/{7|->SCHAR_TO_BYTE(w0)(0)})|->bool(SCHAR_TO_BYTE(w0)(0) = 1)));
("`Seen and used machines properties'" & SCHAR_LENGTH: INTEGER & 0<=SCHAR_LENGTH & SCHAR_LENGTH = 8 & NB_SCHARS: INTEGER & 0<=NB_SCHARS & NB_SCHARS = 2**SCHAR_LENGTH & SCHAR = -128..127 & SCHAR_POSITION = 0..SCHAR_LENGTH-1 & UCHAR = 0..255 & SSHORTINT_LENGTH: INTEGER & 0<=SSHORTINT_LENGTH & SSHORTINT_LENGTH = 16 & NB_SSHORTINTS: INTEGER & 0<=NB_SSHORTINTS & NB_SSHORTINTS = 2**SSHORTINT_LENGTH & SSHORTINT = -32768..32767 & SSHORTINT_POSITION = 0..SSHORTINT_LENGTH-1 & BV16: POW(BIT_VECTOR) & BV16 = SET(vv).(vv: BIT_VECTOR & size(vv) = SSHORTINT_LENGTH) & BYTE_TO_UCHAR: BYTE +-> UCHAR & dom(BYTE_TO_UCHAR) = BYTE & BYTE_TO_UCHAR = %v0.(v0: BYTE | (-128)*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & UCHAR_TO_BYTE: UCHAR +-> BYTE & dom(UCHAR_TO_BYTE) = UCHAR & UCHAR_TO_BYTE = BYTE_TO_UCHAR~ & USHORTINT = 0..65535 & NB_INSTRUCTIONS: INTEGER & 0<=NB_INSTRUCTIONS & INST_SZ: INTEGER & 0<=INST_SZ & INST_SZ = 16 & NB_INSTRUCTIONS = 2**INST_SZ & INSTRUCTION_MAX = NB_INSTRUCTIONS-1 & INSTRUCTION = USHORTINT & INSTRUCTION_NEXT: USHORTINT +-> USHORTINT & dom(INSTRUCTION_NEXT) = USHORTINT & INSTRUCTION_NEXT = SET(p0,q0).(p0: INSTRUCTION & q0: INSTRUCTION & 0<=p0 & p0+1<=NB_INSTRUCTIONS-1 & q0 = p0+1)\/{NB_INSTRUCTIONS-1|->0} & INSTRUCTION_JUMP = %(p0,e0).(p0: INSTRUCTION & e0: -126..129 | p0+e0) & BYTE_TO_SCHAR: BYTE +-> SCHAR & dom(BYTE_TO_SCHAR) = BYTE & BYTE_TO_SCHAR = %v0.(v0: BYTE | (-128)*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & SCHAR_TO_BYTE: SCHAR +-> BYTE & dom(SCHAR_TO_BYTE) = SCHAR & SCHAR_TO_BYTE = BYTE_TO_SCHAR~ & BV16_TO_SSHORTINT: BV16 +-> SSHORTINT & dom(BV16_TO_SSHORTINT) = BV16 & BV16_TO_SSHORTINT = %v0.(v0: BV16 | (-32768)*v0(15)+16384*v0(14)+8192*v0(13)+4096*v0(12)+2048*v0(11)+1024*v0(10)+512*v0(9)+256*v0(8)+128*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & SSHORTINT_TO_BV16: SSHORTINT +-> BV16 & dom(SSHORTINT_TO_BV16) = SSHORTINT & SSHORTINT_TO_BV16 = BV16_TO_SSHORTINT~ & BYTE_TO_BV16: BV16*BV16 +-> BV16 & dom(BYTE_TO_BV16) = BV16*BV16 & BYTE_TO_BV16 = %(v1,v2).(v1: BV16 & v2: BV16 | {0|->v2(0)}\/{1|->v2(1)}\/{2|->v2(2)}\/{3|->v2(3)}\/{4|->v2(4)}\/{5|->v2(5)}\/{6|->v2(6)}\/{7|->v2(7)}\/{8|->v1(0)}\/{9|->v1(1)}\/{10|->v1(2)}\/{11|->v1(3)}\/{12|->v1(4)}\/{13|->v1(5)}\/{14|->v1(6)}\/{15|->v1(7)}) & SCHAR_TO_SSHORTINT: SCHAR*SCHAR +-> SSHORTINT & dom(SCHAR_TO_SSHORTINT) = SCHAR*SCHAR & SCHAR_TO_SSHORTINT = %(w1,w2).(w1: SCHAR & w2: SCHAR | BV16_TO_SSHORTINT(BYTE_TO_BV16(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))) & SSHORTINT_TO_SCHAR: SSHORTINT +-> SCHAR*SCHAR & dom(SSHORTINT_TO_SCHAR) = SSHORTINT & SSHORTINT_TO_SCHAR = SCHAR_TO_SSHORTINT~ & BV16_TO_USHORTINT: BV16 +-> USHORTINT & dom(BV16_TO_USHORTINT) = BV16 & BV16_TO_USHORTINT = %v0.(v0: BV16 | (-32768)*v0(15)+16384*v0(14)+8192*v0(13)+4096*v0(12)+2048*v0(11)+1024*v0(10)+512*v0(9)+256*v0(8)+128*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & USHORTINT_TO_BV16: USHORTINT +-> BV16 & dom(USHORTINT_TO_BV16) = USHORTINT & USHORTINT_TO_BV16 = BV16_TO_USHORTINT~ & SSHORTINT_TO_USHORTINT: SSHORTINT +-> USHORTINT & dom(SSHORTINT_TO_USHORTINT) = SSHORTINT & SSHORTINT_TO_USHORTINT = %v0.(v0: SSHORTINT | BV16_TO_USHORTINT(SSHORTINT_TO_BV16(v0))) & USHORTINT_TO_SSHORTINT: USHORTINT +-> SSHORTINT & dom(USHORTINT_TO_SSHORTINT) = USHORTINT & USHORTINT_TO_SSHORTINT = SSHORTINT_TO_USHORTINT~ & BIT = 0..1 & bit_not: BIT +-> BIT & dom(bit_not) = BIT & !bb.(bb: BIT => bit_not(bb) = 1-bb) & bit_and: BIT*BIT +-> BIT & dom(bit_and) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_and(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_and(b1,b2) = 1) & b2 = 1) & bit_or: BIT*BIT +-> BIT & dom(bit_or) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_or(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_or(b1,b2) = 1) or b2 = 1) & bit_xor: BIT*BIT +-> BIT & dom(bit_xor) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_xor(b1,b2) = 1 => not(b1 = b2)) & (not(b1 = b2) => bit_xor(b1,b2) = 1)) & bool_to_bit: BOOL +-> BIT & dom(bool_to_bit) = BOOL & bool_to_bit = {TRUE|->1}\/{FALSE|->0} & BIT_VECTOR = seq(BIT)-{{}} & bv_size: BIT_VECTOR +-> NATURAL-{0} & dom(bv_size) = BIT_VECTOR & bv_size = %bv.(bv: BIT_VECTOR | size(bv)) & bv_catenate: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_catenate) = BIT_VECTOR*BIT_VECTOR & bv_catenate = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR | v1^v2) & bv_sub: BIT_VECTOR*NATURAL*NATURAL +-> BIT_VECTOR & dom(bv_sub) = BIT_VECTOR*NATURAL*NATURAL & bv_sub = %(bv,low,high).(bv: BIT_VECTOR & low: 1..bv_size(bv) & high: 1..bv_size(bv) & low<=high | low..high<|bv) & bv_zero: NATURAL-{0} +-> BIT_VECTOR & dom(bv_zero) = NATURAL-{0} & bv_zero = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{0}) & bv_one: NATURAL-{0} +-> BIT_VECTOR & dom(bv_one) = NATURAL-{0} & bv_one = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{1}) & bv_not: BIT_VECTOR +-> BIT_VECTOR & dom(bv_not) = BIT_VECTOR & bv_not = %v1.(v1: BIT_VECTOR | %idx.(idx: 1..size(v1) | bit_not(v1(idx)))) & bv_and: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_and) = BIT_VECTOR*BIT_VECTOR & bv_and = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_and(v1(idx),v2(idx)))) & bv_or: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_or) = BIT_VECTOR*BIT_VECTOR & bv_or = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_or(v1(idx),v2(idx)))) & bv_xor: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_xor) = BIT_VECTOR*BIT_VECTOR & bv_xor = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_xor(v1(idx),v2(idx)))) & bv_at: BIT_VECTOR*NATURAL +-> BIT & dom(bv_at) = BIT_VECTOR*NATURAL & bv_at = %(v1,idx).(v1: BIT_VECTOR & idx: INTEGER & 0<=idx & idx+1<=bv_size(v1) | v1(idx+1)) & bv_set: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_set) = BIT_VECTOR*NATURAL & bv_set = %(v1,idx).(v1: BIT_VECTOR & idx: INTEGER & 0<=idx & idx+1<=bv_size(v1) | v1<+{idx+1|->1}) & bv_clear: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_clear) = BIT_VECTOR*NATURAL & bv_clear = %(v1,idx).(v1: BIT_VECTOR & idx: INTEGER & 0<=idx & idx+1<=bv_size(v1) | v1<+{idx+1|->0}) & bv_put: BIT_VECTOR*NATURAL*BIT +-> BIT_VECTOR & dom(bv_put) = BIT_VECTOR*NATURAL*BIT & bv_put = %(v1,idx,bit).(v1: BIT_VECTOR & idx: INTEGER & 0<=idx & idx+1<=bv_size(v1) & bit: BIT | v1<+{idx+1|->bit}) & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE: POW(BIT_VECTOR) & BYTE = SET(vv).(vv: BIT_VECTOR & bv_size(vv) = BYTE_WIDTH) & BYTE_ZERO: BYTE & BYTE_ZERO = BYTE_INDEX*{0});
("`Included,imported and extended machines properties'" & btrue);
("`Component invariant'" & btrue);
("`Seen and used machines invariants'" & btrue);
("`Included,imported and extended machines invariants'" & btrue);
("`Component assertions'" & dom(add8SCHAR) = SCHAR*SCHAR & ran(add8SCHAR): POW(SCHAR) & dom(substractSCHAR) = SCHAR*SCHAR & ran(substractSCHAR): POW(SCHAR*BOOL*BOOL) & dom(andSCHAR) = SCHAR*SCHAR & ran(andSCHAR): POW(SCHAR*BOOL) & dom(iorSCHAR) = SCHAR*SCHAR & ran(iorSCHAR): POW(SCHAR*BOOL) & dom(xorSCHAR) = SCHAR*SCHAR & ran(xorSCHAR): POW(SCHAR*BOOL) & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & ran(bitclearSCHAR): POW(SCHAR) & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & ran(bitsetSCHAR): POW(SCHAR) & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & ran(bitgetSCHAR): POW(BIT) & dom(complementSCHAR) = SCHAR & ran(complementSCHAR): POW(SCHAR) & dom(swapSCHAR) = SCHAR & ran(swapSCHAR): POW(SCHAR) & ran(rotateleftSCHAR): POW(SCHAR*BOOL) & dom(rotateleftSCHAR) = SCHAR & dom(rotaterightSCHAR) = SCHAR & ran(rotaterightSCHAR): POW(SCHAR*BOOL) & !(w0,idx).(w0: SCHAR & idx: SCHAR_POSITION => bitgetSCHAR(w0,idx) = SCHAR_TO_BYTE(w0)(idx)) & max(SCHAR) = 127);
("`Seen and used machines assertions'" & NB_SCHARS = 256 & !n0.(n0: SCHAR => 0<=n0) & !n0.(n0: SCHAR => n0<=255) & 2**16 = 65536 & INSTRUCTION_NEXT: USHORTINT +-> USHORTINT & dom(INSTRUCTION_NEXT) = USHORTINT & 0 = SCHAR_TO_SSHORTINT(0,0) & bit_not(0) = 1 & bit_not(1) = 0 & !bb.(bb: BIT => bit_not(bit_not(bb)) = bb) & bit_and(0,0) = 0 & bit_and(0,1) = 0 & bit_and(1,0) = 0 & bit_and(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 1 => bit_and(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 0 => bit_and(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3)) & !b1.(b1: BIT => bit_and(b1,1) = b1) & !b1.(b1: BIT => bit_and(b1,0) = 0) & bit_or(0,0) = 0 & bit_or(0,1) = 1 & bit_or(1,0) = 1 & bit_or(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 1 => bit_or(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 0 => bit_or(b2,b1) = 0) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 1 => b1 = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 0 => b1 = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3)) & !b1.(b1: BIT => bit_or(b1,1) = 1) & !b1.(b1: BIT => bit_or(b1,0) = b1) & !b1.(b1: BIT => bit_or(1,b1) = 1) & !b1.(b1: BIT => bit_or(0,b1) = b1) & bit_xor(0,0) = 0 & bit_xor(0,1) = 1 & bit_xor(1,0) = 1 & bit_xor(1,1) = 0 & !(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 1 => bit_xor(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 0 => bit_xor(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3)) & !bb.(bb: BIT => bit_xor(bb,bb) = 0) & bool_to_bit(TRUE) = 1 & bool_to_bit(FALSE) = 0 & !bv.(bv: BIT_VECTOR => bv_size(bv_not(bv)) = bv_size(bv)) & !(bv,indx).(bv: BIT_VECTOR & indx: 1..bv_size(bv) => bv_not(bv_not(bv))(indx) = bv(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR => bv_size(bv_catenate(v1,v2)) = bv_size(v1)+bv_size(v2)) & !(bv,low,high).(bv: BIT_VECTOR & low: INTEGER & 0<=low & high: INTEGER & 0<=high & low<=high => bv_size(bv_sub(bv,low,high)) = high-low) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_and(v1,v2)) = bv_size(v2)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 1..bv_size(v1) => bv_and(v1,v2)(indx) = bv_and(v2,v1)(indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: 1..bv_size(v1) => bv_and(v1,bv_and(v2,v3))(indx) = bv_and(bv_and(v1,v2),v3)(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 1..bv_size(bv) => bv_and(bv,bv_zero(bv_size(bv)))(indx) = bv_zero(bv_size(bv))(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 1..bv_size(bv) => bv_and(bv,bv_one(bv_size(bv)))(indx) = bv(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v1)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 1..bv_size(v1) => bv_or(v1,v2)(indx) = bv_or(v2,v1)(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v2)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: 1..bv_size(v1) => bv_or(v1,bv_or(v2,v3))(indx) = bv_or(bv_or(v1,v2),v3)(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 1..bv_size(bv) => bv_or(bv,bv_one(bv_size(bv)))(indx) = bv_one(bv_size(bv))(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 1..bv_size(bv) => bv_or(bv,bv_zero(bv_size(bv)))(indx) = bv(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v1)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v2)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 1..bv_size(v1) => bv_xor(v1,v2)(indx) = bv_xor(v2,v1)(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 1..bv_size(bv) => bv_xor(bv,bv)(indx) = bv_zero(bv_size(bv))(indx)));
("`Included,imported and extended machines assertions'" & btrue);
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(w1,w2: dom(FUNC_IN_r_9C0));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(bool(w1+1<=0): dom(bool_to_bit));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(bool(w1 = 0): dom(bool_to_bit));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(7: dom(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(SCHAR_TO_BYTE(w2): dom(SCHAR_TO_BYTE(w2)) +-> ran(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(6: dom(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(SCHAR_TO_BYTE(w2): dom(SCHAR_TO_BYTE(w2)) +-> ran(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(5: dom(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(SCHAR_TO_BYTE(w2): dom(SCHAR_TO_BYTE(w2)) +-> ran(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(4: dom(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(SCHAR_TO_BYTE(w2): dom(SCHAR_TO_BYTE(w2)) +-> ran(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(3: dom(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(SCHAR_TO_BYTE(w2): dom(SCHAR_TO_BYTE(w2)) +-> ran(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(2: dom(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(SCHAR_TO_BYTE(w2): dom(SCHAR_TO_BYTE(w2)) +-> ran(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(1: dom(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(SCHAR_TO_BYTE(w2): dom(SCHAR_TO_BYTE(w2)) +-> ran(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(0: dom(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(SCHAR_TO_BYTE(w2): dom(SCHAR_TO_BYTE(w2)) +-> ran(SCHAR_TO_BYTE(w2)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(0<=SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0): dom(bool_to_bit));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE);
(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}): dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE);
(bool(w1+1<=0): dom(bool_to_bit));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE);
(bool(w1 = 0): dom(bool_to_bit));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE);
(2: dom(SCHAR_TO_BYTE(w1)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE);
(SCHAR_TO_BYTE(w1): dom(SCHAR_TO_BYTE(w1)) +-> ran(SCHAR_TO_BYTE(w1)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE);
(1: dom(SCHAR_TO_BYTE(w1)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE);
(SCHAR_TO_BYTE(w1): dom(SCHAR_TO_BYTE(w1)) +-> ran(SCHAR_TO_BYTE(w1)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE);
(0: dom(SCHAR_TO_BYTE(w1)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE);
(SCHAR_TO_BYTE(w1): dom(SCHAR_TO_BYTE(w1)) +-> ran(SCHAR_TO_BYTE(w1)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE);
(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)): dom(bool_to_bit));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE);
(bool(w1 = 127): dom(bool_to_bit));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE);
(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}): dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR);
(r1,f2: dom(FUNC_OP_ARI));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR);
(bool(r1+1<=0): dom(bool_to_bit));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR);
(bool(r1 = 0): dom(bool_to_bit));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR);
(2: dom(SCHAR_TO_BYTE(r1)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR);
(SCHAR_TO_BYTE(r1): dom(SCHAR_TO_BYTE(r1)) +-> ran(SCHAR_TO_BYTE(r1)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR);
(1: dom(SCHAR_TO_BYTE(r1)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR);
(SCHAR_TO_BYTE(r1): dom(SCHAR_TO_BYTE(r1)) +-> ran(SCHAR_TO_BYTE(r1)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR);
(0: dom(SCHAR_TO_BYTE(r1)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR);
(SCHAR_TO_BYTE(r1): dom(SCHAR_TO_BYTE(r1)) +-> ran(SCHAR_TO_BYTE(r1)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR);
(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)): dom(bool_to_bit));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR);
(bool(r1 = 127): dom(bool_to_bit));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR);
(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}): dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & w1: SCHAR);
(bool(w1 = 0): dom(bool_to_bit));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & w1+w2: SCHAR);
(w1,w2: dom(add8SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & w1+w2: SCHAR & (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & w1+w2+1<= -128);
(w1,w2: dom(add8SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & w1+w2: SCHAR & (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & 128<=w1+w2);
(w1,w2: dom(add8SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 & w1+w2<=65535);
(w1,w2: dom(add16SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 & (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & 65536<=w1+w2);
(w1,w2: dom(add16SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & w1-w2: INTEGER & w1-w2+1<=0);
(w1,w2: dom(substractSCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & w1-w2: INTEGER & (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & 0<=w1-w2);
(w1,w2: dom(substractSCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR);
(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2): dom(bv_and));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR);
(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)): dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR);
(w1,w2: dom(andSCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR);
(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2): dom(bv_and));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR);
(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)): dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR);
(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2): dom(bv_and));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR);
(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)): dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR);
(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2): dom(bv_or));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR);
(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)): dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR);
(w1,w2: dom(iorSCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR);
(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2): dom(bv_or));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR);
(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)): dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR);
(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2): dom(bv_or));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR);
(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)): dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR);
(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2): dom(bv_xor));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR);
(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)): dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR);
(w1,w2: dom(xorSCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR);
(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2): dom(bv_xor));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR);
(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)): dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR);
(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2): dom(bv_xor));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR);
(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)): dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & w0: SCHAR & i0: SCHAR_POSITION);
(i0: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & w0: SCHAR & i0: SCHAR_POSITION);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & w0: SCHAR & i0: SCHAR_POSITION);
(w0,i0: dom(bitsetSCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & w0: SCHAR & i0: SCHAR_POSITION);
(SCHAR_TO_BYTE(w0),i0: dom(bv_set));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & w0: SCHAR & i0: SCHAR_POSITION);
(bv_set(SCHAR_TO_BYTE(w0),i0): dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & w0: SCHAR & i0: SCHAR_POSITION & b0: BIT);
(w0,i0: dom(bitclearSCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & w0: SCHAR & i0: SCHAR_POSITION & b0: BIT);
(SCHAR_TO_BYTE(w0),i0: dom(bv_clear));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & w0: SCHAR & i0: SCHAR_POSITION & b0: BIT);
(bv_clear(SCHAR_TO_BYTE(w0),i0): dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & w0: SCHAR);
(SCHAR_TO_BYTE(w0): dom(bv_not));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & w0: SCHAR);
(bv_not(SCHAR_TO_BYTE(w0)): dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(4: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(5: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(6: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(7: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(0: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(1: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(2: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(3: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)}: dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(7: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(0: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(1: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(2: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(3: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(4: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(5: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(6: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)}: dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(7: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(1: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(2: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(3: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(4: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(5: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(6: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(7: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(0: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
({0|->SCHAR_TO_BYTE(w0)(1)}\/{1|->SCHAR_TO_BYTE(w0)(2)}\/{2|->SCHAR_TO_BYTE(w0)(3)}\/{3|->SCHAR_TO_BYTE(w0)(4)}\/{4|->SCHAR_TO_BYTE(w0)(5)}\/{5|->SCHAR_TO_BYTE(w0)(6)}\/{6|->SCHAR_TO_BYTE(w0)(7)}\/{7|->SCHAR_TO_BYTE(w0)(0)}: dom(BYTE_TO_SCHAR));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(0: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & FUNC_IN_r_9C0: SCHAR*SCHAR +-> SCHAR & dom(FUNC_IN_r_9C0) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & SCHAR_TO_BYTE(w2): BYTE => FUNC_IN_r_9C0(w1,w2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w2)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->0}\/{2|->bool_to_bit(bool((SCHAR_TO_BYTE(w2)(7)+SCHAR_TO_BYTE(w2)(6)+SCHAR_TO_BYTE(w2)(5)+SCHAR_TO_BYTE(w2)(4)+SCHAR_TO_BYTE(w2)(3)+SCHAR_TO_BYTE(w2)(2)+SCHAR_TO_BYTE(w2)(1)+SCHAR_TO_BYTE(w2)(0)) mod 2 = 0))}\/{1|->0}))) & FUNC_INC_r: SCHAR +-> SCHAR & dom(FUNC_INC_r) = SCHAR & !w1.(w1: SCHAR & SCHAR_TO_BYTE(w1): BYTE => FUNC_INC_r(w1) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(w1)<+({7|->bool_to_bit(bool(w1+1<=0))}\/{6|->bool_to_bit(bool(w1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(w1)(2)*4+SCHAR_TO_BYTE(w1)(1)*2+SCHAR_TO_BYTE(w1)(0)))}\/{2|->bool_to_bit(bool(w1 = 127))}\/{1|->0}))) & FUNC_OP_ARI: SCHAR*SCHAR +-> SCHAR & dom(FUNC_OP_ARI) = SCHAR*SCHAR & !(r1,f2).(r1: SCHAR & f2: SCHAR & SCHAR_TO_BYTE(r1): BIT_VECTOR & SCHAR_TO_BYTE(f2): BIT_VECTOR => FUNC_OP_ARI(r1,f2) = BYTE_TO_SCHAR(SCHAR_TO_BYTE(f2)<+({7|->bool_to_bit(bool(r1+1<=0))}\/{6|->bool_to_bit(bool(r1 = 0))}\/{4|->bool_to_bit(bool(7<=SCHAR_TO_BYTE(r1)(2)*4+SCHAR_TO_BYTE(r1)(1)*2+SCHAR_TO_BYTE(r1)(0)))}\/{2|->bool_to_bit(bool(r1 = 127))}\/{1|->0}))) & is_zeroCHAR: SCHAR +-> BIT & dom(is_zeroCHAR) = SCHAR & is_zeroCHAR = %w1.(w1: SCHAR | bool_to_bit(bool(w1 = 0))) & add8SCHAR: SCHAR*SCHAR +-> SCHAR & dom(add8SCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1+w2: SCHAR => (w1+w2: SCHAR => add8SCHAR(w1,w2) = w1+w2) & (w1+w2+1<= -128 => add8SCHAR(w1,w2) = w1+w2+256) & (128<=w1+w2 => add8SCHAR(w1,w2) = w1+w2-256)) & add16SCHAR: SSHORTINT*SSHORTINT +-> SSHORTINT*BOOL*BOOL & dom(add16SCHAR) = SSHORTINT*SSHORTINT & !(w1,w2).(w1: SSHORTINT & w2: SSHORTINT & w1+w2: INTEGER & 0<=w1+w2 => (w1+w2<=65535 => add16SCHAR(w1,w2) = (w1+w2,bool(w1+w2 = 0))|->FALSE) & (65536<=w1+w2 => add16SCHAR(w1,w2) = (w1+w2-65536,bool(w1+w2 = 65536))|->TRUE)) & substractSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL*BOOL & dom(substractSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & w1-w2: INTEGER => (w1-w2+1<=0 => substractSCHAR(w1,w2) = (w1-w2+256,FALSE)|->TRUE) & (0<=w1-w2 => substractSCHAR(w1,w2) = (w1-w2,bool(w1-w2 = 0))|->FALSE)) & andSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(andSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => andSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_and(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & iorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(iorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => iorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_or(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & xorSCHAR: SCHAR*SCHAR +-> SCHAR*BOOL & dom(xorSCHAR) = SCHAR*SCHAR & !(w1,w2).(w1: SCHAR & w2: SCHAR & BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))): SCHAR => xorSCHAR(w1,w2) = BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))|->bool(BYTE_TO_SCHAR(bv_xor(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2))) = 0)) & bitgetSCHAR: SCHAR*SCHAR_POSITION +-> BIT & dom(bitgetSCHAR) = SCHAR*SCHAR_POSITION & bitgetSCHAR = %(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION | SCHAR_TO_BYTE(w0)(i0)) & bitsetSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitsetSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0).(w0: SCHAR & i0: SCHAR_POSITION => bitsetSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_set(SCHAR_TO_BYTE(w0),i0))) & bitclearSCHAR: SCHAR*SCHAR_POSITION +-> SCHAR & dom(bitclearSCHAR) = SCHAR*SCHAR_POSITION & !(w0,i0,b0).(w0: SCHAR & i0: SCHAR_POSITION & b0: BIT => bitclearSCHAR(w0,i0) = BYTE_TO_SCHAR(bv_clear(SCHAR_TO_BYTE(w0),i0))) & complementSCHAR: SCHAR +-> SCHAR & dom(complementSCHAR) = SCHAR & !w0.(w0: SCHAR => complementSCHAR(w0) = BYTE_TO_SCHAR(bv_not(SCHAR_TO_BYTE(w0)))) & swapSCHAR: SCHAR +-> SCHAR & dom(swapSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => swapSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(4)}\/{1|->SCHAR_TO_BYTE(w0)(5)}\/{2|->SCHAR_TO_BYTE(w0)(6)}\/{3|->SCHAR_TO_BYTE(w0)(7)}\/{4|->SCHAR_TO_BYTE(w0)(0)}\/{5|->SCHAR_TO_BYTE(w0)(1)}\/{6|->SCHAR_TO_BYTE(w0)(2)}\/{7|->SCHAR_TO_BYTE(w0)(3)})) & rotateleftSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotateleftSCHAR) = SCHAR & !w0.(w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR => rotateleftSCHAR(w0) = BYTE_TO_SCHAR({0|->SCHAR_TO_BYTE(w0)(7)}\/{1|->SCHAR_TO_BYTE(w0)(0)}\/{2|->SCHAR_TO_BYTE(w0)(1)}\/{3|->SCHAR_TO_BYTE(w0)(2)}\/{4|->SCHAR_TO_BYTE(w0)(3)}\/{5|->SCHAR_TO_BYTE(w0)(4)}\/{6|->SCHAR_TO_BYTE(w0)(5)}\/{7|->SCHAR_TO_BYTE(w0)(6)})|->bool(SCHAR_TO_BYTE(w0)(7) = 1)) & rotaterightSCHAR: SCHAR +-> SCHAR*BOOL & dom(rotaterightSCHAR) = SCHAR & w0: SCHAR & SCHAR_TO_BYTE(w0): BIT_VECTOR);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & ran(add8SCHAR): POW(SCHAR) & ran(substractSCHAR): POW(SCHAR*BOOL*BOOL) & ran(andSCHAR): POW(SCHAR*BOOL) & ran(iorSCHAR): POW(SCHAR*BOOL) & ran(xorSCHAR): POW(SCHAR*BOOL) & ran(bitclearSCHAR): POW(SCHAR) & ran(bitsetSCHAR): POW(SCHAR) & ran(bitgetSCHAR): POW(BIT) & ran(complementSCHAR): POW(SCHAR) & ran(swapSCHAR): POW(SCHAR) & ran(rotateleftSCHAR): POW(SCHAR*BOOL) & ran(rotaterightSCHAR): POW(SCHAR*BOOL) & w0: SCHAR & idx: SCHAR_POSITION);
(w0,idx: dom(bitgetSCHAR));
("`Local hypotheses'" & ran(add8SCHAR): POW(SCHAR) & ran(substractSCHAR): POW(SCHAR*BOOL*BOOL) & ran(andSCHAR): POW(SCHAR*BOOL) & ran(iorSCHAR): POW(SCHAR*BOOL) & ran(xorSCHAR): POW(SCHAR*BOOL) & ran(bitclearSCHAR): POW(SCHAR) & ran(bitsetSCHAR): POW(SCHAR) & ran(bitgetSCHAR): POW(BIT) & ran(complementSCHAR): POW(SCHAR) & ran(swapSCHAR): POW(SCHAR) & ran(rotateleftSCHAR): POW(SCHAR*BOOL) & ran(rotaterightSCHAR): POW(SCHAR*BOOL) & w0: SCHAR & idx: SCHAR_POSITION);
(idx: dom(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & ran(add8SCHAR): POW(SCHAR) & ran(substractSCHAR): POW(SCHAR*BOOL*BOOL) & ran(andSCHAR): POW(SCHAR*BOOL) & ran(iorSCHAR): POW(SCHAR*BOOL) & ran(xorSCHAR): POW(SCHAR*BOOL) & ran(bitclearSCHAR): POW(SCHAR) & ran(bitsetSCHAR): POW(SCHAR) & ran(bitgetSCHAR): POW(BIT) & ran(complementSCHAR): POW(SCHAR) & ran(swapSCHAR): POW(SCHAR) & ran(rotateleftSCHAR): POW(SCHAR*BOOL) & ran(rotaterightSCHAR): POW(SCHAR*BOOL) & w0: SCHAR & idx: SCHAR_POSITION);
(SCHAR_TO_BYTE(w0): dom(SCHAR_TO_BYTE(w0)) +-> ran(SCHAR_TO_BYTE(w0)));
("`Local hypotheses'" & ran(add8SCHAR): POW(SCHAR) & ran(substractSCHAR): POW(SCHAR*BOOL*BOOL) & ran(andSCHAR): POW(SCHAR*BOOL) & ran(iorSCHAR): POW(SCHAR*BOOL) & ran(xorSCHAR): POW(SCHAR*BOOL) & ran(bitclearSCHAR): POW(SCHAR) & ran(bitsetSCHAR): POW(SCHAR) & ran(bitgetSCHAR): POW(BIT) & ran(complementSCHAR): POW(SCHAR) & ran(swapSCHAR): POW(SCHAR) & ran(rotateleftSCHAR): POW(SCHAR*BOOL) & ran(rotaterightSCHAR): POW(SCHAR*BOOL) & !(w0,idx).(w0: SCHAR & idx: SCHAR_POSITION => bitgetSCHAR(w0,idx) = SCHAR_TO_BYTE(w0)(idx)));
(not(SCHAR = {}));
("`Local hypotheses'" & ran(add8SCHAR): POW(SCHAR) & ran(substractSCHAR): POW(SCHAR*BOOL*BOOL) & ran(andSCHAR): POW(SCHAR*BOOL) & ran(iorSCHAR): POW(SCHAR*BOOL) & ran(xorSCHAR): POW(SCHAR*BOOL) & ran(bitclearSCHAR): POW(SCHAR) & ran(bitsetSCHAR): POW(SCHAR) & ran(bitgetSCHAR): POW(BIT) & ran(complementSCHAR): POW(SCHAR) & ran(swapSCHAR): POW(SCHAR) & ran(rotateleftSCHAR): POW(SCHAR*BOOL) & ran(rotaterightSCHAR): POW(SCHAR*BOOL) & !(w0,idx).(w0: SCHAR & idx: SCHAR_POSITION => bitgetSCHAR(w0,idx) = SCHAR_TO_BYTE(w0)(idx)));
(SCHAR/\NATURAL: FIN(NATURAL))

END
&

THEORY EnumerateX 

END
