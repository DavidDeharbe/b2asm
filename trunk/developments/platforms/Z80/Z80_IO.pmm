THEORY User_Pass IS
    
Pattern( io_ports<+{rgs8(c0)|->mem(byte_bv16(rgs8(h0),rgs8(l0)))}: BYTE +-> BYTE) & io_ports<+{rgs8(c0)|->mem(byte_bv16(rgs8(h0),rgs8(l0)))}: BYTE +-> BYTE;
    
    Pattern({ushort_bv16(add16USHORT(0,nn,1))|->h_ix,ushort_bv16(nn)|->l_ix}: BV16 +-> BYTE) & ff(0) & dd & ah(ushort_bv16(add16USHORT(0,nn,1)): BV16 & ushort_bv16(nn): BV16 & ushort_bv16(add16USHORT(0,nn,1))/=ushort_bv16(nn) & h_ix: BYTE & l_ix: BYTE) & ah(add16USHORT(0,nn,1): USHORT & ran(ushort_bv16) = BV16) & pr & pr & pp(rt.0) & pp(rt.0) & ar(Arithmetic.4,Once) & ss & pr & pr & eh(USHORT,_h,Goal) & ss & pr & ss & pr & pr & pr & pp(rt.0) & ar(Arithmetic.3,Once) & pr & pr & eh(USHORT,_h,Goal) & ss & pr & pr & pr & pr & pp(rt.0);
    
Pattern( a = BYTE) & ff(0) & dd & ss & eh(dom(io_ports)) & ss & pr;

/* prova para 4 - - Funcionou */
    
Pattern(l<+{x|->y,m|->b,p|->q,t(d,f,g,h,i,j)}: u +-> c) &
ff(1) & dd & eh(update_flag_reg,_h,Goal) & ss & ph(x,y,m,b,p,q,f0,[j,i,h,1,g,1,f,d],!(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr}) = id_reg_8 & dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr}) = id_reg_8))) & ss & pr & pr & ss & pr & pr & ss & pr & ss & pr & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr ; 
    
    
    
    
/* prova para 3 - Funcionou */
Pattern(l<+{m|->b,p|->q,t(d,f,g,h,i,j)}: u +-> c) &
 ff(1) & dd & eh(update_flag_reg,_h,Goal) & ss &

ph(m,b,p,q,f0,[j,i,h,1,g,1,f,d],
 !(xx,xxr,yy,yyr,zz,zzr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr}) = id_reg_8 & dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr}) = id_reg_8))) &

 ss & pr & pr & ss & pr & ar(BIT_VECTOR.1,Once) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;


/* prova para 2 - Funcionou */
Pattern(l<+{m|->b,t(d,f,g,h,i,j)}: u +-> c) &
 ff(1) & dd & eh(update_flag_reg,_h,Goal) & ss &

ph(m,b,f0,[j,i,h,1,g,1,f,d],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) &

 ss & pr & pr & ss & pr & ar(BIT_VECTOR.1,Once) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;

/* prova para 1 - Funcionou */
Pattern(l<+{t(d,f,g,h,i,j)}: u +-> c) &
 ff(1) & dd & eh(update_flag_reg,_h,Goal) & ss &

ph(f0,[j,i,h,1,g,1,f,d],!(xx,xxr).(xx: id_reg_8 & xxr: BYTE => rgs8<+{xx|->xxr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr}) = id_reg_8 & dom(rgs8<+{xx|->xxr}) = id_reg_8)) ) &

 ss & pr & pr & ss & pr & ar(BIT_VECTOR.1,Once) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;

Operation(AssertionLemmas) & Pattern(a<+b: c +-> d) & ff(0) & dd & pr(Tac(Update_flag)) & pp(rt.0); /* Prova as multiplas substituições*/

Pattern(dom(a<+b) = c*d) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(AssertionLemmas) & Pattern(dom(a) = id_reg_8) &  ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr /* Remove assertions */
END

/*THEORY User_Pass IS
Pattern(update_refresh_reg(r_): BYTE) & ff(0) & eh(update_refresh_reg,_h,Goal) & pr;
Pattern(ran(bv_9ireg_plus_d0) = BYTE) & ff(1) & eh(bv_9ireg_plus_d0,_h,Goal) & pr;
Pattern(ran(bv_ireg_plus_d) = BV16) & ff(0) & eh(bv_ireg_plus_d,_h,Goal) & eh(ushort_bv16,_h,Goal) & ah(ran(bv16_ushort) = USHORT) & pr & pr;
Pattern(dom({1|->id_reg_8|->uchar_byte(255)}\/{2|->id_reg_8|->uchar_byte(255)}\/{3|->id_reg_8|->uchar_byte(255)}\/{4|->id_reg_8|->uchar_byte(255)}\/{5|->id_reg_8|->uchar_byte(255)}\/{6|->id_reg_8|->uchar_byte(255)}\/{7|->id_reg_8|->uchar_byte(255)}\/{8|->id_reg_8|->uchar_byte(255)}\/{9|->id_reg_8|->uchar_byte(255)}\/{10|->id_reg_8|->uchar_byte(255)}\/{11|->id_reg_8|->uchar_byte(255)}\/{12|->id_reg_8|->uchar_byte(255)}\/{13|->id_reg_8|->uchar_byte(255)}\/{14|->id_reg_8|->uchar_byte(255)}\/{15|->id_reg_8|->uchar_byte(255)}\/{16|->id_reg_8|->uchar_byte(255)}) = (1..16)*{id_reg_8}) & ff(0) & dd & ah(!xx.(xx: UCHAR => uchar_byte(xx): BYTE)) & pr & dd & ph(255,!xx.(xx: UCHAR => uchar_byte(xx): BYTE)) & pr & eh(id_reg_8,_h,Goal) & pr;
Pattern(instruction_next(pc): USHORT) & ff(1) & dd & ah(instruction_next: USHORT +-> USHORT & ran(instruction_next) = USHORT & pc: USHORT) & pr & pr & pr & pr;
Pattern({1|->id_reg_8|->uchar_byte(255)}\/{2|->id_reg_8|->uchar_byte(255)}\/{3|->id_reg_8|->uchar_byte(255)}\/{4|->id_reg_8|->uchar_byte(255)}\/{5|->id_reg_8|->uchar_byte(255)}\/{6|->id_reg_8|->uchar_byte(255)}\/{7|->id_reg_8|->uchar_byte(255)}\/{8|->id_reg_8|->uchar_byte(255)}\/{9|->id_reg_8|->uchar_byte(255)}\/{10|->id_reg_8|->uchar_byte(255)}\/{11|->id_reg_8|->uchar_byte(255)}\/{12|->id_reg_8|->uchar_byte(255)}\/{13|->id_reg_8|->uchar_byte(255)}\/{14|->id_reg_8|->uchar_byte(255)}\/{15|->id_reg_8|->uchar_byte(255)}\/{16|->id_reg_8|->uchar_byte(255)}: (1..16)*{id_reg_8} +-> BYTE) & ff(0) & ae(uchar_byte(255),aa) & dd & dd & ah(!xx.(xx: UCHAR => uchar_byte(xx): BYTE)) & pr & dd & ph(255,!xx.(xx: UCHAR => uchar_byte(xx): BYTE)) & pr & eh(uchar_byte(255),_h,Goal) & eh(id_reg_8,_h,Goal) & mp & mp & ss & pr & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr
END
*/