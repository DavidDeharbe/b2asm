\documentclass[11pt]{article}
\setlength{\topmargin}{13mm}
\setlength{\headheight}{0mm}
\setlength{\headsep}{0mm}
\setlength{\textheight}{225mm}
\setlength{\oddsidemargin}{0mm}
\setlength{\textwidth}{160mm}
\usepackage{supertabular}
%\input{psfig}

\begin{document}
\begin{sloppypar}

% DEFINITION DES CARACTERES MATHEMATIQUES B
%------------------------------------------
\def\@setmcodes#1#2#3{{\count0=#1 \count1=#3
	\loop \global\mathcode\count0=\count1 \ifnum \count0<#2
	\advance\count0 by1 \advance\count1 by1 \repeat}}

\@setmcodes{`A}{`Z}{"7441}
\@setmcodes{`a}{`z}{"7461}

\mathcode`\;="8000 % Makes ; active in math mode
{\catcode`\;=\active \gdef;{\semicolon\;}}
\mathchardef\semicolon="003B
%    Nominal distance from top of paper to top of page
\topmargin 0 pt
\textheight 53\baselineskip

%   Left margin on odd-numbered pages
\oddsidemargin  0.15 in
%   Left margin on even-numbered pages
\evensidemargin 0.35 in
%   Width of marginal notes.
\marginparwidth 1 in
%   Note that \oddsidemargin = \evensidemargin
\oddsidemargin 0.25 in
\evensidemargin 0.25 in
\marginparwidth 0.75 in
\textwidth 5.875 in % Width of text line.

\setlength{\parindent}{0pt}
\setlength{\parskip}{0ex}

% DEFINITION DES FONTS
%---------------------
% The AMS extra symbol fonts are loaded.
% Note: sometimes called euxm10
\font\msx=msam10
% Note: sometimes called euym10
\font\msy=msbm10

\newfam\msxfam \textfont\msxfam=\msx
\newfam\msyfam \textfont\msyfam=\msy

\def\famletter#1{\ifcase #1 0\or 1\or 2\or 3\or 4\or 5\or 6\or 7\or
	8\or 9\or A\or B\or C\or D\or E\or F\fi}

\edef\fx{\famletter\msxfam}
\edef\fy{\famletter\msyfam}

\def\bbold{\fam\msyfam \msy}

% SYMBOLES B
%-----------
% makes a quoted expression in mathematical text
\def\token#1{\hbox{`$#1$'}}
% used for error messages in Z specs
\def\report#1{\hbox{`{\tt #1}'}}

% \@myop makes an operator, with a strut to defeat TeX's vertical adjustment.
\def\@myop#1{\mathop{\mathstrut{#1}}\nolimits}

% This underscore doesn't have the little kern --- you get an italic
% correction anyway in math mode.
\def\_{\leavevmode \vbox{\hrule width0.5em}}

% Save \q as \xq for quantifiers q.
\let\xforall=\forall
\let\xexists=\exists
\let\xlambda=\lambda
\let\xmu=\mu

% \p and \f make arrows with 1 and 2 crossings resp.
\def\p#1{\mathrel{\ooalign{\hfil$\mapstochar\mkern 5mu$\hfil\cr$#1$}}}
\def\f#1{\mathrel{\ooalign{\hfil
	$\mapstochar\mkern 3mu\mapstochar\mkern 5mu$\hfil\cr$#1$}}}

\let\mc=\mathchardef

\def	\pow		{\mbox{${\cal P}$}}
\def	\po1		{\mbox{${\cal P}_1$}}
\let	\cross		\times
\def	\lambda		{\@myop{\xlambda}}
\def	\lnot		{\neg\;}
\def	\land		{\mathrel{\wedge}}
\def	\lor		{\mathrel{\vee}}
\let	\implies	\Rightarrow
\let	\iff		\Leftrightarrow
\def	\forall		{\@myop{\xforall}}
\def	\exists		{\@myop{\xexists}}
\def	\semi		{\mathrel{\comp}}
\def	\ssemi		{\mathbin{\rm ;}}
\let	\ensembleVide	\emptyset
\let	\rel		\leftrightarrow
\def	\dom		{\@myop{\sf dom}}
\def	\ran		{\@myop{\sf ran}}
\def	\id		{\@myop{\sf id}}
\def	\comp		{\mathbin{\raise
			0.6ex\hbox{\oalign{\hfil$\scriptscriptstyle
			\rm o$\hfil\cr\hfil$\scriptscriptstyle\rm 9$\hfil}}}}
\def	\para		{\mbox{$\mid\mid$}}
\mc	\dres		"2\fx43
\mc	\rres		"2\fx42
\def	\ndres		{\mathbin{{\dres} \llap{$-$}}}
\def	\nrres		{\mathbin{{\rres}\llap{$-$}}}
\def	\lover		{\mathbin{{\dres} \llap{$-\!\!\!\!-\!$}}}
\def	\rover		{\mathbin{{\rres}\llap{$\!-\!\!\!-$}}}
\let	\fun		\rightarrow
\def	\pfun		{\p\fun}
\def	\pinj		{\p\inj}
\mc	\inj		"3\fx1A
\def	\psurj		{\p\surj}
\mc	\surj		"3\fx10
\def	\bij		{\surj\!\!\!\!\!\!\!\inj}
\def	\nat		{\mbox{${\cal N}$}}
\def	\na1		{\mbox{${\cal N}_1$}}
\def	\num		{\mbox{${\cal Z}$}}
\def	\int		{\mbox{${\cal Z}$}}
\def	\rat		{\mbox{${\cal Q}$}}
\def	\div		{\mathbin{\rm /}}
\def	\mod		{\mathbin{\bf mod}}
\def	\upto		{\mathbin{\ldotp\ldotp}}
\def	\finset		{\mbox{${\cal F}$}}
\def	\finse1		{\mbox{${\cal F}_1$}}
\def	\ffun		{\f\fun}
\def	\finj		{\f\inj}
\def	\seq		{\@myop{\rm seq}}
\def	\cat		{\mathbin{\raise 0.8ex\hbox{$\mathchar"2\fx61$}}}
\def	\sep		{\hspace*{.05in}}

\setcounter{secnumdepth}{0}
\setcounter{tocdepth}{0}

%-------------------%
% Debut du document %
%-------------------%

 

\vspace*{4mm}
\bf MACHINE

\hspace*{0.20in}\it Z80

\bf INCLUDES

\hspace*{0.20in}\it MEMORY

\bf SEES 

\hspace*{0.20in}\it ALU \rm ,

\hspace*{0.20in}\it BIT\_DEFINITION\rm ,

\hspace*{0.20in}\it BIT\_VECTOR\_DEFINITION\rm ,

\hspace*{0.20in}\it BYTE\_DEFINITION\rm ,

\hspace*{0.20in}\it BV16\_DEFINITION\rm ,

\hspace*{0.20in}

\hspace*{0.20in}\it UCHAR\_DEFINITION\rm ,

\hspace*{0.20in}\it SCHAR\_DEFINITION\rm ,

\hspace*{0.20in}\it SSHORT\_DEFINITION\rm ,

\hspace*{0.20in}\it USHORT\_DEFINITION\rm ,

\hspace*{0.20in}\it POWER2 

\bf SETS

\hspace*{0.20in}\it id\_reg\_8 \rm = \rm \{ \it a0 \rm , \it f0 \rm , \it f\_0 \rm , \it a\_0 \rm ,

\hspace*{0.40in}\it b0 \rm , \it c0 \rm , \it b\_0 \rm , \it c\_0 \rm ,

\hspace*{0.40in}\it d0 \rm , \it e0 \rm , \it d\_0 \rm , \it e\_0 \rm ,

\hspace*{0.40in}\it h0 \rm , \it l0 \rm , \it h\_0 \rm , \it l\_0 \rm \} \rm ;

\hspace*{0.20in}\it id\_reg\_16 \rm = \rm \{ \it BC \rm , \it DE \rm , \it HL \rm , \it SP \rm , \it AF \rm \}\hspace*{0.40in}

\bf ABSTRACT\_VARIABLES

\hspace*{0.20in}\it rgs8\rm ,

\hspace*{0.20in}\it pc \rm , \it sp \rm , \it ix \rm , \it iy \rm ,

\hspace*{0.20in}\it i\_\rm ,\it r\_ \rm , 

\hspace*{0.20in}\it iff1 \rm , \it iff2\rm ,

\hspace*{0.20in}\it im \rm ,

\hspace*{0.20in}\it io\_ports\hspace*{0.15in}

\bf INVARIANT

\hspace*{0.20in}\it rgs8  $\in$  \it id\_reg\_8  $\fun$  \it BYTE  $\land$ 

\hspace*{0.20in}\it pc  $\in$  \it USHORT  $\land$  \it sp  $\in$  \it BV16  $\land$  \it ix  $\in$  \it BV16  $\land$  \it iy  $\in$  \it BV16  $\land$ 

\hspace*{0.20in}\it i\_  $\in$  \it BYTE  $\land$  \it r\_\hspace*{0.10in} $\in$  \it BYTE  $\land$  

\hspace*{0.20in}\it iff1  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it iff2  $\in$  \it BIT  $\land$ 

\hspace*{0.20in}\it im \rm : \rm (\it BIT $\times$ \it BIT\rm )  $\land$ 

\hspace*{0.20in}\it io\_ports\hspace*{0.10in} $\in$  \it BYTE  $\fun$  \it BYTE

\bf DEFINITIONS

\hspace*{0.20in}\it bv\_BC \rm == \it byte\_bv16 \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm , \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm ;

\hspace*{0.20in}\it bv\_HL \rm == \it byte\_bv16 \rm ( \it rgs8 \rm ( \it h0 \rm ) \rm , \it rgs8 \rm ( \it l0 \rm ) \rm ) \rm ;

\hspace*{0.20in}\it bv\_DE \rm == \it byte\_bv16 \rm ( \it rgs8 \rm ( \it d0 \rm ) \rm , \it rgs8 \rm ( \it e0 \rm ) \rm ) \rm ;

\hspace*{0.20in}\it bv\_AF \rm == \it byte\_bv16 \rm ( \it rgs8 \rm ( \it a0 \rm ) \rm , \it rgs8 \rm ( \it f0 \rm ) \rm ) \rm ;

\hspace*{0.20in}

\hspace*{0.20in}\it bv\_9BC0 \rm == \it mem \rm ( \it byte\_bv16 \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm , \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )\rm ;

\hspace*{0.20in}\it bv\_9DE0 \rm == \it mem \rm ( \it byte\_bv16 \rm ( \it rgs8 \rm ( \it d0 \rm ) \rm , \it rgs8 \rm ( \it e0 \rm ) \rm ) \rm )\rm ;

\hspace*{0.20in}\it bv\_9HL0 \rm == \it mem \rm ( \it byte\_bv16 \rm ( \it rgs8 \rm ( \it h0 \rm ) \rm , \it rgs8 \rm ( \it l0 \rm ) \rm ) \rm )\rm ;

\hspace*{0.20in}\it bv\_9AF0 \rm == \it mem \rm ( \it byte\_bv16 \rm ( \it rgs8 \rm ( \it a0 \rm ) \rm , \it rgs8 \rm ( \it f0 \rm ) \rm ) \rm )\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\it bv\_9SP0 \rm == \it mem \rm ( \it sp \rm )\rm ;

\hspace*{0.20in}\it bv\_9IX0 \rm == \it mem \rm ( \it ix \rm )\rm ;

\hspace*{0.20in}\it bv\_9IY0 \rm == \it mem \rm ( \it iy \rm )\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\it sp\_plus\_one \rm == \it ushort\_bv16 \rm ( \it add16USHORT \rm ( \rm 0 \rm , \it bv16\_ushort \rm ( \it sp \rm ) \rm , \rm 1 \rm ) \rm )\rm ;

\hspace*{0.20in}\it sp\_plus\_two \rm == \it ushort\_bv16 \rm ( \it add16USHORT \rm ( \rm 0 \rm , \it bv16\_ushort \rm ( \it sp \rm ) \rm , \rm 2 \rm ) \rm )\rm ;

\hspace*{0.20in}\it sp\_minus\_one \rm == \it ushort\_bv16 \rm ( \it sub16USHORT \rm ( \rm 0 \rm , \it bv16\_ushort \rm ( \it sp \rm ) \rm , \rm 1 \rm ) \rm )\rm ;

\hspace*{0.20in}\it sp\_minus\_two \rm == \it ushort\_bv16 \rm ( \it sub16USHORT \rm ( \rm 0 \rm , \it bv16\_ushort \rm ( \it sp \rm ) \rm , \rm 2 \rm ) \rm )\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\it z\_s\hspace*{0.10in}\rm == \it bitget \rm ( \it rgs8 \rm ( \it f0 \rm ) \rm , \rm 7 \rm ) \rm ;

\hspace*{0.20in}\it z\_z\hspace*{0.10in}\rm == \it bitget \rm ( \it rgs8 \rm ( \it f0 \rm ) \rm , \rm 6 \rm ) \rm ;

\hspace*{0.20in}\it z\_00 \rm == \it bitget \rm ( \it rgs8 \rm ( \it f0 \rm ) \rm , \rm 5 \rm ) \rm ;

\hspace*{0.20in}\it z\_h\hspace*{0.10in}\rm == \it bitget \rm ( \it rgs8 \rm ( \it f0 \rm ) \rm , \rm 4 \rm ) \rm ;

\hspace*{0.20in}\it z\_01 \rm == \it bitget \rm ( \it rgs8 \rm ( \it f0 \rm ) \rm , \rm 3 \rm ) \rm ;

\hspace*{0.20in}\it z\_p\hspace*{0.10in}\rm == \it bitget \rm ( \it rgs8 \rm ( \it f0 \rm ) \rm , \rm 2 \rm ) \rm ;

\hspace*{0.20in}\it z\_n\hspace*{0.10in}\rm == \it bitget \rm ( \it rgs8 \rm ( \it f0 \rm ) \rm , \rm 1 \rm ) \rm ;

\hspace*{0.20in}\it z\_c\hspace*{0.10in}\rm == \it bitget \rm ( \it rgs8 \rm ( \it f0 \rm ) \rm , \rm 0 \rm )\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\bf CONCRETE\_CONSTANTS

\hspace*{0.20in}\it get\_bv\_reg16 \rm ,

\hspace*{0.20in}\it REG16\_TO\_REG8 \rm ,

\hspace*{0.20in}\it REG8\_TO\_REG16 \rm ,

\hspace*{0.20in}

\hspace*{0.20in}\it update\_flag\_reg\hspace*{0.25in}\rm ,

\hspace*{0.20in}

\hspace*{0.20in}\it bv\_ireg\_plus\_d \rm ,

\hspace*{0.20in}\it bv\_9ireg\_plus\_d0\rm ,

\hspace*{0.20in}

\hspace*{0.20in}\it cc\_get

\bf PROPERTIES

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\it get\_bv\_reg16 \rm : \rm ( \it BV16  $\times$  \rm ( \it id\_reg\_8  $\fun$  \it BYTE \rm )  $\times$  \it id\_reg\_16 \rm )  $\fun$  \rm ( \it BV16 \rm )

\hspace*{0.20in} $\land$   $\forall$  \rm ( \it sp\_ \rm , \it rgs8\_ \rm , \it r1 \rm ) \rm .

\hspace*{0.20in}\rm ( \it sp\_  $\in$ \hspace*{0.10in}\it BV16  $\land$  \it rgs8\_ \rm : \rm ( \it id\_reg\_8  $\fun$  \it BYTE \rm )  $\land$  \it r1  $\in$  \it id\_reg\_16

\hspace*{0.40in} $\implies$  \rm ( \it r1 \rm = \it BC  $\implies$ \hspace*{0.10in}\it get\_bv\_reg16 \rm ( \it sp\_ \rm , \it rgs8\_ \rm , \it r1 \rm ) \rm = \it byte\_bv16 \rm ( \it rgs8\_ \rm ( \it b0 \rm ) \rm , \it rgs8\_ \rm ( \it c0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.40in}\rm ( \it r1 \rm = \it DE  $\implies$ \hspace*{0.10in}\it get\_bv\_reg16 \rm ( \it sp\_ \rm , \it rgs8\_ \rm , \it r1 \rm ) \rm = \it byte\_bv16 \rm ( \it rgs8\_ \rm ( \it d0 \rm ) \rm , \it rgs8\_ \rm ( \it e0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.40in}\rm ( \it r1 \rm = \it HL  $\implies$ \hspace*{0.10in}\it get\_bv\_reg16 \rm ( \it sp\_ \rm , \it rgs8\_ \rm , \it r1 \rm ) \rm = \it byte\_bv16 \rm ( \it rgs8\_ \rm ( \it h0 \rm ) \rm , \it rgs8\_ \rm ( \it l0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.40in}\rm ( \it r1 \rm = \it SP  $\implies$ \hspace*{0.10in}\it get\_bv\_reg16 \rm ( \it sp\_ \rm , \it rgs8\_ \rm , \it r1 \rm ) \rm = \it sp\_ \rm )  $\land$ 

\hspace*{0.40in}\rm ( \it r1 \rm = \it AF  $\implies$ \hspace*{0.10in}\it get\_bv\_reg16 \rm ( \it sp\_ \rm , \it rgs8\_ \rm , \it r1 \rm ) \rm = \it byte\_bv16 \rm ( \it rgs8\_ \rm ( \it a0 \rm ) \rm , \it rgs8\_ \rm ( \it f0 \rm ) \rm ) \rm )

\hspace*{0.20in}\rm )  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}\it REG16\_TO\_REG8  $\in$  \it id\_reg\_16  $\fun$  \rm ( \it id\_reg\_8  $\times$  \it id\_reg\_8 \rm )  $\land$ 

\hspace*{0.20in}\it REG16\_TO\_REG8 \rm ( \it BC \rm ) \rm = \rm ( \it b0 \rm , \it c0 \rm )\hspace*{0.10in} $\land$ 

\hspace*{0.20in}\it REG16\_TO\_REG8 \rm ( \it DE \rm ) \rm = \rm ( \it d0 \rm , \it e0 \rm )\hspace*{0.10in} $\land$ 

\hspace*{0.20in}\it REG16\_TO\_REG8 \rm ( \it HL \rm ) \rm = \rm ( \it h0 \rm , \it l0 \rm )\hspace*{0.10in} $\land$ 

\hspace*{0.20in}\it REG16\_TO\_REG8 \rm ( \it AF \rm ) \rm = \rm ( \it a0 \rm , \it f0 \rm ) 

\hspace*{0.20in}

\hspace*{0.20in} $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}\it REG8\_TO\_REG16 \rm : \rm ( \it id\_reg\_8  $\times$  \it id\_reg\_8 \rm )  $\pfun$  \it id\_reg\_16  $\land$ 

\hspace*{0.20in}\it REG8\_TO\_REG16 \rm = \it REG16\_TO\_REG8  $^{-1}$   $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\it update\_flag\_reg \rm : \rm ( \it BIT  $\times$  \it BIT  $\times$  \it BIT  $\times$  \it BIT  $\times$  \it BIT  $\times$  \it BIT  $\fun$  \rm (\rm \{\it f0\rm \}  $\times$  \it BYTE\rm ) \rm ) $\land$ 

\hspace*{0.20in}\it update\_flag\_reg \rm =  $\lambda$  \rm ( \it s7 \rm , \it z6 \rm , \it h4 \rm , \it pv2 \rm , \it n\_add\_sub \rm , \it c0 \rm ) \rm .

\hspace*{0.20in}\rm ( \it s7  $\in$  \it BIT  $\land$  \it z6\hspace*{0.10in} $\in$  \it BIT  $\land$ \hspace*{0.15in}\it h4  $\in$  \it BIT\hspace*{0.10in} $\land$  \it pv2  $\in$  \it BIT  $\land$  \it n\_add\_sub  $\in$  \it BIT  $\land$  \it c0  $\in$  \it BIT  $\mid$ 

\hspace*{0.40in}\rm ( \it f0  $\mapsto$  \rm \rm [\it c0\rm , \it n\_add\_sub\rm , \it pv2\rm , \rm 1\rm , \it h4\rm , \rm 1\rm , \it z6\rm , \it s7\rm \rm ]\rm ) \rm )

\hspace*{0.20in}

\hspace*{0.20in} $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}\it bv\_ireg\_plus\_d \rm : \rm ( \it BV16  $\times$  \it SCHAR  $\fun$  \it BV16\rm )  $\land$ 

\hspace*{0.20in}\it bv\_ireg\_plus\_d \rm =  $\lambda$  \rm ( \it ix\_iy \rm , \it desloc \rm ) \rm . \rm ( \it ix\_iy  $\in$  \it BV16  $\land$  \it desloc  $\in$  \it SCHAR  $\mid$ 

\hspace*{0.40in}\it ushort\_bv16 \rm ( \rm (\it bv16\_ushort \rm ( \it ix\_iy \rm ) \rm + \it desloc \rm )  $\mod$  \rm 6\rm 5\rm 5\rm 3\rm 6 \rm ) \rm )  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}\it bv\_9ireg\_plus\_d0 \rm : \rm (\rm (\it BV16  $\fun$  \it BYTE\rm )  $\times$  \it BV16  $\times$  \it SCHAR\rm )  $\fun$  \it BYTE\hspace*{0.10in} $\land$ 

\hspace*{0.20in}\it bv\_9ireg\_plus\_d0 \rm =  $\lambda$  \rm ( \it mem \rm , \it ix\_iy \rm , \it desloc \rm ) \rm . \rm ( \it mem \rm : \rm ( \it BV16  $\fun$  \it BYTE \rm )  $\land$  \it ix\_iy  $\in$  \it BV16  $\land$  \it desloc  $\in$  \it SCHAR  $\mid$ 

\hspace*{0.40in}\it mem \rm ( \it bv\_ireg\_plus\_d\rm (\it ix\_iy \rm , \it desloc\rm ) \rm ) \rm )  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}\it cc\_get \rm : \rm ( \rm (\it id\_reg\_8  $\fun$  \it BYTE\rm )  $\times$  \rm (\rm 0 $\upto$ \rm 8\rm ) \rm )  $\fun$  \it BIT  $\land$ 

\hspace*{0.20in} $\forall$ \rm (\it rgs8\_\rm )\rm .\rm (\it rgs8\_  $\in$  \it id\_reg\_8  $\fun$  \it BYTE  $\implies$ \hspace*{0.30in}\it cc\_get\rm (\it rgs8\_ \rm , \rm 0\rm ) \rm = \rm 1 \rm - \it bitget \rm ( \it rgs8\_ \rm ( \it f0 \rm ) \rm , \rm 6 \rm )\hspace*{0.15in} $\land$ 

\hspace*{0.40in}\it cc\_get\rm (\it rgs8\_ \rm , \rm 1\rm ) \rm =\hspace*{0.10in}\it bitget \rm ( \it rgs8\_ \rm ( \it f0 \rm ) \rm , \rm 6 \rm )\hspace*{0.15in} $\land$ 

\hspace*{0.40in}\it cc\_get\rm (\it rgs8\_ \rm , \rm 2\rm ) \rm =\hspace*{0.10in}\rm 1 \rm - \it bitget \rm ( \it rgs8\_ \rm ( \it f0 \rm ) \rm , \rm 0 \rm )\hspace*{0.15in} $\land$ 

\hspace*{0.40in}\it cc\_get\rm (\it rgs8\_ \rm , \rm 3\rm ) \rm =\hspace*{0.15in}\it bitget \rm ( \it rgs8\_ \rm ( \it f0 \rm ) \rm , \rm 0 \rm )\hspace*{0.15in} $\land$ 

\hspace*{0.40in}\it cc\_get\rm (\it rgs8\_ \rm , \rm 4\rm ) \rm =\hspace*{0.10in}\rm 1 \rm - \it bitget \rm ( \it rgs8\_ \rm ( \it f0 \rm ) \rm , \rm 2 \rm )\hspace*{0.15in} $\land$ 

\hspace*{0.40in}\it cc\_get\rm (\it rgs8\_ \rm , \rm 5\rm ) \rm =\hspace*{0.15in}\it bitget \rm ( \it rgs8\_ \rm ( \it f0 \rm ) \rm , \rm 2 \rm )\hspace*{0.15in} $\land$  

\hspace*{0.40in}\it cc\_get\rm (\it rgs8\_ \rm , \rm 6\rm ) \rm =\hspace*{0.10in}\rm 1 \rm - \it bitget \rm ( \it rgs8\_ \rm ( \it f0 \rm ) \rm , \rm 7 \rm )\hspace*{0.15in} $\land$  

\hspace*{0.40in}\it cc\_get\rm (\it rgs8\_ \rm , \rm 7\rm ) \rm =\hspace*{0.10in}\it bitget \rm ( \it rgs8\_ \rm ( \it f0 \rm ) \rm , \rm 7 \rm )\hspace*{0.15in}\rm )

\hspace*{0.20in}

\bf ASSERTIONS

\hspace*{0.20in}

\hspace*{0.20in}\bf ran \rm ( \it mem \rm )  $\subseteq$  \it BYTE  $\land$ 

\hspace*{0.20in}\bf dom \rm ( \it mem \rm ) \rm = \it BV16  $\land$ 

\hspace*{0.20in}\bf ran \rm ( \it rgs8 \rm )  $\subseteq$  \it BYTE  $\land$ 

\hspace*{0.20in}\bf dom \rm ( \it rgs8 \rm ) \rm = \it id\_reg\_8  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\it instruction\_next\rm (\it pc\rm )  $\in$  \it USHORT  $\land$  

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\it bv\_9BC0  $\in$  \it BYTE\hspace*{0.10in} $\land$  \it mem \rm ( \it byte\_bv16 \rm ( \it schar\_byte \rm ( \rm 0 \rm ) \rm , \it bv\_9BC0 \rm ) \rm )  $\in$  \it BYTE  $\land$ 

\hspace*{0.20in}\it bv\_9DE0  $\in$  \it BYTE\hspace*{0.10in} $\land$  \it mem \rm ( \it byte\_bv16 \rm ( \it schar\_byte \rm ( \rm 0 \rm ) \rm , \it bv\_9DE0 \rm ) \rm )  $\in$  \it BYTE  $\land$ 

\hspace*{0.20in}\it bv\_9HL0  $\in$  \it BYTE\hspace*{0.10in} $\land$  \it mem \rm ( \it byte\_bv16 \rm ( \it schar\_byte \rm ( \rm 0 \rm ) \rm , \it bv\_9HL0 \rm ) \rm )  $\in$  \it BYTE  $\land$ 

\hspace*{0.20in}\it bv\_9AF0  $\in$  \it BYTE\hspace*{0.10in} $\land$  \it mem \rm ( \it byte\_bv16 \rm ( \it schar\_byte \rm ( \rm 0 \rm ) \rm , \it bv\_9AF0 \rm ) \rm )  $\in$  \it BYTE  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\it bv\_9SP0  $\in$  \it BYTE\hspace*{0.10in} $\land$ 

\hspace*{0.20in}\it bv\_9IX0  $\in$  \it BYTE\hspace*{0.10in} $\land$ 

\hspace*{0.20in}\it bv\_9IY0  $\in$  \it BYTE  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\it update\_refresh\_reg\rm (\it r\_\rm ) $\in$  \it BYTE  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf dom\rm (\it update\_flag\_reg\rm ) \rm = \rm ( \it BIT  $\times$  \it BIT  $\times$  \it BIT\hspace*{0.10in} $\times$  \it BIT  $\times$  \it BIT  $\times$  \it BIT \rm )  $\land$ 

\hspace*{0.20in}\bf ran\rm (\it update\_flag\_reg\rm )  $\in$   $\pow$ \rm (\rm \{\it f0\rm \}  $\times$  \it BYTE\rm )  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in} $\forall$ \rm (\it b1\rm ,\it b2\rm ,\it b3\rm ,\it b4\rm ,\it b5\rm ,\it b6\rm )\rm .\rm (\hspace*{0.10in}\it b1 $\in$  \it BIT  $\land$  \it b2 $\in$  \it BIT  $\land$  \it b3 $\in$  \it BIT  $\land$  \it b4 $\in$  \it BIT  $\land$  \it b5 $\in$  \it BIT  $\land$  \it b6  $\in$  \it BIT\hspace*{0.15in} $\implies$  \it update\_flag\_reg\rm (\it b1\rm ,\it b2\rm ,\it b3\rm ,\it b4\rm ,\it b5\rm ,\it b6\rm )  $\in$  \rm \{\it f0\rm \}  $\times$  \it BYTE \rm )  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in} $\forall$ \rm (\it xx\rm )\rm .\rm (\it xx $\in$  \it id\_reg\_8  $\fun$ \it BYTE  $\implies$ \hspace*{0.10in}\rm (\it rgs8  $\lover$  \it xx\rm )  $\in$  \it id\_reg\_8  $\fun$  \it BYTE\rm )  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in} $\forall$ \rm (\it xx\rm ,\it xxr\rm )\rm .\rm (\it xx $\in$  \it id\_reg\_8  $\land$  \it xxr  $\in$  \it BYTE  $\implies$ \hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \it xx $\mapsto$ \it xxr \rm \}  $\in$  \it id\_reg\_8  $\fun$  \it BYTE\rm )  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in} $\forall$ \rm (\it xx\rm ,\it xxr\rm ,\it yy\rm ,\it yyr\rm )\rm .\rm (\it xx $\in$  \it id\_reg\_8  $\land$  \it xxr  $\in$  \it BYTE  $\land$  \it yy $\in$  \it id\_reg\_8  $\land$  \it yyr  $\in$  \it BYTE  $\land$ \hspace*{0.10in} $\neg$ \rm (\it xx\rm =\it yy\rm ) 

\hspace*{0.40in} $\implies$ \hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \it xx $\mapsto$ \it xxr\rm ,\it yy $\mapsto$ \it yyr \rm \}  $\in$  \it id\_reg\_8  $\fun$  \it BYTE\rm )  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in} $\forall$ \rm (\it xx\rm ,\it xxr\rm ,\it yy\rm ,\it yyr\rm ,\it zz\rm ,\it zzr\rm )\rm .\rm (\it xx $\in$  \it id\_reg\_8  $\land$  \it xxr  $\in$  \it BYTE  $\land$  \it yy $\in$  \it id\_reg\_8  $\land$  \it yyr  $\in$  \it BYTE  $\land$ \hspace*{0.10in}\it zz $\in$  \it id\_reg\_8  $\land$  \it zzr  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in} $\neg$ \rm (\it xx\rm =\it yy\rm )  $\land$   $\neg$ \rm (\it xx\rm =\it zz\rm )  $\land$   $\neg$ \rm (\it yy\rm =\it zz\rm ) 

\hspace*{0.40in} $\implies$ \hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \it xx $\mapsto$ \it xxr\rm ,\it yy $\mapsto$ \it yyr \rm , \it zz $\mapsto$ \it zzr \rm \}  $\in$  \it id\_reg\_8  $\fun$  \it BYTE\rm )  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in} $\forall$ \rm (\it xx\rm ,\it xxr\rm ,\it yy\rm ,\it yyr\rm ,\it zz\rm ,\it zzr\rm ,\it vv\rm ,\it vvr\rm )\rm .\rm (\it xx $\in$  \it id\_reg\_8  $\land$  \it xxr  $\in$  \it BYTE  $\land$  \it yy $\in$  \it id\_reg\_8  $\land$  \it yyr  $\in$  \it BYTE  $\land$ \hspace*{0.10in}\it zz $\in$  \it id\_reg\_8  $\land$  \it zzr  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in}\it vv  $\in$  \it id\_reg\_8  $\land$  \it vvr $\in$  \it BYTE  $\land$ 

\hspace*{0.40in} $\neg$ \rm (\it xx\rm =\it yy\rm )  $\land$   $\neg$ \rm (\it xx\rm =\it zz\rm )  $\land$   $\neg$ \rm (\it xx\rm =\it vv\rm )  $\land$ \hspace*{0.10in} $\neg$ \rm (\it yy\rm =\it zz\rm )  $\land$   $\neg$ \rm (\it yy\rm =\it vv\rm )  $\land$   $\neg$ \rm (\it zz\rm =\it vv\rm ) 

\hspace*{0.40in} $\implies$ \hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \it xx $\mapsto$ \it xxr\rm ,\it yy $\mapsto$ \it yyr \rm , \it zz $\mapsto$ \it zzr \rm ,\hspace*{0.10in}\it vv $\mapsto$ \it vvr \rm \}  $\in$  \it id\_reg\_8  $\fun$  \it BYTE\rm )  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in} $\forall$ \rm (\it xx\rm ,\it xxr\rm ,\it yy\rm ,\it yyr\rm ,\it zz\rm ,\it zzr\rm ,\it vv\rm ,\it vvr\rm ,\it ww\rm ,\it wwr\rm )\rm .

\hspace*{0.20in}\rm (\it xx $\in$  \it id\_reg\_8  $\land$  \it xxr  $\in$  \it BYTE  $\land$  \it yy $\in$  \it id\_reg\_8  $\land$  \it yyr  $\in$  \it BYTE  $\land$ \hspace*{0.10in}\it zz $\in$  \it id\_reg\_8  $\land$  \it zzr  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in}\it vv  $\in$  \it id\_reg\_8  $\land$  \it vvr $\in$  \it BYTE  $\land$  \it ww  $\in$  \it id\_reg\_8  $\land$ \hspace*{0.10in}\it wwr  $\in$  \it BYTE  $\land$   $\neg$ \rm (\it xx\rm =\it yy\rm )  $\land$   $\neg$ \rm (\it xx\rm =\it zz\rm )  $\land$ 

\hspace*{0.40in} $\neg$ \rm (\it xx\rm =\it vv\rm )  $\land$   $\neg$ \rm (\it xx\rm =\it ww\rm )  $\land$   $\neg$ \rm (\it yy\rm =\it zz\rm )  $\land$   $\neg$ \rm (\it yy\rm =\it vv\rm )  $\land$   $\neg$ \rm (\it yy\rm =\it ww\rm )  $\land$   $\neg$ \rm (\it zz\rm =\it vv\rm )  $\land$   $\neg$ \rm (\it zz\rm =\it ww\rm )  $\land$   $\neg$ \rm (\it vv\rm =\it ww\rm )

\hspace*{0.40in} $\implies$ \hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \it xx $\mapsto$ \it xxr\rm ,\it yy $\mapsto$ \it yyr \rm , \it zz $\mapsto$ \it zzr \rm ,\hspace*{0.10in}\it vv $\mapsto$ \it vvr\rm ,\hspace*{0.10in}\it ww  $\mapsto$  \it wwr \rm \}  $\in$  \it id\_reg\_8  $\fun$  \it BYTE\rm )  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in} $\forall$ \rm (\it xx\rm ,\it xxr\rm ,\it yy\rm ,\it yyr\rm ,\it zz\rm ,\it zzr\rm ,\it vv\rm ,\it vvr\rm ,\it ww\rm ,\it wwr\rm ,\it aa\rm ,\it aar\rm )\rm .

\hspace*{0.20in}\rm (\it xx $\in$  \it id\_reg\_8  $\land$  \it xxr  $\in$  \it BYTE  $\land$  \it yy $\in$  \it id\_reg\_8  $\land$  \it yyr  $\in$  \it BYTE  $\land$ \hspace*{0.10in}\it zz $\in$  \it id\_reg\_8  $\land$  \it zzr  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in}\it vv  $\in$  \it id\_reg\_8  $\land$  \it vvr $\in$  \it BYTE  $\land$  \it ww  $\in$  \it id\_reg\_8  $\land$ \hspace*{0.10in}\it wwr  $\in$  \it BYTE  $\land$ \hspace*{0.10in}\it aa  $\in$  \it id\_reg\_8  $\land$  \it aar  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in} $\neg$ \rm (\it xx\rm =\it yy\rm )  $\land$   $\neg$ \rm (\it xx\rm =\it zz\rm )  $\land$   $\neg$ \rm (\it xx\rm =\it vv\rm )  $\land$   $\neg$ \rm (\it xx\rm =\it ww\rm )  $\land$   $\neg$ \rm (\it xx\rm =\it aa\rm )  $\land$   $\neg$ \rm (\it yy\rm =\it zz\rm )  $\land$   $\neg$ \rm (\it yy\rm =\it vv\rm )  $\land$   $\neg$ \rm (\it yy\rm =\it ww\rm )

\hspace*{0.40in} $\land$   $\neg$ \rm (\it yy\rm =\it aa\rm )  $\land$   $\neg$ \rm (\it zz\rm =\it vv\rm )  $\land$   $\neg$ \rm (\it zz\rm =\it ww\rm )  $\land$   $\neg$ \rm (\it zz\rm =\it aa\rm )  $\land$   $\neg$ \rm (\it vv\rm =\it ww\rm )  $\land$   $\neg$ \rm (\it vv\rm =\it aa\rm )  $\land$   $\neg$ \rm (\it ww\rm =\it aa\rm )

\hspace*{0.40in} $\implies$ \hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \it xx $\mapsto$ \it xxr\rm ,\it yy $\mapsto$ \it yyr \rm , \it zz $\mapsto$ \it zzr \rm ,\hspace*{0.10in}\it vv $\mapsto$ \it vvr\rm ,\hspace*{0.10in}\it ww  $\mapsto$  \it wwr\rm , \it aa  $\mapsto$  \it aar \rm \}  $\in$  \it id\_reg\_8  $\fun$  \it BYTE\rm )  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in} $\forall$ \rm (\it xx\rm ,\it xxr\rm ,\it yy\rm ,\it yyr\rm ,\it zz\rm ,\it zzr\rm ,\it vv\rm ,\it vvr\rm ,\it ww\rm ,\it wwr\rm ,\it aa\rm ,\it aar\rm ,\it bb\rm ,\it bbr\rm )\rm .

\hspace*{0.20in}\rm (\it xx $\in$  \it id\_reg\_8  $\land$  \it xxr  $\in$  \it BYTE  $\land$  \it yy $\in$  \it id\_reg\_8  $\land$  \it yyr  $\in$  \it BYTE  $\land$ \hspace*{0.10in}\it zz $\in$  \it id\_reg\_8  $\land$  \it zzr  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in}\it vv  $\in$  \it id\_reg\_8  $\land$  \it vvr $\in$  \it BYTE  $\land$  \it ww  $\in$  \it id\_reg\_8  $\land$ \hspace*{0.10in}\it wwr  $\in$  \it BYTE  $\land$ \hspace*{0.10in}\it aa  $\in$  \it id\_reg\_8  $\land$  \it aar  $\in$  \it BYTE  $\land$  

\hspace*{0.40in}\it bb $\in$  \it id\_reg\_8  $\land$  \it bbr  $\in$  \it BYTE  $\land$   $\neg$ \rm (\it xx\rm =\it yy\rm )  $\land$   $\neg$ \rm (\it xx\rm =\it zz\rm )  $\land$   $\neg$ \rm (\it xx\rm =\it vv\rm )  $\land$   $\neg$ \rm (\it xx\rm =\it ww\rm )  $\land$ 

\hspace*{0.40in} $\neg$ \rm (\it xx\rm =\it aa\rm )  $\land$   $\neg$ \rm (\it xx\rm =\it bb\rm )  $\land$   $\neg$ \rm (\it yy\rm =\it zz\rm )

\hspace*{0.40in} $\land$   $\neg$ \rm (\it yy\rm =\it vv\rm )  $\land$   $\neg$ \rm (\it yy\rm =\it ww\rm )\hspace*{0.10in} $\land$   $\neg$ \rm (\it yy\rm =\it aa\rm )  $\land$   $\neg$ \rm (\it yy\rm =\it bb\rm )  $\land$   $\neg$ \rm (\it zz\rm =\it vv\rm )  $\land$   $\neg$ \rm (\it zz\rm =\it ww\rm )  $\land$   $\neg$ \rm (\it zz\rm =\it aa\rm )  $\land$ 

\hspace*{0.40in} $\neg$ \rm (\it zz\rm =\it bb\rm )  $\land$   $\neg$ \rm (\it vv\rm =\it ww\rm )  $\land$   $\neg$ \rm (\it vv\rm =\it aa\rm ) $\land$   $\neg$ \rm (\it vv\rm =\it bb\rm )  $\land$   $\neg$ \rm (\it ww\rm =\it aa\rm )  $\land$   $\neg$ \rm (\it ww\rm =\it bb\rm )  $\land$   $\neg$ \rm (\it aa\rm =\it bb\rm )

\hspace*{0.40in} $\implies$ \hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \it xx $\mapsto$ \it xxr\rm ,\it yy $\mapsto$ \it yyr \rm , \it zz $\mapsto$ \it zzr \rm ,\hspace*{0.10in}\it vv $\mapsto$ \it vvr\rm ,\hspace*{0.10in}\it ww  $\mapsto$  \it wwr\rm , \it aa  $\mapsto$  \it aar\rm , \it bb  $\mapsto$  \it bbr \rm \}

\hspace*{0.40in} $\in$  \it id\_reg\_8  $\fun$  \it BYTE\rm )  $\land$ \hspace*{0.10in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf dom\rm (\it bv\_ireg\_plus\_d\rm ) \rm = \rm ( \it BV16  $\times$  \it SCHAR \rm )  $\land$ 

\hspace*{0.20in}\bf ran\rm (\it bv\_ireg\_plus\_d\rm ) \rm = \rm ( \it BV16 \rm )  $\land$ 

\hspace*{0.20in} $\forall$ \rm (\it dd\rm )\rm .\rm (\it dd $\in$  \it SCHAR  $\implies$ \hspace*{0.10in}\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it dd\rm )  $\in$  \it BV16\rm )  $\land$ 

\hspace*{0.20in} $\forall$ \rm (\it dd\rm )\rm .\rm (\it dd $\in$  \it SCHAR  $\implies$ \hspace*{0.10in}\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it dd\rm )  $\in$  \it BV16\rm )  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf dom\rm (\it bv\_9ireg\_plus\_d0\rm ) \rm = \rm ( \rm (\it BV16  $\fun$  \it BYTE\rm )  $\times$  \it BV16  $\times$  \it SCHAR\rm )  $\land$ 

\hspace*{0.20in}\bf ran\rm (\it bv\_9ireg\_plus\_d0\rm ) \rm = \rm ( \it BYTE \rm )  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in} $\forall$ \rm (\it dd\rm )\rm .\rm (\it dd $\in$  \it SCHAR  $\implies$ \hspace*{0.10in}\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it dd\rm )  $\in$  \it BYTE\rm )  $\land$ 

\hspace*{0.20in} $\forall$ \rm (\it dd\rm )\rm .\rm (\it dd $\in$  \it SCHAR  $\implies$ \hspace*{0.10in}\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it dd\rm )  $\in$  \it BYTE\rm )  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in} 

\hspace*{0.20in}

\hspace*{0.20in}\it bv\_BC\hspace*{0.10in} $\in$  \it BV16  $\land$ 

\hspace*{0.20in}\it bv\_HL  $\in$  \it BV16  $\land$ 

\hspace*{0.20in}\it bv\_DE  $\in$  \it BV16  $\land$ 

\hspace*{0.20in}\it bv\_AF  $\in$  \it BV16  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}\it bv\_9BC0  $\in$  \it BYTE  $\land$ 

\hspace*{0.20in}\it bv\_9DE0  $\in$  \it BYTE  $\land$ 

\hspace*{0.20in}\it bv\_9HL0  $\in$  \it BYTE  $\land$ 

\hspace*{0.20in}\it bv\_9AF0  $\in$  \it BYTE  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}\it bv\_9SP0  $\in$  \it BYTE  $\land$ 

\hspace*{0.20in}\it bv\_9IX0  $\in$  \it BYTE  $\land$ 

\hspace*{0.20in}\it bv\_9IY0  $\in$  \it BYTE  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\it dec\_BV16\rm (\it bv\_BC\rm )\hspace*{0.10in} $\in$  \it BV16  $\land$ 

\hspace*{0.20in}\it inc\_BV16\rm (\it bv\_BC\rm )\hspace*{0.10in} $\in$  \it BV16  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}\it dec\_BV16\rm (\it bv\_DE\rm )\hspace*{0.10in} $\in$  \it BV16  $\land$ 

\hspace*{0.20in}\it inc\_BV16\rm (\it bv\_DE\rm )\hspace*{0.10in} $\in$  \it BV16  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}\it inc\_BV16\rm (\it bv\_HL\rm )\hspace*{0.10in} $\in$  \it BV16  $\land$ 

\hspace*{0.20in}\it dec\_BV16\rm (\it bv\_HL\rm )\hspace*{0.10in} $\in$  \it BV16  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}\it sp\_plus\_one  $\in$  \it BV16  $\land$ 

\hspace*{0.20in}\it sp\_plus\_two  $\in$  \it BV16  $\land$ 

\hspace*{0.20in}\it sp\_minus\_one  $\in$  \it BV16  $\land$ 

\hspace*{0.20in}\it sp\_minus\_two  $\in$  \it BV16  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}\it z\_s\hspace*{0.10in} $\in$  \it BIT  $\land$ 

\hspace*{0.20in}\it z\_z\hspace*{0.10in} $\in$  \it BIT  $\land$ 

\hspace*{0.20in}\it z\_00  $\in$  \it BIT  $\land$ 

\hspace*{0.20in}\it z\_h\hspace*{0.10in} $\in$  \it BIT  $\land$ 

\hspace*{0.20in}\it z\_01  $\in$  \it BIT  $\land$ 

\hspace*{0.20in}\it z\_p\hspace*{0.10in} $\in$  \it BIT  $\land$ 

\hspace*{0.20in}\it z\_n\hspace*{0.10in} $\in$  \it BIT  $\land$ 

\hspace*{0.20in}\it z\_c\hspace*{0.10in} $\in$  \it BIT  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in} 

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\it io\_ports\rm (\it rgs8\rm (\it c0\rm )\rm ) $\in$  \it BYTE  $\land$ 

\hspace*{0.20in}

\hspace*{0.20in}\it dec\rm (\it rgs8\rm (\it b0\rm )\rm )  $\in$  \it BYTE 

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\bf INITIALISATION

\hspace*{0.20in}

\hspace*{0.20in}\it rgs8 \rm := \rm \{ \rm (\it a0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm , \rm (\it f0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm , \rm (\it f\_0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm , \rm (\it a\_0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm ,

\hspace*{0.40in}\rm (\it b0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm , \rm (\it c0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm , \rm (\it b\_0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm , \rm (\it c\_0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm ,

\hspace*{0.40in}\rm (\it d0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm , \rm (\it e0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm , \rm (\it d\_0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm , \rm (\it e\_0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm ,

\hspace*{0.40in}\rm (\it h0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm , \rm (\it l0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm , \rm (\it h\_0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm , \rm (\it l\_0  $\mapsto$  \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]\rm ) \rm \}  $\para$ 

\hspace*{0.20in}

\hspace*{0.20in}\it pc \rm := \rm 0  $\para$  \it sp \rm := \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]  $\para$  \it ix \rm := \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]  $\para$  \it iy \rm := \rm \rm [\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm ,\rm 1\rm \rm ]  $\para$ 

\hspace*{0.20in}\it i\_ \rm :=\it uchar\_byte\rm (\rm 0\rm )  $\para$  \it r\_\hspace*{0.10in}\rm :=\rm \rm [\rm 0\rm ,\rm 0\rm ,\rm 0\rm ,\rm 0\rm ,\rm 0\rm ,\rm 0\rm ,\rm 0\rm ,\rm 0\rm \rm ]  $\para$  

\hspace*{0.20in}\it io\_ports\hspace*{0.10in} $:\in$  \rm (\it BYTE  $\fun$  \rm \{\rm \rm [\rm 0\rm ,\rm 0\rm ,\rm 0\rm ,\rm 0\rm ,\rm 0\rm ,\rm 0\rm ,\rm 0\rm ,\rm 0\rm \rm ]\rm \}\rm )  $\para$ 

\hspace*{0.20in}\it iff1 \rm :=\rm 0\hspace*{0.10in} $\para$ \hspace*{0.10in}\it iff2 \rm :=\rm 0  $\para$ 

\hspace*{0.20in}\it im \rm := \rm (\rm 0 $\mapsto$ \rm 0\rm )

\vspace*{4mm}
\bf OPERATIONS

\hspace*{0.20in}

\hspace*{0.20in} 

\hspace*{0.20in}\bf ext\_update\_io\_ports\rm (\it address\rm ,\it value\rm )\rm =

\hspace*{0.20in}\bf PRE \it address  $\in$  \it UCHAR  $\land$ \hspace*{0.10in}\it value  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\bf io\_ports \rm ( \it uchar\_byte \rm ( \it address \rm ) \rm ) \rm := \it schar\_byte \rm ( \it value \rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf IN\_A\_9n0 \rm ( \it nn \rm ) \rm =

\hspace*{0.20in}\bf PRE \it nn  $\in$  \it UCHAR\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf rgs8 \rm ( \it a0 \rm ) \rm := \it io\_ports \rm ( \it uchar\_byte \rm ( \it nn \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf IN\_r\_9C0 \rm ( \it rr \rm ) \rm =

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8  $\land$  \it rr  $\not =$  \it f0\hspace*{0.15in}\bf THEN

\hspace*{0.40in}\bf ANY

\hspace*{0.60in}\it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry

\hspace*{0.40in}\bf WHERE 

\hspace*{0.60in}\it negative  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it zero  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it half\_carry  $\in$  \it BIT  $\land$  \it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  

\hspace*{0.60in}\it negative \rm = \it is\_negative \rm ( \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero \rm ( \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it half\_carry \rm = \rm 0  $\land$ 

\hspace*{0.60in}\it pv \rm = \it parity\_even \rm ( \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )\hspace*{0.15in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.60in}\it carry \rm = \it z\_c

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \rm ( \it rr  $\mapsto$  \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm ) \rm ,

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry \rm ) \rm \}  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf INI \rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it bv\_HL\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY \it hvn \rm , \it lvn \rm ,

\hspace*{0.60in}\it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry

\hspace*{0.40in}\bf WHERE 

\hspace*{0.60in}\it negative  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it zero  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it half\_carry  $\in$  \it BIT  $\land$  \it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  

\hspace*{0.60in}\it hvn  $\in$  \it BYTE  $\land$  \it lvn  $\in$  \it BYTE  $\land$ \hspace*{0.60in}

\hspace*{0.60in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it inc\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it negative \rm = \it is\_negative \rm ( \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero \rm ( \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it half\_carry \rm = \it z\_h  $\land$ 

\hspace*{0.60in}\it pv \rm = \it parity\_even \rm ( \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )\hspace*{0.15in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 1  $\land$ 

\hspace*{0.60in}\it carry \rm = \it z\_c

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf updateAddressMem \rm ( \it bv\_HL \rm , \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )  $\para$ 

\hspace*{0.60in}\it rgs8 \rm :=\hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \rm ( \it h0  $\mapsto$  \it hvn \rm ) \rm , \rm ( \it l0  $\mapsto$  \it lvn \rm ) \rm , \rm ( \it b0  $\mapsto$  \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm ) \rm ,

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry \rm ) \rm \}  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.60in}

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf INIR \rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it bv\_HL\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY \it hvn \rm , \it lvn \rm ,

\hspace*{0.60in}\it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry

\hspace*{0.40in}\bf WHERE 

\hspace*{0.60in}\it negative  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it zero  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it half\_carry  $\in$  \it BIT  $\land$  \it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  

\hspace*{0.60in}\it hvn  $\in$  \it BYTE  $\land$  \it lvn  $\in$  \it BYTE  $\land$ 

\hspace*{0.60in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it inc\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it negative \rm = \it is\_negative \rm ( \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \rm 1\hspace*{0.10in} $\land$ 

\hspace*{0.60in}\it half\_carry \rm = \it z\_h  $\land$ 

\hspace*{0.60in}\it pv \rm = \it parity\_even \rm ( \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )\hspace*{0.15in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 1  $\land$ 

\hspace*{0.60in}\it carry \rm = \it z\_c

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf updateAddressMem \rm ( \it bv\_HL \rm , \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )  $\para$ 

\hspace*{0.60in}\it rgs8 \rm :=\hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \rm ( \it h0  $\mapsto$  \it hvn \rm ) \rm , \rm ( \it l0  $\mapsto$  \it lvn \rm ) \rm , \rm ( \it b0  $\mapsto$  \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm ) \rm ,

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry \rm ) \rm \}  $\para$ 

\hspace*{0.60in}\it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )  $\para$ 

\hspace*{0.60in}\bf IF\hspace*{0.10in}\it is\_zero \rm ( \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm ) \rm = \rm 1 \bf THEN \it pc \rm := \it instruction\_next \rm ( \it pc \rm )\hspace*{0.10in}\bf END

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf IND \rm =\hspace*{0.10in}

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it bv\_HL\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY \it hvn \rm , \it lvn \rm ,

\hspace*{0.60in}\it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry

\hspace*{0.40in}\bf WHERE

\hspace*{0.60in}\it negative  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it zero  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it half\_carry  $\in$  \it BIT  $\land$  \it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  

\hspace*{0.60in}\it hvn  $\in$  \it BYTE  $\land$  \it lvn  $\in$  \it BYTE  $\land$ 

\hspace*{0.60in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ \hspace*{0.30in}

\hspace*{0.60in}\it negative \rm = \it is\_negative \rm ( \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero \rm ( \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it half\_carry \rm = \it z\_h  $\land$ 

\hspace*{0.60in}\it pv \rm = \it parity\_even \rm ( \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )\hspace*{0.15in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 1  $\land$ 

\hspace*{0.60in}\it carry \rm = \it z\_c

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf updateAddressMem \rm ( \it bv\_HL \rm , \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )  $\para$ 

\hspace*{0.60in}\it rgs8 \rm :=\hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \rm ( \it h0  $\mapsto$  \it hvn \rm ) \rm , \rm ( \it l0  $\mapsto$  \it lvn \rm ) \rm , \rm ( \it b0  $\mapsto$  \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm ) \rm ,

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry \rm ) \rm \}  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf INDR \rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it bv\_HL\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY\hspace*{0.10in}\it hvn \rm , \it lvn \rm ,

\hspace*{0.60in}\it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry

\hspace*{0.40in}\bf WHERE 

\hspace*{0.60in}\it negative  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it zero  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it half\_carry  $\in$  \it BIT  $\land$  \it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  

\hspace*{0.60in}\it hvn  $\in$  \it BYTE  $\land$  \it lvn  $\in$  \it BYTE  $\land$ 

\hspace*{0.60in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ \hspace*{0.20in}

\hspace*{0.60in}\it negative \rm = \it is\_negative \rm ( \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero \rm ( \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it half\_carry \rm = \it z\_h  $\land$ 

\hspace*{0.60in}\it pv \rm = \it parity\_even \rm ( \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )\hspace*{0.15in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 1  $\land$ 

\hspace*{0.60in}\it carry \rm = \it z\_c

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf updateAddressMem \rm ( \it bv\_HL \rm , \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )  $\para$ 

\hspace*{0.60in}\it rgs8 \rm :=\hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \rm ( \it h0  $\mapsto$  \it hvn \rm ) \rm , \rm ( \it l0  $\mapsto$  \it lvn \rm ) \rm , \rm ( \it b0  $\mapsto$  \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm ) \rm ,

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry \rm ) \rm \}  $\para$ 

\hspace*{0.60in}\bf IF\hspace*{0.10in}\it is\_zero \rm ( \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm ) \rm = \rm 1 \bf THEN \it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) \bf END

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf OUT\_9n0\_A \rm ( \it nn \rm ) \rm =

\hspace*{0.20in}\bf PRE \it nn  $\in$  \it UCHAR\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf io\_ports \rm ( \it uchar\_byte \rm ( \it nn \rm ) \rm ) \rm := \it rgs8 \rm ( \it a0 \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf OUT\_9C0\_r \rm ( \it rr \rm ) \rm =

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8  $\land$  \it rr  $\not =$  \it f0\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf io\_ports \rm ( \it rgs8 \rm ( \it rr \rm ) \rm ) \rm := \it rgs8 \rm ( \it c0 \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf OUTI \rm =

\hspace*{0.20in}\bf ANY \it hvn \rm , \it lvn \rm ,

\hspace*{0.40in}\it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry

\hspace*{0.20in}\bf WHERE

\hspace*{0.40in}\it negative  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it zero  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it half\_carry  $\in$  \it BIT  $\land$  \it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  

\hspace*{0.40in}\it hvn  $\in$  \it BYTE  $\land$  \it lvn  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it inc\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ 

\hspace*{0.40in}\it negative \rm = \it is\_negative \rm ( \it bv\_9HL0 \rm )  $\land$ 

\hspace*{0.40in}\it zero \rm = \it is\_zero \rm ( \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.40in}\it half\_carry \rm = \it z\_h  $\land$ 

\hspace*{0.40in}\it pv \rm = \it parity\_even \rm ( \it bv\_9HL0 \rm )  $\land$ 

\hspace*{0.40in}\it add\_sub \rm =\hspace*{0.10in}\rm 1  $\land$ 

\hspace*{0.40in}\it carry \rm = \it z\_c

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm := \it bv\_9HL0  $\para$ 

\hspace*{0.40in}\bf updateAddressMem \rm ( \it bv\_HL \rm , \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it rgs8 \rm :=\hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \rm ( \it h0  $\mapsto$  \it hvn \rm ) \rm , \rm ( \it l0  $\mapsto$  \it lvn \rm ) \rm , \rm ( \it b0  $\mapsto$  \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm ) \rm ,

\hspace*{0.60in}\it update\_flag\_reg\rm ( \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry \rm ) \rm \}  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf OUTIR \rm =

\hspace*{0.20in}\bf ANY\hspace*{0.10in}\it hvn \rm , \it lvn \rm ,

\hspace*{0.40in}\it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry

\hspace*{0.20in}\bf WHERE

\hspace*{0.40in}\it negative  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it zero  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it half\_carry  $\in$  \it BIT  $\land$  \it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  

\hspace*{0.40in}\it hvn  $\in$  \it BYTE  $\land$  \it lvn  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it inc\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ 

\hspace*{0.40in}\it negative \rm = \it is\_negative \rm ( \it bv\_9HL0 \rm )  $\land$ 

\hspace*{0.40in}\it zero \rm = \it is\_zero \rm ( \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.40in}\it half\_carry \rm = \it z\_h  $\land$ 

\hspace*{0.40in}\it pv \rm = \it parity\_even \rm ( \it bv\_9HL0 \rm )  $\land$ 

\hspace*{0.40in}\it add\_sub \rm =\hspace*{0.10in}\rm 1  $\land$ 

\hspace*{0.40in}\it carry \rm = \it z\_c

\hspace*{0.40in}

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm := \it bv\_9HL0  $\para$ 

\hspace*{0.40in}\bf updateAddressMem \rm ( \it bv\_HL \rm , \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it rgs8 \rm :=\hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \rm ( \it h0  $\mapsto$  \it hvn \rm ) \rm , \rm ( \it l0  $\mapsto$  \it lvn \rm ) \rm , \rm ( \it b0  $\mapsto$  \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm ) \rm ,

\hspace*{0.60in}\it update\_flag\_reg\rm ( \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry \rm ) \rm \}  $\para$ 

\hspace*{0.40in}\it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )  $\para$ 

\hspace*{0.40in}\bf IF\hspace*{0.10in}\it is\_zero \rm ( \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm ) \rm = \rm 1 \bf THEN \it pc \rm := \it instruction\_next \rm ( \it pc \rm )\hspace*{0.10in}\bf END

\hspace*{0.40in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf OUTD \rm =

\hspace*{0.20in}\bf ANY\hspace*{0.10in}\it hvn \rm , \it lvn \rm ,

\hspace*{0.40in}\it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry

\hspace*{0.20in}\bf WHERE

\hspace*{0.40in}\it negative  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it zero  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it half\_carry  $\in$  \it BIT  $\land$  \it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  

\hspace*{0.40in}\it hvn  $\in$  \it BYTE  $\land$  \it lvn  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ 

\hspace*{0.40in}\it negative \rm = \it is\_negative \rm ( \it bv\_9HL0 \rm )  $\land$ 

\hspace*{0.40in}\it zero \rm = \it is\_zero \rm ( \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.40in}\it half\_carry \rm = \it z\_h  $\land$ 

\hspace*{0.40in}\it pv \rm = \it parity\_even \rm ( \it bv\_9HL0 \rm )  $\land$ 

\hspace*{0.40in}\it add\_sub \rm =\hspace*{0.10in}\rm 1  $\land$ 

\hspace*{0.40in}\it carry \rm = \it z\_c

\hspace*{0.40in}

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm := \it bv\_9HL0  $\para$ 

\hspace*{0.40in}\bf updateAddressMem \rm ( \it bv\_HL \rm , \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it rgs8 \rm :=\hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \rm ( \it h0  $\mapsto$  \it hvn \rm ) \rm , \rm ( \it l0  $\mapsto$  \it lvn \rm ) \rm , \rm ( \it b0  $\mapsto$  \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm ) \rm ,

\hspace*{0.60in}\it update\_flag\_reg\rm ( \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry \rm ) \rm \}  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf OUTDR \rm =

\hspace*{0.20in}\bf ANY\hspace*{0.10in}\it hvn \rm , \it lvn \rm ,

\hspace*{0.40in}\it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry

\hspace*{0.20in}\bf WHERE

\hspace*{0.40in}\it negative  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it zero  $\in$  \it BIT  $\land$ \hspace*{0.10in}\it half\_carry  $\in$  \it BIT  $\land$  \it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  

\hspace*{0.40in}\it hvn  $\in$  \it BYTE  $\land$  \it lvn  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ 

\hspace*{0.40in}\it negative \rm = \it is\_negative \rm ( \it bv\_9HL0 \rm )  $\land$ 

\hspace*{0.40in}\it zero \rm = \it is\_zero \rm ( \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.40in}\it half\_carry \rm = \it z\_h  $\land$ 

\hspace*{0.40in}\it pv \rm = \it parity\_even \rm ( \it bv\_9HL0 \rm )  $\land$ 

\hspace*{0.40in}\it add\_sub \rm =\hspace*{0.10in}\rm 1  $\land$ 

\hspace*{0.40in}\it carry \rm = \it z\_c

\hspace*{0.40in}

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm := \it bv\_9HL0  $\para$ 

\hspace*{0.40in}\bf updateAddressMem \rm ( \it bv\_HL \rm , \it io\_ports \rm ( \it rgs8 \rm ( \it c0 \rm ) \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it rgs8 \rm :=\hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \rm ( \it h0  $\mapsto$  \it hvn \rm ) \rm , \rm ( \it l0  $\mapsto$  \it lvn \rm ) \rm , \rm ( \it b0  $\mapsto$  \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm ) \rm ,

\hspace*{0.60in}\it update\_flag\_reg\rm ( \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry \rm ) \rm \}  $\para$ 

\hspace*{0.40in}\it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )  $\para$ 

\hspace*{0.40in}\bf IF\hspace*{0.10in}\it is\_zero \rm ( \it dec \rm ( \it rgs8 \rm ( \it b0 \rm ) \rm ) \rm ) \rm = \rm 1 \bf THEN \it pc \rm := \it instruction\_next \rm ( \it pc \rm )\hspace*{0.10in}\bf END

\hspace*{0.40in}

\hspace*{0.20in}\bf END

\hspace*{0.20in}

\hspace*{0.10in}

\vspace*{8mm}
\rm ;

\hspace*{0.20in}

\hspace*{0.20in} 

\hspace*{0.20in}

\hspace*{0.20in}\bf RLCA \rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it a0  $\mapsto$ \it rotateleft\rm (\it rgs8\rm (\it a0\rm )\rm ) \rm , 

\hspace*{0.60in}\it update\_flag\_reg\rm (\it z\_s\rm ,\it z\_z\rm ,\rm 0\rm ,\it z\_p\rm ,\rm 0\rm ,\it bitget\rm (\it rgs8\rm (\it a0\rm )\rm ,\rm 7\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RLA \rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it a0  $\mapsto$  \rm (\it rotateleft\rm (\it rgs8\rm (\it a0\rm )\rm )  $\lover$  \rm \{\rm (\rm 0 $\mapsto$  \it z\_c\rm )\rm \} \rm )\rm , 

\hspace*{0.60in}\it update\_flag\_reg\rm (\it z\_s\rm ,\it z\_z\rm ,\rm 0\rm ,\it z\_p\rm ,\rm 0\rm ,\it bitget\rm (\it rgs8\rm (\it a0\rm )\rm ,\rm 7\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RRCA \rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it a0  $\mapsto$  \it rotateright\rm (\it rgs8\rm (\it a0\rm )\rm ) \rm , 

\hspace*{0.60in}\it update\_flag\_reg\rm (\it z\_s\rm ,\it z\_z\rm ,\rm 0\rm ,\it z\_p\rm ,\rm 0\rm ,\it bitget\rm (\it rgs8\rm (\it a0\rm )\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RRA \rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it a0  $\mapsto$  \rm (\it rotateright\rm (\it rgs8\rm (\it a0\rm )\rm ) $\lover$  \rm \{\rm (\rm 0 $\mapsto$  \it z\_c\rm )\rm \} \rm )\rm , 

\hspace*{0.60in}\it update\_flag\_reg\rm (\it z\_s\rm ,\it z\_z\rm ,\rm 0\rm ,\it z\_p\rm ,\rm 0\rm ,\it bitget\rm (\it rgs8\rm (\it a0\rm )\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf RLC\_r\rm (\it rr\rm ) \rm =

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8  $\land$  \it rr  $\not =$  \it f0 \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \it rotateleft\rm (\it rgs8\rm (\it rr\rm )\rm ) \bf THEN

\hspace*{0.60in}

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it rr  $\mapsto$  \it res\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm ) \rm ,\rm 0\rm ,\it bitget\rm (\it rgs8\rm (\it rr\rm )\rm ,\rm 7\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RLC\_9HL0 \rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm ( \it bv\_HL \rm )\hspace*{0.10in} $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \it rotateleft\rm ( \it bv\_9HL0 \rm ) \bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (\hspace*{0.10in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm ,

\hspace*{1.00in}\it parity\_even\rm (\it res\rm ) \rm ,\rm 0\rm ,\it bitget\rm (\it bv\_9HL0\rm ,\rm 7\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_HL\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RLC\_9IX\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort \rm ( \it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm )  $\in$ \hspace*{0.10in}\it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \it rotateleft\rm ( \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm ) \rm ) \bf THEN\hspace*{0.45in}

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm )\rm ,

\hspace*{1.00in}\rm 0\rm ,\it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm )\rm ,\rm 7\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RLC\_9IY\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort \rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm )  $\in$ \hspace*{0.10in}\it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \it rotateleft\rm ( \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm ) \rm ) \bf THEN\hspace*{0.45in}

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm )\rm ,

\hspace*{1.00in}\rm 0\rm ,\it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm )\rm ,\rm 7\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RL\_r\rm (\it rr\rm ) \rm =

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8  $\land$  \it rr  $\not =$  \it f0 \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \rm (\it rotateleft\rm (\it rgs8\rm (\it rr\rm )\rm ) $\lover$  \rm \{\rm (\rm 0 $\mapsto$  \it z\_c\rm )\rm \} \rm ) \bf THEN

\hspace*{0.60in}

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it rr  $\mapsto$  \it res\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm ) \rm ,\rm 0\rm ,\it bitget\rm (\it rgs8\rm (\it rr\rm )\rm ,\rm 7\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RL\_9HL \rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort \rm (\it bv\_HL\rm )  $\in$ \hspace*{0.10in}\it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \rm (\it rotateleft\rm ( \it bv\_9HL0 \rm ) $\lover$  \rm \{\rm ( \rm 0  $\mapsto$  \it z\_c\rm )\rm \} \rm ) \bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm ) \rm ,\rm 0\rm ,\it bitget\rm (\it bv\_9HL0\rm ,\rm 7\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_HL\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\hspace*{0.20in}\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RL\_9IX\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm )  $\in$ \hspace*{0.10in}\it DATA\_R\_ADR\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \rm (\it rotateleft\rm ( \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm ) \rm )  $\lover$  \rm \{\rm (\rm 0 $\mapsto$  \it z\_c\rm )\rm \} \rm )\hspace*{0.65in}\bf THEN

\hspace*{0.60in}

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm )\rm ,

\hspace*{1.00in}\rm 0\rm , \it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm )\rm ,\rm 7\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RL\_9IY\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm )  $\in$ \hspace*{0.10in}\it DATA\_R\_ADR\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \rm (\it rotateleft\rm ( \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm ) \rm ) $\lover$  \rm \{\rm (\rm 0 $\mapsto$  \it z\_c\rm )\rm \} \rm )\hspace*{0.45in}

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm )\rm ,

\hspace*{1.00in}\rm 0\rm ,\it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm )\rm ,\rm 7\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RRC\_r\rm (\it rr\rm ) \rm =

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8  $\land$  \it rr  $\not =$  \it f0 \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \it rotateright\rm (\it rgs8\rm (\it rr\rm )\rm ) \bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it rr  $\mapsto$  \it res\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm ) \rm ,\rm 0\rm ,\it bitget\rm (\it rgs8\rm (\it rr\rm )\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RRC\_9HL0 \rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it bv\_HL\rm )  $\in$ \hspace*{0.10in}\it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \it rotateright\rm ( \it bv\_9HL0 \rm ) \bf THEN

\hspace*{0.60in}

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm ) \rm ,\rm 0\rm ,\it bitget\rm (\it bv\_9HL0\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_HL\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RRC\_9IX\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm )  $\in$ \hspace*{0.10in}\it DATA\_R\_ADR\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \it rotateright\rm ( \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm ) \rm ) \bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm )\rm ,

\hspace*{1.00in}\rm 0\rm ,\it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm )\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RRC\_9IY\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm )  $\in$ \hspace*{0.10in}\it DATA\_R\_ADR\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \it rotateright\rm ( \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm ) \rm ) \bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm )\rm ,

\hspace*{1.00in}\rm 0\rm ,\it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm )\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RR\_r\rm (\it rr\rm ) \rm =

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8  $\land$  \it rr  $\not =$  \it f0 \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \rm (\it rotateright\rm (\it rgs8\rm (\it rr\rm )\rm ) $\lover$  \rm \{\rm (\rm 0 $\mapsto$  \it z\_c\rm )\rm \} \rm ) \bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it rr  $\mapsto$  \it res\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm ) \rm ,\rm 0\rm ,\it bitget\rm (\it rgs8\rm (\it rr\rm )\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RR\_9HL \rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it bv\_HL\rm )  $\in$  \it STACK\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \rm (\it rotateright\rm ( \it bv\_9HL0 \rm ) $\lover$  \rm \{\rm (\rm 0 $\mapsto$  \it z\_c\rm )\rm \} \rm ) \bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm ) \rm ,\rm 0\rm ,\it bitget\rm (\it bv\_9HL0\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_HL\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RR\_9IX\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \rm (\it rotateright\rm ( \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm ) \rm )  $\lover$  \rm \{\rm (\rm 0 $\mapsto$  \it z\_c\rm )\rm \} \rm )\hspace*{0.65in}\bf THEN

\hspace*{0.60in}

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm )\rm ,

\hspace*{1.00in}\rm 0\rm ,\it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm )\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RR\_9IY\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \rm (\it rotateright\rm ( \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm ) \rm ) $\lover$  \rm \{\rm (\rm 0 $\mapsto$  \it z\_c\rm )\rm \} \rm )\hspace*{0.45in}

\hspace*{0.40in}\bf THEN\hspace*{0.60in}

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm )\rm ,

\hspace*{1.00in}\rm 0\rm ,\it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm )\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SLA\_r\rm (\it rr\rm ) \rm =

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8  $\land$  \it rr  $\not =$  \it f0 \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \rm (\it rotateright\rm (\it rgs8\rm (\it rr\rm )\rm ) $\lover$  \rm \{\rm (\rm 0 $\mapsto$  \it z\_c\rm )\rm \} \rm ) \bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it rr  $\mapsto$  \it res\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm ) \rm ,\rm 0\rm ,\it bitget\rm (\it rgs8\rm (\it rr\rm )\rm ,\rm 7\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SLA\_9HL \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.10in}\it bv16\_ushort\rm (\it bv\_HL\rm )  $\in$  \it STACK\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \rm (\it rotateright\rm ( \it bv\_9HL0 \rm ) $\lover$  \rm \{\rm (\rm 0 $\mapsto$  \it z\_c\rm )\rm \} \rm ) \bf THEN\hspace*{0.30in}

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm ) \rm ,\rm 0\rm ,\it bitget\rm (\it bv\_9HL0\rm ,\rm 7\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_HL\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SLA\_9IX\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \rm (\it rotateright\rm ( \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm ) \rm )  $\lover$  \rm \{\rm (\rm 0 $\mapsto$  \it z\_c\rm )\rm \} \rm )\hspace*{0.65in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm )\rm ,

\hspace*{1.00in}\rm 0\rm ,\it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm )\rm ,\rm 7\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SLA\_9IY\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \rm (\it rotateright\rm ( \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm ) \rm ) $\lover$  \rm \{\rm (\rm 0 $\mapsto$  \it z\_c\rm )\rm \} \rm )\hspace*{0.45in}

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm )\rm ,

\hspace*{1.00in}\rm 0\rm ,\it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm )\rm ,\rm 7\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SRA\_r\rm (\it rr\rm ) \rm =

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8  $\land$  \it rr  $\not =$  \it f0 \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \rm (\it rotateright\rm (\it rgs8\rm (\it rr\rm )\rm )\rm )  $\lover$  \rm \{\rm 7 $\mapsto$  \it bitget\rm (\it rgs8\rm (\it rr\rm )\rm ,\rm 7\rm )\rm \}\hspace*{0.10in}\bf THEN

\hspace*{0.60in}

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it rr  $\mapsto$  \it res\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm ) \rm ,\rm 0\rm ,\it bitget\rm (\it rgs8\rm (\it rr\rm )\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SRA\_9HL0 \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.10in}\it bv16\_ushort\rm (\it bv\_HL\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \rm (\it rotateright\rm ( \it bv\_9HL0 \rm )\rm )  $\lover$  \rm \{\rm 7 $\mapsto$  \it bv\_9HL0\rm (\rm 7\rm )\rm \}\hspace*{0.10in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm ) \rm ,\rm 0\rm ,\it bitget\rm (\it bv\_9HL0\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_HL\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SRA\_9IX\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  

\hspace*{0.60in}\it res \rm = \rm (\it rotateright\rm ( \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm ) \rm )\rm ) $\lover$  

\hspace*{0.60in}\rm \{\rm 7  $\mapsto$  \it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm )\rm ,\rm 7\rm ) \rm \}

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm )\rm ,

\hspace*{1.00in}\rm 0\rm ,\it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm )\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SRA\_9IY\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  

\hspace*{0.60in}\it res \rm = \it rotateright\rm ( \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm ) \rm )  $\lover$ 

\hspace*{0.60in}\rm \{\rm 7  $\mapsto$  \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm )\rm (\rm 7\rm ) \rm \}

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it res\rm )\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm )\rm ,

\hspace*{1.00in}\rm 0\rm ,\it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm )\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SRL\_r\rm (\it rr\rm ) \rm =

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8  $\land$  \it rr  $\not =$  \it f0 \bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \it bitclear\rm (\it rotateright\rm (\it rgs8\rm (\it rr\rm )\rm )\rm ,\rm 7\rm )\hspace*{0.10in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it rr  $\mapsto$  \it res\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm (

\hspace*{1.00in}\rm 0\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm ) \rm ,\rm 0\rm ,\it bitget\rm (\it rgs8\rm (\it rr\rm )\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SRL\_9HL0 \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.10in}\it bv16\_ushort\rm (\it bv\_HL\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it res \rm = \it bitclear\rm (\it rotateright\rm ( \it bv\_9HL0 \rm )\rm ,\rm 7\rm )\hspace*{0.10in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\rm 0\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm ) \rm ,\rm 0\rm ,\it bitget\rm (\it bv\_9HL0\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ 

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_HL\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SRL\_9IX\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.10in}\bf THEN 

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  

\hspace*{0.60in}\it res \rm = \it bitclear\rm (\it rotateright\rm ( \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm ) \rm )\rm ,\rm 7\rm )

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\rm 0\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm )\rm ,

\hspace*{1.00in}\rm 0\rm ,\it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm )\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm , \it res \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SRL\_9IY\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.10in}\bf THEN 

\hspace*{0.40in}\bf ANY \it res \bf WHERE \it res  $\in$  \it BYTE  $\land$  

\hspace*{0.60in}\it res \rm = \it bitclear\rm (\it rotateright\rm ( \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm ) \rm )\rm ,\rm 7\rm )

\hspace*{0.40in}\bf THEN\hspace*{0.50in}

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\rm 0\rm , \it is\_zero\rm (\it res\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it res\rm )\rm ,

\hspace*{1.00in}\rm 0\rm ,\it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm )\rm ,\rm 0\rm ) \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm , \it res \rm )\hspace*{0.10in} $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RLD\rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it bv\_HL\rm )  $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it res\rm , \it acc \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it acc  $\in$  \it BYTE  $\land$ 

\hspace*{0.60in}\it res \rm =\hspace*{0.10in}\rm \{ \rm 7 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 3\rm )\rm , \rm 6 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 2\rm )\rm , \rm 5 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 1\rm )\rm , 

\hspace*{0.80in}\rm 4 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 0\rm )\rm ,

\hspace*{0.80in}\rm 3 $\mapsto$ \it bitget\rm (\it rgs8\rm (\it a0\rm )\rm ,\rm 3\rm )\rm ,\hspace*{0.15in}\rm 2 $\mapsto$ \it bitget\rm (\it rgs8\rm (\it a0\rm )\rm ,\rm 2\rm )\rm , \rm 1 $\mapsto$ \it bitget\rm (\it rgs8\rm (\it a0\rm )\rm ,\rm 1\rm )\rm ,

\hspace*{0.80in}\rm 0 $\mapsto$ \it bitget\rm (\it rgs8\rm (\it a0\rm )\rm ,\rm 0\rm )\hspace*{0.20in}\rm \}  $\land$ 

\hspace*{0.60in}\it acc \rm = \it rgs8\rm (\it a0\rm )  $\lover$  \rm \{ \rm 3 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 7\rm )\rm ,\hspace*{0.15in}\rm 2 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 6\rm )\rm , 

\hspace*{0.80in}\rm 1 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 5\rm )\rm ,\hspace*{0.20in}\rm 0 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 4\rm )\hspace*{0.10in}\rm \}

\hspace*{0.60in}

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm (

\hspace*{1.00in}\it is\_negative\rm (\it acc\rm )\rm , \it is\_zero\rm (\it acc\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it acc\rm )\rm ,

\hspace*{1.00in}\rm 0\rm ,\it z\_c \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_HL\rm , \it res \rm ) 

\hspace*{0.60in} $\para$  \it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RRD\rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it bv\_HL\rm )  $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it res\rm , \it acc \bf WHERE \it res  $\in$  \it BYTE  $\land$  \it acc  $\in$  \it BYTE  $\land$ 

\hspace*{0.60in}\it res \rm =\hspace*{0.10in}\rm \{ \rm 7 $\mapsto$ \it bitget\rm (\it rgs8\rm (\it a0\rm )\rm ,\rm 3\rm )\rm ,\hspace*{0.15in}\rm 6 $\mapsto$ \it bitget\rm (\it rgs8\rm (\it a0\rm )\rm ,\rm 2\rm )\rm , \rm 5 $\mapsto$ \it bitget\rm (\it rgs8\rm (\it a0\rm )\rm ,\rm 1\rm )\rm ,

\hspace*{0.80in}\rm 4 $\mapsto$ \it bitget\rm (\it rgs8\rm (\it a0\rm )\rm ,\rm 0\rm )\rm ,

\hspace*{0.80in}\rm 3 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 7\rm )\rm , \rm 2 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 6\rm )\rm , \rm 1 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 5\rm )\rm , 

\hspace*{0.80in}\rm 0 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 4\rm )\rm \}  $\land$ 

\hspace*{0.60in}\it acc \rm = \it rgs8\rm (\it a0\rm )  $\lover$  \rm \{ \rm 3 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 3\rm )\rm ,\hspace*{0.15in}\rm 2 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 2\rm )\rm , 

\hspace*{0.80in}\rm 1 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 1\rm )\rm ,\hspace*{0.20in}\rm 0 $\mapsto$ \it bitget\rm (\it bv\_9HL0\rm ,\rm 0\rm )\hspace*{0.10in}\rm \}

\hspace*{0.60in}

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm ( \it is\_negative\rm (\it acc\rm )\rm , \it is\_zero\rm (\it acc\rm )\rm ,\rm 0\rm , \it parity\_even\rm (\it acc\rm )\rm , \rm 0 \rm ,\it z\_c \rm )\hspace*{0.15in}\rm \} $\para$ \hspace*{0.60in}

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_HL\rm ,\it res\rm ) 

\hspace*{0.60in} $\para$  \it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in} 

\hspace*{0.20in}

\hspace*{0.20in}\bf BIT\_b\_rr \rm (\it bb\rm ,\it rr\rm ) \rm =

\hspace*{0.20in}\bf PRE \it bb  $\in$  \rm 0 $\upto$ \rm 7 $\land$  \it rr  $\in$  \it id\_reg\_8  $\land$  \it rr  $\not =$  \it f0 \bf THEN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{\it update\_flag\_reg\rm ( \it z\_s\rm , \it bit\_not\rm ( \it bitget\rm ( \it rgs8\rm (\it rr\rm )\rm ,\it bb\rm ) \rm )\rm , \rm 1\rm ,\it z\_p\rm ,\rm 0\rm ,\it z\_c\rm )\rm \} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf BIT\_b\_9HL0 \rm (\it bb\rm ) \rm =\hspace*{0.10in}

\hspace*{0.20in}\bf PRE \it bb  $\in$  \rm 0 $\upto$ \rm 7 \bf THEN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{\it update\_flag\_reg\rm ( \it z\_s\rm , \it bit\_not\rm ( \it bitget\rm (\it bv\_9HL0\rm ,\it bb\rm ) \rm )\rm , \rm 1\rm ,\it z\_p\rm ,\rm 0\rm ,\it z\_c\rm )\rm \} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf BIT\_b\_9IX\_d0 \rm (\it desloc\rm , \it bb\rm ) \rm =\hspace*{0.10in}

\hspace*{0.20in}\bf PRE \it bb  $\in$  \rm 0 $\upto$ \rm 7  $\land$  \it desloc  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{\it update\_flag\_reg\rm ( \it z\_s\rm , \it bit\_not\rm ( \it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm )\rm ,\it bb\rm ) \rm )\rm , \rm 1\rm ,\it z\_p\rm ,\rm 0\rm ,\it z\_c\rm )\rm \} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf BIT\_b\_9IY\_d0 \rm (\it desloc\rm , \it bb\rm ) \rm =\hspace*{0.10in}

\hspace*{0.20in}\bf PRE \it bb  $\in$  \rm 0 $\upto$ \rm 7  $\land$  \it desloc  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{\it update\_flag\_reg\rm ( \it z\_s\rm , \it bit\_not\rm ( \it bitget\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm )\rm ,\it bb\rm ) \rm )\rm , \rm 1\rm ,\it z\_p\rm ,\rm 0\rm ,\it z\_c\rm )\rm \} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SET\_b\_r\rm (\it bb\rm ,\it rr\rm )\rm =

\hspace*{0.20in}\bf PRE \it bb\hspace*{0.10in} $\in$  \rm 0 $\upto$ \rm 7  $\land$  \it rr  $\in$  \it id\_reg\_8 \bf THEN

\hspace*{0.40in}\bf rgs8\rm (\it rr\rm )\rm := \it bitset\rm (\it rgs8\rm (\it rr\rm )\rm ,\it bb\rm )\hspace*{0.25in} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SET\_b\_9HL0\rm (\it bb\rm )\rm =

\hspace*{0.20in}\bf PRE \it bb\hspace*{0.10in} $\in$  \rm 0 $\upto$ \rm 7  $\land$  \it bv16\_ushort\rm (\it bv\_HL\rm )  $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf updateAddressMem\rm (\it bv\_HL\rm , \it bitset\rm (\it bv\_9HL0\rm ,\it bb\rm )\rm ) $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf SET\_b\_9IX\_d0\rm (\it bb\rm ,\it desloc\rm )\rm =

\hspace*{0.20in}\bf PRE \it bb\hspace*{0.10in} $\in$  \rm 0 $\upto$ \rm 7  $\land$  \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm , \it bitset\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm )\rm ,\it bb\rm )\rm ) $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf SET\_b\_9IY\_d0\rm (\it bb\rm ,\it desloc\rm )\rm =

\hspace*{0.20in}\bf PRE \it bb\hspace*{0.10in} $\in$  \rm 0 $\upto$ \rm 7  $\land$  \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm , \it bitset\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm )\rm ,\it bb\rm )\rm ) $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RES\_b\_r\rm (\it bb\rm ,\it rr\rm )\rm =

\hspace*{0.20in}\bf PRE \it bb\hspace*{0.10in} $\in$  \rm 0 $\upto$ \rm 7  $\land$  \it rr  $\in$  \it id\_reg\_8  $\land$  \it rr  $\not =$  \it f0 \bf THEN

\hspace*{0.40in}\bf rgs8\rm (\it rr\rm )\rm := \it bitclear\rm (\it rgs8\rm (\it rr\rm )\rm ,\it bb\rm )\hspace*{0.30in} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.35in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RES\_b\_9HL0\rm (\it bb\rm )\rm =

\hspace*{0.20in}\bf PRE \it bb\hspace*{0.10in} $\in$  \rm 0 $\upto$ \rm 7  $\land$  \it bv16\_ushort\rm (\it bv\_HL\rm )  $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf updateAddressMem\rm (\it bv\_HL\rm , \it bitclear\rm (\it bv\_9HL0\rm ,\it bb\rm )\rm ) $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf RES\_b\_9IX\_d0\rm (\it bb\rm ,\it desloc\rm )\rm =

\hspace*{0.20in}\bf PRE \it bb\hspace*{0.10in} $\in$  \rm 0 $\upto$ \rm 7  $\land$  \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm , \it bitclear\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm )\rm ,\it bb\rm )\rm ) $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf RES\_b\_9IY\_d0\rm (\it bb\rm ,\it desloc\rm )\rm =

\hspace*{0.20in}\bf PRE \it bb\hspace*{0.10in} $\in$  \rm 0 $\upto$ \rm 7  $\land$  \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm , \it bitclear\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm )\rm ,\it bb\rm )\rm ) $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in} 

\hspace*{0.20in}

\hspace*{0.20in}\bf JP\_nn\rm (\it nn\rm )\rm =

\hspace*{0.20in}\bf PRE \it nn  $\in$  \it USHORT \bf THEN

\hspace*{0.40in}\it pc\rm := \it nn  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf JP\_cc\_nn\rm (\it cc\rm ,\it nn\rm )\rm =

\hspace*{0.20in}\bf PRE \it cc  $\in$  \bf BOOL  $\land$  \it nn  $\in$  \it USHORT \bf THEN

\hspace*{0.40in}\bf IF\hspace*{0.20in}\it cc \rm = \bf TRUE \bf THEN\hspace*{0.20in}\it pc\rm := \it nn

\hspace*{0.40in}\bf ELSE \it pc \rm := \it instruction\_next\rm (\it pc\rm ) \bf END\hspace*{0.10in}

\hspace*{0.40in} $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf JR\_e\rm (\it ee\rm )\rm =

\hspace*{0.20in}\bf PRE \it ee  $\in$  \it SCHAR  $\land$  \it ee\rm -\rm 2  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\it pc \rm := \rm (\it pc \rm + \it ee\rm )  $\mod$  \rm 2$^{16}$  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf JR\_C\_e\rm (\it ee\rm )\rm =

\hspace*{0.20in}\bf PRE \it ee  $\in$  \it SCHAR  $\land$  \it ee\rm -\rm 2  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\bf IF \it z\_c \rm = \rm 0 \bf THEN\hspace*{0.45in}\it pc \rm := \it instruction\_next\rm (\it pc\rm ) 

\hspace*{0.40in}\bf ELSE \it pc \rm := \rm (\it pc \rm + \it ee\rm )  $\mod$  \rm 2$^{16}$ \bf END

\hspace*{0.40in} $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf JR\_NC\_e\rm (\it ee\rm )\rm =

\hspace*{0.20in}\bf PRE \it ee  $\in$  \it SCHAR  $\land$  \it ee\rm -\rm 2  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\bf IF \it z\_c \rm = \rm 1 \bf THEN\hspace*{0.45in}\it pc \rm := \it instruction\_next\rm (\it pc\rm ) 

\hspace*{0.40in}\bf ELSE \it pc \rm := \rm (\it pc \rm + \it ee\rm )  $\mod$  \rm 2$^{16}$ \bf END

\hspace*{0.40in} $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf JR\_Z\_e\rm (\it ee\rm )\rm =

\hspace*{0.20in}\bf PRE \it ee  $\in$  \it SCHAR  $\land$  \it ee\rm -\rm 2  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\bf IF \it z\_z \rm = \rm 0 \bf THEN\hspace*{0.45in}\it pc \rm := \it instruction\_next\rm (\it pc\rm ) 

\hspace*{0.40in}\bf ELSE \it pc \rm := \rm (\it pc \rm + \it ee\rm )  $\mod$  \rm 2$^{16}$ \bf END

\hspace*{0.40in} $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf JR\_NZ\_e\rm (\it ee\rm )\rm =

\hspace*{0.20in}\bf PRE \it ee  $\in$  \it SCHAR  $\land$  \it ee\rm -\rm 2  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\bf IF \it z\_z \rm = \rm 1 \bf THEN\hspace*{0.45in}\it pc \rm := \it instruction\_next\rm (\it pc\rm ) 

\hspace*{0.40in}\bf ELSE \it pc \rm := \rm (\it pc \rm + \it ee\rm )  $\mod$  \rm 2$^{16}$ \bf END

\hspace*{0.40in} $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf JP\_HL\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it pc \rm := \it bv16\_ushort\rm (\it bv\_HL\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf JP\_IX\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it pc \rm := \it bv16\_ushort\rm ( \it ix\rm )\hspace*{0.10in} $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf JP\_IY\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it pc \rm :=\hspace*{0.10in}\it bv16\_ushort\rm ( \it iy\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf DJNZ\_e\rm (\it ee\rm )\rm =

\hspace*{0.20in}\bf PRE \it ee  $\in$  \it SCHAR  $\land$  \it ee\rm -\rm 2  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}

\hspace*{0.40in}\bf rgs8\rm (\it b0\rm )\rm :=\hspace*{0.20in}\it dec\rm (\it rgs8\rm (\it b0\rm )\rm ) $\para$ 

\hspace*{0.40in}

\hspace*{0.40in}\bf IF \it is\_zero\rm (\it dec\rm (\it rgs8\rm (\it b0\rm )\rm )\rm ) \rm = \rm 1 \bf THEN\hspace*{0.20in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )

\hspace*{0.40in}\bf ELSE \it pc \rm := \rm (\it pc \rm + \it ee\rm )  $\mod$  \rm 2$^{16}$ \bf END  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.20in}

\hspace*{0.40in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in} 

\hspace*{0.20in}

\hspace*{0.20in}\bf CALL\_nn \rm (\it nn\rm ) \rm =

\hspace*{0.20in}\bf PRE \it nn  $\in$  \it USHORT  $\land$  \it bv16\_ushort\rm (\it sp\_minus\_two\rm )  $\in$  \it STACK\_R\_ADR\hspace*{0.10in} $\land$ \hspace*{0.10in}\it bv16\_ushort\rm (\it sp\rm )  $\in$  \it STACK\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it high\rm ,\it low \bf WHERE \it high  $\in$  \it BYTE  $\land$  \it low  $\in$  \it BYTE  $\land$  \rm ( \it high \rm , \it low \rm ) \rm = \it bv16\_byte\rm (\it ushort\_bv16\rm (\it pc\rm )\rm )  $\land$ 

\hspace*{0.60in}\it sp\_minus\_one  $\not =$  \it sp\_minus\_two

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf updateStack\rm ( \rm \{ \rm ( \it sp\_minus\_one\rm )  $\mapsto$  \it high\rm , \rm (\it sp\_minus\_two\rm )  $\mapsto$  \it low \rm \} \rm )  $\para$ 

\hspace*{0.60in}\it sp \rm := \it sp\_minus\_two  $\para$ 

\hspace*{0.60in}\it pc \rm := \it nn\hspace*{0.15in}

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf CALL\_cc\_nn \rm (\it cc\rm ,\it nn\rm ) \rm =

\hspace*{0.20in}\bf PRE \it cc  $\in$  \rm 0 $\upto$ \rm 8  $\land$  \it nn  $\in$  \it USHORT  $\land$  \it bv16\_ushort\rm (\it sp\_minus\_two\rm )  $\in$  \it STACK\_R\_ADR\hspace*{0.10in} $\land$ \hspace*{0.10in}\it bv16\_ushort\rm (\it sp\rm )  $\in$  \it STACK\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it high\rm ,\it low \bf WHERE \it high  $\in$  \it BYTE  $\land$  \it low  $\in$  \it BYTE  $\land$ \hspace*{0.10in}\rm ( \it high \rm , \it low \rm ) \rm = \it bv16\_byte\rm (\it ushort\_bv16\rm (\it pc\rm )\rm ) 

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf IF \it cc\_get\rm (\it rgs8\rm ,\it cc\rm ) \rm = \rm 1 \bf THEN

\hspace*{0.80in}\bf updateStack\rm ( \rm \{ \rm ( \it sp\_minus\_one\rm )  $\mapsto$  \it high\rm , \rm (\it sp\_minus\_two\rm )  $\mapsto$  \it low \rm \} \rm )  $\para$ 

\hspace*{0.80in}\it sp \rm := \it sp\_minus\_two  $\para$ 

\hspace*{0.80in}\it pc \rm := \it nn 

\hspace*{0.60in}\bf ELSE 

\hspace*{0.80in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )

\hspace*{0.60in}\bf END

\hspace*{0.60in} $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf RET \rm = 

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it pc \rm := \it bv16\_ushort\rm (\hspace*{0.10in}\it byte\_bv16\rm ( \it mem\rm (\it sp\_plus\_one\rm ) \rm , \it bv\_9SP0 \rm )\rm )  $\para$  \it sp \rm := \it sp\_plus\_two  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RET\_cc\rm (\it cc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it cc  $\in$  \rm 0 $\upto$ \rm 7 \bf THEN

\hspace*{0.40in}\bf IF\hspace*{0.10in}\it cc\_get\rm (\it rgs8\rm ,\it cc\rm ) \rm = \rm 1 \bf THEN\hspace*{0.35in}\it pc \rm := \it bv16\_ushort\rm (\hspace*{0.10in}\it byte\_bv16\rm ( \it mem\rm (\it sp\_plus\_one\rm ) \rm , \it bv\_9SP0 \rm )\rm )  $\para$  \it sp \rm := \it sp\_plus\_two 

\hspace*{0.40in}\bf ELSE \it pc \rm := \it instruction\_next\rm (\it pc\rm ) \bf END

\hspace*{0.40in} $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RETI \rm = 

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it pc \rm := \it bv16\_ushort\rm (\hspace*{0.10in}\it byte\_bv16\rm ( \it mem\rm (\it sp\_plus\_one\rm ) \rm , \it bv\_9SP0 \rm )\rm )  $\para$  \it sp \rm := \it sp\_plus\_two  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RETN \rm = 

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it pc \rm := \it bv16\_ushort\rm (\hspace*{0.10in}\it byte\_bv16\rm ( \it mem\rm (\it sp\_plus\_one\rm ) \rm , \it bv\_9SP0 \rm )\rm )  $\para$ 

\hspace*{0.40in}\it sp \rm := \it sp\_plus\_two  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )  $\para$  \it iff1\rm := \it iff2

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf RST\_p\rm (\it pp\rm ) \rm = 

\hspace*{0.20in}\bf PRE \it pp  $\in$  \rm 0 $\upto$ \rm 7  $\land$ \hspace*{0.10in}\it bv16\_ushort\rm (\it sp\_minus\_two\rm )  $\in$  \it STACK\_R\_ADR\hspace*{0.10in} $\land$ \hspace*{0.10in}\it bv16\_ushort\rm (\it sp\rm )  $\in$  \it STACK\_R\_ADR\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf ANY \it pc\_l\rm , \it pc\_h \bf WHERE \it pc\_l  $\in$  \it BYTE  $\land$  \it pc\_h  $\in$  \it BYTE  $\land$  \it bv16\_byte\rm (\it ushort\_bv16\rm (\it pc\rm )\rm )\rm = \rm (\it pc\_l\rm ,\it pc\_h\rm ) 

\hspace*{0.40in}\bf THEN 

\hspace*{0.60in}\bf updateStack\rm ( \rm \{ \it sp\_minus\_one  $\mapsto$  \it pc\_h\rm , \it sp\_minus\_two  $\mapsto$  \it pc\_l \rm \} \rm )  $\para$ 

\hspace*{0.60in}\it sp \rm := \it sp\_minus\_two  $\para$  \it pc \rm := \it pp $\times$ \rm 8\hspace*{0.20in} $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.10in}

\vspace*{8mm}
\rm ;\hspace*{0.20in}

\hspace*{0.20in} 

\hspace*{0.20in}

\hspace*{0.20in}\bf AND\_A\_r\rm (\it rr\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8\hspace*{0.10in}

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it result\hspace*{0.10in}\rm , \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry 

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it result  $\in$  \it BYTE  $\land$  \it negative  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT 

\hspace*{0.60in} $\land$  \it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$ \hspace*{0.10in}

\hspace*{0.60in}\it result \rm = \it and\rm (\hspace*{0.10in}\it rgs8\rm (\it a0\rm )\rm ,\it rgs8\rm (\it rr\rm ) \rm )  $\land$ 

\hspace*{0.60in}\it negative \rm = \it is\_negative\rm (\it result\rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero\rm (\it result\rm )\hspace*{0.10in} $\land$  

\hspace*{0.60in}\it half\_carry \rm = \rm 0  $\land$ \hspace*{0.45in}

\hspace*{0.60in}\it pv \rm =\hspace*{0.15in}\it parity\_even\rm (\it result\rm )\hspace*{0.30in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.60in}\it carry \rm = \rm 0\hspace*{0.35in}

\hspace*{0.40in}\bf THEN\hspace*{2.45in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it result\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it pv\rm ,\it add\_sub\rm , \it carry\rm )\hspace*{0.15in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf AND\_A\_n\rm (\it n1\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it n1  $\in$  \it SCHAR 

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it result\hspace*{0.10in}\rm , \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry 

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it result  $\in$  \it BYTE  $\land$  \it negative  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$ \hspace*{0.10in}

\hspace*{0.60in}\it result \rm = \it and\rm ( \it rgs8\rm (\it a0\rm )\rm , \it schar\_byte\rm ( \it n1 \rm )\rm )  $\land$ 

\hspace*{0.60in}\it negative \rm = \it is\_negative\rm (\it result\rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero\rm (\it result\rm )\hspace*{0.10in} $\land$  

\hspace*{0.60in}\it half\_carry \rm = \rm 0  $\land$ \hspace*{0.45in}

\hspace*{0.60in}\it pv \rm =\hspace*{0.15in}\it parity\_even\rm (\it result\rm )\hspace*{0.30in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.60in}\it carry \rm = \rm 0\hspace*{0.20in}

\hspace*{0.40in}\bf THEN\hspace*{2.05in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it result\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it pv\rm ,\it add\_sub\rm , \it carry\rm )\hspace*{0.15in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf AND\_A\_9HL0\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf ANY 

\hspace*{0.40in}\it result\hspace*{0.10in}\rm , \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry 

\hspace*{0.20in}\bf WHERE\hspace*{0.10in}\it result  $\in$  \it BYTE  $\land$  \it negative  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$ 

\hspace*{0.40in}\it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$ \hspace*{0.10in}

\hspace*{0.40in}\it result \rm = \it and\rm (\hspace*{0.10in}\it rgs8\rm (\it a0\rm )\rm ,\hspace*{0.10in}\it bv\_9HL0 \rm )  $\land$ 

\hspace*{0.40in}\it negative \rm = \it is\_negative\rm (\it result\rm )  $\land$ 

\hspace*{0.40in}\it zero \rm = \it is\_zero\rm (\it result\rm )\hspace*{0.10in} $\land$  

\hspace*{0.40in}\it half\_carry \rm = \rm 0  $\land$ \hspace*{0.45in}

\hspace*{0.40in}\it pv \rm =\hspace*{0.15in}\it parity\_even\rm (\it result\rm )\hspace*{0.30in} $\land$ 

\hspace*{0.40in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.40in}\it carry \rm = \rm 0\hspace*{0.20in}

\hspace*{0.20in}\bf THEN\hspace*{2.15in}

\hspace*{0.40in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it result\rm , 

\hspace*{0.60in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it pv\rm ,\it add\_sub\rm , \it carry\rm )\hspace*{0.15in}\rm \}  $\para$  

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.20in}\bf END\hspace*{0.10in}\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf AND\_A\_9IX\_d0\rm (\it desloc\rm )\rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN\hspace*{0.15in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it result\hspace*{0.10in}\rm , \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry 

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it result  $\in$  \it BYTE  $\land$  \it negative  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it result \rm = \it and\rm (\hspace*{0.10in}\it rgs8\rm (\it a0\rm )\rm , \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm ) \rm )  $\land$ \hspace*{0.10in}

\hspace*{0.60in}\it negative \rm = \it is\_negative\rm (\it result\rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero\rm (\it result\rm )\hspace*{0.10in} $\land$  

\hspace*{0.60in}\it half\_carry \rm = \rm 0  $\land$ \hspace*{0.45in}

\hspace*{0.60in}\it pv \rm =\hspace*{0.15in}\it parity\_even\rm (\it result\rm )\hspace*{0.30in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.60in}\it carry \rm = \rm 0\hspace*{0.20in}

\hspace*{0.40in}\bf THEN\hspace*{2.15in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it result\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it pv\rm ,\it add\_sub\rm , \it carry\rm )\hspace*{0.15in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf AND\_A\_9IY\_d0\rm (\it desloc\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN\hspace*{0.15in}

\hspace*{0.40in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it result\hspace*{0.10in}\rm , \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry 

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it result  $\in$  \it BYTE  $\land$  \it negative  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it result \rm = \it and\rm (\hspace*{0.10in}\it rgs8\rm (\it a0\rm )\rm , \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm ) \rm )  $\land$ \hspace*{0.10in}

\hspace*{0.60in}\it negative \rm = \it is\_negative\rm (\it result\rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero\rm (\it result\rm )\hspace*{0.10in} $\land$  

\hspace*{0.60in}\it half\_carry \rm = \rm 0  $\land$ \hspace*{0.45in}

\hspace*{0.60in}\it pv \rm =\hspace*{0.15in}\it parity\_even\rm (\it result\rm )\hspace*{0.30in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.60in}\it carry \rm = \rm 0\hspace*{0.20in}

\hspace*{0.40in}\bf THEN\hspace*{2.15in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it result\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it pv\rm ,\it add\_sub\rm , \it carry\rm )\hspace*{0.15in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf OR\_A\_r\rm (\it rr\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8\hspace*{0.10in}

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it result\hspace*{0.10in}\rm , \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry 

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it result  $\in$  \it BYTE  $\land$  \it negative  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT 

\hspace*{0.60in} $\land$  \it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$ \hspace*{0.10in}

\hspace*{0.60in}\it result \rm = \it ior\rm (\it rgs8\rm (\it a0\rm )\rm ,\it rgs8\rm (\it rr\rm ) \rm )  $\land$ 

\hspace*{0.60in}\it negative \rm = \it is\_negative\rm (\it result\rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero\rm (\it result\rm )\hspace*{0.10in} $\land$  

\hspace*{0.60in}\it half\_carry \rm = \rm 0  $\land$ \hspace*{0.45in}

\hspace*{0.60in}\it pv \rm =\hspace*{0.15in}\it parity\_even\rm (\it result\rm )\hspace*{0.30in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.60in}\it carry \rm = \rm 0\hspace*{0.35in}

\hspace*{0.60in}

\hspace*{0.40in}\bf THEN\hspace*{2.45in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it result\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it pv\rm ,\it add\_sub\rm , \it carry\rm )\hspace*{0.15in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf OR\_A\_n\rm (\it n1\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it n1  $\in$  \it SCHAR 

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it result\hspace*{0.10in}\rm , \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry 

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it result  $\in$  \it BYTE  $\land$  \it negative  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT 

\hspace*{0.60in} $\land$  \it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$ \hspace*{0.10in}

\hspace*{0.60in}\it result \rm = \it ior\rm ( \it rgs8\rm (\it a0\rm )\rm , \it schar\_byte\rm ( \it n1 \rm )\rm )  $\land$ 

\hspace*{0.60in}\it negative \rm = \it is\_negative\rm (\it result\rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero\rm (\it result\rm )\hspace*{0.10in} $\land$  

\hspace*{0.60in}\it half\_carry \rm = \rm 0  $\land$ \hspace*{0.45in}

\hspace*{0.60in}\it pv \rm =\hspace*{0.15in}\it parity\_even\rm (\it result\rm )\hspace*{0.30in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.60in}\it carry \rm = \rm 0\hspace*{0.20in}

\hspace*{0.40in}\bf THEN\hspace*{2.05in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it result\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it pv\rm ,\it add\_sub\rm , \it carry\rm )\hspace*{0.15in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf OR\_A\_9HL0\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf ANY 

\hspace*{0.40in}\it result\hspace*{0.10in}\rm , \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry 

\hspace*{0.20in}\bf WHERE\hspace*{0.10in}\it result  $\in$  \it BYTE  $\land$  \it negative  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$ 

\hspace*{0.40in}\it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$ 

\hspace*{0.40in}\it result \rm = \it ior\rm (\hspace*{0.10in}\it rgs8\rm (\it a0\rm )\rm ,\hspace*{0.10in}\it bv\_9HL0 \rm )  $\land$ 

\hspace*{0.40in}\it negative \rm = \it is\_negative\rm (\it result\rm )  $\land$ 

\hspace*{0.40in}\it zero \rm = \it is\_zero\rm (\it result\rm )\hspace*{0.10in} $\land$  

\hspace*{0.40in}\it half\_carry \rm = \rm 0  $\land$ \hspace*{0.45in}

\hspace*{0.40in}\it pv \rm =\hspace*{0.15in}\it parity\_even\rm (\it result\rm )\hspace*{0.30in} $\land$ 

\hspace*{0.40in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.40in}\it carry \rm = \rm 0\hspace*{0.20in}

\hspace*{0.20in}\bf THEN\hspace*{2.15in}

\hspace*{0.40in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it result\rm , 

\hspace*{0.60in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it pv\rm ,\it add\_sub\rm , \it carry\rm )\hspace*{0.15in}\rm \}  $\para$  

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf OR\_A\_9IX\_d0\rm (\it desloc\rm )\rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN\hspace*{0.15in}

\hspace*{0.40in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it result\hspace*{0.10in}\rm , \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry 

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it result  $\in$  \it BYTE  $\land$  \it negative  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$ 

\hspace*{0.40in}\it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it result \rm = \it ior\rm (\hspace*{0.10in}\it rgs8\rm (\it a0\rm )\rm , \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm ) \rm )  $\land$ \hspace*{0.10in}

\hspace*{0.60in}\it negative \rm = \it is\_negative\rm (\it result\rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero\rm (\it result\rm )\hspace*{0.10in} $\land$  

\hspace*{0.60in}\it half\_carry \rm = \rm 0  $\land$ \hspace*{0.45in}

\hspace*{0.60in}\it pv \rm =\hspace*{0.15in}\it parity\_even\rm (\it result\rm )\hspace*{0.30in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.60in}\it carry \rm = \rm 0\hspace*{0.20in}

\hspace*{0.40in}\bf THEN\hspace*{2.15in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it result\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it pv\rm ,\it add\_sub\rm , \it carry\rm )\hspace*{0.15in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf OR\_A\_9IY\_d0\rm (\it desloc\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN\hspace*{0.15in}

\hspace*{0.40in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it result\hspace*{0.10in}\rm , \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry 

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it result  $\in$  \it BYTE  $\land$  \it negative  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it result \rm = \it ior\rm (\hspace*{0.10in}\it rgs8\rm (\it a0\rm )\rm , \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm ) \rm )  $\land$ \hspace*{0.10in}

\hspace*{0.60in}\it negative \rm = \it is\_negative\rm (\it result\rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero\rm (\it result\rm )\hspace*{0.10in} $\land$  

\hspace*{0.60in}\it half\_carry \rm = \rm 0  $\land$ \hspace*{0.45in}

\hspace*{0.60in}\it pv \rm =\hspace*{0.15in}\it parity\_even\rm (\it result\rm )\hspace*{0.30in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.60in}\it carry \rm = \rm 0\hspace*{0.20in}

\hspace*{0.40in}\bf THEN\hspace*{2.15in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it result\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it pv\rm ,\it add\_sub\rm , \it carry\rm )\hspace*{0.15in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf XOR\_A\_r\rm (\it rr\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8\hspace*{0.10in}

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it result\hspace*{0.10in}\rm , \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry 

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it result  $\in$  \it BYTE  $\land$  \it negative  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$ \hspace*{0.10in}

\hspace*{0.60in}\it result \rm = \it xor\rm (\it rgs8\rm (\it a0\rm )\rm ,\it rgs8\rm (\it rr\rm ) \rm )  $\land$ 

\hspace*{0.60in}\it negative \rm = \it is\_negative\rm (\it result\rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero\rm (\it result\rm )\hspace*{0.10in} $\land$  

\hspace*{0.60in}\it half\_carry \rm = \rm 0  $\land$ \hspace*{0.45in}

\hspace*{0.60in}\it pv \rm =\hspace*{0.15in}\it parity\_even\rm (\it result\rm )\hspace*{0.30in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.60in}\it carry \rm = \rm 0\hspace*{0.35in}

\hspace*{0.60in}

\hspace*{0.40in}\bf THEN\hspace*{2.45in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it result\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it pv\rm ,\it add\_sub\rm , \it carry\rm )\hspace*{0.15in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf XOR\_A\_n\rm (\it n1\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it n1  $\in$  \it SCHAR 

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it result\hspace*{0.10in}\rm , \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry 

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it result  $\in$  \it BYTE  $\land$  \it negative  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT 

\hspace*{0.60in} $\land$  \it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$ \hspace*{0.10in}

\hspace*{0.60in}\it result \rm = \it xor\rm ( \it rgs8\rm (\it a0\rm )\rm , \it schar\_byte\rm ( \it n1 \rm )\rm )  $\land$ 

\hspace*{0.60in}\it negative \rm = \it is\_negative\rm (\it result\rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero\rm (\it result\rm )\hspace*{0.10in} $\land$  

\hspace*{0.60in}\it half\_carry \rm = \rm 0  $\land$ \hspace*{0.45in}

\hspace*{0.60in}\it pv \rm =\hspace*{0.15in}\it parity\_even\rm (\it result\rm )\hspace*{0.30in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.60in}\it carry \rm = \rm 0\hspace*{0.20in}

\hspace*{0.40in}\bf THEN\hspace*{2.05in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it result\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it pv\rm ,\it add\_sub\rm , \it carry\rm )\hspace*{0.15in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf XOR\_A\_9HL0\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf ANY 

\hspace*{0.40in}\it result\hspace*{0.10in}\rm , \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry 

\hspace*{0.20in}\bf WHERE\hspace*{0.10in}\it result  $\in$  \it BYTE  $\land$  \it negative  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$ 

\hspace*{0.40in}\it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$ \hspace*{0.10in}

\hspace*{0.40in}\it result \rm = \it xor\rm (\hspace*{0.10in}\it rgs8\rm (\it a0\rm )\rm ,\hspace*{0.10in}\it bv\_9HL0 \rm )  $\land$ 

\hspace*{0.40in}\it negative \rm = \it is\_negative\rm (\it result\rm )  $\land$ 

\hspace*{0.40in}\it zero \rm = \it is\_zero\rm (\it result\rm )\hspace*{0.10in} $\land$  

\hspace*{0.40in}\it half\_carry \rm = \rm 0  $\land$ \hspace*{0.45in}

\hspace*{0.40in}\it pv \rm =\hspace*{0.15in}\it parity\_even\rm (\it result\rm )\hspace*{0.30in} $\land$ 

\hspace*{0.40in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.40in}\it carry \rm = \rm 0\hspace*{0.20in}

\hspace*{0.20in}\bf THEN\hspace*{2.15in}

\hspace*{0.40in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it result\rm , 

\hspace*{0.60in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it pv\rm ,\it add\_sub\rm , \it carry\rm )\hspace*{0.15in}\rm \}  $\para$  

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf XOR\_A\_9IX\_d0\rm (\it desloc\rm )\rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN\hspace*{0.15in}

\hspace*{0.40in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it result\hspace*{0.10in}\rm , \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry 

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it result  $\in$  \it BYTE  $\land$  \it negative  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$ \hspace*{0.10in}

\hspace*{0.60in}\it result \rm = \it xor\rm (\hspace*{0.10in}\it rgs8\rm (\it a0\rm )\rm , \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm ) \rm )  $\land$ \hspace*{0.10in}

\hspace*{0.60in}\it negative \rm = \it is\_negative\rm (\it result\rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero\rm (\it result\rm )\hspace*{0.10in} $\land$  

\hspace*{0.60in}\it half\_carry \rm = \rm 0  $\land$ \hspace*{0.45in}

\hspace*{0.60in}\it pv \rm =\hspace*{0.15in}\it parity\_even\rm (\it result\rm )\hspace*{0.30in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.60in}\it carry \rm = \rm 0\hspace*{0.20in}

\hspace*{0.40in}\bf THEN\hspace*{2.15in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it result\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it pv\rm ,\it add\_sub\rm , \it carry\rm )\hspace*{0.15in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf XOR\_A\_9IY\_d0\rm (\it desloc\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN\hspace*{0.15in}

\hspace*{0.40in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it result\hspace*{0.10in}\rm , \it negative \rm , \it zero \rm , \it half\_carry \rm , \it pv \rm , \it add\_sub \rm , \it carry 

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it result  $\in$  \it BYTE  $\land$  \it negative  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it pv  $\in$  \it BIT  $\land$  \it add\_sub  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$ \hspace*{0.10in}

\hspace*{0.60in}\it result \rm = \it xor\rm (\hspace*{0.10in}\it rgs8\rm (\it a0\rm )\rm , \it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm ) \rm )  $\land$ \hspace*{0.10in}

\hspace*{0.60in}\it negative \rm = \it is\_negative\rm (\it result\rm )  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero\rm (\it result\rm )\hspace*{0.10in} $\land$  

\hspace*{0.60in}\it half\_carry \rm = \rm 0  $\land$ \hspace*{0.45in}

\hspace*{0.60in}\it pv \rm =\hspace*{0.15in}\it parity\_even\rm (\it result\rm )\hspace*{0.30in} $\land$ 

\hspace*{0.60in}\it add\_sub \rm =\hspace*{0.10in}\rm 0  $\land$ 

\hspace*{0.60in}\it carry \rm = \rm 0\hspace*{0.20in}

\hspace*{0.40in}\bf THEN\hspace*{2.15in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it result\rm , 

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it pv\rm ,\it add\_sub\rm , \it carry\rm )\hspace*{0.15in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf CP\_A\_r\rm (\it rr\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8\hspace*{0.10in}

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it rr\rm )\rm )\rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it carry\rm )\hspace*{0.10in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf CP\_A\_n\rm (\it n1\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it n1  $\in$  \it SCHAR\hspace*{0.10in}

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.60in}

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm , \it schar\_uchar\rm ( \it n1\rm ) \rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{\hspace*{0.10in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it carry\rm )\hspace*{0.10in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf CP\_A\_9HL0\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf ANY 

\hspace*{0.40in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.20in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.40in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it bv\_9HL0\rm )\rm )

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{\hspace*{0.10in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it carry\rm )\hspace*{0.10in}\rm \}  $\para$  

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf CP\_A\_9IX\_d0\rm (\it desloc\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc \rm )\rm )\rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{\hspace*{0.10in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it carry\rm )\hspace*{0.10in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf CP\_A\_9IY\_d0\rm (\it desloc\rm )\rm =\hspace*{0.10in}

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc \rm )\rm )\rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{\hspace*{0.10in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it carry\rm )\hspace*{0.10in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf INC\_r\rm (\it rr\rm ) \rm =

\hspace*{0.20in}\bf PRE 

\hspace*{0.40in}\it rr  $\in$  \it id\_reg\_8  $\land$  \it rr  $\not =$  \it f0

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.60in}

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it add8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm ( \it rgs8\rm (\it rr\rm )\rm )\rm , \rm 1\rm )

\hspace*{0.40in}\bf THEN 

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{\rm (\it rr  $\mapsto$  \it uchar\_byte\rm (\it sum\rm ) \rm )\rm ,

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 0\rm , \it carry\rm ) \rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf INC\_9HL0 \rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it bv\_HL\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ \hspace*{0.50in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it add8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it bv\_9HL0\rm )\rm ,\rm 1\rm )

\hspace*{0.40in}\bf THEN 

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 0\rm , \it carry\rm ) \rm \}  $\para$ 

\hspace*{0.60in}\bf updateAddressMem\rm ( \it bv\_HL \rm , \it uchar\_byte\rm (\it sum\rm ) \rm ) $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf INC\_9IX\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR\hspace*{0.10in} $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ \hspace*{0.60in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it add8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm )\rm )\rm ,\rm 1\rm )

\hspace*{0.40in}\bf THEN 

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 0\rm , \it carry\rm ) \rm \}  $\para$ 

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm , \it uchar\_byte\rm (\it sum\rm )\rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf INC\_9IY\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.10in}\bf THEN 

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.60in}

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ \hspace*{0.45in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it add8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm )\rm )\rm ,\rm 1\rm )

\hspace*{0.40in}\bf THEN 

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 0\rm , \it carry\rm ) \rm \}  $\para$ 

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm , \it uchar\_byte\rm (\it sum\rm )\rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf DEC\_r\rm (\it rr\rm ) \rm =

\hspace*{0.20in}\bf PRE 

\hspace*{0.40in}\it rr  $\in$  \it id\_reg\_8  $\land$  \it rr  $\not =$  \it f0

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ \hspace*{0.45in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm ( \it rgs8\rm (\it rr\rm )\rm )\rm , \rm 1\rm )

\hspace*{0.40in}\bf THEN 

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{\rm (\it rr  $\mapsto$  \it uchar\_byte\rm (\it sum\rm ) \rm )\rm ,

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it z\_c\rm ) \rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf DEC\_9HL0 \rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it bv\_HL\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.10in}\bf THEN 

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ \hspace*{0.30in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it bv\_9HL0\rm )\rm ,\rm 1\rm )

\hspace*{0.40in}\bf THEN 

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it z\_c\rm ) \rm \}  $\para$ 

\hspace*{0.60in}\bf updateAddressMem\rm ( \it bv\_HL \rm , \it uchar\_byte\rm (\it sum\rm ) \rm ) $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf DEC\_9IX\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.10in}\bf THEN 

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.60in}

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm )\rm )\rm ,\rm 1\rm )

\hspace*{0.60in}

\hspace*{0.40in}\bf THEN 

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it z\_c\rm ) \rm \}  $\para$ 

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it ix\rm ,\it desloc\rm )\rm , \it uchar\_byte\rm (\it sum\rm )\rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf DEC\_9IY\_d0\rm (\it desloc\rm ) \rm =

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.10in}\bf THEN 

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm )\rm )\rm ,\rm 1\rm )

\hspace*{0.40in}\bf THEN 

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it z\_c\rm ) \rm \}  $\para$ 

\hspace*{0.60in}\bf updateAddressMem\rm (\it bv\_ireg\_plus\_d\rm (\it iy\rm ,\it desloc\rm )\rm , \it uchar\_byte\rm (\it sum\rm )\rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf ADD\_HL\_ss\rm (\it ss\rm )\rm =

\hspace*{0.20in}\bf PRE \it ss  $\in$  \it id\_reg\_16  $\land$   $\neg$ \rm (\it ss \rm = \it AF\rm ) \bf THEN\hspace*{0.30in}

\hspace*{0.40in}\bf ANY \it result\rm , \it bv\_value\rm , \it bvh\rm , \it bvl\rm ,

\hspace*{0.60in}\it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE 

\hspace*{0.60in}\it result  $\in$  \it USHORT  $\land$  \it bv\_value  $\in$  \it BV16\hspace*{0.10in} $\land$ \hspace*{0.10in}\it bvh  $\in$  \it BYTE  $\land$ \hspace*{0.15in}\it bvl  $\in$  \it BYTE  $\land$ 

\hspace*{0.60in}\it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it get\_bv\_reg16\rm (\it sp\rm ,\it rgs8\rm ,\it ss\rm ) \rm = \it bv\_value  $\land$ 

\hspace*{0.60in}\it result \rm = \it add16USHORT\rm (\rm 0\rm , \it bv16\_ushort\rm ( \it bv\_HL\rm ) \rm , \it bv16\_ushort\rm ( \it bv\_value \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it bvh\rm ,\it bvl \rm = \it bv16\_byte\rm (\it ushort\_bv16\rm (\it result\rm )\rm ) $\land$ 

\hspace*{0.60in}\it negative \rm = \it z\_s  $\land$ 

\hspace*{0.60in}\it zero \rm = \it z\_z  $\land$ 

\hspace*{0.60in}\it half\_carry \rm = \it add\_halfcarryUSHORT\rm (\rm 0\rm , \it bv16\_ushort\rm ( \it bv\_HL\rm ) \rm , \it bv16\_ushort\rm ( \it bv\_value \rm )\hspace*{0.10in}\rm )  $\land$ 

\hspace*{0.60in}\it carry \rm =\hspace*{0.10in}\it add\_carryUSHORT\rm (\rm 0\rm , \it bv16\_ushort\rm ( \it bv\_HL\rm ) \rm , \it bv16\_ushort\rm ( \it bv\_value \rm )\hspace*{0.10in}\rm )

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it h0 $\mapsto$  \it bvh\rm ,\hspace*{0.10in}\it l0 $\mapsto$  \it bvl \rm ,

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it z\_p \rm ,\rm 0\rm , \it carry\rm ) \rm \}  $\para$ 

\hspace*{0.60in}

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf ADC\_HL\_ss\rm (\it ss\rm )\rm =

\hspace*{0.20in}\bf PRE \it ss  $\in$  \it id\_reg\_16  $\land$   $\neg$ \rm (\it ss \rm = \it AF\rm ) \bf THEN

\hspace*{0.40in}\bf ANY \it result\rm , \it bv\_value\rm , \it bvh\rm , \it bvl\rm ,

\hspace*{0.60in}\it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.60in}

\hspace*{0.40in}\bf WHERE 

\hspace*{0.60in}\it result  $\in$  \it USHORT  $\land$  \it bv\_value  $\in$  \it BV16\hspace*{0.10in} $\land$ \hspace*{0.10in}\it bvh  $\in$  \it BYTE  $\land$ \hspace*{0.15in}\it bvl  $\in$  \it BYTE  $\land$ 

\hspace*{0.60in}\it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it get\_bv\_reg16\rm (\it sp\rm ,\it rgs8\rm ,\it ss\rm ) \rm = \it bv\_value  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it result \rm = \it add16USHORT\rm (\it z\_c \rm , \it bv16\_ushort\rm ( \it bv\_HL\rm ) \rm , \it bv16\_ushort\rm ( \it bv\_value \rm )\rm )  $\land$ 

\hspace*{0.60in}\it negative \rm = \rm 1  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero16USHORT\rm (\it result\rm )  $\land$ 

\hspace*{0.60in}\it half\_carry \rm = \it add\_halfcarryUSHORT\rm (\it z\_c \rm , \it bv16\_ushort\rm ( \it bv\_HL\rm ) \rm , \it bv16\_ushort\rm ( \it bv\_value \rm )\hspace*{0.10in}\rm )  $\land$ 

\hspace*{0.60in}\it carry \rm =\hspace*{0.10in}\it add\_carryUSHORT\rm (\it z\_c \rm , \it bv16\_ushort\rm ( \it bv\_HL\rm ) \rm , \it bv16\_ushort\rm ( \it bv\_value \rm ) \rm )

\hspace*{0.60in}

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it h0 $\mapsto$  \it bvh\rm ,\hspace*{0.10in}\it l0 $\mapsto$  \it bvl \rm ,

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm , \it carry \rm ,\rm 0\rm , \it carry\rm ) \rm \}  $\para$ 

\hspace*{0.60in}

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SBC\_HL\_ss\rm (\it ss\rm )\rm =

\hspace*{0.20in}\bf PRE \it ss  $\in$  \it id\_reg\_16  $\land$   $\neg$ \rm (\it ss \rm = \it AF\rm ) \bf THEN

\hspace*{0.40in}

\hspace*{0.40in}\bf ANY \it result\rm , \it bv\_value\rm , \it bvh\rm , \it bvl\rm ,

\hspace*{0.60in}\it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.60in}

\hspace*{0.40in}\bf WHERE 

\hspace*{0.60in}\it result  $\in$  \it USHORT  $\land$  \it bv\_value  $\in$  \it BV16\hspace*{0.10in} $\land$ \hspace*{0.10in}\it bvh  $\in$  \it BYTE  $\land$ \hspace*{0.15in}\it bvl  $\in$  \it BYTE  $\land$ 

\hspace*{0.60in}\it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it get\_bv\_reg16\rm (\it sp\rm ,\it rgs8\rm ,\it ss\rm ) \rm = \it bv\_value  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it result \rm = \it add16USHORT\rm (\it z\_c\rm , \it bv16\_ushort\rm ( \it bv\_HL\rm ) \rm , \it bv16\_ushort\rm ( \it bv\_value \rm )\rm )  $\land$ 

\hspace*{0.60in}\it negative \rm = \rm 1  $\land$ 

\hspace*{0.60in}\it zero \rm = \it is\_zero16USHORT\rm (\it result\rm )  $\land$ 

\hspace*{0.60in}\it half\_carry \rm = \it sub\_halfcarryUSHORT\rm (\it z\_c\rm , \it bv16\_ushort\rm ( \it bv\_HL\rm ) \rm , \it bv16\_ushort\rm ( \it bv\_value \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it carry \rm =\hspace*{0.10in}\it sub\_carryUSHORT\rm (\it z\_c\rm , \it bv16\_ushort\rm ( \it bv\_HL\rm ) \rm , \it bv16\_ushort\rm ( \it bv\_value \rm )\hspace*{0.10in}\rm )

\hspace*{0.60in}

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it h0 $\mapsto$  \it bvh\rm ,\hspace*{0.10in}\it l0 $\mapsto$  \it bvl \rm ,

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm , \it carry \rm ,\rm 0\rm , \it carry\rm ) \rm \}  $\para$ 

\hspace*{0.60in}

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf ADD\_IX\_ss\rm (\it ss\rm )\rm =

\hspace*{0.20in}\bf PRE \it ss  $\in$  \it id\_reg\_16  $\land$   $\neg$ \rm (\it ss \rm = \it AF\rm ) \bf THEN

\hspace*{0.40in}

\hspace*{0.40in}\bf ANY \it result\rm , \it bv\_value\rm , \it bvh\rm , \it bvl\rm ,

\hspace*{0.60in}\it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.60in}

\hspace*{0.40in}\bf WHERE 

\hspace*{0.60in}

\hspace*{0.60in}\it result  $\in$  \it USHORT  $\land$  \it bv\_value  $\in$  \it BV16\hspace*{0.10in} $\land$ \hspace*{0.10in}\it bvh  $\in$  \it BYTE  $\land$ \hspace*{0.15in}\it bvl  $\in$  \it BYTE  $\land$ 

\hspace*{0.60in}\it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it get\_bv\_reg16\rm (\it sp\rm ,\it rgs8\rm ,\it ss\rm ) \rm = \it bv\_value  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it result \rm = \it add16USHORT\rm (\rm 0\rm , \it bv16\_ushort\rm ( \it bv\_HL\rm ) \rm , \it bv16\_ushort\rm ( \it bv\_value \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it bvh\rm ,\it bvl \rm = \it bv16\_byte\rm (\it ushort\_bv16\rm (\it result\rm )\rm ) $\land$ 

\hspace*{0.60in}\it negative \rm = \it z\_s  $\land$ 

\hspace*{0.60in}\it zero \rm = \it z\_z  $\land$ 

\hspace*{0.60in}\it half\_carry \rm = \it add\_halfcarryUSHORT\rm (\rm 0\rm , \it bv16\_ushort\rm ( \it bv\_HL\rm ) \rm , \it bv16\_ushort\rm ( \it bv\_value \rm )\hspace*{0.10in}\rm )  $\land$ 

\hspace*{0.60in}\it carry \rm =\hspace*{0.10in}\it add\_carryUSHORT\rm (\rm 0\rm , \it bv16\_ushort\rm ( \it bv\_HL\rm ) \rm , \it bv16\_ushort\rm ( \it bv\_value \rm )\hspace*{0.10in}\rm )

\hspace*{0.60in}

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it z\_p \rm ,\rm 0\rm , \it carry\rm ) \rm \}  $\para$ 

\hspace*{0.60in}\it ix \rm :=\hspace*{0.10in}\it ushort\_bv16\rm (\it result\rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf ADD\_IY\_ss\rm (\it ss\rm )\rm =

\hspace*{0.20in}\bf PRE \it ss  $\in$  \it id\_reg\_16  $\land$   $\neg$ \rm (\it ss \rm = \it AF\rm ) \bf THEN

\hspace*{0.40in}

\hspace*{0.40in}\bf ANY \it result\rm , \it bv\_value\rm , \it bvh\rm , \it bvl\rm ,

\hspace*{0.60in}\it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE 

\hspace*{0.60in}\it result  $\in$  \it USHORT  $\land$  \it bv\_value  $\in$  \it BV16\hspace*{0.10in} $\land$ \hspace*{0.10in}\it bvh  $\in$  \it BYTE  $\land$ \hspace*{0.15in}\it bvl  $\in$  \it BYTE  $\land$ 

\hspace*{0.60in}\it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it get\_bv\_reg16\rm (\it sp\rm ,\it rgs8\rm ,\it ss\rm ) \rm = \it bv\_value  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it result \rm = \it add16USHORT\rm (\rm 0\rm , \it bv16\_ushort\rm ( \it bv\_HL\rm ) \rm , \it bv16\_ushort\rm ( \it bv\_value \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it bvh\rm ,\it bvl \rm = \it bv16\_byte\rm (\it ushort\_bv16\rm (\it result\rm )\rm ) $\land$ 

\hspace*{0.60in}\it negative \rm = \it z\_s  $\land$ 

\hspace*{0.60in}\it zero \rm = \it z\_z  $\land$ 

\hspace*{0.60in}\it half\_carry \rm = \it add\_halfcarryUSHORT\rm (\rm 0\rm , \it bv16\_ushort\rm ( \it bv\_HL\rm ) \rm , \it bv16\_ushort\rm ( \it bv\_value \rm )\hspace*{0.10in}\rm )  $\land$ 

\hspace*{0.60in}\it carry \rm =\hspace*{0.10in}\it add\_carryUSHORT\rm (\rm 0\rm , \it bv16\_ushort\rm ( \it bv\_HL\rm ) \rm , \it bv16\_ushort\rm ( \it bv\_value \rm )\hspace*{0.10in}\rm )

\hspace*{0.60in}

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it z\_p \rm ,\rm 0\rm , \it carry\rm ) \rm \}  $\para$ 

\hspace*{0.60in}\it iy \rm :=\hspace*{0.10in}\it ushort\_bv16\rm (\it result\rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf INC\_ss\rm (\it ss\rm )\rm =

\hspace*{0.20in}\bf PRE \it ss  $\in$  \it id\_reg\_16  $\land$   $\neg$ \rm (\it ss \rm = \it AF\rm ) \bf THEN

\hspace*{0.40in}

\hspace*{0.40in}\bf IF \it ss \rm = \it SP \bf THEN \it sp\rm := \it inc\_BV16\rm (\it sp\rm )

\hspace*{0.40in}\bf ELSE 

\hspace*{0.60in}\bf ANY

\hspace*{0.80in}\it rh\rm ,\it rl\rm , \it vh\rm ,\it vl

\hspace*{0.60in}\bf WHERE \it rh  $\in$  \it id\_reg\_8  $\land$  \it rl  $\in$  \it id\_reg\_8  $\land$  \it vh  $\in$  \it BYTE  $\land$ \hspace*{0.10in}\it vl  $\in$  \it BYTE  $\land$ 

\hspace*{0.80in}\it REG16\_TO\_REG8\rm (\it ss\rm )\rm = \it rh\rm , \it rl  $\land$   $\neg$ \rm ( \it rh \rm = \it rl\rm )  $\land$ 

\hspace*{0.80in}\it bv16\_byte\rm ( \it inc\_BV16\rm ( \it byte\_bv16\rm ( \it rgs8\rm (\it rh\rm )\rm ,\it rgs8\rm (\it rl\rm ) \rm )\rm )\rm ) \rm = \it vh\rm ,\it vl

\hspace*{0.60in}\bf THEN

\hspace*{0.80in}\it rgs8 \rm := \it rgs8 $\lover$  \rm \{ \it rh $\mapsto$  \it vh \rm , \it rl $\mapsto$  \it vl \rm \}

\hspace*{0.60in}\bf END

\hspace*{0.40in}\bf END

\hspace*{0.40in} $\para$ \hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf INC\_IX\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it ix \rm := \it inc\_BV16\rm (\it ix\rm ) $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf INC\_IY\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it iy \rm := \it inc\_BV16\rm (\it iy\rm ) $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf DEC\_ss\rm (\it ss\rm )\rm =

\hspace*{0.20in}\bf PRE \it ss  $\in$  \it id\_reg\_16  $\land$   $\neg$ \rm (\it ss \rm = \it AF\rm ) \bf THEN

\hspace*{0.40in}

\hspace*{0.40in}\bf IF \it ss \rm = \it SP \bf THEN \it sp\rm := \it inc\_BV16\rm (\it sp\rm )

\hspace*{0.40in}\bf ELSE 

\hspace*{0.60in}\bf ANY

\hspace*{0.80in}\it rh\rm ,\it rl\rm , \it vh\rm ,\it vl

\hspace*{0.60in}\bf WHERE \it rh  $\in$  \it id\_reg\_8  $\land$  \it rl  $\in$  \it id\_reg\_8  $\land$  \it vh  $\in$  \it BYTE  $\land$ \hspace*{0.10in}\it vl  $\in$  \it BYTE  $\land$ 

\hspace*{0.80in}\it REG16\_TO\_REG8\rm (\it ss\rm )\rm = \it rh\rm , \it rl  $\land$   $\neg$ \rm ( \it rh \rm = \it rl\rm )  $\land$ 

\hspace*{0.80in}\it bv16\_byte\rm ( \it dec\_BV16\rm ( \it byte\_bv16\rm ( \it rgs8\rm (\it rh\rm )\rm ,\it rgs8\rm (\it rl\rm ) \rm )\rm )\rm ) \rm = \it vh\rm ,\it vl

\hspace*{0.60in}\bf THEN

\hspace*{0.80in}\it rgs8 \rm := \it rgs8 $\lover$  \rm \{ \it rh $\mapsto$  \it vh \rm , \it rl $\mapsto$  \it vl \rm \}\hspace*{0.20in} $\para$ \hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.60in}\bf END

\hspace*{0.40in}\bf END

\hspace*{0.40in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf DEC\_IX\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it ix \rm := \it dec\_BV16\rm (\it ix\rm )\hspace*{0.20in} $\para$ \hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf DEC\_IY\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it ix \rm := \it dec\_BV16\rm (\it ix\rm )\hspace*{0.20in} $\para$ \hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END 

\hspace*{0.20in}

\hspace*{0.10in}

\vspace*{8mm}
\rm ;\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in} 

\hspace*{0.20in}

\hspace*{0.20in}\bf ADD\_A\_r\rm (\it rr\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8\hspace*{0.10in}

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it add8UCHAR\rm (\rm 0\rm , \it byte\_uchar\rm ( \it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm ( \it rgs8\rm (\it rr\rm )\rm ) \rm )  $\land$ 

\hspace*{0.65in}\bf dom\rm ( \it add8UCHAR \rm ) \rm = \it BIT  $\times$  \it UCHAR  $\times$  \it UCHAR 

\hspace*{0.40in}\bf THEN 

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm ) \rm , \rm (\it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 0\rm , \it carry\rm )\rm )\hspace*{0.15in}\rm \}\hspace*{0.90in} $\para$ \hspace*{0.10in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf ADD\_A\_n\rm (\it n1\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it n1  $\in$  \it SCHAR\hspace*{0.10in}

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.60in}

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it add8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm , \it schar\_uchar\rm ( \it n1\rm )\rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 0\rm , \it carry\rm )\hspace*{0.10in}\rm \}\hspace*{0.10in} $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf ADD\_A\_9HL0\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf ANY 

\hspace*{0.40in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}

\hspace*{0.20in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.40in}

\hspace*{0.40in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it add8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it bv\_9HL0\rm )\rm )

\hspace*{0.20in}\bf THEN\hspace*{3.05in}

\hspace*{0.40in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 0\rm , \it carry\rm )\hspace*{0.10in}\rm \}\hspace*{0.10in} $\para$  

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf ADD\_A\_9IX\_d0\rm (\it desloc\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.60in}

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it add8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm , \it byte\_uchar\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm )\rm )\rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 0\rm , \it carry\rm )\hspace*{0.10in}\rm \}\hspace*{0.10in} $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf ADD\_A\_9IY\_d0\rm (\it desloc\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.60in}

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it add8UCHAR\rm (\rm 0\rm , \it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm , \it byte\_uchar\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc\rm )\rm )\rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 0\rm , \it carry\rm )\hspace*{0.10in}\rm \}\hspace*{0.10in} $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf ADC\_A\_r\rm (\it rr\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8\hspace*{0.10in}

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.60in}

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it add8UCHAR\rm (\it z\_c\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it rr\rm )\rm ) \rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 0\rm , \it carry\rm )\hspace*{0.10in}\rm \}\hspace*{0.10in} $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf ADC\_A\_n\rm (\it n1\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it n1  $\in$  \it SCHAR\hspace*{0.10in}

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.60in}

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it add8UCHAR\rm (\it z\_c\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it schar\_uchar\rm ( \it n1\rm ) \rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 0\rm , \it carry\rm )\hspace*{0.10in}\rm \}\hspace*{0.10in} $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf ADC\_A\_9HL0\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf ANY 

\hspace*{0.40in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.20in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.40in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it add8UCHAR\rm (\it z\_c\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it bv\_9HL0\rm ) \rm )

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 0\rm , \it carry\rm ) \rm \}\hspace*{0.10in} $\para$  

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf ADC\_A\_9IX\_d0\rm (\it desloc\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it add8UCHAR\rm (\it z\_c\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc \rm )\rm )\rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 0\rm , \it carry\rm )\hspace*{0.10in}\rm \}\hspace*{0.10in} $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf ADC\_A\_9IY\_d0\rm (\it desloc\rm )\rm =\hspace*{0.20in}

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it add8UCHAR\rm (\it z\_c\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc \rm )\rm )\rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 0\rm , \it carry\rm )\hspace*{0.10in}\rm \}\hspace*{0.10in} $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SUB\_A\_r\rm (\it rr\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8\hspace*{0.10in}

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it rr\rm )\rm )\rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it carry\rm )\hspace*{0.10in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf SUB\_A\_n\rm (\it n1\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it n1  $\in$  \it SCHAR\hspace*{0.10in}

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.60in}

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm , \it schar\_uchar\rm ( \it n1\rm )\rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it carry\rm )\hspace*{0.10in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf SUB\_A\_9HL0\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf ANY 

\hspace*{0.40in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.20in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.40in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it bv\_9HL0\rm )\rm )

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it carry\rm )\hspace*{0.10in}\rm \}  $\para$  

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf SUB\_A\_9IX\_d0\rm (\it desloc\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc \rm )\rm )\rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it carry\rm )\hspace*{0.10in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SUB\_A\_9IY\_d0\rm (\it desloc\rm )\rm =\hspace*{0.10in}

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\rm 0\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it iy\rm ,\it desloc \rm )\rm )\rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it carry\rm )\hspace*{0.10in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf SBC\_A\_r\rm (\it rr\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8\hspace*{0.10in}

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.60in}

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\it z\_c\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it rr\rm )\rm )\hspace*{0.10in}\rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it carry\rm )\hspace*{0.10in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SBC\_A\_n\rm (\it n1\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it n1  $\in$  \it SCHAR\hspace*{0.10in}

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.60in}

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\it z\_c\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm , \it schar\_uchar\rm ( \it n1 \rm ) \rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it carry\rm )\hspace*{0.10in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SBC\_A\_9HL0\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf ANY 

\hspace*{0.40in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.20in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.40in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\it z\_c\rm , \it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it bv\_9HL0 \rm )\rm )

\hspace*{0.20in}\bf THEN\hspace*{0.10in}

\hspace*{0.40in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it carry\rm )\hspace*{0.10in}\rm \}  $\para$  

\hspace*{0.40in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SBC\_A\_9IX\_d0\rm (\it desloc\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\it z\_c\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm ) \rm )\rm )\rm )

\hspace*{0.40in}\bf THEN\hspace*{0.10in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it carry\rm )\hspace*{0.10in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf SBC\_A\_9IY\_d0\rm (\it desloc\rm )\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf PRE \it desloc  $\in$  \it SCHAR \bf THEN

\hspace*{0.40in}\bf ANY 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero

\hspace*{0.40in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.60in}\it sum\rm , \it negative\rm , \it carry\rm , \it half\_carry\rm , \it zero \rm = \it substract8UCHAR\rm (\it z\_c\rm ,\it byte\_uchar\rm (\it rgs8\rm (\it a0\rm )\rm )\rm ,\it byte\_uchar\rm (\it bv\_9ireg\_plus\_d0\rm (\it mem\rm ,\it ix\rm ,\it desloc\rm ) \rm )\rm )

\hspace*{0.40in}\bf THEN\hspace*{2.80in}

\hspace*{0.60in}\it rgs8\rm := \it rgs8  $\lover$  \rm \{ \it a0 $\mapsto$  \it uchar\_byte\rm (\it sum\rm )\rm , \it update\_flag\_reg\rm ( \it negative\rm ,\it zero\rm , \it half\_carry\rm ,\it carry\rm ,\rm 1\rm , \it carry\rm )\hspace*{0.10in}\rm \}  $\para$  

\hspace*{0.60in}\it pc \rm := \it instruction\_next\rm (\it pc\rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{1.60in}

\hspace*{0.40in}\bf END\hspace*{0.10in}

\hspace*{0.20in}\bf END

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.15in}

\vspace*{8mm}
\rm ;

\hspace*{0.20in} 

\hspace*{0.20in}

\hspace*{0.20in}\bf CPI \rm =

\hspace*{0.20in}\bf ANY

\hspace*{0.40in}\it sum \rm , \it negative \rm , \it carry \rm , \it half\_carry \rm , \it zero \rm ,

\hspace*{0.40in}\it hvn \rm , \it lvn \rm , \it bvn \rm , \it cvn

\hspace*{0.20in}\bf WHERE

\hspace*{0.40in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT\hspace*{0.25in} $\land$ 

\hspace*{0.40in}\it hvn  $\in$  \it BYTE  $\land$  \it lvn  $\in$  \it BYTE  $\land$  \it bvn  $\in$  \it BYTE  $\land$  \it cvn  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in}\it substract8UCHAR \rm ( \rm 0 \rm , \it byte\_uchar \rm ( \it rgs8 \rm ( \it a0 \rm ) \rm ) \rm , \it byte\_uchar \rm ( \it bv\_9HL0 \rm ) \rm ) \rm = \it sum \rm , \it negative \rm , \it carry \rm , \it half\_carry \rm , \it zero  $\land$ 

\hspace*{0.40in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it inc\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ 

\hspace*{0.40in}\it bvn \rm , \it cvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_BC \rm ) \rm )

\hspace*{0.40in}

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf IF \it zero \rm = \rm 1 \bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it h0  $\mapsto$  \it hvn \rm , \it l0  $\mapsto$  \it lvn \rm , \it b0  $\mapsto$  \it bvn \rm , \it c0  $\mapsto$  \it cvn

\hspace*{0.80in}\rm , \it update\_flag\_reg\rm ( \it negative \rm , \it zero \rm , \it half\_carry \rm , \it bit\_not \rm ( \it is\_zero16USHORT \rm ( \it bv16\_ushort \rm ( \it dec\_BV16\rm (\it bv\_BC\rm )\hspace*{0.10in}\rm )\hspace*{0.10in}\rm ) \rm ) \rm , \rm 1 \rm , \it z\_c \rm ) \rm \}

\hspace*{0.60in}

\hspace*{0.40in}\bf END

\hspace*{0.40in} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf CPIR \rm =

\hspace*{0.20in}\bf ANY

\hspace*{0.40in}\it sum \rm , \it negative \rm , \it carry \rm , \it half\_carry \rm , \it zero \rm ,

\hspace*{0.40in}\it hvn \rm , \it lvn \rm , \it bvn \rm , \it cvn

\hspace*{0.20in}\bf WHERE

\hspace*{0.40in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT\hspace*{0.25in} $\land$ 

\hspace*{0.40in}\it hvn  $\in$  \it BYTE  $\land$  \it lvn  $\in$  \it BYTE  $\land$  \it bvn  $\in$  \it BYTE  $\land$  \it cvn  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in}\it substract8UCHAR \rm ( \rm 0 \rm , \it byte\_uchar \rm ( \it rgs8 \rm ( \it a0 \rm ) \rm ) \rm , \it byte\_uchar \rm ( \it bv\_9HL0 \rm ) \rm ) \rm = \it sum \rm , \it negative \rm , \it carry \rm , \it half\_carry \rm , \it zero  $\land$ 

\hspace*{0.40in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it inc\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ 

\hspace*{0.40in}\it bvn \rm , \it cvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_BC \rm ) \rm )

\hspace*{0.40in}

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf IF \it zero \rm = \rm 1 \bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it h0  $\mapsto$  \it hvn \rm , \it l0  $\mapsto$  \it lvn \rm , \it b0  $\mapsto$  \it bvn \rm , \it c0  $\mapsto$  \it cvn

\hspace*{0.80in}\rm ,\hspace*{0.15in}\it update\_flag\_reg\rm ( \it negative \rm , \it zero \rm , \it half\_carry

\hspace*{1.00in}\rm , \it bit\_not \rm ( \it is\_zero16USHORT \rm ( \it bv16\_ushort \rm ( \it dec\_BV16\rm (\it bv\_BC\rm )\hspace*{0.10in}\rm )\hspace*{0.10in}\rm ) \rm ) \rm , \rm 1 \rm , \it z\_c \rm ) \rm \}

\hspace*{0.60in}

\hspace*{0.40in}\bf END

\hspace*{0.40in} $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )  $\para$ 

\hspace*{0.40in}\bf IF\hspace*{0.10in}\it is\_zero16USHORT \rm ( \it bv16\_ushort \rm ( \it dec\_BV16\rm (\it bv\_BC\rm )\hspace*{0.10in}\rm )\hspace*{0.10in}\rm ) \rm = \rm 0  $\lor$  \rm ( \it zero \rm = \rm 1 \rm ) \bf THEN \it pc \rm := \it instruction\_next \rm ( \it pc \rm ) \bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf CPD \rm =

\hspace*{0.20in}\bf ANY

\hspace*{0.40in}\it sum \rm , \it negative \rm , \it carry \rm , \it half\_carry \rm , \it zero \rm ,

\hspace*{0.40in}\it hvn \rm , \it lvn \rm , \it bvn \rm , \it cvn

\hspace*{0.20in}\bf WHERE

\hspace*{0.40in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT\hspace*{0.25in} $\land$ 

\hspace*{0.40in}\it hvn  $\in$  \it BYTE  $\land$  \it lvn  $\in$  \it BYTE  $\land$  \it bvn  $\in$  \it BYTE  $\land$  \it cvn  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in}\it substract8UCHAR \rm ( \rm 0 \rm , \it byte\_uchar \rm ( \it rgs8 \rm ( \it a0 \rm ) \rm ) \rm , \it byte\_uchar \rm ( \it bv\_9HL0 \rm ) \rm ) \rm = \it sum \rm , \it negative \rm , \it carry \rm , \it half\_carry \rm , \it zero  $\land$ 

\hspace*{0.40in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ 

\hspace*{0.40in}\it bvn \rm , \it cvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_BC \rm ) \rm )

\hspace*{0.40in}

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf IF \it zero \rm = \rm 1 \bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it h0  $\mapsto$  \it hvn \rm , \it l0  $\mapsto$  \it lvn \rm , \it b0  $\mapsto$  \it bvn \rm , \it c0  $\mapsto$  \it cvn

\hspace*{0.80in}\rm ,\hspace*{0.15in}\it update\_flag\_reg\rm ( \it negative \rm , \it zero \rm , \it half\_carry

\hspace*{1.00in}\rm , \it bit\_not \rm ( \it is\_zero16USHORT \rm ( \it bv16\_ushort \rm ( \it dec\_BV16\rm (\it bv\_BC\rm )\hspace*{0.10in}\rm )\hspace*{0.10in}\rm ) \rm ) \rm , \rm 1 \rm , \it z\_c \rm ) \rm \}

\hspace*{0.60in}

\hspace*{0.40in}\bf END

\hspace*{0.40in} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf CPDR \rm =

\hspace*{0.20in}\bf ANY

\hspace*{0.40in}\it sum \rm , \it negative \rm , \it carry \rm , \it half\_carry \rm , \it zero \rm ,

\hspace*{0.40in}\it hvn \rm , \it lvn \rm , \it bvn \rm , \it cvn

\hspace*{0.20in}\bf WHERE

\hspace*{0.40in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT\hspace*{0.25in} $\land$ 

\hspace*{0.40in}\it hvn  $\in$  \it BYTE  $\land$  \it lvn  $\in$  \it BYTE  $\land$  \it bvn  $\in$  \it BYTE  $\land$  \it cvn  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in}\it substract8UCHAR \rm ( \rm 0 \rm , \it byte\_uchar \rm ( \it rgs8 \rm ( \it a0 \rm ) \rm ) \rm , \it byte\_uchar \rm ( \it bv\_9HL0 \rm ) \rm ) \rm = \it sum \rm , \it negative \rm , \it carry \rm , \it half\_carry \rm , \it zero  $\land$ 

\hspace*{0.40in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ 

\hspace*{0.40in}\it bvn \rm , \it cvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_BC \rm ) \rm )

\hspace*{0.40in}

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf IF \it zero \rm = \rm 1 \bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it h0  $\mapsto$  \it hvn \rm , \it l0  $\mapsto$  \it lvn \rm , \it b0  $\mapsto$  \it bvn \rm , \it c0  $\mapsto$  \it cvn

\hspace*{0.80in}\rm ,\hspace*{0.10in}\it update\_flag\_reg\rm ( \it negative \rm , \it zero \rm , \it half\_carry

\hspace*{1.00in}\rm , \it bit\_not \rm ( \it is\_zero16USHORT \rm ( \it bv16\_ushort \rm ( \it dec\_BV16\rm (\it bv\_BC\rm )\hspace*{0.10in}\rm )\hspace*{0.10in}\rm ) \rm ) \rm , \rm 1 \rm , \it z\_c \rm ) \rm \}

\hspace*{0.40in}\bf END

\hspace*{0.40in} $\para$  \bf IF\hspace*{0.10in}\it is\_zero16USHORT \rm ( \it bv16\_ushort \rm ( \it dec\_BV16\rm (\it bv\_BC\rm )\hspace*{0.10in}\rm )\hspace*{0.10in}\rm ) \rm = \rm 0  $\lor$  \rm ( \it zero \rm = \rm 1 \rm ) \bf THEN \it pc \rm := \it instruction\_next \rm ( \it pc \rm )\hspace*{0.10in}\bf END $\para$ 

\hspace*{0.40in}\it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\vspace*{4mm}
\hspace*{0.20in} 

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in} 

\vspace*{4mm}
\hspace*{0.20in}\bf DAA \rm =

\hspace*{0.20in}\bf ANY

\hspace*{0.40in}\it result \rm , \it s0\rm , \it z0\rm ,\it h0\rm ,\it pv0\rm , \it n0\rm , \it c0

\hspace*{0.20in}\bf WHERE

\hspace*{0.40in}\it result  $\in$  \it BYTE  $\land$  \it s0  $\in$  \it BIT  $\land$  \it z0  $\in$  \it BIT  $\land$  \it h0  $\in$  \it BIT  $\land$  \it pv0  $\in$  \it BIT  $\land$  \it n0  $\in$  \it BIT  $\land$  \it c0  $\in$  \it BIT  $\land$ 

\hspace*{0.40in}\it daa\_function\rm (\it z\_n\rm , \it z\_c \rm , \it z\_h \rm , \it rgs8 \rm ( \it a0 \rm ) \rm ) \rm = \rm ( \it result \rm ,\hspace*{0.10in}\it c0\rm , \it h0\rm )  $\land$  

\hspace*{0.40in}\it s0 \rm = \it bitget\rm (\it result\rm ,\rm 7\rm )  $\land$ 

\hspace*{0.40in}\it z0 \rm = \it is\_zero\rm (\it result\rm )  $\land$ 

\hspace*{0.40in}\it pv0\rm = \it parity\_even\rm (\it result\rm )  $\land$ 

\hspace*{0.40in}\it n0 \rm = \it z\_n 

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\it rgs8 \rm :=\hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \it a0  $\mapsto$  \it result \rm ,\hspace*{0.10in}\it update\_flag\_reg\rm ( \it s0\rm , \it z0\rm ,\it h0\rm ,\it pv0\rm , \it n0\rm , \it c0\hspace*{0.10in}\rm ) \rm \}\hspace*{0.10in} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf CPL \rm =

\hspace*{0.20in}\bf ANY\hspace*{0.10in}\it result

\hspace*{0.20in}\bf WHERE \it result  $\in$  \it BYTE\hspace*{0.10in} $\land$  \it result \rm = \it complement \rm ( \it rgs8 \rm ( \it a0 \rm ) \rm )

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\it rgs8 \rm :=\hspace*{0.15in}\it rgs8  $\lover$  \rm \{\hspace*{0.10in}\rm ( \it a0  $\mapsto$  \it result \rm ) \rm ,

\hspace*{0.90in}\it update\_flag\_reg\rm ( \it z\_s \rm , \it z\_z \rm , \rm 1 \rm , \it z\_p \rm , \rm 1 \rm , \it z\_c \rm ) \rm \}  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}

\hspace*{0.20in}\bf END \rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf NEG \rm =

\hspace*{0.20in}\bf ANY

\hspace*{0.40in}\it sum \rm , \it negative \rm , \it carry \rm , \it half\_carry \rm , \it zero

\hspace*{0.20in}\bf WHERE\hspace*{0.10in}\it sum  $\in$  \it UCHAR  $\land$  \it negative  $\in$  \it BIT  $\land$  \it carry  $\in$  \it BIT  $\land$  \it half\_carry  $\in$  \it BIT  $\land$  \it zero  $\in$  \it BIT  $\land$ 

\hspace*{0.40in}\it sum \rm , \it negative \rm , \it carry \rm , \it half\_carry \rm , \it zero \rm = \it substract8UCHAR \rm ( \rm 0 \rm , \rm 0 \rm , \it byte\_uchar \rm ( \it rgs8 \rm ( \it a0 \rm ) \rm ) \rm )

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it a0  $\mapsto$  \it uchar\_byte \rm ( \it sum \rm ) \rm ,\hspace*{0.10in}\it update\_flag\_reg\rm ( \it negative \rm , \it zero \rm , \it half\_carry \rm , \it carry \rm , \rm 1 \rm , \it carry \rm ) \rm \}  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END \rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf CCF \rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{\hspace*{0.10in}\it update\_flag\_reg\rm ( \it z\_s \rm , \it z\_z \rm , \it z\_h \rm , \it z\_p \rm , \rm 0 \rm , \it bit\_not \rm ( \it z\_c \rm ) \rm ) \rm \}  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END \rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf SCF \rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{\hspace*{0.10in}\it update\_flag\_reg\rm ( \it z\_s \rm , \it z\_z \rm , \it z\_h \rm , \it z\_p \rm , \rm 0 \rm , \rm 1 \rm ) \rm \}  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END \rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf NOP \rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END \rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf HALT \rm =\hspace*{0.15in}

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\hspace*{0.10in}\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf DI\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it iff1\rm := \rm 0  $\para$  \it iff2 \rm :=\rm 0\hspace*{0.20in} $\para$ \hspace*{0.15in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf EI\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it iff1\rm := \rm 1  $\para$  \it iff2 \rm :=\rm 1\hspace*{0.20in} $\para$ \hspace*{0.15in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf IM0\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it im \rm := \rm (\rm 0  $\mapsto$  \rm 0\rm )\hspace*{0.15in} $\para$ \hspace*{0.15in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf IM1\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it im \rm := \rm (\rm 0  $\mapsto$  \rm 1\rm )\hspace*{0.10in} $\para$ \hspace*{0.15in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf IM2\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it im \rm := \rm (\rm 1  $\mapsto$  \rm 1\rm )\hspace*{0.15in} $\para$ \hspace*{0.15in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END

\vspace*{4mm}
\hspace*{0.20in} 

\hspace*{0.10in}

\vspace*{8mm}
\rm ;

\hspace*{0.20in} 

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_r\_r\_ \rm ( \it rr \rm , \it rr\_ \rm ) \rm =

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8  $\land$  \it rr\_  $\in$  \it id\_reg\_8\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf rgs8 \rm ( \it rr \rm ) \rm := \it rgs8 \rm ( \it rr\_ \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_r\_n\_ \rm ( \it rr \rm , \it n0 \rm ) \rm =

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8  $\land$  \it n0  $\in$  \it SCHAR\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf rgs8 \rm ( \it rr \rm ) \rm := \it schar\_byte \rm ( \it n0 \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_r\_9HL0 \rm ( \it rr \rm ) \rm =

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8 \bf THEN

\hspace*{0.40in}\bf ANY \it address \bf WHERE \it address  $\in$  \it BV16  $\land$ 

\hspace*{0.60in}\it address \rm =\hspace*{0.10in}\it byte\_bv16 \rm ( \it rgs8 \rm ( \it h0 \rm ) \rm , \it rgs8 \rm ( \it l0 \rm ) \rm )

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf rgs8 \rm ( \it rr \rm ) \rm := \it mem \rm ( \it address \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_r\_9IX\_d0 \rm ( \it rr \rm , \it desloc \rm ) \rm =

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8  $\land$  \it desloc  $\in$  \it SCHAR

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf rgs8 \rm ( \it rr \rm ) \rm := \it bv\_9ireg\_plus\_d0 \rm ( \it mem \rm , \it ix \rm , \it desloc \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_r\_9IY\_d0 \rm ( \it rr \rm , \it desloc \rm ) \rm =

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8  $\land$  \it desloc  $\in$  \it SCHAR

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf rgs8 \rm ( \it rr \rm ) \rm := \it bv\_9ireg\_plus\_d0 \rm ( \it mem \rm , \it iy \rm , \it desloc \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_9HL0\_r \rm ( \it rr \rm ) \rm =

\hspace*{0.20in}\bf PRE \it rr  $\in$  \it id\_reg\_8  $\land$  \it bv16\_ushort\rm ( \it bv\_HL\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf updateAddressMem \rm ( \it bv\_HL \rm , \it rgs8 \rm ( \it rr \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_9IX\_d0\_r \rm ( \it desloc \rm , \it rr \rm ) \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.10in}\it desloc  $\in$  \it SCHAR  $\land$  \it rr  $\in$  \it id\_reg\_8  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d \rm ( \it ix \rm , \it desloc \rm ) \rm )  $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf updateAddressMem \rm ( \it bv\_ireg\_plus\_d \rm ( \it ix \rm , \it desloc \rm ) \rm , \it rgs8 \rm ( \it rr \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_9IY\_d0\_r \rm ( \it desloc \rm , \it rr \rm ) \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.10in}\it desloc  $\in$  \it SCHAR  $\land$  \it rr  $\in$  \it id\_reg\_8  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d \rm ( \it iy \rm , \it desloc \rm ) \rm )  $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf updateAddressMem \rm ( \it bv\_ireg\_plus\_d \rm ( \it iy \rm , \it desloc \rm ) \rm , \it rgs8 \rm ( \it rr \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_9HL0\_n \rm ( \it n0 \rm ) \rm =

\hspace*{0.20in}\bf PRE \it n0  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm ( \it bv\_HL \rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.25in}\bf THEN

\hspace*{0.40in}\bf updateAddressMem \rm ( \it bv\_HL \rm , \it schar\_byte \rm ( \it n0 \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_9IX\_d0\_n \rm ( \it desloc \rm , \it n0 \rm ) \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.10in}\it desloc  $\in$  \it SCHAR  $\land$  \it n0  $\in$  \it SCHAR  $\land$ \hspace*{0.10in}\it bv16\_ushort\rm (\it bv\_ireg\_plus\_d \rm ( \it ix \rm , \it desloc \rm ) \rm ) $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf updateAddressMem \rm ( \it bv\_ireg\_plus\_d \rm ( \it ix \rm , \it desloc \rm ) \rm , \it schar\_byte \rm ( \it n0 \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_9IY\_d0\_n \rm ( \it desloc \rm , \it n0 \rm ) \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.10in}\it desloc  $\in$  \it SCHAR  $\land$  \it n0  $\in$  \it SCHAR  $\land$  \it bv16\_ushort\rm (\it bv\_ireg\_plus\_d \rm ( \it iy \rm , \it desloc \rm )\rm )  $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf updateAddressMem \rm ( \it bv\_ireg\_plus\_d \rm ( \it iy \rm , \it desloc \rm ) \rm , \it schar\_byte \rm ( \it n0 \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_A\_9BC0\hspace*{0.10in}\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\bf rgs8 \rm ( \it a0 \rm ) \rm :=\hspace*{0.10in}\it bv\_9BC0\hspace*{0.10in} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_A\_9DE0\hspace*{0.10in}\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\bf rgs8 \rm ( \it a0 \rm ) \rm := \it bv\_9DE0  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_A\_9nn0 \rm ( \it nn \rm ) \rm =

\hspace*{0.20in}\bf PRE \it nn  $\in$ \hspace*{0.10in}\it USHORT

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf rgs8 \rm ( \it a0 \rm ) \rm := \it mem \rm ( \it ushort\_bv16 \rm ( \it nn \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_9BC0\_A\hspace*{0.10in}\rm =

\hspace*{0.20in}\bf PRE\hspace*{0.55in}\it bv16\_ushort\rm (\it bv\_BC\rm )  $\in$  \it DATA\_R\_ADR

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf updateAddressMem \rm ( \it bv\_BC \rm , \it rgs8 \rm ( \it a0 \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_9DE0\_A\hspace*{0.10in}\rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it bv\_DE\rm )  $\in$  \it DATA\_R\_ADR

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf updateAddressMem \rm ( \rm ( \it bv\_DE \rm ) \rm , \it rgs8 \rm ( \it a0 \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_9nn0\_A \rm ( \it nn \rm ) \rm =

\hspace*{0.20in}\bf PRE \it nn  $\in$  \it USHORT\hspace*{0.15in} $\land$ \hspace*{0.10in}\it nn\hspace*{0.10in} $\in$  \it DATA\_R\_ADR

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf updateAddressMem \rm ( \it ushort\_bv16 \rm ( \it nn \rm ) \rm , \it rgs8 \rm ( \it a0 \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in} 

\hspace*{0.20in}\bf LD\_A\_I\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8\hspace*{0.10in} $\lover$  \rm \{ \it a0  $\mapsto$  \it i\_ \rm ,\hspace*{0.10in}\it update\_flag\_reg\rm ( \it is\_negative\rm (\it i\_ \rm )\rm , \it is\_zero\rm ( \it i\_\hspace*{0.10in}\rm )\rm , \rm 0 \rm , \it iff2 \rm , \rm 0\rm , \it z\_c \rm )\rm \}  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_A\_R\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8\hspace*{0.10in} $\lover$  \rm \{ \it a0  $\mapsto$ \it r\_ \rm ,\hspace*{0.15in}\it update\_flag\_reg\rm ( \it is\_negative\rm ( \it r\_ \rm )\rm , \it is\_zero\rm ( \it r\_\hspace*{0.10in}\rm )\rm , \rm 0 \rm , \it iff2 \rm , \rm 0\rm , \it z\_c \rm )\hspace*{0.10in}\rm \}  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_I\_A\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it i\_ \rm := \it rgs8\rm (\it a0\rm )\hspace*{0.10in} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_R\_A\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it r\_ \rm := \it rgs8\rm (\it a0\rm )\hspace*{0.10in} $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm ) 

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in} 

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_dd\_nn \rm ( \it dd \rm , \it nn \rm ) \rm =

\hspace*{0.20in}\bf PRE \it dd  $\in$  \it id\_reg\_16  $\land$  \it nn  $\in$  \it USHORT\hspace*{0.10in} $\land$  \it dd  $\not =$  \it AF

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf IF \it dd \rm = \it SP \bf THEN\hspace*{0.10in}\it sp \rm := \it ushort\_bv16 \rm ( \it nn \rm )

\hspace*{0.40in}\bf ELSE

\hspace*{0.60in}\bf ANY \it rh \rm , \it rl \rm , \it w1 \rm , \it w2 \bf WHERE

\hspace*{0.80in}\it rh  $\in$  \it id\_reg\_8  $\land$ \hspace*{0.10in}\it rl  $\in$  \it id\_reg\_8  $\land$ 

\hspace*{0.80in}\it w1  $\in$  \it BYTE  $\land$  \it w2  $\in$  \it BYTE  $\land$ 

\hspace*{0.80in}\it rh \rm , \it rl \rm = \it REG16\_TO\_REG8 \rm ( \it dd \rm )  $\land$   $\neg$ \rm (\it rh \rm = \it rl\rm )  $\land$ 

\hspace*{0.80in}\it bv16\_byte \rm ( \it ushort\_bv16 \rm ( \it nn \rm ) \rm ) \rm = \it w1 \rm , \it w2

\hspace*{0.60in}\bf THEN

\hspace*{0.80in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it rh  $\mapsto$  \it w1 \rm , \it rl  $\mapsto$  \it w2 \rm \}  $\para$ 

\hspace*{0.80in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.60in}\bf END

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_IX\_nn \rm ( \it nn \rm ) \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.15in}\it nn  $\in$  \it USHORT

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\it ix \rm := \it ushort\_bv16 \rm ( \it nn \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_IY\_nn \rm ( \it nn \rm ) \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.15in}\it nn  $\in$  \it USHORT

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\it iy \rm := \it ushort\_bv16 \rm ( \it nn \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_HL\_9nn0 \rm ( \it nn \rm ) \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.15in}\it nn  $\in$  \it USHORT

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it h0  $\mapsto$  \it mem \rm ( \it ushort\_bv16 \rm ( \it add16USHORT \rm ( \rm 0 \rm , \it nn \rm , \rm 1 \rm ) \rm ) \rm ) \rm , \it l0  $\mapsto$  \it mem \rm ( \it ushort\_bv16 \rm ( \it nn \rm ) \rm ) \rm \}  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_dd\_9nn0 \rm ( \it dd \rm , \it nn \rm ) \rm =

\hspace*{0.20in}\bf PRE \it dd  $\in$  \it id\_reg\_16  $\land$  \it nn  $\in$  \it USHORT\hspace*{0.10in} $\land$  \it dd  $\not =$  \it AF

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )  $\para$ 

\hspace*{0.40in}\bf IF \it dd \rm = \it SP \bf THEN

\hspace*{0.60in}\it sp \rm := \it byte\_bv16 \rm ( \it mem \rm ( \it ushort\_bv16 \rm ( \it add16USHORT \rm ( \rm 0 \rm , \it nn \rm , \rm 1 \rm ) \rm ) \rm ) \rm , \it mem \rm ( \it ushort\_bv16 \rm ( \it nn \rm ) \rm ) \rm )

\hspace*{0.40in}\bf ELSE

\hspace*{0.60in}\bf ANY \it rh \rm , \it rl \rm , \it w1 \rm , \it w2 \bf WHERE

\hspace*{0.80in}\it rh  $\in$  \it id\_reg\_8  $\land$ \hspace*{0.10in}\it rl  $\in$  \it id\_reg\_8  $\land$ 

\hspace*{0.80in}\it w1  $\in$  \it BYTE  $\land$  \it w2  $\in$  \it BYTE  $\land$ 

\hspace*{0.80in}\it rh \rm , \it rl \rm = \it REG16\_TO\_REG8 \rm ( \it dd \rm )  $\land$ \hspace*{0.10in} $\neg$ \rm (\it rh \rm = \it rl\rm )  $\land$ 

\hspace*{0.80in}\it w1 \rm = \it mem \rm ( \it ushort\_bv16 \rm ( \it add16USHORT \rm ( \rm 0 \rm , \it nn \rm , \rm 1 \rm ) \rm ) \rm )  $\land$ 

\hspace*{0.80in}\it w2 \rm = \it mem \rm ( \it ushort\_bv16 \rm ( \it nn \rm ) \rm )

\hspace*{0.60in}\bf THEN

\hspace*{0.80in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it rh  $\mapsto$  \it w1 \rm , \it rl  $\mapsto$  \it w2 \rm \}  $\para$ 

\hspace*{0.80in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm ) 

\hspace*{0.60in}\bf END

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_IX\_9nn0 \rm ( \it nn \rm ) \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.15in}\it nn  $\in$  \it USHORT

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\it ix \rm := \it byte\_bv16 \rm ( \it mem \rm ( \it ushort\_bv16 \rm ( \it add16USHORT \rm ( \rm 0 \rm , \it nn \rm , \rm 1 \rm ) \rm ) \rm ) \rm , \it mem \rm ( \it ushort\_bv16 \rm ( \it nn \rm ) \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_IY\_9nn0 \rm ( \it nn \rm ) \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.15in}\it nn  $\in$  \it USHORT

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\it iy \rm := \it byte\_bv16 \rm ( \it mem \rm ( \it ushort\_bv16 \rm ( \it add16USHORT \rm ( \rm 0 \rm , \it nn \rm , \rm 1 \rm ) \rm ) \rm ) \rm , \it mem \rm ( \it ushort\_bv16 \rm ( \it nn \rm ) \rm ) \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_9nn0\_HL \rm ( \it nn \rm ) \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.15in}\it nn  $\in$  \it USHORT  $\land$ 

\hspace*{0.40in}\it nn\hspace*{0.10in} $\in$  \it DATA\_R\_ADR  $\land$ \hspace*{0.10in}\it add16USHORT \rm ( \rm 0 \rm , \it nn \rm , \rm 1 \rm )\hspace*{0.10in} $\in$  \it DATA\_R\_ADR

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf updateMem \rm ( \rm \{ \it ushort\_bv16 \rm ( \it add16USHORT \rm ( \rm 0 \rm , \it nn \rm , \rm 1 \rm ) \rm )  $\mapsto$  \it rgs8 \rm ( \it h0 \rm ) \rm , \it ushort\_bv16 \rm ( \it nn \rm )  $\mapsto$  \it rgs8 \rm ( \it l0 \rm ) \rm \} \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_9nn0\_dd \rm ( \it nn \rm , \it dd \rm ) \rm =

\hspace*{0.20in}\bf PRE \it dd  $\in$  \it id\_reg\_16  $\land$ \hspace*{0.10in}\it dd  $\not =$  \it AF  $\land$  \it nn  $\in$  \it USHORT\hspace*{0.10in} $\land$  

\hspace*{0.40in}\it nn\hspace*{0.10in} $\in$  \it DATA\_R\_ADR  $\land$  \it add16USHORT\rm ( \rm 0 \rm , \it nn \rm , \rm 1 \rm )  $\in$  \it DATA\_R\_ADR

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf IF \it dd \rm = \it SP

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf ANY \it vh \rm , \it vl \bf WHERE

\hspace*{0.80in}\it vh  $\in$  \it BYTE  $\land$  \it vl  $\in$  \it BYTE  $\land$ 

\hspace*{0.80in}\it bv16\_byte \rm ( \it sp \rm ) \rm = \it vh \rm , \it vl  $\land$ 

\hspace*{0.80in} $\neg$ \rm (\it ushort\_bv16 \rm ( \it add16USHORT \rm ( \rm 0 \rm , \it nn \rm , \rm 1 \rm ) \rm ) \rm = \it ushort\_bv16 \rm ( \it nn \rm )\rm )

\hspace*{0.60in}\bf THEN

\hspace*{0.80in}\bf updateMem \rm ( \rm \{ \it ushort\_bv16 \rm ( \it add16USHORT \rm ( \rm 0 \rm , \it nn \rm , \rm 1 \rm ) \rm )  $\mapsto$  \it vh \rm , \it ushort\_bv16 \rm ( \it nn \rm )  $\mapsto$  \it vl \rm \} \rm )

\hspace*{0.80in} $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.60in}\bf END

\hspace*{0.40in}\bf ELSE

\hspace*{0.60in}\bf ANY \it rh \rm , \it rl \rm , \it w1 \rm , \it w2 \bf WHERE

\hspace*{0.80in}\it rh  $\in$  \it id\_reg\_8  $\land$ \hspace*{0.10in}\it rl  $\in$  \it id\_reg\_8  $\land$ 

\hspace*{0.80in}\it w1  $\in$  \it SCHAR  $\land$  \it w2  $\in$  \it BYTE  $\land$ 

\hspace*{0.80in}\it rh \rm , \it rl \rm = \it REG16\_TO\_REG8 \rm ( \it dd \rm )  $\land$ \hspace*{0.10in} $\neg$ \rm (\it rh \rm = \it rl\rm ) 

\hspace*{0.60in}\bf THEN

\hspace*{0.80in}\bf updateMem \rm ( \rm \{ \it ushort\_bv16 \rm ( \it add16USHORT \rm ( \rm 0 \rm , \it nn \rm , \rm 1 \rm ) \rm )  $\mapsto$  \it rgs8 \rm ( \it rh \rm ) \rm , \it ushort\_bv16 \rm ( \it nn \rm )  $\mapsto$  \it rgs8 \rm ( \it rl \rm ) \rm \} \rm )  $\para$ 

\hspace*{0.80in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.60in}\bf END

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_9nn0\_IX \rm ( \it nn \rm ) \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.15in}\it nn  $\in$  \it USHORT  $\land$ \hspace*{0.10in}\it nn\hspace*{0.10in} $\in$  \it DATA\_R\_ADR  $\land$  \it add16USHORT \rm ( \rm 0 \rm , \it nn \rm , \rm 1 \rm )\hspace*{0.10in} $\in$  \it DATA\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it h\_ix \rm , \it l\_ix \bf WHERE

\hspace*{0.60in}\it h\_ix  $\in$  \it BYTE  $\land$  \it l\_ix  $\in$  \it BYTE  $\land$ 

\hspace*{0.60in}\it h\_ix \rm , \it l\_ix \rm = \it bv16\_byte \rm ( \it ix \rm )

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf updateMem \rm ( \rm \{ \it ushort\_bv16 \rm ( \it add16USHORT \rm ( \rm 0 \rm , \it nn \rm , \rm 1 \rm ) \rm )  $\mapsto$  \it h\_ix \rm , \it ushort\_bv16 \rm ( \it nn \rm )  $\mapsto$  \it l\_ix \rm \} \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_9nn0\_IY \rm ( \it nn \rm ) \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.15in}\it nn  $\in$  \it USHORT  $\land$ \hspace*{0.10in}\it nn  $\in$  \it DATA\_R\_ADR  $\land$ \hspace*{0.10in}\it add16USHORT \rm ( \rm 0 \rm , \it nn \rm , \rm 1 \rm )\hspace*{0.10in} $\in$  \it DATA\_R\_ADR\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf ANY \it h\_iy \rm , \it l\_iy \bf WHERE

\hspace*{0.60in}\it h\_iy  $\in$  \it BYTE  $\land$  \it l\_iy  $\in$  \it BYTE  $\land$ 

\hspace*{0.60in}\it h\_iy \rm , \it l\_iy \rm = \it bv16\_byte \rm ( \it iy \rm ) 

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf updateMem \rm ( \rm \{ \it ushort\_bv16 \rm ( \it add16USHORT \rm ( \rm 0 \rm , \it nn \rm , \rm 1 \rm ) \rm )  $\mapsto$  \it h\_iy \rm , \it ushort\_bv16 \rm ( \it nn \rm )  $\mapsto$  \it l\_iy \rm \} \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_SP\_HL\hspace*{0.10in}\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it sp \rm := \it bv\_HL  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_SP\_IX\hspace*{0.10in}\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it sp \rm := \it ix  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LD\_SP\_IY\hspace*{0.10in}\rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it sp \rm := \it iy  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf PUSH\_qq \rm ( \it qq \rm ) \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.10in}\it qq  $\in$  \it id\_reg\_16  $\land$  \it qq  $\not =$  \it SP 

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY

\hspace*{0.60in}\it qqh \rm , \it qql

\hspace*{0.40in}\bf WHERE \it qqh  $\in$  \it id\_reg\_8  $\land$  \it qql  $\in$  \it id\_reg\_8  $\land$ 

\hspace*{0.60in}\it REG16\_TO\_REG8 \rm ( \it qq \rm ) \rm = \it qqh \rm , \it qql  $\land$ \hspace*{0.10in} $\neg$ \rm ( \it qqh \rm = \it qql\rm )  $\land$ 

\hspace*{0.60in}\rm \{ \it sp\_minus\_two  $\mapsto$  \it rgs8 \rm ( \it qql \rm ) \rm ,

\hspace*{0.80in}\it sp\_minus\_one  $\mapsto$  \it rgs8 \rm ( \it qqh \rm ) \rm \}  $\in$  \it BV16  $\fun$  \it BYTE

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf updateStack \rm ( \rm \{ \it sp\_minus\_two  $\mapsto$  \it rgs8 \rm ( \it qql \rm ) \rm ,

\hspace*{1.00in}\it sp\_minus\_one  $\mapsto$  \it rgs8 \rm ( \it qqh \rm ) \rm \} \rm )  $\para$ 

\hspace*{0.60in}\it sp \rm := \it sp\_minus\_two  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf PUSH\_IX\hspace*{0.10in}\rm =\hspace*{0.15in}

\hspace*{0.20in}\bf ANY

\hspace*{0.40in}\it wh \rm , \it wl

\hspace*{0.20in}\bf WHERE \it wh  $\in$  \it BYTE  $\land$  \it wl  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in}\it bv16\_byte \rm ( \it ix \rm ) \rm = \it wh \rm , \it wl  $\land$ 

\hspace*{0.40in}\rm \{ \it sp\_minus\_two  $\mapsto$  \it wl \rm , \it sp\_minus\_one  $\mapsto$  \it wh \rm \}  $\in$  \it BV16  $\fun$  \it BYTE

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf updateStack \rm ( \rm \{ \it sp\_minus\_two  $\mapsto$  \it wl \rm ,

\hspace*{0.80in}\it sp\_minus\_one  $\mapsto$  \it wh \rm \} \rm )  $\para$ 

\hspace*{0.40in}\it sp \rm := \it sp\_minus\_two  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf PUSH\_IY\hspace*{0.10in}\rm =

\hspace*{0.20in}\bf ANY

\hspace*{0.40in}\it wh \rm , \it wl

\hspace*{0.20in}\bf WHERE \it wh  $\in$  \it BYTE  $\land$  \it wl  $\in$  \it BYTE  $\land$ 

\hspace*{0.40in}\it bv16\_byte \rm ( \it iy \rm ) \rm = \it wh \rm , \it wl  $\land$ 

\hspace*{0.40in}\rm \{ \it sp\_minus\_two  $\mapsto$  \it wl \rm , \it sp\_minus\_one  $\mapsto$  \it wh \rm \}  $\in$  \it BV16  $\fun$  \it BYTE

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf updateStack \rm ( \rm \{ \it sp\_minus\_two  $\mapsto$  \it wl \rm ,

\hspace*{0.80in}\it sp\_minus\_one  $\mapsto$  \it wh \rm \} \rm )  $\para$ 

\hspace*{0.40in}\it sp \rm := \it sp\_minus\_two  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf POP\_qq \rm ( \it qq \rm ) \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.10in}\it qq  $\in$  \it id\_reg\_16  $\land$  \it qq  $\not =$  \it SP

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY

\hspace*{0.60in}\it qqh \rm , \it qql

\hspace*{0.40in}\bf WHERE \it qqh  $\in$  \it id\_reg\_8  $\land$  \it qql  $\in$  \it id\_reg\_8  $\land$ 

\hspace*{0.60in}\it REG16\_TO\_REG8 \rm ( \it qq \rm ) \rm = \it qqh \rm , \it qql  $\land$ \hspace*{0.10in} $\neg$ \rm ( \it qqh \rm = \it qql\rm )  $\land$ 

\hspace*{0.60in}\rm \{ \it qql  $\mapsto$  \it mem \rm ( \it sp\_plus\_two \rm ) \rm , \it qqh  $\mapsto$  \it mem \rm ( \it sp\_plus\_one \rm ) \rm \}  $\in$  \it id\_reg\_8  $\fun$  \it BYTE

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it qql  $\mapsto$  \it mem \rm ( \it sp\_plus\_two \rm ) \rm , \it qqh  $\mapsto$  \it mem \rm ( \it sp\_plus\_one \rm ) \rm \}  $\para$ 

\hspace*{0.60in}\it sp \rm := \it sp\_plus\_two  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf POP\_IX\hspace*{0.10in}\rm =

\hspace*{0.20in}\bf PRE\hspace*{0.15in}\it sp  $\in$  \it BV16 

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY

\hspace*{0.60in}\it bv16

\hspace*{0.40in}\bf WHERE \it bv16  $\in$  \it BV16\hspace*{0.10in} $\land$ 

\hspace*{0.60in}\it byte\_bv16 \rm ( \it mem \rm ( \it sp\_plus\_one \rm ) \rm , \it mem \rm ( \it sp\_plus\_two \rm ) \rm ) \rm = \it bv16

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it ix \rm := \it bv16  $\para$ 

\hspace*{0.60in}\it sp \rm := \it sp\_plus\_two  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf POP\_IY\hspace*{0.10in}\rm =

\hspace*{0.20in}\bf PRE\hspace*{0.15in}\it sp  $\in$  \it BV16

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY

\hspace*{0.60in}\it bv16

\hspace*{0.40in}\bf WHERE \it bv16  $\in$  \it BV16\hspace*{0.10in} $\land$ 

\hspace*{0.60in}\it byte\_bv16 \rm ( \it mem \rm ( \it sp\_plus\_one \rm ) \rm , \it mem \rm ( \it sp\_plus\_two \rm ) \rm ) \rm = \it bv16

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it iy \rm := \it bv16  $\para$ 

\hspace*{0.60in}\it sp \rm := \it sp\_plus\_two  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf EX\_DE\_HL \rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it d0  $\mapsto$  \it rgs8 \rm ( \it h0 \rm ) \rm , \it e0  $\mapsto$  \it rgs8 \rm ( \it l0 \rm ) \rm , \it h0  $\mapsto$  \it rgs8 \rm ( \it d0 \rm ) \rm , \it l0  $\mapsto$  \it rgs8 \rm ( \it e0 \rm ) \rm \}  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf EX\_AF\_AF\_ \rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it a0  $\mapsto$  \it rgs8 \rm ( \it a\_0 \rm ) \rm , \it f0  $\mapsto$  \it rgs8 \rm ( \it f\_0 \rm ) \rm , \it a\_0  $\mapsto$  \it rgs8 \rm ( \it a0 \rm ) \rm , \it f\_0  $\mapsto$  \it rgs8 \rm ( \it f0 \rm ) \rm \}  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf EXX \rm =

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it b0  $\mapsto$  \it rgs8 \rm ( \it b\_0 \rm ) \rm , \it c0  $\mapsto$  \it rgs8 \rm ( \it c\_0 \rm ) \rm , \it d0  $\mapsto$  \it rgs8 \rm ( \it d\_0 \rm ) \rm , \it e0  $\mapsto$  \it rgs8 \rm ( \it e\_0 \rm ) \rm , \it h0  $\mapsto$  \it rgs8 \rm ( \it h\_0 \rm ) \rm , \it l0  $\mapsto$  \it rgs8 \rm ( \it l\_0 \rm ) \rm ,

\hspace*{0.60in}\it b\_0  $\mapsto$  \it rgs8 \rm ( \it b0 \rm ) \rm , \it c\_0  $\mapsto$  \it rgs8 \rm ( \it c0 \rm ) \rm , \it d\_0  $\mapsto$  \it rgs8 \rm ( \it d0 \rm ) \rm , \it e\_0  $\mapsto$  \it rgs8 \rm ( \it e0 \rm ) \rm , \it h\_0  $\mapsto$  \it rgs8 \rm ( \it h0 \rm ) \rm , \it l\_0  $\mapsto$  \it rgs8 \rm ( \it l0 \rm ) \rm \}  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf EX\_9SP0\_HL \rm =

\hspace*{0.20in}\bf PRE

\hspace*{0.40in}\it bv16\_ushort\rm ( \it sp\_plus\_one\rm )  $\in$  \it STACK\_R\_ADR  $\land$ \hspace*{0.10in}\it bv16\_ushort\rm ( \it sp \rm )  $\in$  \it STACK\_R\_ADR

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\it rgs8 \rm := \it rgs8  $\lover$  \rm \{ \it h0  $\mapsto$  \it mem \rm ( \it sp\_plus\_one \rm ) \rm , \it l0  $\mapsto$  \it mem \rm ( \it sp \rm ) \rm \}  $\para$ 

\hspace*{0.40in}\bf updateStack \rm ( \rm \{ \it sp\_plus\_one  $\mapsto$  \it rgs8 \rm ( \it h0 \rm ) \rm , \it sp  $\mapsto$  \it rgs8 \rm ( \it l0 \rm ) \rm \} \rm )  $\para$ 

\hspace*{0.40in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf EX\_9SP0\_IX \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.40in}\it bv16\_ushort\rm ( \it sp\_plus\_one\rm )  $\in$  \it STACK\_R\_ADR  $\land$ \hspace*{0.10in}\it bv16\_ushort\rm ( \it sp \rm )  $\in$  \it STACK\_R\_ADR 

\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY \it wh \rm , \it wl

\hspace*{0.40in}\bf WHERE \it wh  $\in$  \it BYTE  $\land$  \it wl  $\in$  \it BYTE  $\land$ 

\hspace*{0.60in}\it bv16\_byte \rm ( \it ix \rm ) \rm = \it wh \rm , \it wl 

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it ix \rm := \it byte\_bv16 \rm ( \it mem \rm ( \it sp\_plus\_one \rm ) \rm , \it mem \rm ( \it sp \rm ) \rm )  $\para$ 

\hspace*{0.60in}\bf updateStack \rm ( \rm \{ \it sp\_plus\_one  $\mapsto$  \it wh \rm , \it sp  $\mapsto$  \it wl \rm \} \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf EX\_9SP0\_IY \rm =

\hspace*{0.20in}\bf PRE\hspace*{0.40in}\it bv16\_ushort\rm ( \it sp\_plus\_one\rm )  $\in$  \it STACK\_R\_ADR  $\land$ \hspace*{0.10in}\it bv16\_ushort\rm ( \it sp \rm )  $\in$  \it STACK\_R\_ADR 

\hspace*{0.20in}\bf THEN\hspace*{0.20in}

\hspace*{0.40in}\bf ANY \it wh \rm , \it wl

\hspace*{0.40in}\bf WHERE \it wh  $\in$  \it BYTE  $\land$  \it wl  $\in$  \it BYTE  $\land$ 

\hspace*{0.60in}\it bv16\_byte \rm ( \it iy \rm ) \rm = \it wh \rm , \it wl 

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\it iy \rm := \it byte\_bv16 \rm ( \it mem \rm ( \it sp\_plus\_one \rm ) \rm , \it mem \rm ( \it sp \rm ) \rm )  $\para$ 

\hspace*{0.60in}\bf updateStack \rm ( \rm \{ \it sp\_plus\_one  $\mapsto$  \it wh \rm , \it sp  $\mapsto$  \it wl \rm \} \rm )  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LDI \rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it bv\_DE\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY\hspace*{0.10in}\it hvn \rm , \it lvn \rm , \it dvn \rm , \it evn \rm , \it bvn \rm , \it cvn

\hspace*{0.40in}\bf WHERE

\hspace*{0.60in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it inc\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it dvn \rm , \it evn \rm = \it bv16\_byte \rm ( \it inc\_BV16 \rm ( \it bv\_DE \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it bvn \rm , \it cvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_BC \rm ) \rm )

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf updateAddressMem \rm ( \it bv\_DE \rm , \it bv\_9HL0 \rm )  $\para$ 

\hspace*{0.60in}\it rgs8 \rm :=\hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \rm ( \it h0  $\mapsto$  \it hvn \rm ) \rm , \rm ( \it l0  $\mapsto$  \it lvn \rm ) \rm ,

\hspace*{0.80in}\rm ( \it d0  $\mapsto$  \it dvn \rm ) \rm , \rm ( \it e0  $\mapsto$  \it evn \rm ) \rm ,

\hspace*{0.80in}\rm ( \it b0  $\mapsto$  \it bvn \rm ) \rm , \rm ( \it c0  $\mapsto$  \it cvn \rm ) \rm ,

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it z\_s \rm , \it z\_z \rm , \rm 0 \rm , \it bit\_not \rm ( \it is\_zero16USHORT \rm ( \it bv16\_ushort \rm ( \it dec\_BV16\rm (\it bv\_BC\rm )\hspace*{0.10in}\rm )\hspace*{0.10in}\rm ) \rm ) \rm , \rm 0 \rm , \it z\_c \rm ) \rm \}  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LDIR \rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it bv\_DE\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY\hspace*{0.10in}\it hvn \rm , \it lvn \rm , \it dvn \rm , \it evn \rm , \it bvn \rm , \it cvn

\hspace*{0.40in}\bf WHERE

\hspace*{0.60in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it inc\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it dvn \rm , \it evn \rm = \it bv16\_byte \rm ( \it inc\_BV16 \rm ( \it bv\_DE \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it bvn \rm , \it cvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_BC \rm ) \rm )

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf updateAddressMem \rm ( \it bv\_DE \rm , \it bv\_9HL0 \rm )  $\para$ 

\hspace*{0.60in}\it rgs8 \rm :=\hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \rm ( \it h0  $\mapsto$  \it hvn \rm ) \rm , \rm ( \it l0  $\mapsto$  \it lvn \rm ) \rm ,

\hspace*{0.80in}\rm ( \it d0  $\mapsto$  \it dvn \rm ) \rm , \rm ( \it e0  $\mapsto$  \it evn \rm ) \rm ,

\hspace*{0.80in}\rm ( \it b0  $\mapsto$  \it bvn \rm ) \rm , \rm ( \it c0  $\mapsto$  \it cvn \rm ) \rm ,

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it z\_s \rm , \it z\_z \rm , \rm 0 \rm , \rm 0 \rm , \rm 0 \rm , \it z\_c \rm ) \rm \} 

\hspace*{0.60in} $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )  $\para$ 

\hspace*{0.60in}\bf IF\hspace*{0.10in}\it is\_zero16USHORT \rm ( \it bv16\_ushort \rm ( \it dec\_BV16\rm (\it bv\_BC\rm )\hspace*{0.10in}\rm )\hspace*{0.10in}\rm ) \rm = \rm 0 \bf THEN \it pc \rm := \it instruction\_next \rm ( \it pc \rm )\hspace*{0.10in}\bf END

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LDD \rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it bv\_DE\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY\hspace*{0.10in}\it hvn \rm , \it lvn \rm , \it dvn \rm , \it evn \rm , \it bvn \rm , \it cvn

\hspace*{0.40in}\bf WHERE

\hspace*{0.60in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it dvn \rm , \it evn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_DE \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it bvn \rm , \it cvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_BC \rm ) \rm )

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf updateAddressMem \rm ( \it bv\_DE \rm , \it bv\_9HL0 \rm )  $\para$ 

\hspace*{0.60in}\it rgs8 \rm :=\hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \rm ( \it h0  $\mapsto$  \it hvn \rm ) \rm , \rm ( \it l0  $\mapsto$  \it lvn \rm ) \rm ,

\hspace*{0.80in}\rm ( \it d0  $\mapsto$  \it dvn \rm ) \rm , \rm ( \it e0  $\mapsto$  \it evn \rm ) \rm ,

\hspace*{0.80in}\rm ( \it b0  $\mapsto$  \it bvn \rm ) \rm , \rm ( \it c0  $\mapsto$  \it cvn \rm ) \rm ,

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it z\_s \rm , \it z\_z \rm , \rm 0 \rm , \it bit\_not \rm ( \it is\_zero16USHORT \rm ( \it bv16\_ushort \rm ( \it dec\_BV16\rm (\it bv\_BC\rm )\hspace*{0.10in}\rm )\hspace*{0.10in}\rm ) \rm ) \rm , \rm 0 \rm , \it z\_c \rm ) \rm \}  $\para$ 

\hspace*{0.60in}\it pc \rm := \it instruction\_next \rm ( \it pc \rm )  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf LDDR \rm =

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it bv\_DE\rm )  $\in$  \it DATA\_R\_ADR\hspace*{0.20in}\bf THEN

\hspace*{0.40in}\bf ANY\hspace*{0.10in}\it hvn \rm , \it lvn \rm , \it dvn \rm , \it evn \rm , \it bvn \rm , \it cvn

\hspace*{0.40in}\bf WHERE

\hspace*{0.60in}\it hvn \rm , \it lvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_HL \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it dvn \rm , \it evn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_DE \rm ) \rm )  $\land$ 

\hspace*{0.60in}\it bvn \rm , \it cvn \rm = \it bv16\_byte \rm ( \it dec\_BV16 \rm ( \it bv\_BC \rm ) \rm )

\hspace*{0.60in}

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf updateAddressMem \rm ( \it bv\_DE \rm , \it bv\_9HL0 \rm )  $\para$ 

\hspace*{0.60in}\it rgs8 \rm :=\hspace*{0.10in}\it rgs8  $\lover$  \rm \{ \rm ( \it h0  $\mapsto$  \it hvn \rm ) \rm , \rm ( \it l0  $\mapsto$  \it lvn \rm ) \rm ,

\hspace*{0.80in}\rm ( \it d0  $\mapsto$  \it dvn \rm ) \rm , \rm ( \it e0  $\mapsto$  \it evn \rm ) \rm ,

\hspace*{0.80in}\rm ( \it b0  $\mapsto$  \it bvn \rm ) \rm , \rm ( \it c0  $\mapsto$  \it cvn \rm ) \rm ,

\hspace*{0.80in}\it update\_flag\_reg\rm ( \it z\_s \rm , \it z\_z \rm , \rm 0 \rm , \rm 0 \rm , \rm 0 \rm , \it z\_c \rm ) \rm \} 

\hspace*{0.60in} $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )  $\para$ 

\hspace*{0.60in}\bf IF\hspace*{0.10in}\it is\_zero16USHORT \rm ( \it bv16\_ushort \rm ( \it dec\_BV16\rm (\it bv\_BC\rm )\hspace*{0.10in}\rm )\hspace*{0.10in}\rm ) \rm = \rm 0 \bf THEN \it pc \rm := \it instruction\_next \rm ( \it pc \rm )\hspace*{0.10in}\bf END

\hspace*{0.60in}

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.10in}

\vspace*{8mm}
\rm ;\hspace*{0.20in}

\hspace*{0.20in} 

\hspace*{0.20in}

\hspace*{0.20in}\bf ext\_NMI \rm = 

\hspace*{0.20in}\bf PRE \it bv16\_ushort\rm (\it sp\_minus\_two\rm )  $\in$  \it STACK\_R\_ADR  $\land$  \it bv16\_ushort\rm (\it sp\_minus\_one\rm ) $\in$  \it STACK\_R\_ADR\hspace*{0.10in}\bf THEN

\hspace*{0.40in}\bf ANY \it pc\_low\rm , \it pc\_high \bf WHERE \it pc\_low  $\in$  \it BYTE  $\land$  \it pc\_high  $\in$  \it BYTE  $\land$  \it bv16\_byte\rm (\it ushort\_bv16\rm (\it pc\rm )\rm )\rm = \rm (\it pc\_low\rm ,\it pc\_high\rm ) 

\hspace*{0.70in} $\land$  \it sp\_minus\_two  $\in$  \it BV16  $\land$  \it sp\_minus\_one  $\in$  \it BV16 

\hspace*{0.60in}

\hspace*{0.40in}\bf THEN

\hspace*{0.60in}\bf updateStack\rm (\rm \{ \rm (\it sp\_minus\_two  $\mapsto$  \it pc\_low\rm )\rm ,\rm (\it sp\_minus\_one  $\mapsto$ \it pc\_high \rm ) \rm \}\rm )  $\para$  \it sp\rm := \it sp\_minus\_two  $\para$ 

\hspace*{0.60in}\it pc \rm := \rm 1\rm 0\rm 2  $\para$  \it iff1\rm :=\rm 0  $\para$  \it iff2\rm := \rm 0  $\para$  \it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;

\hspace*{0.20in}

\hspace*{0.20in}\bf ext\_INT\rm (\it byte\_bus\rm ) \rm = 

\hspace*{0.20in}\bf PRE \it iff1 \rm = \rm 1\hspace*{0.10in} $\land$  \it byte\_bus $\in$  \rm 0 $\upto$ \rm 2\rm 5\rm 5  $\land$  \it bv16\_ushort\rm (\it sp\_minus\_one\rm )  $\in$  \it STACK\_R\_ADR  $\land$  \it bv16\_ushort\rm (\it sp\rm )  $\in$  \it STACK\_R\_ADR \bf THEN

\hspace*{0.40in}\bf ANY \it pc\_low\rm , \it pc\_high 

\hspace*{0.40in}\bf WHERE \it pc\_low  $\in$  \it BYTE  $\land$  \it pc\_high  $\in$  \it BYTE  $\land$ 

\hspace*{0.60in}\it bv16\_byte\rm (\it ushort\_bv16\rm (\it pc\rm )\rm )\rm = \rm (\it pc\_low\rm ,\it pc\_high\rm ) 

\hspace*{0.40in}\bf THEN 

\hspace*{0.60in}\bf IF \it im \rm = \rm ( \rm 0  $\mapsto$  \rm 0 \rm ) \bf THEN  

\hspace*{0.80in}\bf IF\hspace*{0.10in}\it byte\_bus \rm = \rm 1\rm 9\rm 9\hspace*{0.10in}   $\lor$  \it byte\_bus \rm = \rm 2\rm 0\rm 7    $\lor$ 

\hspace*{1.00in}\it byte\_bus \rm = \rm 2\rm 1\rm 5\hspace*{0.10in}   $\lor$  \it byte\_bus \rm = \rm 2\rm 2\rm 3\hspace*{0.10in}   $\lor$ 

\hspace*{1.00in}\it byte\_bus \rm = \rm 2\rm 3\rm 1\hspace*{0.10in}   $\lor$  \it byte\_bus \rm = \rm 2\rm 3\rm 9\hspace*{0.10in}   $\lor$  

\hspace*{1.00in}\it byte\_bus \rm = \rm 2\rm 4\rm 7\hspace*{0.10in}   $\lor$  \it byte\_bus \rm = \rm 2\rm 5\rm 5\hspace*{0.10in} 

\hspace*{0.80in}\bf THEN\hspace*{1.05in}

\hspace*{1.00in}\it pc \rm := \it byte\_bus \rm - \rm 1\rm 9\rm 9\hspace*{0.10in} $\para$ 

\hspace*{1.00in}\bf updateStack\rm ( \rm \{ \it mem\rm ( \it sp\_minus\_one\rm )  $\mapsto$  \it pc\_low\rm ,

\hspace*{1.40in}\it mem\rm (\it sp\_minus\_two\rm )  $\mapsto$  \it pc\_high \rm \} \rm )  $\para$ 

\hspace*{1.00in}\it sp \rm := \it sp\_minus\_two  $\para$ \hspace*{0.10in}\it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.80in}\bf ELSE

\hspace*{1.00in}\bf skip\hspace*{0.10in} 

\hspace*{0.80in}\bf END

\hspace*{0.60in}\bf ELSIF\hspace*{0.10in}\it im \rm =\hspace*{0.10in}\rm ( \rm 0  $\mapsto$  \rm 1 \rm ) \bf THEN  

\hspace*{0.80in}\it pc \rm :=\hspace*{0.10in}\rm 5\rm 6  \hspace*{0.80in} $\para$ 

\hspace*{0.80in}\bf updateStack\rm ( \rm \{ \it mem\rm ( \it sp\_minus\_one\rm )  $\mapsto$  \it pc\_low\rm ,

\hspace*{1.20in}\it mem\rm (\it sp\_minus\_two\rm )  $\mapsto$  \it pc\_high \rm \} \rm )  $\para$ 

\hspace*{0.80in}\it sp \rm := \it sp\_minus\_two  $\para$ \hspace*{0.10in}\it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm )\hspace*{0.85in}

\hspace*{0.60in}\bf ELSIF\hspace*{0.20in}\it im \rm = \rm ( \rm 1  $\mapsto$  \rm 1 \rm ) \bf THEN  \hspace*{0.70in}

\hspace*{0.80in}\it pc \rm := \it bv16\_ushort\rm (\it byte\_bv16\rm ( \it i\_ \rm ,\it bitclear\rm (\it rotateleft\rm (\it uchar\_byte\rm (\it byte\_bus\rm )\rm )\rm ,\rm 0\rm )\rm )\rm )  $\para$ 

\hspace*{0.80in}\bf updateStack\rm ( \rm \{ \it mem\rm ( \it sp\_minus\_one\rm )  $\mapsto$  \it pc\_low\rm , 

\hspace*{1.20in}\it mem\rm (\it sp\_minus\_two\rm )  $\mapsto$  \it pc\_high \rm \} \rm )  $\para$ 

\hspace*{0.80in}\it sp \rm := \it sp\_minus\_two  $\para$ \hspace*{0.10in}\it r\_ \rm := \it update\_refresh\_reg\rm (\it r\_\rm ) 

\hspace*{0.60in}\bf END\hspace*{0.10in}

\hspace*{0.40in}\bf END

\hspace*{0.20in}\bf END\rm ;\hspace*{0.20in}

\hspace*{0.20in}

\hspace*{0.20in}\bf ext\_RESET \rm = 

\hspace*{0.20in}\bf BEGIN

\hspace*{0.40in}

\hspace*{0.40in}\it iff1\rm :=\rm 0 $\para$ \it iff2\rm :=\rm 0 $\para$  \it im\rm := \rm (\rm 0 $\mapsto$ \rm 0\rm )  $\para$  \it pc\rm :=\rm 0 $\para$  \it i\_ \rm := \it uchar\_byte\rm (\rm 0\rm )  $\para$ \hspace*{0.10in}\it r\_ \rm := \it uchar\_byte\rm (\rm 0\rm )  $\para$  

\hspace*{0.40in}\it rgs8\hspace*{0.10in}\rm := \it rgs8  $\lover$  \rm \{ \rm (\it a0  $\mapsto$ \it uchar\_byte\rm (\rm 2\rm 5\rm 5\rm ) \rm )\rm , \rm (\it f0  $\mapsto$ \it uchar\_byte\rm (\rm 2\rm 5\rm 5\rm ) \rm ) \rm \} $\para$ 

\hspace*{0.40in}\it sp \rm := \it byte\_bv16\rm (\it uchar\_byte\rm (\rm 2\rm 5\rm 5\rm )\rm ,\it uchar\_byte\rm (\rm 2\rm 5\rm 5\rm )\rm )

\hspace*{0.40in}

\hspace*{0.20in}\bf END\hspace*{0.10in}

\vspace*{24mm}
\bf END\newpage
\end{sloppypar}\end{document}
