THEORY ProofList IS
  _f(1) & _f(2) & _f(17) & _f(76) & ext_RESET.6,(_f(268) => _f(14));
  _f(1) & _f(2) & _f(17) & _f(76) & ext_RESET.5,(_f(156) => _f(12));
  _f(1) & _f(2) & _f(17) & _f(76) & ext_RESET.4,(_f(159) => _f(353));
  _f(1) & _f(2) & _f(17) & _f(76) & ext_RESET.3,(_f(81) => _f(8));
  _f(1) & _f(2) & _f(17) & _f(76) & ext_RESET.2,(_f(78) => _f(352));
  _f(1) & _f(2) & _f(17) & _f(76) & ext_RESET.1,(_f(78) => _f(351));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.50,(_f(349) & _f(329) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.49,(_f(349) & _f(328) => _f(202));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.48,(_f(349) & _f(326) => _f(350));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.47,(_f(348) & _f(331) => _f(324));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.46,(_f(348) & _f(331) => _f(323));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.45,(_f(346) & _f(329) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.44,(_f(346) & _f(328) => _f(202));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.43,(_f(346) & _f(326) => _f(347));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.42,(_f(345) & _f(331) => _f(324));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.41,(_f(345) & _f(331) => _f(323));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.40,(_f(344) & _f(329) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.39,(_f(344) & _f(328) => _f(202));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.38,(_f(344) & _f(326) => _f(327));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.37,(_f(343) & _f(331) => _f(324));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.36,(_f(343) & _f(331) => _f(323));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.35,(_f(342) & _f(329) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.34,(_f(342) & _f(328) => _f(202));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.33,(_f(342) & _f(326) => _f(327));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.32,(_f(341) & _f(331) => _f(324));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.31,(_f(341) & _f(331) => _f(323));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.30,(_f(340) & _f(329) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.29,(_f(340) & _f(328) => _f(202));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.28,(_f(340) & _f(326) => _f(327));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.27,(_f(339) & _f(331) => _f(324));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.26,(_f(339) & _f(331) => _f(323));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.25,(_f(338) & _f(329) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.24,(_f(338) & _f(328) => _f(202));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.23,(_f(338) & _f(326) => _f(327));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.22,(_f(337) & _f(331) => _f(324));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.21,(_f(337) & _f(331) => _f(323));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.20,(_f(336) & _f(329) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.19,(_f(336) & _f(328) => _f(202));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.18,(_f(336) & _f(326) => _f(327));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.17,(_f(335) & _f(331) => _f(324));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.16,(_f(335) & _f(331) => _f(323));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.15,(_f(334) & _f(329) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.14,(_f(334) & _f(328) => _f(202));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.13,(_f(334) & _f(326) => _f(327));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.12,(_f(333) & _f(331) => _f(324));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.11,(_f(333) & _f(331) => _f(323));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.10,(_f(332) & _f(329) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.9,(_f(332) & _f(328) => _f(202));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.8,(_f(332) & _f(326) => _f(327));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.7,(_f(330) & _f(331) => _f(324));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.6,(_f(330) & _f(331) => _f(323));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.5,(_f(325) & _f(329) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.4,(_f(325) & _f(328) => _f(202));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.3,(_f(325) & _f(326) => _f(327));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.2,(_f(321) & _f(322) => _f(324));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(320) & ext_INT.1,(_f(321) & _f(322) => _f(323));
  _f(1) & _f(2) & _f(17) & _f(76) & ext_NMI.6,(_f(318) & _f(268) => _f(14));
  _f(1) & _f(2) & _f(17) & _f(76) & ext_NMI.5,(_f(318) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & ext_NMI.4,(_f(318) & _f(159) => _f(202));
  _f(1) & _f(2) & _f(17) & _f(76) & ext_NMI.3,(_f(318) & _f(81) => _f(319));
  _f(1) & _f(2) & _f(17) & _f(76) & ext_NMI.2,(_f(315) & _f(99) => _f(317));
  _f(1) & _f(2) & _f(17) & _f(76) & ext_NMI.1,(_f(315) & _f(99) => _f(316));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTDR.15,(_f(314) & _f(185) => _f(308));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTDR.14,(_f(314) & _f(185) => _f(307));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTDR.13,(_f(314) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTDR.12,(_f(314) & _f(78) => _f(289));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTDR.11,(_f(314) & _f(78) => _f(288));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTDR.10,(_f(313) & _f(185) => _f(308));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTDR.9,(_f(313) & _f(185) => _f(307));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTDR.8,(_f(313) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTDR.7,(_f(313) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTDR.6,(_f(313) & _f(78) => _f(289));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTDR.5,(_f(313) & _f(78) => _f(288));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTDR.4,(_f(311) & _f(99) => _f(286));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTDR.3,(_f(311) & _f(99) => _f(285));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTDR.2,(_f(311) & _f(99) => _f(284));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTDR.1,(_f(311) & _f(99) => _f(100));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTD.10,(_f(312) & _f(185) => _f(308));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTD.9,(_f(312) & _f(185) => _f(307));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTD.8,(_f(312) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTD.7,(_f(312) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTD.6,(_f(312) & _f(78) => _f(289));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTD.5,(_f(312) & _f(78) => _f(288));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTD.4,(_f(311) & _f(99) => _f(286));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTD.3,(_f(311) & _f(99) => _f(285));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTD.2,(_f(311) & _f(99) => _f(284));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTD.1,(_f(311) & _f(99) => _f(100));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTIR.15,(_f(310) & _f(185) => _f(308));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTIR.14,(_f(310) & _f(185) => _f(307));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTIR.13,(_f(310) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTIR.12,(_f(310) & _f(78) => _f(289));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTIR.11,(_f(310) & _f(78) => _f(288));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTIR.10,(_f(309) & _f(185) => _f(308));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTIR.9,(_f(309) & _f(185) => _f(307));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTIR.8,(_f(309) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTIR.7,(_f(309) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTIR.6,(_f(309) & _f(78) => _f(289));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTIR.5,(_f(309) & _f(78) => _f(288));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTIR.4,(_f(305) & _f(99) => _f(286));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTIR.3,(_f(305) & _f(99) => _f(285));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTIR.2,(_f(305) & _f(99) => _f(284));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTIR.1,(_f(305) & _f(99) => _f(100));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTI.10,(_f(306) & _f(185) => _f(308));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTI.9,(_f(306) & _f(185) => _f(307));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTI.8,(_f(306) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTI.7,(_f(306) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTI.6,(_f(306) & _f(78) => _f(289));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTI.5,(_f(306) & _f(78) => _f(288));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTI.4,(_f(305) & _f(99) => _f(286));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTI.3,(_f(305) & _f(99) => _f(285));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTI.2,(_f(305) & _f(99) => _f(284));
  _f(1) & _f(2) & _f(17) & _f(76) & OUTI.1,(_f(305) & _f(99) => _f(100));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(302) & OUT_9C0_r.4,(_f(185) => _f(304));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(302) & OUT_9C0_r.3,(_f(185) => _f(303));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(302) & OUT_9C0_r.2,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(302) & OUT_9C0_r.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(299) & OUT_9n0_A.4,(_f(185) => _f(301));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(299) & OUT_9n0_A.3,(_f(185) => _f(300));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(299) & OUT_9n0_A.2,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(299) & OUT_9n0_A.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & INDR.13,(_f(298) & _f(185) => _f(282));
  _f(1) & _f(2) & _f(17) & _f(76) & INDR.12,(_f(298) & _f(185) => _f(281));
  _f(1) & _f(2) & _f(17) & _f(76) & INDR.11,(_f(298) & _f(78) => _f(289));
  _f(1) & _f(2) & _f(17) & _f(76) & INDR.10,(_f(298) & _f(78) => _f(288));
  _f(1) & _f(2) & _f(17) & _f(76) & INDR.9,(_f(297) & _f(185) => _f(282));
  _f(1) & _f(2) & _f(17) & _f(76) & INDR.8,(_f(297) & _f(185) => _f(281));
  _f(1) & _f(2) & _f(17) & _f(76) & INDR.7,(_f(297) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & INDR.6,(_f(297) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & INDR.5,(_f(297) & _f(78) => _f(289));
  _f(1) & _f(2) & _f(17) & _f(76) & INDR.4,(_f(297) & _f(78) => _f(288));
  _f(1) & _f(2) & _f(17) & _f(76) & INDR.3,(_f(295) & _f(99) => _f(292));
  _f(1) & _f(2) & _f(17) & _f(76) & INDR.2,(_f(295) & _f(99) => _f(291));
  _f(1) & _f(2) & _f(17) & _f(76) & INDR.1,(_f(295) & _f(99) => _f(100));
  _f(1) & _f(2) & _f(17) & _f(76) & IND.9,(_f(296) & _f(185) => _f(282));
  _f(1) & _f(2) & _f(17) & _f(76) & IND.8,(_f(296) & _f(185) => _f(281));
  _f(1) & _f(2) & _f(17) & _f(76) & IND.7,(_f(296) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & IND.6,(_f(296) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & IND.5,(_f(296) & _f(78) => _f(289));
  _f(1) & _f(2) & _f(17) & _f(76) & IND.4,(_f(296) & _f(78) => _f(288));
  _f(1) & _f(2) & _f(17) & _f(76) & IND.3,(_f(295) & _f(99) => _f(292));
  _f(1) & _f(2) & _f(17) & _f(76) & IND.2,(_f(295) & _f(99) => _f(291));
  _f(1) & _f(2) & _f(17) & _f(76) & IND.1,(_f(295) & _f(99) => _f(100));
  _f(1) & _f(2) & _f(17) & _f(76) & INIR.14,(_f(294) & _f(185) => _f(282));
  _f(1) & _f(2) & _f(17) & _f(76) & INIR.13,(_f(294) & _f(185) => _f(281));
  _f(1) & _f(2) & _f(17) & _f(76) & INIR.12,(_f(294) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & INIR.11,(_f(294) & _f(78) => _f(289));
  _f(1) & _f(2) & _f(17) & _f(76) & INIR.10,(_f(294) & _f(78) => _f(288));
  _f(1) & _f(2) & _f(17) & _f(76) & INIR.9,(_f(293) & _f(185) => _f(282));
  _f(1) & _f(2) & _f(17) & _f(76) & INIR.8,(_f(293) & _f(185) => _f(281));
  _f(1) & _f(2) & _f(17) & _f(76) & INIR.7,(_f(293) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & INIR.6,(_f(293) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & INIR.5,(_f(293) & _f(78) => _f(289));
  _f(1) & _f(2) & _f(17) & _f(76) & INIR.4,(_f(293) & _f(78) => _f(288));
  _f(1) & _f(2) & _f(17) & _f(76) & INIR.3,(_f(290) & _f(99) => _f(292));
  _f(1) & _f(2) & _f(17) & _f(76) & INIR.2,(_f(290) & _f(99) => _f(291));
  _f(1) & _f(2) & _f(17) & _f(76) & INIR.1,(_f(290) & _f(99) => _f(100));
  _f(1) & _f(2) & _f(17) & _f(76) & INI.10,(_f(287) & _f(185) => _f(282));
  _f(1) & _f(2) & _f(17) & _f(76) & INI.9,(_f(287) & _f(185) => _f(281));
  _f(1) & _f(2) & _f(17) & _f(76) & INI.8,(_f(287) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & INI.7,(_f(287) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & INI.6,(_f(287) & _f(78) => _f(289));
  _f(1) & _f(2) & _f(17) & _f(76) & INI.5,(_f(287) & _f(78) => _f(288));
  _f(1) & _f(2) & _f(17) & _f(76) & INI.4,(_f(283) & _f(99) => _f(286));
  _f(1) & _f(2) & _f(17) & _f(76) & INI.3,(_f(283) & _f(99) => _f(285));
  _f(1) & _f(2) & _f(17) & _f(76) & INI.2,(_f(283) & _f(99) => _f(284));
  _f(1) & _f(2) & _f(17) & _f(76) & INI.1,(_f(283) & _f(99) => _f(100));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(277) & IN_r_9C0.6,(_f(278) & _f(185) => _f(282));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(277) & IN_r_9C0.5,(_f(278) & _f(185) => _f(281));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(277) & IN_r_9C0.4,(_f(278) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(277) & IN_r_9C0.3,(_f(278) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(277) & IN_r_9C0.2,(_f(278) & _f(78) => _f(280));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(277) & IN_r_9C0.1,(_f(278) & _f(78) => _f(279));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(271) & IN_A_9n0.6,(_f(272) & _f(185) => _f(276));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(271) & IN_A_9n0.5,(_f(272) & _f(185) => _f(275));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(271) & IN_A_9n0.4,(_f(272) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(271) & IN_A_9n0.3,(_f(272) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(271) & IN_A_9n0.2,(_f(272) & _f(78) => _f(274));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(271) & IN_A_9n0.1,(_f(272) & _f(78) => _f(273));
  _f(1) & _f(2) & _f(17) & _f(76) & IM2.3,(_f(270) => _f(269));
  _f(1) & _f(2) & _f(17) & _f(76) & IM2.2,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & IM2.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & IM1.4,(_f(270) => _f(269));
  _f(1) & _f(2) & _f(17) & _f(76) & IM1.3,(_f(270) => _f(14));
  _f(1) & _f(2) & _f(17) & _f(76) & IM1.2,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & IM1.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & IM0.3,(_f(270) => _f(14));
  _f(1) & _f(2) & _f(17) & _f(76) & IM0.2,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & IM0.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & EI.3,(_f(268) => _f(269));
  _f(1) & _f(2) & _f(17) & _f(76) & EI.2,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & EI.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & DI.3,(_f(268) => _f(14));
  _f(1) & _f(2) & _f(17) & _f(76) & DI.2,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & DI.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & HALT.1,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & NOP.2,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & NOP.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & SCF.4,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & SCF.3,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & SCF.2,(_f(78) => _f(267));
  _f(1) & _f(2) & _f(17) & _f(76) & SCF.1,(_f(78) => _f(266));
  _f(1) & _f(2) & _f(17) & _f(76) & CCF.4,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & CCF.3,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & CCF.2,(_f(78) => _f(265));
  _f(1) & _f(2) & _f(17) & _f(76) & CCF.1,(_f(78) => _f(264));
  _f(1) & _f(2) & _f(17) & _f(76) & NEG.4,(_f(261) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & NEG.3,(_f(261) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & NEG.2,(_f(261) & _f(78) => _f(263));
  _f(1) & _f(2) & _f(17) & _f(76) & NEG.1,(_f(261) & _f(78) => _f(262));
  _f(1) & _f(2) & _f(17) & _f(76) & CPL.4,(_f(258) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & CPL.3,(_f(258) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & CPL.2,(_f(258) & _f(78) => _f(260));
  _f(1) & _f(2) & _f(17) & _f(76) & CPL.1,(_f(258) & _f(78) => _f(259));
  _f(1) & _f(2) & _f(17) & _f(76) & DAA.4,(_f(255) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & DAA.3,(_f(255) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & DAA.2,(_f(255) & _f(78) => _f(257));
  _f(1) & _f(2) & _f(17) & _f(76) & DAA.1,(_f(255) & _f(78) => _f(256));
  _f(1) & _f(2) & _f(17) & _f(76) & CPDR.11,(_f(254) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & CPDR.10,(_f(250) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & CPDR.9,(_f(250) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & CPDR.8,(_f(250) & _f(78) => _f(245));
  _f(1) & _f(2) & _f(17) & _f(76) & CPDR.7,(_f(250) & _f(78) => _f(244));
  _f(1) & _f(2) & _f(17) & _f(76) & CPDR.6,(_f(253) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & CPDR.5,(_f(253) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & CPDR.4,(_f(252) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & CPDR.3,(_f(252) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & CPDR.2,(_f(252) & _f(78) => _f(245));
  _f(1) & _f(2) & _f(17) & _f(76) & CPDR.1,(_f(252) & _f(78) => _f(244));
  _f(1) & _f(2) & _f(17) & _f(76) & CPD.6,(_f(251) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & CPD.5,(_f(251) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & CPD.4,(_f(250) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & CPD.3,(_f(250) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & CPD.2,(_f(250) & _f(78) => _f(245));
  _f(1) & _f(2) & _f(17) & _f(76) & CPD.1,(_f(250) & _f(78) => _f(244));
  _f(1) & _f(2) & _f(17) & _f(76) & CPIR.11,(_f(249) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & CPIR.10,(_f(243) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & CPIR.9,(_f(243) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & CPIR.8,(_f(243) & _f(78) => _f(245));
  _f(1) & _f(2) & _f(17) & _f(76) & CPIR.7,(_f(243) & _f(78) => _f(244));
  _f(1) & _f(2) & _f(17) & _f(76) & CPIR.6,(_f(248) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & CPIR.5,(_f(248) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & CPIR.4,(_f(247) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & CPIR.3,(_f(247) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & CPIR.2,(_f(247) & _f(78) => _f(245));
  _f(1) & _f(2) & _f(17) & _f(76) & CPIR.1,(_f(247) & _f(78) => _f(244));
  _f(1) & _f(2) & _f(17) & _f(76) & CPI.6,(_f(246) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & CPI.5,(_f(246) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & CPI.4,(_f(243) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & CPI.3,(_f(243) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & CPI.2,(_f(243) & _f(78) => _f(245));
  _f(1) & _f(2) & _f(17) & _f(76) & CPI.1,(_f(243) & _f(78) => _f(244));
  _f(1) & _f(2) & _f(17) & _f(76) & LDDR.10,(_f(242) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & LDDR.9,(_f(242) & _f(78) => _f(237));
  _f(1) & _f(2) & _f(17) & _f(76) & LDDR.8,(_f(242) & _f(78) => _f(236));
  _f(1) & _f(2) & _f(17) & _f(76) & LDDR.7,(_f(241) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & LDDR.6,(_f(241) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & LDDR.5,(_f(241) & _f(78) => _f(237));
  _f(1) & _f(2) & _f(17) & _f(76) & LDDR.4,(_f(241) & _f(78) => _f(236));
  _f(1) & _f(2) & _f(17) & _f(76) & LDDR.3,(_f(239) & _f(99) => _f(231));
  _f(1) & _f(2) & _f(17) & _f(76) & LDDR.2,(_f(239) & _f(99) => _f(230));
  _f(1) & _f(2) & _f(17) & _f(76) & LDDR.1,(_f(239) & _f(99) => _f(142));
  _f(1) & _f(2) & _f(17) & _f(76) & LDD.7,(_f(240) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & LDD.6,(_f(240) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & LDD.5,(_f(240) & _f(78) => _f(234));
  _f(1) & _f(2) & _f(17) & _f(76) & LDD.4,(_f(240) & _f(78) => _f(233));
  _f(1) & _f(2) & _f(17) & _f(76) & LDD.3,(_f(239) & _f(99) => _f(231));
  _f(1) & _f(2) & _f(17) & _f(76) & LDD.2,(_f(239) & _f(99) => _f(230));
  _f(1) & _f(2) & _f(17) & _f(76) & LDD.1,(_f(239) & _f(99) => _f(142));
  _f(1) & _f(2) & _f(17) & _f(76) & LDIR.10,(_f(238) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & LDIR.9,(_f(238) & _f(78) => _f(237));
  _f(1) & _f(2) & _f(17) & _f(76) & LDIR.8,(_f(238) & _f(78) => _f(236));
  _f(1) & _f(2) & _f(17) & _f(76) & LDIR.7,(_f(235) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & LDIR.6,(_f(235) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & LDIR.5,(_f(235) & _f(78) => _f(237));
  _f(1) & _f(2) & _f(17) & _f(76) & LDIR.4,(_f(235) & _f(78) => _f(236));
  _f(1) & _f(2) & _f(17) & _f(76) & LDIR.3,(_f(229) & _f(99) => _f(231));
  _f(1) & _f(2) & _f(17) & _f(76) & LDIR.2,(_f(229) & _f(99) => _f(230));
  _f(1) & _f(2) & _f(17) & _f(76) & LDIR.1,(_f(229) & _f(99) => _f(142));
  _f(1) & _f(2) & _f(17) & _f(76) & LDI.7,(_f(232) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & LDI.6,(_f(232) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & LDI.5,(_f(232) & _f(78) => _f(234));
  _f(1) & _f(2) & _f(17) & _f(76) & LDI.4,(_f(232) & _f(78) => _f(233));
  _f(1) & _f(2) & _f(17) & _f(76) & LDI.3,(_f(229) & _f(99) => _f(231));
  _f(1) & _f(2) & _f(17) & _f(76) & LDI.2,(_f(229) & _f(99) => _f(230));
  _f(1) & _f(2) & _f(17) & _f(76) & LDI.1,(_f(229) & _f(99) => _f(142));
  _f(1) & _f(2) & _f(17) & _f(76) & EX_9SP0_IY.3,(_f(228) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & EX_9SP0_IY.2,(_f(228) & _f(166) => _f(227));
  _f(1) & _f(2) & _f(17) & _f(76) & EX_9SP0_IY.1,(_f(228) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & EX_9SP0_IX.3,(_f(226) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & EX_9SP0_IX.2,(_f(226) & _f(164) => _f(227));
  _f(1) & _f(2) & _f(17) & _f(76) & EX_9SP0_IX.1,(_f(226) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(220) & EX_9SP0_HL.6,(_f(223) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(220) & EX_9SP0_HL.5,(_f(223) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(220) & EX_9SP0_HL.4,(_f(223) & _f(78) => _f(225));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(220) & EX_9SP0_HL.3,(_f(223) & _f(78) => _f(224));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(220) & EX_9SP0_HL.2,(_f(99) => _f(222));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(220) & EX_9SP0_HL.1,(_f(99) => _f(221));
  _f(1) & _f(2) & _f(17) & _f(76) & EXX.4,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & EXX.3,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & EXX.2,(_f(78) => _f(219));
  _f(1) & _f(2) & _f(17) & _f(76) & EXX.1,(_f(78) => _f(218));
  _f(1) & _f(2) & _f(17) & _f(76) & EX_AF_AF_.4,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & EX_AF_AF_.3,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & EX_AF_AF_.2,(_f(78) => _f(217));
  _f(1) & _f(2) & _f(17) & _f(76) & EX_AF_AF_.1,(_f(78) => _f(216));
  _f(1) & _f(2) & _f(17) & _f(76) & EX_DE_HL.4,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & EX_DE_HL.3,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & EX_DE_HL.2,(_f(78) => _f(215));
  _f(1) & _f(2) & _f(17) & _f(76) & EX_DE_HL.1,(_f(78) => _f(214));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(213) & POP_IY.4,(_f(211) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(213) & POP_IY.3,(_f(211) & _f(166) => _f(212));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(213) & POP_IY.2,(_f(211) & _f(159) => _f(209));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(213) & POP_IY.1,(_f(211) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(210) & POP_IX.4,(_f(211) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(210) & POP_IX.3,(_f(211) & _f(164) => _f(212));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(210) & POP_IX.2,(_f(211) & _f(159) => _f(209));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(210) & POP_IX.1,(_f(211) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(205) & POP_qq.5,(_f(206) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(205) & POP_qq.4,(_f(206) & _f(159) => _f(209));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(205) & POP_qq.3,(_f(206) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(205) & POP_qq.2,(_f(206) & _f(78) => _f(208));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(205) & POP_qq.1,(_f(206) & _f(78) => _f(207));
  _f(1) & _f(2) & _f(17) & _f(76) & PUSH_IY.3,(_f(204) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & PUSH_IY.2,(_f(204) & _f(159) => _f(202));
  _f(1) & _f(2) & _f(17) & _f(76) & PUSH_IY.1,(_f(204) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & PUSH_IX.3,(_f(203) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & PUSH_IX.2,(_f(203) & _f(159) => _f(202));
  _f(1) & _f(2) & _f(17) & _f(76) & PUSH_IX.1,(_f(203) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(200) & PUSH_qq.3,(_f(201) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(200) & PUSH_qq.2,(_f(201) & _f(159) => _f(202));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(200) & PUSH_qq.1,(_f(201) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_SP_IY.2,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_SP_IY.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_SP_IX.2,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_SP_IX.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_SP_HL.3,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_SP_HL.2,(_f(159) => _f(100));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_SP_HL.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(194) & LD_9nn0_IY.5,(_f(199) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(194) & LD_9nn0_IY.4,(_f(199) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(194) & LD_9nn0_IY.3,(_f(195) & _f(99) => _f(198));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(194) & LD_9nn0_IY.2,(_f(195) & _f(99) => _f(197));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(194) & LD_9nn0_IY.1,(_f(195) & _f(99) => _f(196));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(188) & LD_9nn0_IX.5,(_f(193) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(188) & LD_9nn0_IX.4,(_f(193) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(188) & LD_9nn0_IX.3,(_f(189) & _f(99) => _f(192));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(188) & LD_9nn0_IX.2,(_f(189) & _f(99) => _f(191));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(188) & LD_9nn0_IX.1,(_f(189) & _f(99) => _f(190));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(180) & LD_9nn0_dd.5,(_f(187) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(180) & LD_9nn0_dd.4,(_f(187) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(180) & LD_9nn0_dd.3,(_f(184) & _f(185) => _f(186));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(180) & LD_9nn0_dd.2,(_f(183) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(180) & LD_9nn0_dd.1,(_f(181) & _f(99) => _f(182));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(175) & LD_9nn0_HL.5,(_f(179) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(175) & LD_9nn0_HL.4,(_f(179) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(175) & LD_9nn0_HL.3,(_f(99) => _f(178));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(175) & LD_9nn0_HL.2,(_f(99) => _f(177));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(175) & LD_9nn0_HL.1,(_f(99) => _f(176));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(174) & LD_IY_9nn0.3,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(174) & LD_IY_9nn0.2,(_f(166) => _f(171));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(174) & LD_IY_9nn0.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(173) & LD_IX_9nn0.3,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(173) & LD_IX_9nn0.2,(_f(164) => _f(171));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(173) & LD_IX_9nn0.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(170) & LD_dd_9nn0.6,(_f(172) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(170) & LD_dd_9nn0.5,(_f(172) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(170) & LD_dd_9nn0.4,(_f(172) & _f(78) => _f(162));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(170) & LD_dd_9nn0.3,(_f(172) & _f(78) => _f(161));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(170) & LD_dd_9nn0.2,(_f(158) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(170) & LD_dd_9nn0.1,(_f(158) & _f(159) => _f(171));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(167) & LD_HL_9nn0.4,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(167) & LD_HL_9nn0.3,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(167) & LD_HL_9nn0.2,(_f(78) => _f(169));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(167) & LD_HL_9nn0.1,(_f(78) => _f(168));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(165) & LD_IY_nn.3,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(165) & LD_IY_nn.2,(_f(166) => _f(147));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(165) & LD_IY_nn.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(163) & LD_IX_nn.3,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(163) & LD_IX_nn.2,(_f(164) => _f(147));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(163) & LD_IX_nn.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(157) & LD_dd_nn.5,(_f(160) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(157) & LD_dd_nn.4,(_f(160) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(157) & LD_dd_nn.3,(_f(160) & _f(78) => _f(162));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(157) & LD_dd_nn.2,(_f(160) & _f(78) => _f(161));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(157) & LD_dd_nn.1,(_f(158) & _f(159) => _f(147));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_R_A.2,(_f(83) => _f(137));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_R_A.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_I_A.3,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_I_A.2,(_f(156) => _f(137));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_I_A.1,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_R.4,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_R.3,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_R.2,(_f(78) => _f(155));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_R.1,(_f(78) => _f(154));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_I.4,(_f(151) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_I.3,(_f(151) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_I.2,(_f(151) & _f(78) => _f(153));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_I.1,(_f(151) & _f(78) => _f(152));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(146) & LD_9nn0_A.6,(_f(150) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(146) & LD_9nn0_A.5,(_f(150) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(146) & LD_9nn0_A.4,(_f(99) => _f(149));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(146) & LD_9nn0_A.3,(_f(99) => _f(148));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(146) & LD_9nn0_A.2,(_f(99) => _f(137));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(146) & LD_9nn0_A.1,(_f(99) => _f(147));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(141) & LD_9DE0_A.6,(_f(145) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(141) & LD_9DE0_A.5,(_f(145) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(141) & LD_9DE0_A.4,(_f(99) => _f(144));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(141) & LD_9DE0_A.3,(_f(99) => _f(143));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(141) & LD_9DE0_A.2,(_f(99) => _f(137));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(141) & LD_9DE0_A.1,(_f(99) => _f(142));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(135) & LD_9BC0_A.6,(_f(140) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(135) & LD_9BC0_A.5,(_f(140) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(135) & LD_9BC0_A.4,(_f(99) => _f(139));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(135) & LD_9BC0_A.3,(_f(99) => _f(138));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(135) & LD_9BC0_A.2,(_f(99) => _f(137));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(135) & LD_9BC0_A.1,(_f(99) => _f(136));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(132) & LD_A_9nn0.4,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(132) & LD_A_9nn0.3,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(132) & LD_A_9nn0.2,(_f(78) => _f(134));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(132) & LD_A_9nn0.1,(_f(78) => _f(133));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_9DE0.4,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_9DE0.3,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_9DE0.2,(_f(78) => _f(131));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_9DE0.1,(_f(78) => _f(130));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_9BC0.4,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_9BC0.3,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_9BC0.2,(_f(78) => _f(129));
  _f(1) & _f(2) & _f(17) & _f(76) & LD_A_9BC0.1,(_f(78) => _f(128));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(124) & LD_9IY_d0_n.6,(_f(127) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(124) & LD_9IY_d0_n.5,(_f(127) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(124) & LD_9IY_d0_n.4,(_f(99) => _f(126));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(124) & LD_9IY_d0_n.3,(_f(99) => _f(125));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(124) & LD_9IY_d0_n.2,(_f(99) => _f(116));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(124) & LD_9IY_d0_n.1,(_f(99) => _f(111));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(120) & LD_9IX_d0_n.6,(_f(123) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(120) & LD_9IX_d0_n.5,(_f(123) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(120) & LD_9IX_d0_n.4,(_f(99) => _f(122));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(120) & LD_9IX_d0_n.3,(_f(99) => _f(121));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(120) & LD_9IX_d0_n.2,(_f(99) => _f(116));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(120) & LD_9IX_d0_n.1,(_f(99) => _f(106));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(115) & LD_9HL0_n.6,(_f(119) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(115) & LD_9HL0_n.5,(_f(119) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(115) & LD_9HL0_n.4,(_f(99) => _f(118));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(115) & LD_9HL0_n.3,(_f(99) => _f(117));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(115) & LD_9HL0_n.2,(_f(99) => _f(116));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(115) & LD_9HL0_n.1,(_f(99) => _f(100));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(110) & LD_9IY_d0_r.6,(_f(114) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(110) & LD_9IY_d0_r.5,(_f(114) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(110) & LD_9IY_d0_r.4,(_f(99) => _f(113));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(110) & LD_9IY_d0_r.3,(_f(99) => _f(112));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(110) & LD_9IY_d0_r.2,(_f(99) => _f(101));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(110) & LD_9IY_d0_r.1,(_f(99) => _f(111));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(105) & LD_9IX_d0_r.6,(_f(109) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(105) & LD_9IX_d0_r.5,(_f(109) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(105) & LD_9IX_d0_r.4,(_f(99) => _f(108));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(105) & LD_9IX_d0_r.3,(_f(99) => _f(107));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(105) & LD_9IX_d0_r.2,(_f(99) => _f(101));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(105) & LD_9IX_d0_r.1,(_f(99) => _f(106));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(98) & LD_9HL0_r.6,(_f(104) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(98) & LD_9HL0_r.5,(_f(104) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(98) & LD_9HL0_r.4,(_f(99) => _f(103));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(98) & LD_9HL0_r.3,(_f(99) => _f(102));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(98) & LD_9HL0_r.2,(_f(99) => _f(101));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(98) & LD_9HL0_r.1,(_f(99) => _f(100));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(95) & LD_r_9IY_d0.4,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(95) & LD_r_9IY_d0.3,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(95) & LD_r_9IY_d0.2,(_f(78) => _f(97));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(95) & LD_r_9IY_d0.1,(_f(78) => _f(96));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(92) & LD_r_9IX_d0.4,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(92) & LD_r_9IX_d0.3,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(92) & LD_r_9IX_d0.2,(_f(78) => _f(94));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(92) & LD_r_9IX_d0.1,(_f(78) => _f(93));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(88) & LD_r_9HL0.4,(_f(89) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(88) & LD_r_9HL0.3,(_f(89) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(88) & LD_r_9HL0.2,(_f(89) & _f(78) => _f(91));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(88) & LD_r_9HL0.1,(_f(89) & _f(78) => _f(90));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(85) & LD_r_n_.4,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(85) & LD_r_n_.3,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(85) & LD_r_n_.2,(_f(78) => _f(87));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(85) & LD_r_n_.1,(_f(78) => _f(86));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(77) & LD_r_r_.4,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(77) & LD_r_r_.3,(_f(81) => _f(82));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(77) & LD_r_r_.2,(_f(78) => _f(80));
  _f(1) & _f(2) & _f(17) & _f(76) & _f(77) & LD_r_r_.1,(_f(78) => _f(79));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.28,(_f(74) => _f(75));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.27,(_f(72) => _f(73));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.26,(_f(70) => _f(71));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.25,(_f(68) => _f(69));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.24,(_f(66) => _f(67));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.23,(_f(64) => _f(65));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.22,(_f(62) => _f(63));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.21,(_f(60) => _f(61));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.20,(_f(58) => _f(59));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.19,(_f(56) => _f(57));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.18,(_f(54) => _f(55));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.17,(_f(52) => _f(53));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.16,(_f(50) => _f(51));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.15,(_f(48) => _f(49));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.14,(_f(46) => _f(47));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.13,(_f(44) => _f(45));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.12,(_f(42) => _f(43));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.11,(_f(40) => _f(41));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.10,(_f(38) => _f(39));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.9,(_f(36) => _f(37));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.8,(_f(34) => _f(35));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.7,(_f(32) => _f(33));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.6,(_f(30) => _f(31));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.5,(_f(28) => _f(29));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.4,(_f(26) => _f(27));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.3,(_f(24) => _f(25));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.2,(_f(21) & _f(22) => _f(23));
  _f(1) & _f(2) & _f(17) & AssertionLemmas.1,(_f(18) & _f(19) => _f(20));
  _f(1) & _f(2) & Initialisation.7,(_f(3) & _f(15) => _f(16));
  _f(1) & _f(2) & Initialisation.6,(_f(3) & _f(13) => _f(14));
  _f(1) & _f(2) & Initialisation.5,(_f(3) & _f(11) => _f(12));
  _f(1) & _f(2) & Initialisation.4,(_f(3) & _f(9) => _f(10));
  _f(1) & _f(2) & Initialisation.3,(_f(3) & _f(7) => _f(8));
  _f(1) & _f(2) & Initialisation.2,(_f(3) & _f(4) => _f(6));
  _f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & is_zero: BYTE +-> BIT & dom(is_zero) = BYTE & is_zero = %w1.(w1: BYTE | bool_bit(bool(w1(0)+w1(1)+w1(2)+w1(3)+w1(4)+w1(5)+w1(6)+w1(7) = 0))) & is_zeroUSHORT: USHORT +-> BIT & dom(is_zeroUSHORT) = USHORT & is_zeroUSHORT = %nat1.(nat1: USHORT | bool_bit(bool(nat1 = 0))) & is_negative: BYTE +-> BIT & dom(is_negative) = BYTE & is_negative = %w1.(w1: BYTE | w1(7)) & half: UCHAR +-> UCHAR & dom(half) = UCHAR & half = %ww.(ww: UCHAR | ww mod 2**4) & simple_add8UCHAR: UCHAR*UCHAR +-> UCHAR & dom(simple_add8UCHAR) = UCHAR*UCHAR & simple_add8UCHAR = %(w1,w2).(w1: UCHAR & w2: UCHAR | (w1+w2) mod 2**8) & add8UCHAR: BIT*UCHAR*UCHAR +-> UCHAR*BIT*BIT*BIT*BIT & dom(add8UCHAR) = BIT*UCHAR*UCHAR & add8UCHAR = %(carry,w1,w2).(carry: BIT & w1: UCHAR & w2: UCHAR | (carry+w1+w2) mod 256,bool_bit(bool(carry+uchar_schar(w1)+uchar_schar(w2)+1<=0)),bool_bit(bool(2**8-1+1<=carry+w1+w2)),bool_bit(bool(2**4<=carry+half(w1)+half(w2))),bool_bit(bool((carry+w1+w2) mod 2**8-1-1 = 0))) & substract8UCHAR: BIT*UCHAR*UCHAR +-> UCHAR*BIT*BIT*BIT*BIT & dom(substract8UCHAR) = BIT*UCHAR*UCHAR & substract8UCHAR = %(carry,w1,w2).(carry: BIT & w1: UCHAR & w2: UCHAR | (carry+w1-w2) mod 256,bool_bit(bool(carry+uchar_schar(w1)-uchar_schar(w2)+1<=0)),bool_bit(bool(2**8-1+1<=carry+w1-w2)),bool_bit(bool(2**4<=carry+half(w1)-half(w2))),bool_bit(bool((carry+w1-w2) mod 2**8-1-1 = 0))) & add16USHORT: BIT*USHORT*USHORT +-> USHORT & dom(add16USHORT) = BIT*USHORT*USHORT & add16USHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | (b1+w1+w2) mod 65536) & add_carryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(add_carryUSHORT) = BIT*USHORT*USHORT & add_carryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(2**16+1<=b1+w1+w2))) & add_halfcarryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(add_halfcarryUSHORT) = BIT*USHORT*USHORT & add_halfcarryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(2**12+1<=b1+w1 mod 2**12+w2 mod 2**12))) & sub16USHORT: BIT*USHORT*USHORT +-> USHORT & dom(sub16USHORT) = BIT*USHORT*USHORT & sub16USHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | (w1-w2-b1) mod 65536) & sub_carryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(sub_carryUSHORT) = BIT*USHORT*USHORT & sub_carryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(2**16+1<=w1-w2-b1))) & sub_halfcarryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(sub_halfcarryUSHORT) = BIT*USHORT*USHORT & sub_halfcarryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(2**12+1<=w1 mod 2**12-w2 mod 2**12-b1))) & inc_BYTE: BYTE +-> BYTE & dom(inc_BYTE) = BYTE & inc_BYTE = %w1.(w1: BYTE | uchar_byte((byte_uchar(w1)+1) mod 256)) & dec_BYTE: BYTE +-> BYTE & dom(dec_BYTE) = BYTE & dec_BYTE = %w1.(w1: BYTE | uchar_byte((byte_uchar(w1)-1) mod 256)) & inc_BV16: BV16 +-> BV16 & dom(inc_BV16) = BV16 & inc_BV16 = %w1.(w1: BV16 | ushort_bv16((bv16_ushort(w1)+1) mod 65536)) & dec_BV16: BYTE +-> BYTE & dom(dec_BV16) = BYTE & dec_BV16 = %w1.(w1: BV16 | ushort_bv16((bv16_ushort(w1)-1) mod 65536)) & parity_even_BYTE: BIT_VECTOR +-> BIT & dom(parity_even_BYTE) = BIT_VECTOR & parity_even_BYTE = %bv.(bv: BIT_VECTOR | 1-(bv_get(bv,0)+bv_get(bv,1)+bv_get(bv,2)+bv_get(bv,3)+bv_get(bv,4)+bv_get(bv,5)+bv_get(bv,7)) mod 2) & and: BYTE*BYTE +-> BYTE & dom(and) = BYTE*BYTE & and = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_and(bt1,bt2)) & ior: BYTE*BYTE +-> BYTE & dom(ior) = BYTE*BYTE & ior = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_or(bt1,bt2)) & xor: BYTE*BYTE +-> BYTE & dom(xor) = BYTE*BYTE & xor = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_xor(bt1,bt2)) & bitget: BYTE*BYTE_INDEX +-> BIT & dom(bitget) = BYTE*BYTE_INDEX & bitget = %(bt1,ii).(bt1: BYTE & ii: BYTE_INDEX | bt1(ii)) & bitset: BYTE*BYTE_INDEX +-> BYTE & dom(bitset) = BYTE*BYTE_INDEX & !(ww,ii).(ww: BYTE & ii: BYTE_INDEX => bitset(ww,ii) = bv_set(ww,ii)) & bitclear: BYTE*BYTE_INDEX +-> BYTE & dom(bitclear) = BYTE*BYTE_INDEX & !(ww,ii,bb).(ww: BYTE & ii: BYTE_INDEX & bb: BIT => bitclear(ww,ii) = bv_clear(ww,ii)) & complement: BYTE +-> BYTE & dom(complement) = BYTE & complement = %bt.(bt: BYTE | bv_not(bt)) & swap: BYTE +-> BYTE & dom(swap) = BYTE & swap = %bt.(bt: BYTE | {0|->bt(4)}\/{1|->bt(5)}\/{2|->bt(6)}\/{3|->bt(7)}\/{4|->bt(0)}\/{5|->bt(1)}\/{6|->bt(2)}\/{7|->bt(3)}) & rotateleft: BYTE +-> BYTE & dom(rotateleft) = BYTE & rotateleft = %bv.(bv: BYTE | {0|->bv(7)}\/{1|->bv(0)}\/{2|->bv(1)}\/{3|->bv(2)}\/{4|->bv(3)}\/{5|->bv(4)}\/{6|->bv(5)}\/{7|->bv(6)}) & rotateright: BYTE +-> BYTE & dom(rotateright) = BYTE & rotateright = %bv.(bv: BYTE | {0|->bv(1)}\/{1|->bv(2)}\/{2|->bv(3)}\/{3|->bv(4)}\/{4|->bv(5)}\/{5|->bv(6)}\/{6|->bv(7)}\/{7|->bv(0)}) & update_refresh_reg: BYTE +-> BYTE & dom(update_refresh_reg) = BYTE & update_refresh_reg = %v0.(v0: BYTE | uchar_byte(2**7*v0(7)+(2**6*v0(6)+2**5*v0(5)+2**4*v0(4)+2**3*v0(3)+2**2*v0(2)+2*v0(1)+v0(0)) mod 64)) & NB_INSTRUCTIONS: INTEGER & 0<=NB_INSTRUCTIONS & INST_SZ: INTEGER & 0<=INST_SZ & INST_SZ = 16 & NB_INSTRUCTIONS = 2**INST_SZ & INSTRUCTION_MAX = NB_INSTRUCTIONS-1 & INSTRUCTION = USHORT & instruction_next: USHORT +-> USHORT & dom(instruction_next) = USHORT & instruction_next = %w1.(w1: USHORT | (w1+1) mod 65535) & instruction_jump = %(p0,e0).(p0: INSTRUCTION & e0: -126..129 | (p0+e0) mod 65535) & daa_function: BIT*BIT*BIT*BYTE +-> BYTE*BIT*BIT & dom(daa_function) = BIT*BIT*BIT*BYTE & !(zn,c0,h0,value).(zn: BIT & c0: BIT & h0: BIT & value: BYTE => (zn = 0 & c0 = 0 & get_upper_digit(value): 0..9 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,h0,value) = (value,0)|->0) & (zn = 0 & c0 = 0 & get_upper_digit(value): 0..8 & h0 = 0 & get_lower_digit(value): 10..15 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),6)),0)|->bool_bit(bool(2**4<=half(byte_uchar(value))+half(6)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 0..9 & h0 = 1 & get_lower_digit(value): 0..3 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),6)),0)|->bool_bit(bool(2**4<=half(byte_uchar(value))+half(6)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 10..15 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),96)),1)|->bool_bit(bool(2**4<=half(byte_uchar(value))+half(96)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 9..15 & h0 = 0 & get_lower_digit(value): 10..15 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),102)),1)|->bool_bit(bool(2**4<=half(byte_uchar(value))+half(102)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 10..15 & h0 = 1 & get_lower_digit(value): 0..3 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),102)),1)|->bool_bit(bool(2**4<=half(byte_uchar(value))+half(102)))) & (zn = 0 & c0 = 1 & get_upper_digit(value): 0..2 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),96)),1)|->bool_bit(bool(2**4<=half(byte_uchar(value))+half(96)))) & (zn = 0 & c0 = 1 & get_upper_digit(value): 0..2 & h0 = 0 & get_lower_digit(value): 10..15 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),102)),1)|->bool_bit(bool(2**4<=half(byte_uchar(value))+half(102)))) & (zn = 0 & c0 = 1 & get_upper_digit(value): 0..3 & h0 = 1 & get_lower_digit(value): 0..3 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),102)),1)|->bool_bit(bool(2**4<=half(byte_uchar(value))+half(102)))) & (zn = 1 & c0 = 0 & get_upper_digit(value): 0..9 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,h0,value) = (value,0)|->0) & (zn = 1 & c0 = 0 & get_upper_digit(value): 0..8 & h0 = 1 & get_lower_digit(value): 6..15 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),250)),0)|->bool_bit(bool(2**4<=half(byte_uchar(value))+half(250)))) & (zn = 1 & c0 = 1 & get_upper_digit(value): 7..15 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),160)),1)|->bool_bit(bool(2**4<=half(byte_uchar(value))+half(160)))) & (zn = 1 & c0 = 1 & get_upper_digit(value): 6..7 & h0 = 1 & get_lower_digit(value): 6..15 => daa_function(zn,c0,h0,value) = (uchar_byte(simple_add8UCHAR(byte_uchar(value),154)),1)|->bool_bit(bool(2**4<=half(byte_uchar(value))+half(154))))) & BIT = 0..1 & bit_not: BIT +-> BIT & dom(bit_not) = BIT & bit_not = %bb.(bb: BIT | 1-bb) & bit_and: BIT*BIT +-> BIT & dom(bit_and) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_and(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_and(b1,b2) = 1) & b2 = 1) & bit_or: BIT*BIT +-> BIT & dom(bit_or) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_or(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_or(b1,b2) = 1) or b2 = 1) & bit_xor: BIT*BIT +-> BIT & dom(bit_xor) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_xor(b1,b2) = 1 => not(b1 = b2)) & (not(b1 = b2) => bit_xor(b1,b2) = 1)) & bool_bit: BOOL +-> BIT & dom(bool_bit) = BOOL & bool_bit = {TRUE|->1}\/{FALSE|->0} & BIT_VECTOR = seq(BIT)-{{}} & bv_size: BIT_VECTOR +-> NATURAL-{0} & dom(bv_size) = BIT_VECTOR & bv_size = %bv.(bv: BIT_VECTOR | size(bv)) & bv_catenate: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_catenate) = BIT_VECTOR*BIT_VECTOR & bv_catenate = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR | v1^v2) & bv_index: BIT_VECTOR +-> POW(NATURAL) & dom(bv_index) = BIT_VECTOR & bv_index = %v1.(v1: BIT_VECTOR | 0..bv_size(v1)-1) & bv_sub: BIT_VECTOR*NATURAL*NATURAL +-> BIT_VECTOR & dom(bv_sub) = BIT_VECTOR*NATURAL*NATURAL & bv_sub = %(bv,low,high).(bv: BIT_VECTOR & low: 0..bv_size(bv)-1 & high: low..bv_size(bv)-1 | %i0.(i0: 1..high-low+1 | bv(i0+low))) & bv_zero: NATURAL-{0} +-> BIT_VECTOR & dom(bv_zero) = NATURAL-{0} & bv_zero = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{0}) & bv_one: NATURAL-{0} +-> BIT_VECTOR & dom(bv_one) = NATURAL-{0} & bv_one = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{1}) & bv_not: BIT_VECTOR +-> BIT_VECTOR & dom(bv_not) = BIT_VECTOR & bv_not = %v1.(v1: BIT_VECTOR | %idx.(idx: 1..bv_size(v1) | bit_not(v1(idx)))) & bv_and: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_and) = BIT_VECTOR*BIT_VECTOR & bv_and = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_and(v1(idx),v2(idx)))) & bv_or: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_or) = BIT_VECTOR*BIT_VECTOR & bv_or = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_or(v1(idx),v2(idx)))) & bv_xor: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_xor) = BIT_VECTOR*BIT_VECTOR & bv_xor = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_xor(v1(idx),v2(idx)))) & bv_get: BIT_VECTOR*NATURAL +-> BIT & dom(bv_get) = BIT_VECTOR*NATURAL & bv_get = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1(idx+1)) & bv_set: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_set) = BIT_VECTOR*NATURAL & bv_set = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1<+{idx+1|->1}) & bv_clear: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_clear) = BIT_VECTOR*NATURAL & bv_clear = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1<+{idx+1|->0}) & bv_put: BIT_VECTOR*NATURAL*BIT +-> BIT_VECTOR & dom(bv_put) = BIT_VECTOR*NATURAL*BIT & bv_put = %(v1,idx,bit).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 & bit: BIT | v1<+{idx+1|->bit}) & BYTE_INDEX = 1..8 & REAL_BYTE_INDEX = 0..7 & BYTE = SET(bt).(bt: BIT_VECTOR & bv_size(bt) = 8) & BYTE_ZERO: BYTE & BYTE_ZERO = BYTE_INDEX*{0} & byte_bit_get: BYTE*REAL_BYTE_INDEX +-> BIT & dom(byte_bit_get) = BYTE*REAL_BYTE_INDEX & byte_bit_get = %(bt,ind).(bt: BYTE & ind: REAL_BYTE_INDEX | bt(ind+1)) & get_upper_digit = %by.(by: BYTE | 2**3*by(8)+2**2*by(7)+2*by(6)+by(5)) & get_lower_digit = %by.(by: BYTE | 2**3*by(4)+2**2*by(3)+2*by(2)+by(1)) & BV16_INDX = 1..16 & REAL_BV16_INDX = 0..15 & BV16 = SET(bt).(bt: BIT_VECTOR & bv_size(bt) = 16) & BV16_ZERO = BV16_INDX*{0} & bv16_byte: BV16 +-> BYTE*BYTE & dom(bv16_byte) = BV16 & bv16_byte = %bv.(bv: BV16 | {0|->bv(8)}\/{1|->bv(9)}\/{2|->bv(10)}\/{3|->bv(11)}\/{4|->bv(12)}\/{5|->bv(13)}\/{6|->bv(14)}\/{7|->bv(15)},{0|->bv(0)}\/{1|->bv(1)}\/{2|->bv(2)}\/{3|->bv(3)}\/{4|->bv(4)}\/{5|->bv(5)}\/{6|->bv(6)}\/{7|->bv(7)}) & byte_bv16 = bv16_byte~ & bv16_bit_get: BYTE*BV16_INDX +-> BIT & dom(bv16_bit_get) = BYTE*BV16_INDX & UCHAR = 0..2**8-1 & byte_uchar: BYTE +-> UCHAR & dom(byte_uchar) = BYTE & byte_uchar = %v0.(v0: BYTE | 2**7*v0(7)+2**6*v0(6)+2**5*v0(5)+2**4*v0(4)+2**3*v0(3)+2**2*v0(2)+2*v0(1)+v0(0)) & uchar_byte: UCHAR +-> BYTE & dom(uchar_byte) = UCHAR & uchar_byte = byte_uchar~ & SCHAR = (-2)**7..2**7-1 & byte_schar: BYTE +-> SCHAR & dom(byte_schar) = BYTE & byte_schar = %v0.(v0: BYTE | (-2)**7*v0(7)+2**6*v0(6)+2**5*v0(5)+2**4*v0(4)+2**3*v0(3)+2**2*v0(2)+2*v0(1)+v0(0)) & schar_byte: SCHAR +-> BYTE & dom(schar_byte) = SCHAR & schar_byte = byte_schar~ & uchar_schar: UCHAR +-> SCHAR & dom(uchar_schar) = UCHAR & uchar_schar = %v1.(v1: UCHAR & v1<=2**7-1 | v1) & uchar_schar = %v1.(v1: UCHAR & not(v1<=2**7-1) | v1-2**8-1+1) & schar_uchar: SCHAR +-> UCHAR & dom(schar_uchar) = SCHAR & schar_uchar = uchar_schar~ & SSHORT = -(2**15)..2**15-1 & bv16_sshort: BV16 +-> SSHORT & dom(bv16_sshort) = BV16 & bv16_sshort = %v0.(v0: BV16 | (-2)**15*v0(15)+2**14*v0(14)+2**13*v0(13)+2**12*v0(12)+2**11*v0(11)+2**10*v0(10)+2**9*v0(9)+2**8*v0(8)+2**7*v0(7)+2**6*v0(6)+2**5*v0(5)+2**4*v0(4)+2**3*v0(3)+2**2*v0(2)+2*v0(1)+v0(0)) & sshort_bv16: SSHORT +-> BV16 & dom(sshort_bv16) = SSHORT & sshort_bv16 = bv16_sshort~ & schar_sshort: SCHAR*SCHAR +-> SSHORT & dom(schar_sshort) = SCHAR*SCHAR & schar_sshort = %(w1,w2).(w1: SCHAR & w2: SCHAR | bv16_sshort(byte_bv16(schar_byte(w1),schar_byte(w2)))) & sshort_schar: SSHORT +-> SCHAR*SCHAR & dom(sshort_schar) = SSHORT & sshort_schar = schar_sshort~ & USHORT = 0..2**16-1 & bv16_ushort: BV16 +-> USHORT & dom(bv16_ushort) = BV16 & bv16_ushort = %v0.(v0: BV16 | 32768*v0(15)+16384*v0(14)+8192*v0(13)+4096*v0(12)+2048*v0(11)+1024*v0(10)+512*v0(9)+256*v0(8)+128*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & ushort_bv16 = bv16_ushort~ & "`Component properties'" & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & dom(get_bv_reg16) = BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) & !(sp_,rgs8_,r1).(sp_: BV16 & (rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8}) & r1: (1..5)*{id_reg_16} => (r1 = 1|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_bv16(rgs8_(5|->id_reg_8),rgs8_(6|->id_reg_8))) & (r1 = 2|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_bv16(rgs8_(9|->id_reg_8),rgs8_(10|->id_reg_8))) & (r1 = 3|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_bv16(rgs8_(13|->id_reg_8),rgs8_(14|->id_reg_8))) & (r1 = 4|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = sp_) & (r1 = 5|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_bv16(rgs8_(1|->id_reg_8),rgs8_(2|->id_reg_8)))) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & dom(REG16_TO_REG8) = (1..5)*{id_reg_16} & REG16_TO_REG8(1|->id_reg_16) = 5|->id_reg_8|->(6|->id_reg_8) & REG16_TO_REG8(2|->id_reg_16) = 9|->id_reg_8|->(10|->id_reg_8) & REG16_TO_REG8(3|->id_reg_16) = 13|->id_reg_8|->(14|->id_reg_8) & REG16_TO_REG8(5|->id_reg_16) = 1|->id_reg_8|->(2|->id_reg_8) & REG8_TO_REG16 = REG16_TO_REG8~ & update_flag_register_SZ_H_PvNC = %(rgs8_$0,s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(rgs8_$0: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_$0) = (1..16)*{id_reg_8} & s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | rgs8_$0<+{2|->id_reg_8|->({7|->s7$0}\/{6|->z6$0}\/{4|->h4$0}\/{2|->pv2$0}\/{1|->n_add_sub$0}\/{0|->c0$0})}) & get_new_flag_register_SZ_H_PvNC = %(rgs8_$0,s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(rgs8_$0: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_$0) = (1..16)*{id_reg_8} & s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->({7|->s7$0}\/{6|->z6$0}\/{4|->h4$0}\/{2|->pv2$0}\/{1|->n_add_sub$0}\/{0|->c0$0})) & bv_ireg_plus_d = %(ix_iy,desloc).(ix_iy: BV16 & desloc: SCHAR | ushort_bv16((bv16_ushort(ix_iy)+desloc) mod 65536)) & bv_9ireg_plus_d0 = %(mem,ix_iy,desloc).(mem: BV16 +-> BYTE & dom(mem) = BV16 & ix_iy: BV16 & desloc: SCHAR | mem(bv_ireg_plus_d(ix_iy,desloc))) & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & dom(cc_get) = ((1..16)*{id_reg_8} --> BYTE)*(0..8) & !rgs8_.(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} => cc_get(rgs8_,0) = 1-bitget(rgs8_(2|->id_reg_8),6) & cc_get(rgs8_,1) = bitget(rgs8_(2|->id_reg_8),6) & cc_get(rgs8_,2) = 1-bitget(rgs8_(2|->id_reg_8),0) & cc_get(rgs8_,3) = bitget(rgs8_(2|->id_reg_8),0) & cc_get(rgs8_,4) = 1-bitget(rgs8_(2|->id_reg_8),2) & cc_get(rgs8_,5) = bitget(rgs8_(2|->id_reg_8),2) & cc_get(rgs8_,6) = 1-bitget(rgs8_(2|->id_reg_8),7) & cc_get(rgs8_,7) = bitget(rgs8_(2|->id_reg_8),7)) & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}));
  ("`Included,imported and extended machines properties'" & RESERVED_ADDRESS = 0..16384 & "`Included,imported and extended machines invariants'" & mem: BV16 +-> BYTE & dom(mem) = BV16 & stack: BV16 +-> BYTE & dom(stack) = BV16 & stack: POW(mem) & not(stack = mem) & "`Included,imported and extended machines assertions'" & ran(stack): POW(BYTE) & ran(mem): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{address|->value}: BV16 +-> BYTE & dom(mem<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+{address|->value}: BV16 +-> BYTE & dom(stack<+{address|->value}) = BV16) & "`Seen and used machines assertions'" & dom(add8UCHAR) = BIT*UCHAR*UCHAR & ran(add8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT) & dom(substract8UCHAR) = BIT*UCHAR*UCHAR & ran(substract8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT) & dom(and) = BYTE*BYTE & ran(and): POW(BYTE) & dom(ior) = BYTE*BYTE & ran(ior): POW(BYTE) & dom(xor) = BYTE*BYTE & ran(xor): POW(BYTE) & dom(complement) = BYTE & ran(complement): POW(BYTE) & dom(swap) = BYTE & ran(swap): POW(BYTE) & dom(rotateleft) = BYTE & ran(rotateleft): POW(BYTE) & dom(rotateright) = BYTE & ran(rotateright): POW(BYTE) & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(vec,in0) = vec(in0)) & !(x0,x1).(x0: UCHAR & x1: UCHAR => simple_add8UCHAR(x0,x1): UCHAR) & 0 = schar_sshort(0,0) & !n0.(n0: UCHAR => 0<=n0) & !n0.(n0: UCHAR => n0<=255) & instruction_next: USHORT +-> USHORT & dom(instruction_next) = USHORT & !xx.(xx: BYTE => byte_uchar(xx): UCHAR) & !xx.(xx: UCHAR => uchar_byte(xx): BYTE) & !xx.(xx: BYTE => update_refresh_reg(xx): BYTE) & !xx.(xx: BYTE => byte_schar(xx): SCHAR) & !xx.(xx: SCHAR => schar_byte(xx): BYTE) & !(xx,yy).(xx: BYTE & yy: BYTE => byte_bv16(xx,yy): BV16) & !(xx,yy).(xx: BYTE & yy: BYTE => #zz.(zz: BV16 & byte_bv16(xx,yy) = zz)) & !xx.(xx: BV16 => bv16_ushort(xx): USHORT) & !xx.(xx: USHORT => ushort_bv16(xx): BV16) & !xx.(xx: BYTE => get_upper_digit(xx): 0..16) & !xx.(xx: BYTE => get_lower_digit(xx): 0..16) & !(zn,c0,value,h0).(zn: BIT & c0: BIT & value: BYTE & h0: BIT => daa_function(zn,c0,h0,value): BYTE*BIT*BIT) & !bb.(bb: BIT => bit_not(bb) = 1-bb) & bit_not(0) = 1 & bit_not(1) = 0 & !bb.(bb: BIT => bit_not(bit_not(bb)) = bb) & bit_and(0,0) = 0 & bit_and(0,1) = 0 & bit_and(1,0) = 0 & bit_and(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 1 => bit_and(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 0 => bit_and(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3)) & !b1.(b1: BIT => bit_and(b1,1) = b1) & !b1.(b1: BIT => bit_and(b1,0) = 0) & bit_or(0,0) = 0 & bit_or(0,1) = 1 & bit_or(1,0) = 1 & bit_or(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 1 => bit_or(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 0 => bit_or(b2,b1) = 0) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 1 => b1 = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 0 => b1 = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3)) & !b1.(b1: BIT => bit_or(b1,1) = 1) & !b1.(b1: BIT => bit_or(b1,0) = b1) & !b1.(b1: BIT => bit_or(1,b1) = 1) & !b1.(b1: BIT => bit_or(0,b1) = b1) & bit_xor(0,0) = 0 & bit_xor(0,1) = 1 & bit_xor(1,0) = 1 & bit_xor(1,1) = 0 & !(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 1 => bit_xor(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 0 => bit_xor(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3)) & !bb.(bb: BIT => bit_xor(bb,bb) = 0) & bool_bit(TRUE) = 1 & bool_bit(FALSE) = 0 & !bb.(bb: BIT => bb = 0 or bb = 1) & !bb.(bb: BIT & not(bb = 0) => bb = 1) & !bb.(bb: BIT & not(bb = 1) => bb = 0) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_xor(bv,bv),indx) = bv_get(bv_zero(bv_size(bv)),indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 0..bv_size(v1)-1 => bv_get(bv_xor(v1,v2),indx) = bv_get(bv_xor(v2,v1),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v2)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_or(bv,bv_zero(bv_size(bv))),indx) = bv_get(bv,indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_or(bv,bv_one(bv_size(bv))),indx) = bv_get(bv_one(bv_size(bv)),indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: 0..bv_size(v1)-1 => bv_get(bv_or(v1,bv_or(v2,v3)),indx) = bv_get(bv_or(bv_or(v1,v2),v3),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v2)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 0..bv_size(v1)-1 => bv_get(bv_or(v1,v2),indx) = bv_get(bv_or(v2,v1),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_and(bv,bv_one(bv_size(bv))),indx) = bv_get(bv,indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_and(bv,bv_zero(bv_size(bv))),indx) = bv_get(bv_zero(bv_size(bv)),indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: 0..bv_size(v1)-1 => bv_get(bv_and(v1,bv_and(v2,v3)),indx) = bv_get(bv_and(bv_and(v1,v2),v3),indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 0..bv_size(v1)-1 => bv_get(bv_and(v1,v2),indx) = bv_get(bv_and(v2,v1),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_and(v1,v2)) = bv_size(v2)) & !(bv,low,high).(bv: BIT_VECTOR & low: 0..bv_size(bv)-1 & high: 0..bv_size(bv)-1 & low<=high => bv_size(bv_sub(bv,low,high)) = high-low) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR => bv_size(bv_catenate(v1,v2)) = bv_size(v1)+bv_size(v2)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_not(bv_not(bv)),indx) = bv_get(bv,indx)) & !bv.(bv: BIT_VECTOR => bv_size(bv_not(bv)) = bv_size(bv)) & !bt.(bt: BYTE => size(bt) = 8) & size(BYTE_ZERO) = 8 & BYTE: POW(BIT_VECTOR) & BYTE_ZERO: BIT_VECTOR & first(BYTE_ZERO) = 0 & 8: INTEGER & BV16_ZERO: BV16 & BV16: POW(BIT_VECTOR) & BV16_ZERO: BIT_VECTOR & 2**8-1: INTEGER & 0: INTEGER & (-2)**7: INTEGER & 2**7-1: INTEGER & 2**15-1: SSHORT & -(2**15): SSHORT & 2**16 = 65536 & 2**15 = 32768 & 2**14 = 16384 & 2**13 = 8192 & 2**12 = 4096 & 2**11 = 2048 & 2**10 = 1024 & 2**9 = 512 & 2**8 = 256 & 2**7 = 128 & 2**6 = 64 & 2**5 = 32 & 2**4 = 16 & 2**3 = 8 & 2**2 = 4 & 2**1 = 2 & 2**0 = 1);
  ("`Local hypotheses'" & stack$0: BV16 +-> BYTE & dom(stack$0) = BV16 & mem$0: BV16 +-> BYTE & dom(mem$0) = BV16 & i_o_ports$0: BYTE +-> {uchar_byte(0)} & dom(i_o_ports$0) = BYTE & stack$0: POW(mem$0) & not(stack$0 = mem$0) & ran(stack$0): POW(BYTE) & ran(mem$0): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem$0<+{address|->value}: BV16 +-> BYTE & dom(mem$0<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack$0<+{address|->value}: BV16 +-> BYTE & dom(stack$0<+{address|->value}) = BV16));
  "`Check that the invariant (rgs8: id_reg_8 --> BYTE) is established by the initialisation - ref 3.3'";
  ({1|->id_reg_8|->uchar_byte(255)}\/{2|->id_reg_8|->uchar_byte(255)}\/{3|->id_reg_8|->uchar_byte(255)}\/{4|->id_reg_8|->uchar_byte(255)}\/{5|->id_reg_8|->uchar_byte(255)}\/{6|->id_reg_8|->uchar_byte(255)}\/{7|->id_reg_8|->uchar_byte(255)}\/{8|->id_reg_8|->uchar_byte(255)}\/{9|->id_reg_8|->uchar_byte(255)}\/{10|->id_reg_8|->uchar_byte(255)}\/{11|->id_reg_8|->uchar_byte(255)}\/{12|->id_reg_8|->uchar_byte(255)}\/{13|->id_reg_8|->uchar_byte(255)}\/{14|->id_reg_8|->uchar_byte(255)}\/{15|->id_reg_8|->uchar_byte(255)}\/{16|->id_reg_8|->uchar_byte(255)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom({1|->id_reg_8|->uchar_byte(255)}\/{2|->id_reg_8|->uchar_byte(255)}\/{3|->id_reg_8|->uchar_byte(255)}\/{4|->id_reg_8|->uchar_byte(255)}\/{5|->id_reg_8|->uchar_byte(255)}\/{6|->id_reg_8|->uchar_byte(255)}\/{7|->id_reg_8|->uchar_byte(255)}\/{8|->id_reg_8|->uchar_byte(255)}\/{9|->id_reg_8|->uchar_byte(255)}\/{10|->id_reg_8|->uchar_byte(255)}\/{11|->id_reg_8|->uchar_byte(255)}\/{12|->id_reg_8|->uchar_byte(255)}\/{13|->id_reg_8|->uchar_byte(255)}\/{14|->id_reg_8|->uchar_byte(255)}\/{15|->id_reg_8|->uchar_byte(255)}\/{16|->id_reg_8|->uchar_byte(255)}) = (1..16)*{id_reg_8});
  "`Check that the invariant (pc: INSTRUCTION) is established by the initialisation - ref 3.3'";
  (0: INSTRUCTION);
  "`Check that the invariant (sp: BV16) is established by the initialisation - ref 3.3'";
  (ushort_bv16(65535): BV16);
  "`Check that the invariant (i_: BYTE) is established by the initialisation - ref 3.3'";
  (uchar_byte(0): BYTE);
  "`Check that the invariant (iff1: BIT) is established by the initialisation - ref 3.3'";
  (0: BIT);
  "`Check that the invariant (i_o_ports: BYTE --> BYTE) is established by the initialisation - ref 3.3'";
  (i_o_ports$0: BYTE +-> BYTE);
  ("`Component invariant'" & rgs8: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8) = (1..16)*{id_reg_8} & pc: INSTRUCTION & sp: BV16 & ix: BV16 & iy: BV16 & i_: BYTE & r_: BYTE & iff1: BIT & iff2: BIT & im: BIT*BIT & i_o_ports: BYTE +-> BYTE & dom(i_o_ports) = BYTE);
  ("`Local hypotheses'" & mmm: BV16 +-> BYTE & mmm~: BYTE +-> BV16 & dom(mmm) = BV16 & ii: BV16 & des: SCHAR);
  "`Check assertion (!(mmm,ii,des).(mmm: BV16 >-> BYTE & ii: BV16 & des: SCHAR => bv_9ireg_plus_d0(mmm,ii,des): BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_9ireg_plus_d0(mmm,ii,des): BYTE);
  ("`Local hypotheses'" & ii: BV16 & des: SCHAR);
  "`Check assertion (!(ii,des).(ii: BV16 & des: SCHAR => bv_ireg_plus_d(ii,des): BV16)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_ireg_plus_d(ii,des): BV16);
  "`Check assertion (mem(iy): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(iy): BYTE);
  "`Check assertion (mem(ix): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(ix): BYTE);
  "`Check assertion (mem(sp): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(sp): BYTE);
  "`Check assertion (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(a0),rgs8(f0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE);
  "`Check assertion (mem(byte_bv16(rgs8(a0),rgs8(f0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
  "`Check assertion (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(h0),rgs8(l0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE);
  "`Check assertion (mem(byte_bv16(rgs8(h0),rgs8(l0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
  "`Check assertion (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(d0),rgs8(e0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE);
  "`Check assertion (mem(byte_bv16(rgs8(d0),rgs8(e0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
  "`Check assertion (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(b0),rgs8(c0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE);
  "`Check assertion (mem(byte_bv16(rgs8(b0),rgs8(c0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
  "`Check assertion (instruction_next(13) = 14) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(13) = 14);
  "`Check assertion (instruction_next(12) = 13) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(12) = 13);
  "`Check assertion (instruction_next(11) = 12) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(11) = 12);
  "`Check assertion (instruction_next(10) = 11) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(10) = 11);
  "`Check assertion (instruction_next(9) = 10) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(9) = 10);
  "`Check assertion (instruction_next(8) = 9) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(8) = 9);
  "`Check assertion (instruction_next(7) = 8) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(7) = 8);
  "`Check assertion (instruction_next(6) = 7) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(6) = 7);
  "`Check assertion (instruction_next(5) = 6) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(5) = 6);
  "`Check assertion (instruction_next(4) = 5) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(4) = 5);
  "`Check assertion (instruction_next(3) = 4) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(3) = 4);
  "`Check assertion (instruction_next(2) = 3) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(2) = 3);
  "`Check assertion (instruction_next(1) = 2) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(1) = 2);
  "`Check assertion (instruction_next(0) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(0) = 1);
  "`Check assertion (ran(rgs8) <: BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (ran(rgs8): POW(BYTE));
  ("`Component assertions'" & dom(stack) = BV16 & ran(stack): POW(BYTE) & ran(mem): POW(BYTE) & dom(mem) = BV16 & ran(rgs8): POW(BYTE) & dom(rgs8) = (1..16)*{id_reg_8} & instruction_next(0) = 1 & instruction_next(1) = 2 & instruction_next(2) = 3 & instruction_next(3) = 4 & instruction_next(4) = 5 & instruction_next(5) = 6 & instruction_next(6) = 7 & instruction_next(7) = 8 & instruction_next(8) = 9 & instruction_next(9) = 10 & instruction_next(10) = 11 & instruction_next(11) = 12 & instruction_next(12) = 13 & instruction_next(13) = 14 & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & !(ii,des).(ii: BV16 & des: SCHAR => bv_ireg_plus_d(ii,des): BV16) & !(mmm,ii,des).(mmm: BV16 +-> BYTE & mmm~: BYTE +-> BV16 & dom(mmm) = BV16 & ii: BV16 & des: SCHAR => bv_9ireg_plus_d0(mmm,ii,des): BYTE));
  ("`LD_r_r_ preconditions in this component'" & rr: (1..16)*{id_reg_8} & rr_: (1..16)*{id_reg_8});
  "`Check that the invariant (rgs8: id_reg_8 --> BYTE) is preserved by the operation - ref 3.4'";
  (rgs8<+{rr|->rgs8(rr_)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->rgs8(rr_)}) = (1..16)*{id_reg_8});
  "`Check that the invariant (pc: INSTRUCTION) is preserved by the operation - ref 3.4'";
  (instruction_next(pc): INSTRUCTION);
  "`Check that the invariant (r_: BYTE) is preserved by the operation - ref 3.4'";
  (update_refresh_reg(r_): BYTE);
  ("`LD_r_n_ preconditions in this component'" & rr: (1..16)*{id_reg_8} & n0: SCHAR);
  (rgs8<+{rr|->schar_byte(n0)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->schar_byte(n0)}) = (1..16)*{id_reg_8});
  ("`LD_r_9HL0 preconditions in this component'" & rr: (1..16)*{id_reg_8});
  ("`Local hypotheses'" & address: BV16 & address = byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)));
  (rgs8<+{rr|->mem(address)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->mem(address)}) = (1..16)*{id_reg_8});
  ("`LD_r_9IX_d0 preconditions in this component'" & rr: (1..16)*{id_reg_8} & desloc: SCHAR);
  (rgs8<+{rr|->bv_9ireg_plus_d0(mem,ix,desloc)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->bv_9ireg_plus_d0(mem,ix,desloc)}) = (1..16)*{id_reg_8});
  ("`LD_r_9IY_d0 preconditions in this component'" & rr: (1..16)*{id_reg_8} & desloc: SCHAR);
  (rgs8<+{rr|->bv_9ireg_plus_d0(mem,iy,desloc)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->bv_9ireg_plus_d0(mem,iy,desloc)}) = (1..16)*{id_reg_8});
  ("`LD_9HL0_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): dom(stack)));
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16);
  (rgs8(rr): BYTE);
  (dom({byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr)})/\dom(stack) = {});
  (not(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr): stack));
  ("`Local hypotheses'" & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr)}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr)}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr)}) & not(stack = mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr)}) & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr)}<+{address|->value}) = BV16));
  ("`LD_9IX_d0_r preconditions in this component'" & desloc: SCHAR & rr: (1..16)*{id_reg_8} & not(bv_ireg_plus_d(ix,desloc): dom(stack)));
  (bv_ireg_plus_d(ix,desloc): BV16);
  (dom({bv_ireg_plus_d(ix,desloc)|->rgs8(rr)})/\dom(stack) = {});
  (not(bv_ireg_plus_d(ix,desloc)|->rgs8(rr): stack));
  ("`Local hypotheses'" & mem<+{bv_ireg_plus_d(ix,desloc)|->rgs8(rr)}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->rgs8(rr)}) = BV16 & stack: POW(mem<+{bv_ireg_plus_d(ix,desloc)|->rgs8(rr)}) & not(stack = mem<+{bv_ireg_plus_d(ix,desloc)|->rgs8(rr)}) & ran(mem<+{bv_ireg_plus_d(ix,desloc)|->rgs8(rr)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(ix,desloc)|->rgs8(rr)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->rgs8(rr)}<+{address|->value}) = BV16));
  ("`LD_9IY_d0_r preconditions in this component'" & desloc: SCHAR & rr: (1..16)*{id_reg_8} & not(bv_ireg_plus_d(iy,desloc): dom(stack)));
  (bv_ireg_plus_d(iy,desloc): BV16);
  (dom({bv_ireg_plus_d(iy,desloc)|->rgs8(rr)})/\dom(stack) = {});
  (not(bv_ireg_plus_d(iy,desloc)|->rgs8(rr): stack));
  ("`Local hypotheses'" & mem<+{bv_ireg_plus_d(iy,desloc)|->rgs8(rr)}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->rgs8(rr)}) = BV16 & stack: POW(mem<+{bv_ireg_plus_d(iy,desloc)|->rgs8(rr)}) & not(stack = mem<+{bv_ireg_plus_d(iy,desloc)|->rgs8(rr)}) & ran(mem<+{bv_ireg_plus_d(iy,desloc)|->rgs8(rr)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(iy,desloc)|->rgs8(rr)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->rgs8(rr)}<+{address|->value}) = BV16));
  ("`LD_9HL0_n preconditions in this component'" & n0: SCHAR & not(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): dom(stack)));
  (schar_byte(n0): BYTE);
  (dom({byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->schar_byte(n0)})/\dom(stack) = {});
  (not(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->schar_byte(n0): stack));
  ("`Local hypotheses'" & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->schar_byte(n0)}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->schar_byte(n0)}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->schar_byte(n0)}) & not(stack = mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->schar_byte(n0)}) & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->schar_byte(n0)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->schar_byte(n0)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->schar_byte(n0)}<+{address|->value}) = BV16));
  ("`LD_9IX_d0_n preconditions in this component'" & desloc: SCHAR & n0: SCHAR & not(bv_ireg_plus_d(ix,desloc): dom(stack)));
  (dom({bv_ireg_plus_d(ix,desloc)|->schar_byte(n0)})/\dom(stack) = {});
  (not(bv_ireg_plus_d(ix,desloc)|->schar_byte(n0): stack));
  ("`Local hypotheses'" & mem<+{bv_ireg_plus_d(ix,desloc)|->schar_byte(n0)}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->schar_byte(n0)}) = BV16 & stack: POW(mem<+{bv_ireg_plus_d(ix,desloc)|->schar_byte(n0)}) & not(stack = mem<+{bv_ireg_plus_d(ix,desloc)|->schar_byte(n0)}) & ran(mem<+{bv_ireg_plus_d(ix,desloc)|->schar_byte(n0)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(ix,desloc)|->schar_byte(n0)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->schar_byte(n0)}<+{address|->value}) = BV16));
  ("`LD_9IY_d0_n preconditions in this component'" & desloc: SCHAR & n0: SCHAR & not(bv_ireg_plus_d(iy,desloc): dom(stack)));
  (dom({bv_ireg_plus_d(iy,desloc)|->schar_byte(n0)})/\dom(stack) = {});
  (not(bv_ireg_plus_d(iy,desloc)|->schar_byte(n0): stack));
  ("`Local hypotheses'" & mem<+{bv_ireg_plus_d(iy,desloc)|->schar_byte(n0)}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->schar_byte(n0)}) = BV16 & stack: POW(mem<+{bv_ireg_plus_d(iy,desloc)|->schar_byte(n0)}) & not(stack = mem<+{bv_ireg_plus_d(iy,desloc)|->schar_byte(n0)}) & ran(mem<+{bv_ireg_plus_d(iy,desloc)|->schar_byte(n0)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(iy,desloc)|->schar_byte(n0)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->schar_byte(n0)}<+{address|->value}) = BV16));
  (rgs8<+{1|->id_reg_8|->mem(mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{1|->id_reg_8|->mem(mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))}) = (1..16)*{id_reg_8});
  (rgs8<+{1|->id_reg_8|->mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{1|->id_reg_8|->mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))}) = (1..16)*{id_reg_8});
  ("`LD_A_9nn0 preconditions in this component'" & nn: USHORT);
  (rgs8<+{1|->id_reg_8|->mem(ushort_bv16(nn))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{1|->id_reg_8|->mem(ushort_bv16(nn))}) = (1..16)*{id_reg_8});
  ("`LD_9BC0_A preconditions in this component'" & not(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): dom(stack)));
  (byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16);
  (rgs8(1|->id_reg_8): BYTE);
  (dom({byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8)})/\dom(stack) = {});
  (not(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8): stack));
  ("`Local hypotheses'" & mem<+{byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8)}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8)}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8)}) & not(stack = mem<+{byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8)}) & ran(mem<+{byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8)}<+{address|->value}) = BV16));
  ("`LD_9DE0_A preconditions in this component'" & not(mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): dom(stack)));
  (byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16);
  (dom({byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8)})/\dom(stack) = {});
  (not(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8): stack));
  ("`Local hypotheses'" & mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8)}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8)}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8)}) & not(stack = mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8)}) & ran(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8)}<+{address|->value}) = BV16));
  ("`LD_9nn0_A preconditions in this component'" & nn: USHORT & not(ushort_bv16(nn): dom(stack)));
  (ushort_bv16(nn): BV16);
  (dom({ushort_bv16(nn)|->rgs8(1|->id_reg_8)})/\dom(stack) = {});
  (not(ushort_bv16(nn)|->rgs8(1|->id_reg_8): stack));
  ("`Local hypotheses'" & mem<+{ushort_bv16(nn)|->rgs8(1|->id_reg_8)}: BV16 +-> BYTE & dom(mem<+{ushort_bv16(nn)|->rgs8(1|->id_reg_8)}) = BV16 & stack: POW(mem<+{ushort_bv16(nn)|->rgs8(1|->id_reg_8)}) & not(stack = mem<+{ushort_bv16(nn)|->rgs8(1|->id_reg_8)}) & ran(mem<+{ushort_bv16(nn)|->rgs8(1|->id_reg_8)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{ushort_bv16(nn)|->rgs8(1|->id_reg_8)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{ushort_bv16(nn)|->rgs8(1|->id_reg_8)}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & new_interrupt: BYTE);
  (rgs8<+({1|->id_reg_8|->new_interrupt}\/{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(new_interrupt),is_zero(new_interrupt),0,iff2,0,bitget(rgs8(2|->id_reg_8),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->new_interrupt}\/{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(new_interrupt),is_zero(new_interrupt),0,iff2,0,bitget(rgs8(2|->id_reg_8),0))})) = (1..16)*{id_reg_8});
  (rgs8<+({1|->id_reg_8|->r_}\/{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(r_),is_zero(r_),0,iff2,0,bitget(rgs8(2|->id_reg_8),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->r_}\/{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(r_),is_zero(r_),0,iff2,0,bitget(rgs8(2|->id_reg_8),0))})) = (1..16)*{id_reg_8});
  "`Check that the invariant (i_: BYTE) is preserved by the operation - ref 3.4'";
  ("`LD_dd_nn preconditions in this component'" & dd: (1..5)*{id_reg_16} & nn: USHORT & not(dd = 5|->id_reg_16));
  ("`Local hypotheses'" & dd = 4|->id_reg_16);
  "`Check that the invariant (sp: BV16) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & not(dd = 4|->id_reg_16) & rh: (1..16)*{id_reg_8} & rl: (1..16)*{id_reg_8} & w1: BYTE & w2: BYTE & rh,rl = REG16_TO_REG8(dd) & bv16_byte(ushort_bv16(nn)) = w1|->w2);
  (rgs8<+({rh|->w1}\/{rl|->w2}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rh|->w1}\/{rl|->w2})) = (1..16)*{id_reg_8});
  ("`LD_IX_nn preconditions in this component'" & nn: USHORT);
  "`Check that the invariant (ix: BV16) is preserved by the operation - ref 3.4'";
  ("`LD_IY_nn preconditions in this component'" & nn: USHORT);
  "`Check that the invariant (iy: BV16) is preserved by the operation - ref 3.4'";
  ("`LD_HL_9nn0 preconditions in this component'" & nn: USHORT);
  (rgs8<+({13|->id_reg_8|->mem(ushort_bv16(add16USHORT(0,nn,1)))}\/{14|->id_reg_8|->mem(ushort_bv16(nn))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->mem(ushort_bv16(add16USHORT(0,nn,1)))}\/{14|->id_reg_8|->mem(ushort_bv16(nn))})) = (1..16)*{id_reg_8});
  ("`LD_dd_9nn0 preconditions in this component'" & dd: (1..5)*{id_reg_16} & nn: USHORT & not(dd = 5|->id_reg_16));
  (byte_bv16(mem(ushort_bv16(add16USHORT(0,nn,1))),mem(ushort_bv16(nn))): BV16);
  ("`Local hypotheses'" & not(dd = 4|->id_reg_16) & rh: (1..16)*{id_reg_8} & rl: (1..16)*{id_reg_8} & w1: BYTE & w2: BYTE & rh,rl = REG16_TO_REG8(dd) & w1 = mem(ushort_bv16(add16USHORT(0,nn,1))) & w2 = mem(ushort_bv16(nn)));
  ("`LD_IX_9nn0 preconditions in this component'" & nn: USHORT);
  ("`LD_IY_9nn0 preconditions in this component'" & nn: USHORT);
  ("`LD_9nn0_HL preconditions in this component'" & nn: USHORT & not(ushort_bv16(nn): dom(stack)) & not(ushort_bv16(add16USHORT(0,nn,1)): dom(stack)));
  ({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{ushort_bv16(nn)|->rgs8(14|->id_reg_8)}: BV16 +-> BYTE);
  (dom({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{ushort_bv16(nn)|->rgs8(14|->id_reg_8)}) = BV16);
  (dom({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{ushort_bv16(nn)|->rgs8(14|->id_reg_8)})/\dom(stack) = {});
  ("`Local hypotheses'" & mem<+({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{ushort_bv16(nn)|->rgs8(14|->id_reg_8)}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{ushort_bv16(nn)|->rgs8(14|->id_reg_8)})) = BV16 & stack: POW(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{ushort_bv16(nn)|->rgs8(14|->id_reg_8)})) & not(stack = mem<+({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{ushort_bv16(nn)|->rgs8(14|->id_reg_8)})) & ran(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{ushort_bv16(nn)|->rgs8(14|->id_reg_8)})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{ushort_bv16(nn)|->rgs8(14|->id_reg_8)})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{ushort_bv16(nn)|->rgs8(14|->id_reg_8)})<+{address|->value}) = BV16));
  ("`LD_9nn0_dd preconditions in this component'" & dd: (1..5)*{id_reg_16} & not(dd = 5|->id_reg_16) & nn: USHORT & not(schar_byte(nn): dom(stack)) & not(inc_BYTE(schar_byte(nn)): dom(stack)));
  ("`Local hypotheses'" & dd = 4|->id_reg_16 & vh: BYTE & vl: BYTE & bv16_byte(sp) = vh|->vl & {ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl}: BV16 +-> BYTE & ({ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl})~: BYTE +-> BV16 & dom({ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl}) = BV16);
  (dom({ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl})/\dom(stack) = {});
  ("`Local hypotheses'" & dd = 4|->id_reg_16 & vh: BYTE & vl: BYTE & bv16_byte(sp) = vh|->vl & {ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl}: BV16 +-> BYTE & ({ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl})~: BYTE +-> BV16 & dom({ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl}) = BV16 & mem<+({ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl})) = BV16 & stack: POW(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl})) & not(stack = mem<+({ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl})) & ran(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->vh}\/{ushort_bv16(nn)|->vl})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & not(dd = 4|->id_reg_16) & rh: (1..16)*{id_reg_8} & rl: (1..16)*{id_reg_8} & w1: SCHAR & w2: BYTE & rh,rl = REG16_TO_REG8(dd) & {ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)}: BV16 +-> BYTE & ({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)})~: BYTE +-> BV16 & dom({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)}) = BV16);
  "`Check that the invariant (i_o_ports: BYTE --> BYTE) is preserved by the operation - ref 3.4'";
  (dom({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)})/\dom(stack) = {});
  ("`Local hypotheses'" & not(dd = 4|->id_reg_16) & rh: (1..16)*{id_reg_8} & rl: (1..16)*{id_reg_8} & w1: SCHAR & w2: BYTE & rh,rl = REG16_TO_REG8(dd) & {ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)}: BV16 +-> BYTE & ({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)})~: BYTE +-> BV16 & dom({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)}) = BV16 & mem<+({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)})) = BV16 & stack: POW(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)})) & not(stack = mem<+({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)})) & ran(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->rgs8(rh)}\/{ushort_bv16(nn)|->rgs8(rl)})<+{address|->value}) = BV16));
  ("`LD_9nn0_IX preconditions in this component'" & nn: USHORT);
  ("`Local hypotheses'" & h_ix: BYTE & l_ix: BYTE & h_ix,l_ix = bv16_byte(ix) & not(ushort_bv16(nn): dom(stack)) & not(ushort_bv16(add16USHORT(0,nn,1)): dom(stack)));
  ({ushort_bv16(add16USHORT(0,nn,1))|->h_ix}\/{ushort_bv16(nn)|->l_ix}: BV16 +-> BYTE);
  (dom({ushort_bv16(add16USHORT(0,nn,1))|->h_ix}\/{ushort_bv16(nn)|->l_ix}) = BV16);
  (dom({ushort_bv16(add16USHORT(0,nn,1))|->h_ix}\/{ushort_bv16(nn)|->l_ix})/\dom(stack) = {});
  ("`Local hypotheses'" & h_ix: BYTE & l_ix: BYTE & h_ix,l_ix = bv16_byte(ix) & not(ushort_bv16(nn): dom(stack)) & not(ushort_bv16(add16USHORT(0,nn,1)): dom(stack)) & mem<+({ushort_bv16(add16USHORT(0,nn,1))|->h_ix}\/{ushort_bv16(nn)|->l_ix}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->h_ix}\/{ushort_bv16(nn)|->l_ix})) = BV16 & stack: POW(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->h_ix}\/{ushort_bv16(nn)|->l_ix})) & not(stack = mem<+({ushort_bv16(add16USHORT(0,nn,1))|->h_ix}\/{ushort_bv16(nn)|->l_ix})) & ran(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->h_ix}\/{ushort_bv16(nn)|->l_ix})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(add16USHORT(0,nn,1))|->h_ix}\/{ushort_bv16(nn)|->l_ix})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->h_ix}\/{ushort_bv16(nn)|->l_ix})<+{address|->value}) = BV16));
  ("`LD_9nn0_IY preconditions in this component'" & nn: USHORT);
  ("`Local hypotheses'" & h_iy: BYTE & l_iy: BYTE & h_iy,l_iy = bv16_byte(iy) & not(ushort_bv16(nn): dom(stack)) & not(ushort_bv16(add16USHORT(0,nn,1)): dom(stack)));
  ({ushort_bv16(add16USHORT(0,nn,1))|->h_iy}\/{ushort_bv16(nn)|->l_iy}: BV16 +-> BYTE);
  (dom({ushort_bv16(add16USHORT(0,nn,1))|->h_iy}\/{ushort_bv16(nn)|->l_iy}) = BV16);
  (dom({ushort_bv16(add16USHORT(0,nn,1))|->h_iy}\/{ushort_bv16(nn)|->l_iy})/\dom(stack) = {});
  ("`Local hypotheses'" & h_iy: BYTE & l_iy: BYTE & h_iy,l_iy = bv16_byte(iy) & not(ushort_bv16(nn): dom(stack)) & not(ushort_bv16(add16USHORT(0,nn,1)): dom(stack)) & mem<+({ushort_bv16(add16USHORT(0,nn,1))|->h_iy}\/{ushort_bv16(nn)|->l_iy}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->h_iy}\/{ushort_bv16(nn)|->l_iy})) = BV16 & stack: POW(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->h_iy}\/{ushort_bv16(nn)|->l_iy})) & not(stack = mem<+({ushort_bv16(add16USHORT(0,nn,1))|->h_iy}\/{ushort_bv16(nn)|->l_iy})) & ran(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->h_iy}\/{ushort_bv16(nn)|->l_iy})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(add16USHORT(0,nn,1))|->h_iy}\/{ushort_bv16(nn)|->l_iy})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,nn,1))|->h_iy}\/{ushort_bv16(nn)|->l_iy})<+{address|->value}) = BV16));
  ("`PUSH_qq preconditions in this component'" & qq: (1..5)*{id_reg_16} & not(qq = 4|->id_reg_16));
  ("`Local hypotheses'" & qqh: (1..16)*{id_reg_8} & qql: (1..16)*{id_reg_8} & REG16_TO_REG8(qq) = qqh|->qql & {ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)}: BV16 +-> BYTE & dom({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)}) = BV16 & mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)})) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)}): BV16 +-> BYTE & dom(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)})) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)}): POW(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)})) & not(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)}) = mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)})) & ran(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)})): POW(BYTE) & ran(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->rgs8(qql)}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->rgs8(qqh)})<+{address|->value}) = BV16));
  (ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)): BV16);
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & bv16_byte(ix) = wh|->wl & {ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh}: BV16 +-> BYTE & dom({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh}) = BV16 & mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh}): BV16 +-> BYTE & dom(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh}): POW(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})) & not(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh}) = mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})) & ran(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})): POW(BYTE) & ran(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & bv16_byte(iy) = wh|->wl & {ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh}: BV16 +-> BYTE & dom({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh}) = BV16 & mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh}): BV16 +-> BYTE & dom(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh}): POW(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})) & not(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh}) = mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})) & ran(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})): POW(BYTE) & ran(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->wl}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->wh})<+{address|->value}) = BV16));
  ("`POP_qq preconditions in this component'" & qq: (1..5)*{id_reg_16} & not(qq = 4|->id_reg_16));
  ("`Local hypotheses'" & qqh: (1..16)*{id_reg_8} & qql: (1..16)*{id_reg_8} & REG16_TO_REG8(qq) = qqh|->qql & {qql|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)))}\/{qqh|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)))}: (1..16)*{id_reg_8} +-> BYTE & dom({qql|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)))}\/{qqh|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)))}) = (1..16)*{id_reg_8});
  (rgs8<+({qql|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)))}\/{qqh|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({qql|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)))}\/{qqh|->mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)))})) = (1..16)*{id_reg_8});
  (ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16);
  ("`POP_IX preconditions in this component'" & sp: BV16);
  ("`Local hypotheses'" & nw8: BYTE & byte_bv16(mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))),mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)))) = nw8);
  (nw8: BV16);
  ("`POP_IY preconditions in this component'" & sp: BV16);
  (rgs8<+({9|->id_reg_8|->rgs8(13|->id_reg_8)}\/{10|->id_reg_8|->rgs8(14|->id_reg_8)}\/{13|->id_reg_8|->rgs8(9|->id_reg_8)}\/{14|->id_reg_8|->rgs8(10|->id_reg_8)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({9|->id_reg_8|->rgs8(13|->id_reg_8)}\/{10|->id_reg_8|->rgs8(14|->id_reg_8)}\/{13|->id_reg_8|->rgs8(9|->id_reg_8)}\/{14|->id_reg_8|->rgs8(10|->id_reg_8)})) = (1..16)*{id_reg_8});
  (rgs8<+({1|->id_reg_8|->rgs8(4|->id_reg_8)}\/{2|->id_reg_8|->rgs8(3|->id_reg_8)}\/{4|->id_reg_8|->rgs8(1|->id_reg_8)}\/{3|->id_reg_8|->rgs8(2|->id_reg_8)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->rgs8(4|->id_reg_8)}\/{2|->id_reg_8|->rgs8(3|->id_reg_8)}\/{4|->id_reg_8|->rgs8(1|->id_reg_8)}\/{3|->id_reg_8|->rgs8(2|->id_reg_8)})) = (1..16)*{id_reg_8});
  (rgs8<+({5|->id_reg_8|->rgs8(7|->id_reg_8)}\/{6|->id_reg_8|->rgs8(8|->id_reg_8)}\/{9|->id_reg_8|->rgs8(11|->id_reg_8)}\/{10|->id_reg_8|->rgs8(12|->id_reg_8)}\/{13|->id_reg_8|->rgs8(15|->id_reg_8)}\/{14|->id_reg_8|->rgs8(16|->id_reg_8)}\/{7|->id_reg_8|->rgs8(5|->id_reg_8)}\/{8|->id_reg_8|->rgs8(6|->id_reg_8)}\/{11|->id_reg_8|->rgs8(9|->id_reg_8)}\/{12|->id_reg_8|->rgs8(10|->id_reg_8)}\/{15|->id_reg_8|->rgs8(13|->id_reg_8)}\/{16|->id_reg_8|->rgs8(14|->id_reg_8)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({5|->id_reg_8|->rgs8(7|->id_reg_8)}\/{6|->id_reg_8|->rgs8(8|->id_reg_8)}\/{9|->id_reg_8|->rgs8(11|->id_reg_8)}\/{10|->id_reg_8|->rgs8(12|->id_reg_8)}\/{13|->id_reg_8|->rgs8(15|->id_reg_8)}\/{14|->id_reg_8|->rgs8(16|->id_reg_8)}\/{7|->id_reg_8|->rgs8(5|->id_reg_8)}\/{8|->id_reg_8|->rgs8(6|->id_reg_8)}\/{11|->id_reg_8|->rgs8(9|->id_reg_8)}\/{12|->id_reg_8|->rgs8(10|->id_reg_8)}\/{15|->id_reg_8|->rgs8(13|->id_reg_8)}\/{16|->id_reg_8|->rgs8(14|->id_reg_8)})) = (1..16)*{id_reg_8});
  ("`EX_9SP0_HL preconditions in this component'" & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}): POW(mem));
  ({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}: BV16 +-> BYTE);
  (dom({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}) = BV16);
  ("`Local hypotheses'" & mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}): BV16 +-> BYTE & dom(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}): POW(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})) & not(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}) = mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})) & ran(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})): POW(BYTE) & ran(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})<+{address|->value}) = BV16));
  (rgs8<+({13|->id_reg_8|->stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)))}\/{14|->id_reg_8|->stack(sp)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)))}\/{14|->id_reg_8|->stack(sp)})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & bv16_byte(ix) = wh|->wl & {ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}: BV16 +-> BYTE & dom({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}): POW(mem) & mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}): BV16 +-> BYTE & dom(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}): POW(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})) & not(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}) = mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})) & ran(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})): POW(BYTE) & ran(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})<+{address|->value}) = BV16));
  (byte_bv16(stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))),stack(sp)): BV16);
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & bv16_byte(iy) = wh|->wl & {ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}: BV16 +-> BYTE & dom({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}): POW(mem) & mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}): BV16 +-> BYTE & dom(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}): POW(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})) & not(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl}) = mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})) & ran(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})): POW(BYTE) & ran(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))|->wh}\/{sp|->wl})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))));
  (dom({byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))})/\dom(stack) = {});
  (not(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): stack));
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) & not(stack = mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) & ran(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}) = BV16));
  (rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{9|->id_reg_8|->dvn}\/{10|->id_reg_8|->evn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bit_not(is_zeroUSHORT(bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1)),0,bitget(rgs8(2|->id_reg_8),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{9|->id_reg_8|->dvn}\/{10|->id_reg_8|->evn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bit_not(is_zeroUSHORT(bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1)),0,bitget(rgs8(2|->id_reg_8),0))})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zeroUSHORT(bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0 & mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) & not(stack = mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) & ran(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}) = BV16));
  (rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{9|->id_reg_8|->dvn}\/{10|->id_reg_8|->evn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,0,0,bitget(rgs8(2|->id_reg_8),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{9|->id_reg_8|->dvn}\/{10|->id_reg_8|->evn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,0,0,bitget(rgs8(2|->id_reg_8),0))})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & not(is_zeroUSHORT(bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0) & mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) & not(stack = mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) & ran(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))));
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) & not(stack = mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) & ran(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zeroUSHORT(bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0 & mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) & not(stack = mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) & ran(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = bv16_byte(dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & not(is_zeroUSHORT(bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0) & mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) & not(stack = mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) & ran(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & zero = 1);
  ({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,bit_not(is_zeroUSHORT(bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1)),1,bitget(rgs8(2|->id_reg_8),0))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,bit_not(is_zeroUSHORT(bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1)),1,bitget(rgs8(2|->id_reg_8),0))}) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & not(zero = 1));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zeroUSHORT(bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0 & zero = 1);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zeroUSHORT(bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0 & not(zero = 1));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & not(is_zeroUSHORT(bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0) & not(zero = 1));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & zero = 1);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & not(zero = 1));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zeroUSHORT(bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0 & zero = 1);
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zeroUSHORT(bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0 & not(zero = 1));
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8UCHAR(0,byte_uchar(rgs8(1|->id_reg_8)),byte_uchar(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = bv16_byte(dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & not(is_zeroUSHORT(bv16_ushort(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0) & not(zero = 1));
  ("`Local hypotheses'" & result$0: BYTE & s0$0: BIT & z0$0: BIT & h0$0: BIT & pv0$0: BIT & n0$0: BIT & c0$0: BIT & daa_function(bitget(rgs8(2|->id_reg_8),1),bitget(rgs8(2|->id_reg_8),0),bitget(rgs8(2|->id_reg_8),4),rgs8(1|->id_reg_8)) = (result$0,c0$0)|->h0$0 & s0$0 = bv_get(result$0,7) & z0$0 = is_zero(result$0) & pv0$0 = parity_even_BYTE(result$0) & n0$0 = bitget(rgs8(2|->id_reg_8),1));
  (rgs8<+({1|->id_reg_8|->result$0}\/{get_new_flag_register_SZ_H_PvNC(rgs8,s0$0,z0$0,h0$0,pv0$0,n0$0,c0$0)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->result$0}\/{get_new_flag_register_SZ_H_PvNC(rgs8,s0$0,z0$0,h0$0,pv0$0,n0$0,c0$0)})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & result: BYTE & result = complement(rgs8(1|->id_reg_8)));
  (rgs8<+({1|->id_reg_8|->result}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),1,bitget(rgs8(2|->id_reg_8),2),1,bitget(rgs8(2|->id_reg_8),0))}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->result}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),1,bitget(rgs8(2|->id_reg_8),2),1,bitget(rgs8(2|->id_reg_8),0))})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & sum: UCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8UCHAR(0,0,byte_uchar(rgs8(1|->id_reg_8))));
  (rgs8<+({1|->id_reg_8|->uchar_byte(sum)}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,carry,1,carry)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->uchar_byte(sum)}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,carry,1,carry)})) = (1..16)*{id_reg_8});
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),bitget(rgs8(2|->id_reg_8),4),bitget(rgs8(2|->id_reg_8),2),0,bit_not(bitget(rgs8(2|->id_reg_8),0)))}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),bitget(rgs8(2|->id_reg_8),4),bitget(rgs8(2|->id_reg_8),2),0,bit_not(bitget(rgs8(2|->id_reg_8),0)))}) = (1..16)*{id_reg_8});
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),bitget(rgs8(2|->id_reg_8),4),bitget(rgs8(2|->id_reg_8),2),0,1)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),bitget(rgs8(2|->id_reg_8),4),bitget(rgs8(2|->id_reg_8),2),0,1)}) = (1..16)*{id_reg_8});
  "`Check that the invariant (iff1: BIT) is preserved by the operation - ref 3.4'";
  (1: BIT);
  "`Check that the invariant (im: BIT*BIT) is preserved by the operation - ref 3.4'";
  ("`IN_A_9n0 preconditions in this component'" & nn: UCHAR);
  ("`Local hypotheses'" & data_in: SCHAR);
  (rgs8<+{1|->id_reg_8|->schar_byte(data_in)}: (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{1|->id_reg_8|->schar_byte(data_in)}) = (1..16)*{id_reg_8});
  (i_o_ports<+{uchar_byte(nn)|->schar_byte(data_in)}: BYTE +-> BYTE);
  (dom(i_o_ports<+{uchar_byte(nn)|->schar_byte(data_in)}) = BYTE);
  ("`IN_r_9C0 preconditions in this component'" & rr: (1..16)*{id_reg_8});
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & negative = is_negative(data_in) & zero = is_zero(data_in) & half_carry = 0 & pv = parity_even_BYTE(data_in) & add_sub = 0 & carry = bitget(rgs8(2|->id_reg_8),0));
  (rgs8<+({rr|->data_in}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rr|->data_in}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8});
  (i_o_ports<+{rgs8(6|->id_reg_8)|->data_in}: BYTE +-> BYTE);
  (dom(i_o_ports<+{rgs8(6|->id_reg_8)|->data_in}) = BYTE);
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  (i_o_ports(rgs8(6|->id_reg_8)): BYTE);
  (dom({byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))})/\dom(stack) = {});
  (not(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8)): stack));
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) & not(stack = mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  (rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec_BYTE(rgs8(5|->id_reg_8))}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec_BYTE(rgs8(5|->id_reg_8))}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8});
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = 1 & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  (dom({byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in})/\dom(stack) = {});
  (not(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in: stack));
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = 1 & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1 & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) & not(stack = mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = 1 & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) & not(stack = mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) & not(stack = mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1 & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) & not(stack = mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) & not(stack = mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}<+{address|->value}) = BV16));
  ("`OUT_9n0_A preconditions in this component'" & nn: UCHAR);
  (i_o_ports<+{uchar_byte(nn)|->rgs8(1|->id_reg_8)}: BYTE +-> BYTE);
  (dom(i_o_ports<+{uchar_byte(nn)|->rgs8(1|->id_reg_8)}) = BYTE);
  ("`OUT_9C0_r preconditions in this component'" & rr: (1..16)*{id_reg_8});
  (i_o_ports<+{rgs8(rr)|->rgs8(6|->id_reg_8)}: BYTE +-> BYTE);
  (dom(i_o_ports<+{rgs8(rr)|->rgs8(6|->id_reg_8)}) = BYTE);
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) & not(stack = mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  (i_o_ports<+{rgs8(6|->id_reg_8)|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BYTE +-> BYTE);
  (dom(i_o_ports<+{rgs8(6|->id_reg_8)|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BYTE);
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1 & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) & not(stack = mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) & not(stack = mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) & not(stack = mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1 & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) & not(stack = mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = bv16_byte(dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1) & mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) = BV16 & stack: POW(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) & not(stack = mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) & ran(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}<+{address|->value}) = BV16));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high);
  ({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high}: BV16 +-> BYTE);
  (dom({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high}) = BV16);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high}): BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high})) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high}): BV16 +-> BYTE & dom(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high})) = BV16 & stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high}): POW(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high})) & not(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high}) = mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high})) & ran(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high})): POW(BYTE) & ran(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2))|->pc_low}\/{ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1))|->pc_high})<+{address|->value}) = BV16));
  (102: INSTRUCTION);
  ("`ext_INT preconditions in this component'" & iff1 = 1 & byte_bus: 0..255);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 199);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  ({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}: BV16 +-> BYTE);
  (dom({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}) = BV16);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 199 & mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): POW(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & not(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}) = mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & ran(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & ran(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16));
  "`Check that the invariant (pc: INSTRUCTION) is preserved by the operation - ref 3.4'";
  (byte_bus-199: INSTRUCTION);
  "`Check that the invariant (sp: BV16) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (r_: BYTE) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 207);
  "`Check that the invariant (i_o_ports: BYTE --> BYTE) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 207 & mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): POW(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & not(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}) = mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & ran(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & ran(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 215);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 215 & mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): POW(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & not(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}) = mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & ran(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & ran(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 223);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 223 & mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): POW(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & not(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}) = mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & ran(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & ran(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 231);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 231 & mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): POW(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & not(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}) = mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & ran(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & ran(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 239);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 239 & mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): POW(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & not(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}) = mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & ran(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & ran(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 247);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 247 & mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): POW(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & not(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}) = mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & ran(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & ran(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 255);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & byte_bus = 255 & mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): POW(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & not(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}) = mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & ran(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & ran(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16));
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & im = 0|->1);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & im = 0|->1 & mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): POW(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & not(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}) = mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & ran(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & ran(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16));
  (56: INSTRUCTION);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1);
  ("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1 & mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) = BV16 & stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}): POW(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & not(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high}) = mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})) & ran(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & ran(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(mem<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}: BV16 +-> BYTE & dom(stack<+({stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -1)))|->pc_low}\/{stack(ushort_bv16(add16USHORT(0,bv16_ushort(sp), -2)))|->pc_high})<+{address|->value}) = BV16));
  (bv16_ushort(byte_bv16(i_,bv_clear(rotateleft(uchar_byte(byte_bus)),0))): INSTRUCTION);
  (rgs8<+({1|->id_reg_8|->uchar_byte(255)}\/{2|->id_reg_8|->uchar_byte(255)}): (1..16)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->uchar_byte(255)}\/{2|->id_reg_8|->uchar_byte(255)})) = (1..16)*{id_reg_8});
  (byte_bv16(uchar_byte(255),uchar_byte(255)): BV16)
END
&
THEORY EnumerateX IS
  id_reg_8 == {a0,f0,f_0,a_0,b0,c0,b_0,c_0,d0,e0,d_0,e_0,h0,l0,h_0,l_0};
  id_reg_16 == {BC,DE,HL,SP,AF}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
