THEORY ProofList IS
  _f(1) & _f(2) & _f(3) & _f(66) & OUTDR.14,(_f(306) & _f(264) => _f(300));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTDR.13,(_f(306) & _f(264) => _f(299));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTDR.12,(_f(306) & _f(68) => _f(280));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTDR.11,(_f(306) & _f(68) => _f(279));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTDR.10,(_f(305) & _f(264) => _f(300));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTDR.9,(_f(305) & _f(264) => _f(299));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTDR.8,(_f(305) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTDR.7,(_f(305) & _f(68) => _f(280));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTDR.6,(_f(305) & _f(68) => _f(279));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTDR.5,(_f(303) & _f(87) => _f(277));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTDR.4,(_f(303) & _f(87) => _f(276));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTDR.3,(_f(303) & _f(87) => _f(275));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTDR.2,(_f(303) & _f(87) => _f(274));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTDR.1,(_f(303) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTD.10,(_f(304) & _f(264) => _f(300));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTD.9,(_f(304) & _f(264) => _f(299));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTD.8,(_f(304) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTD.7,(_f(304) & _f(68) => _f(280));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTD.6,(_f(304) & _f(68) => _f(279));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTD.5,(_f(303) & _f(87) => _f(277));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTD.4,(_f(303) & _f(87) => _f(276));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTD.3,(_f(303) & _f(87) => _f(275));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTD.2,(_f(303) & _f(87) => _f(274));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTD.1,(_f(303) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTIR.14,(_f(302) & _f(264) => _f(300));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTIR.13,(_f(302) & _f(264) => _f(299));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTIR.12,(_f(302) & _f(68) => _f(280));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTIR.11,(_f(302) & _f(68) => _f(279));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTIR.10,(_f(301) & _f(264) => _f(300));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTIR.9,(_f(301) & _f(264) => _f(299));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTIR.8,(_f(301) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTIR.7,(_f(301) & _f(68) => _f(280));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTIR.6,(_f(301) & _f(68) => _f(279));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTIR.5,(_f(297) & _f(87) => _f(277));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTIR.4,(_f(297) & _f(87) => _f(276));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTIR.3,(_f(297) & _f(87) => _f(275));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTIR.2,(_f(297) & _f(87) => _f(274));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTIR.1,(_f(297) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTI.10,(_f(298) & _f(264) => _f(300));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTI.9,(_f(298) & _f(264) => _f(299));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTI.8,(_f(298) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTI.7,(_f(298) & _f(68) => _f(280));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTI.6,(_f(298) & _f(68) => _f(279));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTI.5,(_f(297) & _f(87) => _f(277));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTI.4,(_f(297) & _f(87) => _f(276));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTI.3,(_f(297) & _f(87) => _f(275));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTI.2,(_f(297) & _f(87) => _f(274));
  _f(1) & _f(2) & _f(3) & _f(66) & OUTI.1,(_f(297) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(294) & OUT_9C0_r.3,(_f(264) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(294) & OUT_9C0_r.2,(_f(264) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(294) & OUT_9C0_r.1,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(291) & OUT_9n0_A.3,(_f(264) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(291) & OUT_9n0_A.2,(_f(264) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(291) & OUT_9n0_A.1,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & INDR.13,(_f(290) & _f(264) => _f(272));
  _f(1) & _f(2) & _f(3) & _f(66) & INDR.12,(_f(290) & _f(264) => _f(271));
  _f(1) & _f(2) & _f(3) & _f(66) & INDR.11,(_f(290) & _f(68) => _f(280));
  _f(1) & _f(2) & _f(3) & _f(66) & INDR.10,(_f(290) & _f(68) => _f(279));
  _f(1) & _f(2) & _f(3) & _f(66) & INDR.9,(_f(289) & _f(264) => _f(272));
  _f(1) & _f(2) & _f(3) & _f(66) & INDR.8,(_f(289) & _f(264) => _f(271));
  _f(1) & _f(2) & _f(3) & _f(66) & INDR.7,(_f(289) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & INDR.6,(_f(289) & _f(68) => _f(280));
  _f(1) & _f(2) & _f(3) & _f(66) & INDR.5,(_f(289) & _f(68) => _f(279));
  _f(1) & _f(2) & _f(3) & _f(66) & INDR.4,(_f(287) & _f(87) => _f(284));
  _f(1) & _f(2) & _f(3) & _f(66) & INDR.3,(_f(287) & _f(87) => _f(283));
  _f(1) & _f(2) & _f(3) & _f(66) & INDR.2,(_f(287) & _f(87) => _f(282));
  _f(1) & _f(2) & _f(3) & _f(66) & INDR.1,(_f(287) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(3) & _f(66) & IND.9,(_f(288) & _f(264) => _f(272));
  _f(1) & _f(2) & _f(3) & _f(66) & IND.8,(_f(288) & _f(264) => _f(271));
  _f(1) & _f(2) & _f(3) & _f(66) & IND.7,(_f(288) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & IND.6,(_f(288) & _f(68) => _f(280));
  _f(1) & _f(2) & _f(3) & _f(66) & IND.5,(_f(288) & _f(68) => _f(279));
  _f(1) & _f(2) & _f(3) & _f(66) & IND.4,(_f(287) & _f(87) => _f(284));
  _f(1) & _f(2) & _f(3) & _f(66) & IND.3,(_f(287) & _f(87) => _f(283));
  _f(1) & _f(2) & _f(3) & _f(66) & IND.2,(_f(287) & _f(87) => _f(282));
  _f(1) & _f(2) & _f(3) & _f(66) & IND.1,(_f(287) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(3) & _f(66) & INIR.13,(_f(286) & _f(264) => _f(272));
  _f(1) & _f(2) & _f(3) & _f(66) & INIR.12,(_f(286) & _f(264) => _f(271));
  _f(1) & _f(2) & _f(3) & _f(66) & INIR.11,(_f(286) & _f(68) => _f(280));
  _f(1) & _f(2) & _f(3) & _f(66) & INIR.10,(_f(286) & _f(68) => _f(279));
  _f(1) & _f(2) & _f(3) & _f(66) & INIR.9,(_f(285) & _f(264) => _f(272));
  _f(1) & _f(2) & _f(3) & _f(66) & INIR.8,(_f(285) & _f(264) => _f(271));
  _f(1) & _f(2) & _f(3) & _f(66) & INIR.7,(_f(285) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & INIR.6,(_f(285) & _f(68) => _f(280));
  _f(1) & _f(2) & _f(3) & _f(66) & INIR.5,(_f(285) & _f(68) => _f(279));
  _f(1) & _f(2) & _f(3) & _f(66) & INIR.4,(_f(281) & _f(87) => _f(284));
  _f(1) & _f(2) & _f(3) & _f(66) & INIR.3,(_f(281) & _f(87) => _f(283));
  _f(1) & _f(2) & _f(3) & _f(66) & INIR.2,(_f(281) & _f(87) => _f(282));
  _f(1) & _f(2) & _f(3) & _f(66) & INIR.1,(_f(281) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(3) & _f(66) & INI.10,(_f(278) & _f(264) => _f(272));
  _f(1) & _f(2) & _f(3) & _f(66) & INI.9,(_f(278) & _f(264) => _f(271));
  _f(1) & _f(2) & _f(3) & _f(66) & INI.8,(_f(278) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & INI.7,(_f(278) & _f(68) => _f(280));
  _f(1) & _f(2) & _f(3) & _f(66) & INI.6,(_f(278) & _f(68) => _f(279));
  _f(1) & _f(2) & _f(3) & _f(66) & INI.5,(_f(273) & _f(87) => _f(277));
  _f(1) & _f(2) & _f(3) & _f(66) & INI.4,(_f(273) & _f(87) => _f(276));
  _f(1) & _f(2) & _f(3) & _f(66) & INI.3,(_f(273) & _f(87) => _f(275));
  _f(1) & _f(2) & _f(3) & _f(66) & INI.2,(_f(273) & _f(87) => _f(274));
  _f(1) & _f(2) & _f(3) & _f(66) & INI.1,(_f(273) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(267) & IN_r_9C0.5,(_f(268) & _f(264) => _f(272));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(267) & IN_r_9C0.4,(_f(268) & _f(264) => _f(271));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(267) & IN_r_9C0.3,(_f(268) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(267) & IN_r_9C0.2,(_f(268) & _f(68) => _f(270));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(267) & IN_r_9C0.1,(_f(268) & _f(68) => _f(269));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(260) & IN_A_9n0.5,(_f(261) & _f(264) => _f(266));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(260) & IN_A_9n0.4,(_f(261) & _f(264) => _f(265));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(260) & IN_A_9n0.3,(_f(261) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(260) & IN_A_9n0.2,(_f(261) & _f(68) => _f(263));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(260) & IN_A_9n0.1,(_f(261) & _f(68) => _f(262));
  _f(1) & _f(2) & _f(3) & _f(66) & HALT.1,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & NOP.1,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & SCF.3,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & SCF.2,(_f(68) => _f(259));
  _f(1) & _f(2) & _f(3) & _f(66) & SCF.1,(_f(68) => _f(258));
  _f(1) & _f(2) & _f(3) & _f(66) & CCF.3,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & CCF.2,(_f(68) => _f(257));
  _f(1) & _f(2) & _f(3) & _f(66) & CCF.1,(_f(68) => _f(256));
  _f(1) & _f(2) & _f(3) & _f(66) & NEG.3,(_f(253) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & NEG.2,(_f(253) & _f(68) => _f(255));
  _f(1) & _f(2) & _f(3) & _f(66) & NEG.1,(_f(253) & _f(68) => _f(254));
  _f(1) & _f(2) & _f(3) & _f(66) & CPL.3,(_f(250) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & CPL.2,(_f(250) & _f(68) => _f(252));
  _f(1) & _f(2) & _f(3) & _f(66) & CPL.1,(_f(250) & _f(68) => _f(251));
  _f(1) & _f(2) & _f(3) & _f(66) & DAA.3,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & DAA.2,(_f(68) => _f(249));
  _f(1) & _f(2) & _f(3) & _f(66) & DAA.1,(_f(68) => _f(248));
  _f(1) & _f(2) & _f(3) & _f(66) & CPDR.7,(_f(247) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & CPDR.6,(_f(244) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & CPDR.5,(_f(244) & _f(68) => _f(240));
  _f(1) & _f(2) & _f(3) & _f(66) & CPDR.4,(_f(244) & _f(68) => _f(239));
  _f(1) & _f(2) & _f(3) & _f(66) & CPDR.3,(_f(246) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & CPDR.2,(_f(246) & _f(68) => _f(240));
  _f(1) & _f(2) & _f(3) & _f(66) & CPDR.1,(_f(246) & _f(68) => _f(239));
  _f(1) & _f(2) & _f(3) & _f(66) & CPD.4,(_f(245) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & CPD.3,(_f(244) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & CPD.2,(_f(244) & _f(68) => _f(240));
  _f(1) & _f(2) & _f(3) & _f(66) & CPD.1,(_f(244) & _f(68) => _f(239));
  _f(1) & _f(2) & _f(3) & _f(66) & CPIR.7,(_f(243) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & CPIR.6,(_f(238) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & CPIR.5,(_f(238) & _f(68) => _f(240));
  _f(1) & _f(2) & _f(3) & _f(66) & CPIR.4,(_f(238) & _f(68) => _f(239));
  _f(1) & _f(2) & _f(3) & _f(66) & CPIR.3,(_f(242) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & CPIR.2,(_f(242) & _f(68) => _f(240));
  _f(1) & _f(2) & _f(3) & _f(66) & CPIR.1,(_f(242) & _f(68) => _f(239));
  _f(1) & _f(2) & _f(3) & _f(66) & CPI.4,(_f(241) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & CPI.3,(_f(238) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & CPI.2,(_f(238) & _f(68) => _f(240));
  _f(1) & _f(2) & _f(3) & _f(66) & CPI.1,(_f(238) & _f(68) => _f(239));
  _f(1) & _f(2) & _f(3) & _f(66) & LDDR.9,(_f(237) & _f(68) => _f(232));
  _f(1) & _f(2) & _f(3) & _f(66) & LDDR.8,(_f(237) & _f(68) => _f(231));
  _f(1) & _f(2) & _f(3) & _f(66) & LDDR.7,(_f(236) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & LDDR.6,(_f(236) & _f(68) => _f(232));
  _f(1) & _f(2) & _f(3) & _f(66) & LDDR.5,(_f(236) & _f(68) => _f(231));
  _f(1) & _f(2) & _f(3) & _f(66) & LDDR.4,(_f(234) & _f(87) => _f(226));
  _f(1) & _f(2) & _f(3) & _f(66) & LDDR.3,(_f(234) & _f(87) => _f(225));
  _f(1) & _f(2) & _f(3) & _f(66) & LDDR.2,(_f(234) & _f(87) => _f(224));
  _f(1) & _f(2) & _f(3) & _f(66) & LDDR.1,(_f(234) & _f(87) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(66) & LDD.7,(_f(235) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & LDD.6,(_f(235) & _f(68) => _f(229));
  _f(1) & _f(2) & _f(3) & _f(66) & LDD.5,(_f(235) & _f(68) => _f(228));
  _f(1) & _f(2) & _f(3) & _f(66) & LDD.4,(_f(234) & _f(87) => _f(226));
  _f(1) & _f(2) & _f(3) & _f(66) & LDD.3,(_f(234) & _f(87) => _f(225));
  _f(1) & _f(2) & _f(3) & _f(66) & LDD.2,(_f(234) & _f(87) => _f(224));
  _f(1) & _f(2) & _f(3) & _f(66) & LDD.1,(_f(234) & _f(87) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(66) & LDIR.9,(_f(233) & _f(68) => _f(232));
  _f(1) & _f(2) & _f(3) & _f(66) & LDIR.8,(_f(233) & _f(68) => _f(231));
  _f(1) & _f(2) & _f(3) & _f(66) & LDIR.7,(_f(230) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & LDIR.6,(_f(230) & _f(68) => _f(232));
  _f(1) & _f(2) & _f(3) & _f(66) & LDIR.5,(_f(230) & _f(68) => _f(231));
  _f(1) & _f(2) & _f(3) & _f(66) & LDIR.4,(_f(223) & _f(87) => _f(226));
  _f(1) & _f(2) & _f(3) & _f(66) & LDIR.3,(_f(223) & _f(87) => _f(225));
  _f(1) & _f(2) & _f(3) & _f(66) & LDIR.2,(_f(223) & _f(87) => _f(224));
  _f(1) & _f(2) & _f(3) & _f(66) & LDIR.1,(_f(223) & _f(87) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(66) & LDI.7,(_f(227) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & LDI.6,(_f(227) & _f(68) => _f(229));
  _f(1) & _f(2) & _f(3) & _f(66) & LDI.5,(_f(227) & _f(68) => _f(228));
  _f(1) & _f(2) & _f(3) & _f(66) & LDI.4,(_f(223) & _f(87) => _f(226));
  _f(1) & _f(2) & _f(3) & _f(66) & LDI.3,(_f(223) & _f(87) => _f(225));
  _f(1) & _f(2) & _f(3) & _f(66) & LDI.2,(_f(223) & _f(87) => _f(224));
  _f(1) & _f(2) & _f(3) & _f(66) & LDI.1,(_f(223) & _f(87) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(66) & EX_9SP0_IY.3,(_f(222) & _f(157) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(66) & EX_9SP0_IY.2,(_f(222) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & EX_9SP0_IY.1,(_f(221) & _f(87) => _f(218));
  _f(1) & _f(2) & _f(3) & _f(66) & EX_9SP0_IX.3,(_f(219) & _f(155) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(66) & EX_9SP0_IX.2,(_f(219) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & EX_9SP0_IX.1,(_f(217) & _f(87) => _f(218));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(210) & EX_9SP0_HL.6,(_f(214) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(210) & EX_9SP0_HL.5,(_f(214) & _f(68) => _f(216));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(210) & EX_9SP0_HL.4,(_f(214) & _f(68) => _f(215));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(210) & EX_9SP0_HL.3,(_f(87) => _f(213));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(210) & EX_9SP0_HL.2,(_f(87) => _f(212));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(210) & EX_9SP0_HL.1,(_f(87) => _f(211));
  _f(1) & _f(2) & _f(3) & _f(66) & EXX.3,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & EXX.2,(_f(68) => _f(209));
  _f(1) & _f(2) & _f(3) & _f(66) & EXX.1,(_f(68) => _f(208));
  _f(1) & _f(2) & _f(3) & _f(66) & EX_AF_AF_.3,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & EX_AF_AF_.2,(_f(68) => _f(207));
  _f(1) & _f(2) & _f(3) & _f(66) & EX_AF_AF_.1,(_f(68) => _f(206));
  _f(1) & _f(2) & _f(3) & _f(66) & EX_DE_HL.3,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & EX_DE_HL.2,(_f(68) => _f(205));
  _f(1) & _f(2) & _f(3) & _f(66) & EX_DE_HL.1,(_f(68) => _f(204));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(203) & POP_IY.3,(_f(201) & _f(157) => _f(202));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(203) & POP_IY.2,(_f(201) & _f(150) => _f(199));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(203) & POP_IY.1,(_f(201) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(200) & POP_IX.3,(_f(201) & _f(155) => _f(202));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(200) & POP_IX.2,(_f(201) & _f(150) => _f(199));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(200) & POP_IX.1,(_f(201) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(195) & POP_qq.4,(_f(196) & _f(150) => _f(199));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(195) & POP_qq.3,(_f(196) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(195) & POP_qq.2,(_f(196) & _f(68) => _f(198));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(195) & POP_qq.1,(_f(196) & _f(68) => _f(197));
  _f(1) & _f(2) & _f(3) & _f(66) & PUSH_IY.3,(_f(194) & _f(150) => _f(189));
  _f(1) & _f(2) & _f(3) & _f(66) & PUSH_IY.2,(_f(194) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & PUSH_IY.1,(_f(193) & _f(87) => _f(191));
  _f(1) & _f(2) & _f(3) & _f(66) & PUSH_IX.3,(_f(192) & _f(150) => _f(189));
  _f(1) & _f(2) & _f(3) & _f(66) & PUSH_IX.2,(_f(192) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & PUSH_IX.1,(_f(190) & _f(87) => _f(191));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(185) & PUSH_qq.3,(_f(188) & _f(150) => _f(189));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(185) & PUSH_qq.2,(_f(188) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(185) & PUSH_qq.1,(_f(186) & _f(87) => _f(187));
  _f(1) & _f(2) & _f(3) & _f(66) & LD_SP_IY.1,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & LD_SP_IX.1,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & LD_SP_HL.2,(_f(150) => _f(88));
  _f(1) & _f(2) & _f(3) & _f(66) & LD_SP_HL.1,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(179) & LD_9nn0_IY.4,(_f(184) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(179) & LD_9nn0_IY.3,(_f(180) & _f(87) => _f(183));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(179) & LD_9nn0_IY.2,(_f(180) & _f(87) => _f(182));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(179) & LD_9nn0_IY.1,(_f(180) & _f(87) => _f(181));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(173) & LD_9nn0_IX.4,(_f(178) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(173) & LD_9nn0_IX.3,(_f(174) & _f(87) => _f(177));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(173) & LD_9nn0_IX.2,(_f(174) & _f(87) => _f(176));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(173) & LD_9nn0_IX.1,(_f(174) & _f(87) => _f(175));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(171) & LD_9nn0_dd.1,(_f(172) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(166) & LD_9nn0_HL.4,(_f(170) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(166) & LD_9nn0_HL.3,(_f(87) => _f(169));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(166) & LD_9nn0_HL.2,(_f(87) => _f(168));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(166) & LD_9nn0_HL.1,(_f(87) => _f(167));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(165) & LD_IY_9nn0.2,(_f(157) => _f(162));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(165) & LD_IY_9nn0.1,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(164) & LD_IX_9nn0.2,(_f(155) => _f(162));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(164) & LD_IX_9nn0.1,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(161) & LD_dd_9nn0.4,(_f(163) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(161) & LD_dd_9nn0.3,(_f(163) & _f(68) => _f(153));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(161) & LD_dd_9nn0.2,(_f(163) & _f(68) => _f(152));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(161) & LD_dd_9nn0.1,(_f(149) & _f(150) => _f(162));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(158) & LD_HL_9nn0.3,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(158) & LD_HL_9nn0.2,(_f(68) => _f(160));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(158) & LD_HL_9nn0.1,(_f(68) => _f(159));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(156) & LD_IY_nn.2,(_f(157) => _f(143));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(156) & LD_IY_nn.1,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(154) & LD_IX_nn.2,(_f(155) => _f(143));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(154) & LD_IX_nn.1,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(148) & LD_dd_nn.4,(_f(151) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(148) & LD_dd_nn.3,(_f(151) & _f(68) => _f(153));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(148) & LD_dd_nn.2,(_f(151) & _f(68) => _f(152));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(148) & LD_dd_nn.1,(_f(149) & _f(150) => _f(143));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(142) & LD_9nn0_A.6,(_f(147) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(142) & LD_9nn0_A.5,(_f(87) => _f(146));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(142) & LD_9nn0_A.4,(_f(87) => _f(145));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(142) & LD_9nn0_A.3,(_f(87) => _f(144));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(142) & LD_9nn0_A.2,(_f(87) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(142) & LD_9nn0_A.1,(_f(87) => _f(143));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(136) & LD_9DE0_A.6,(_f(141) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(136) & LD_9DE0_A.5,(_f(87) => _f(140));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(136) & LD_9DE0_A.4,(_f(87) => _f(139));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(136) & LD_9DE0_A.3,(_f(87) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(136) & LD_9DE0_A.2,(_f(87) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(136) & LD_9DE0_A.1,(_f(87) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(129) & LD_9BC0_A.6,(_f(135) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(129) & LD_9BC0_A.5,(_f(87) => _f(134));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(129) & LD_9BC0_A.4,(_f(87) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(129) & LD_9BC0_A.3,(_f(87) => _f(132));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(129) & LD_9BC0_A.2,(_f(87) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(129) & LD_9BC0_A.1,(_f(87) => _f(130));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(126) & LD_A_9nn0.3,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(126) & LD_A_9nn0.2,(_f(68) => _f(128));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(126) & LD_A_9nn0.1,(_f(68) => _f(127));
  _f(1) & _f(2) & _f(3) & _f(66) & LD_A_9DE0.3,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & LD_A_9DE0.2,(_f(68) => _f(125));
  _f(1) & _f(2) & _f(3) & _f(66) & LD_A_9DE0.1,(_f(68) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(66) & LD_A_9BC0.3,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & LD_A_9BC0.2,(_f(68) => _f(123));
  _f(1) & _f(2) & _f(3) & _f(66) & LD_A_9BC0.1,(_f(68) => _f(122));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(117) & LD_9IY_d0_n.6,(_f(121) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(117) & LD_9IY_d0_n.5,(_f(87) => _f(120));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(117) & LD_9IY_d0_n.4,(_f(87) => _f(119));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(117) & LD_9IY_d0_n.3,(_f(87) => _f(118));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(117) & LD_9IY_d0_n.2,(_f(87) => _f(107));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(117) & LD_9IY_d0_n.1,(_f(87) => _f(101));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(112) & LD_9IX_d0_n.6,(_f(116) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(112) & LD_9IX_d0_n.5,(_f(87) => _f(115));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(112) & LD_9IX_d0_n.4,(_f(87) => _f(114));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(112) & LD_9IX_d0_n.3,(_f(87) => _f(113));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(112) & LD_9IX_d0_n.2,(_f(87) => _f(107));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(112) & LD_9IX_d0_n.1,(_f(87) => _f(95));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(106) & LD_9HL0_n.6,(_f(111) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(106) & LD_9HL0_n.5,(_f(87) => _f(110));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(106) & LD_9HL0_n.4,(_f(87) => _f(109));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(106) & LD_9HL0_n.3,(_f(87) => _f(108));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(106) & LD_9HL0_n.2,(_f(87) => _f(107));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(106) & LD_9HL0_n.1,(_f(87) => _f(88));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(100) & LD_9IY_d0_r.6,(_f(105) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(100) & LD_9IY_d0_r.5,(_f(87) => _f(104));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(100) & LD_9IY_d0_r.4,(_f(87) => _f(103));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(100) & LD_9IY_d0_r.3,(_f(87) => _f(102));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(100) & LD_9IY_d0_r.2,(_f(87) => _f(89));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(100) & LD_9IY_d0_r.1,(_f(87) => _f(101));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(94) & LD_9IX_d0_r.6,(_f(99) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(94) & LD_9IX_d0_r.5,(_f(87) => _f(98));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(94) & LD_9IX_d0_r.4,(_f(87) => _f(97));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(94) & LD_9IX_d0_r.3,(_f(87) => _f(96));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(94) & LD_9IX_d0_r.2,(_f(87) => _f(89));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(94) & LD_9IX_d0_r.1,(_f(87) => _f(95));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(86) & LD_9HL0_r.6,(_f(93) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(86) & LD_9HL0_r.5,(_f(87) => _f(92));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(86) & LD_9HL0_r.4,(_f(87) => _f(91));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(86) & LD_9HL0_r.3,(_f(87) => _f(90));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(86) & LD_9HL0_r.2,(_f(87) => _f(89));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(86) & LD_9HL0_r.1,(_f(87) => _f(88));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(83) & LD_r_9IY_d0.3,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(83) & LD_r_9IY_d0.2,(_f(68) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(83) & LD_r_9IY_d0.1,(_f(68) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(80) & LD_r_9IX_d0.3,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(80) & LD_r_9IX_d0.2,(_f(68) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(80) & LD_r_9IX_d0.1,(_f(68) => _f(81));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(76) & LD_r_9HL0.3,(_f(77) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(76) & LD_r_9HL0.2,(_f(77) & _f(68) => _f(79));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(76) & LD_r_9HL0.1,(_f(77) & _f(68) => _f(78));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(73) & LD_r_n_.3,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(73) & LD_r_n_.2,(_f(68) => _f(75));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(73) & LD_r_n_.1,(_f(68) => _f(74));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(67) & LD_r_r_.3,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(67) & LD_r_r_.2,(_f(68) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(66) & _f(67) & LD_r_r_.1,(_f(68) => _f(69));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.30,(_f(64) => _f(65));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.29,(_f(62) => _f(63));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.28,(_f(60) => _f(61));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.27,(_f(58) => _f(59));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.26,(_f(56) => _f(57));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.25,(_f(54) => _f(55));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.24,(_f(52) => _f(53));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.23,(_f(50) => _f(51));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.22,(_f(48) => _f(49));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.21,(_f(46) => _f(47));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.20,(_f(44) => _f(45));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.19,(_f(42) => _f(43));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.18,(_f(40) => _f(41));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.17,(_f(38) => _f(39));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.16,(_f(36) => _f(37));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.15,(_f(34) => _f(35));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.14,(_f(32) => _f(33));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.13,(_f(30) => _f(31));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.12,(_f(28) => _f(29));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.11,(_f(26) => _f(27));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.10,(_f(24) => _f(25));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.9,(_f(22) => _f(23));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.8,(_f(20) => _f(21));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.7,(_f(18) => _f(19));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.6,(_f(16) => _f(17));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.5,(_f(14) => _f(15));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.4,(_f(9) & _f(12) => _f(13));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.3,(_f(9) & _f(10) => _f(11));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.2,(_f(4) & _f(7) => _f(8));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.1,(_f(4) & _f(5) => _f(6))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & SCHAR_LENGTH: INTEGER & 0<=SCHAR_LENGTH & SCHAR_LENGTH = 8 & NB_SCHARS: INTEGER & 0<=NB_SCHARS & NB_SCHARS = 2**SCHAR_LENGTH & SCHAR = -128..127 & SCHAR_POSITION = 0..SCHAR_LENGTH-1 & UCHAR = 0..255 & SSHORTINT_LENGTH: INTEGER & 0<=SSHORTINT_LENGTH & SSHORTINT_LENGTH = 16 & NB_SSHORTINTS: INTEGER & 0<=NB_SSHORTINTS & NB_SSHORTINTS = 2**SSHORTINT_LENGTH & SSHORTINT = -32768..32767 & SSHORTINT_POSITION = 0..SSHORTINT_LENGTH-1 & BV16: POW(BIT_VECTOR) & BV16 = SET(vv).(vv: BIT_VECTOR & size(vv) = SSHORTINT_LENGTH) & BYTE_TO_UCHAR: BYTE +-> UCHAR & dom(BYTE_TO_UCHAR) = BYTE & BYTE_TO_UCHAR = %v0.(v0: BYTE | 128*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & UCHAR_TO_BYTE: UCHAR +-> BYTE & dom(UCHAR_TO_BYTE) = UCHAR & UCHAR_TO_BYTE = BYTE_TO_UCHAR~ & USHORTINT = 0..65535 & NB_INSTRUCTIONS: INTEGER & 0<=NB_INSTRUCTIONS & INST_SZ: INTEGER & 0<=INST_SZ & INST_SZ = 16 & NB_INSTRUCTIONS = 2**INST_SZ & INSTRUCTION_MAX = NB_INSTRUCTIONS-1 & INSTRUCTION = USHORTINT & INSTRUCTION_NEXT: USHORTINT +-> USHORTINT & dom(INSTRUCTION_NEXT) = USHORTINT & INSTRUCTION_NEXT = %w1.(w1: USHORTINT | (w1+1) mod 65535) & INSTRUCTION_JUMP = %(p0,e0).(p0: INSTRUCTION & e0: -126..129 | (p0+e0) mod 65535) & BYTE_TO_SCHAR: BYTE +-> SCHAR & dom(BYTE_TO_SCHAR) = BYTE & BYTE_TO_SCHAR = %v0.(v0: BYTE | (-128)*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & SCHAR_TO_BYTE: SCHAR +-> BYTE & dom(SCHAR_TO_BYTE) = SCHAR & SCHAR_TO_BYTE = BYTE_TO_SCHAR~ & BV16_TO_SSHORTINT: BV16 +-> SSHORTINT & dom(BV16_TO_SSHORTINT) = BV16 & BV16_TO_SSHORTINT = %v0.(v0: BV16 | (-32768)*v0(15)+16384*v0(14)+8192*v0(13)+4096*v0(12)+2048*v0(11)+1024*v0(10)+512*v0(9)+256*v0(8)+128*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & SSHORTINT_TO_BV16: SSHORTINT +-> BV16 & dom(SSHORTINT_TO_BV16) = SSHORTINT & SSHORTINT_TO_BV16 = BV16_TO_SSHORTINT~ & BYTE_TO_BV16: BYTE*BYTE +-> BV16 & dom(BYTE_TO_BV16) = BYTE*BYTE & BYTE_TO_BV16 = %(v1,v2).(v1: BV16 & v2: BV16 | {0|->v2(0)}\/{1|->v2(1)}\/{2|->v2(2)}\/{3|->v2(3)}\/{4|->v2(4)}\/{5|->v2(5)}\/{6|->v2(6)}\/{7|->v2(7)}\/{8|->v1(0)}\/{9|->v1(1)}\/{10|->v1(2)}\/{11|->v1(3)}\/{12|->v1(4)}\/{13|->v1(5)}\/{14|->v1(6)}\/{15|->v1(7)}) & BV16_TO_BYTE: BV16 +-> BYTE*BYTE & dom(BV16_TO_BYTE) = BV16 & BV16_TO_BYTE = BYTE_TO_BV16~ & SCHAR_TO_SSHORTINT: SCHAR*SCHAR +-> SSHORTINT & dom(SCHAR_TO_SSHORTINT) = SCHAR*SCHAR & SCHAR_TO_SSHORTINT = %(w1,w2).(w1: SCHAR & w2: SCHAR | BV16_TO_SSHORTINT(BYTE_TO_BV16(SCHAR_TO_BYTE(w1),SCHAR_TO_BYTE(w2)))) & SSHORTINT_TO_SCHAR: SSHORTINT +-> SCHAR*SCHAR & dom(SSHORTINT_TO_SCHAR) = SSHORTINT & SSHORTINT_TO_SCHAR = SCHAR_TO_SSHORTINT~ & BV16_TO_USHORTINT: BV16 +-> USHORTINT & dom(BV16_TO_USHORTINT) = BV16 & BV16_TO_USHORTINT = %v0.(v0: BV16 | 32768*v0(15)+16384*v0(14)+8192*v0(13)+4096*v0(12)+2048*v0(11)+1024*v0(10)+512*v0(9)+256*v0(8)+128*v0(7)+64*v0(6)+32*v0(5)+16*v0(4)+8*v0(3)+4*v0(2)+2*v0(1)+v0(0)) & USHORTINT_TO_BV16: USHORTINT +-> BV16 & dom(USHORTINT_TO_BV16) = USHORTINT & USHORTINT_TO_BV16 = BV16_TO_USHORTINT~ & parity_bit_from_BYTE: BIT_VECTOR +-> BIT & dom(parity_bit_from_BYTE) = BIT_VECTOR & parity_bit_from_BYTE = %bv.(bv: BIT_VECTOR | SIGMA(idx).(idx: dom(bv) | bv(idx)) mod 2) & SSHORTINT_TO_USHORTINT: SSHORTINT +-> USHORTINT & dom(SSHORTINT_TO_USHORTINT) = SSHORTINT & SSHORTINT_TO_USHORTINT = %v0.(v0: SSHORTINT | v0-32768) & USHORTINT_TO_SSHORTINT: USHORTINT +-> SSHORTINT & dom(USHORTINT_TO_SSHORTINT) = USHORTINT & USHORTINT_TO_SSHORTINT = SSHORTINT_TO_USHORTINT~ & BIT = 0..1 & bit_not: BIT +-> BIT & dom(bit_not) = BIT & !bb.(bb: BIT => bit_not(bb) = 1-bb) & bit_and: BIT*BIT +-> BIT & dom(bit_and) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_and(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_and(b1,b2) = 1) & b2 = 1) & bit_or: BIT*BIT +-> BIT & dom(bit_or) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_or(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_or(b1,b2) = 1) or b2 = 1) & bit_xor: BIT*BIT +-> BIT & dom(bit_xor) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_xor(b1,b2) = 1 => not(b1 = b2)) & (not(b1 = b2) => bit_xor(b1,b2) = 1)) & bool_to_bit: BOOL +-> BIT & dom(bool_to_bit) = BOOL & bool_to_bit = {TRUE|->1}\/{FALSE|->0} & BIT_VECTOR = SET(bt).(bt: NATURAL +-> BIT)-{{}} & bv_size: BIT_VECTOR +-> NATURAL-{0} & dom(bv_size) = BIT_VECTOR & bv_size = %bv.(bv: BIT_VECTOR | size(bv)) & BV_INDX: BIT_VECTOR +-> POW(NATURAL) & dom(BV_INDX) = BIT_VECTOR & BV_INDX = %bv.(bv: BIT_VECTOR | 0..bv_size(bv)-1) & bv_catenate: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_catenate) = BIT_VECTOR*BIT_VECTOR & bv_catenate = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR | v1^v2) & bv_sub: BIT_VECTOR*NATURAL*NATURAL +-> BIT_VECTOR & dom(bv_sub) = BIT_VECTOR*NATURAL*NATURAL & bv_sub = %(bv,low,high).(bv: BIT_VECTOR & low: BV_INDX(bv) & high: BV_INDX(bv) & low<=high | low..high<|bv) & bv_zero: NATURAL-{0} +-> BIT_VECTOR & dom(bv_zero) = NATURAL-{0} & bv_zero = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (0..sz)*{0}) & bv_one: NATURAL-{0} +-> BIT_VECTOR & dom(bv_one) = NATURAL-{0} & bv_one = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (0..sz)*{1}) & bv_not: BIT_VECTOR +-> BIT_VECTOR & dom(bv_not) = BIT_VECTOR & bv_not = %v1.(v1: BIT_VECTOR | %idx.(idx: BV_INDX(v1) | bit_not(v1(idx)))) & bv_and: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_and) = BIT_VECTOR*BIT_VECTOR & bv_and = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: BV_INDX(v1) | bit_and(v1(idx),v2(idx)))) & bv_or: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_or) = BIT_VECTOR*BIT_VECTOR & bv_or = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: BV_INDX(v1) | bit_or(v1(idx),v2(idx)))) & bv_xor: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_xor) = BIT_VECTOR*BIT_VECTOR & bv_xor = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: BV_INDX(v1) | bit_xor(v1(idx),v2(idx)))) & bv_at: BIT_VECTOR*NATURAL +-> BIT & dom(bv_at) = BIT_VECTOR*NATURAL & bv_at = %(v1,idx).(v1: BIT_VECTOR & idx: BV_INDX(v1) | v1(idx)) & bv_set: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_set) = BIT_VECTOR*NATURAL & bv_set = %(v1,idx).(v1: BIT_VECTOR & idx: BV_INDX(v1) | v1<+{idx|->1}) & bv_clear: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_clear) = BIT_VECTOR*NATURAL & bv_clear = %(v1,idx).(v1: BIT_VECTOR & idx: BV_INDX(v1) | v1<+{idx|->0}) & bv_put: BIT_VECTOR*NATURAL*BIT +-> BIT_VECTOR & dom(bv_put) = BIT_VECTOR*NATURAL*BIT & bv_put = %(v1,idx,bit).(v1: BIT_VECTOR & idx: BV_INDX(v1) & bit: BIT | v1<+{idx|->bit}) & BYTE_WIDTH = 8 & BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE = SET(bt).(bt: BYTE_INDEX +-> BIT & dom(bt) = BYTE_INDEX & size(bt) = BYTE_WIDTH)-{{}} & BYTE_ZERO: BYTE & BYTE_ZERO = BYTE_INDEX*{0} & is_zero: BYTE +-> BIT & dom(is_zero) = BYTE & is_zero = %w1.(w1: BYTE | bool_to_bit(bool(w1(0)+w1(1)+w1(2)+w1(3)+w1(4)+w1(5)+w1(6)+w1(7) = 0))) & is_zeroUSHORTINT: USHORTINT +-> BIT & dom(is_zeroUSHORTINT) = USHORTINT & is_zeroUSHORTINT = %nat1.(nat1: USHORTINT | bool_to_bit(bool(nat1 = 0))) & is_negative: BYTE +-> BIT & dom(is_negative) = BYTE & is_negative = %w1.(w1: BYTE | w1(7)) & halfSCHAR: SCHAR +-> UCHAR & dom(halfSCHAR) = SCHAR & halfSCHAR = %ww.(ww: SCHAR | (ww+128) mod 16) & add8UCHAR: UCHAR*UCHAR +-> UCHAR & dom(add8UCHAR) = UCHAR*UCHAR & add8UCHAR = %(w1,w2).(w1: UCHAR & w2: UCHAR | (w1+w2) mod 256) & add8SCHAR: BIT*SCHAR*SCHAR +-> SCHAR*BIT*BIT*BIT*BIT & dom(add8SCHAR) = BIT*SCHAR*SCHAR & add8SCHAR = %(carry,w1,w2).(carry: BIT & w1: SCHAR & w2: SCHAR & carry+w1+w2+1<= -128 | 256-(carry+w1+w2),bool_to_bit(bool(carry+w1+w2+1<=0)),1,bool_to_bit(bool(16<=halfSCHAR(carry+w1)+halfSCHAR(w2))),0)\/%(carry,w1,w2).(carry: BIT & w1: SCHAR & w2: SCHAR & not(carry+w1+w2+1<= -128) | (carry+w1+w2) mod 128,bool_to_bit(bool(carry+w1+w2+1<=0)),bool_to_bit(bool(128<=carry+w1+w2)),bool_to_bit(bool(16<=halfSCHAR(w1)+halfSCHAR(w2))),bool_to_bit(bool((carry+w1+w2) mod 128 = 0))) & substract8SCHAR: BIT*SCHAR*SCHAR +-> SCHAR*BIT*BIT*BIT*BIT & dom(substract8SCHAR) = BIT*SCHAR*SCHAR & substract8SCHAR = %(carry,w1,w2).(carry: BIT & w1: SCHAR & w2: SCHAR & carry+w1-w2+1<= -128 | 256-(w1-w2-carry),bool_to_bit(bool(w1-w2-carry+1<=0)),1,bool_to_bit(bool(16<=halfSCHAR(w1)-halfSCHAR(w2))),0)\/%(carry,w1,w2).(carry: BIT & w1: SCHAR & w2: SCHAR & not(carry+w1-w2+1<= -128) | (w1-w2-carry) mod 128,bool_to_bit(bool(w1-w2-carry+1<=0)),bool_to_bit(bool(128<=w1-w2-carry)),bool_to_bit(bool(16<=halfSCHAR(w1)-halfSCHAR(w2))),bool_to_bit(bool((w1-w2-carry) mod 128 = 0))) & add16USHORTINT: BIT*USHORTINT*USHORTINT +-> USHORTINT & dom(add16USHORTINT) = BIT*USHORTINT*USHORTINT & add16USHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | (b1+w1+w2) mod 65536) & add_carryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(add_carryUSHORTINT) = BIT*USHORTINT*USHORTINT & add_carryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**16+1<=b1+w1+w2))) & add_halfcarryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(add_halfcarryUSHORTINT) = BIT*USHORTINT*USHORTINT & add_halfcarryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**12+1<=b1+w1 mod 2**12+w2 mod 2**12))) & sub16USHORTINT: BIT*USHORTINT*USHORTINT +-> USHORTINT & dom(sub16USHORTINT) = BIT*USHORTINT*USHORTINT & sub16USHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | (w1-w2-b1) mod 65536) & sub_carryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(sub_carryUSHORTINT) = BIT*USHORTINT*USHORTINT & sub_carryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**16+1<=w1-w2-b1))) & sub_halfcarryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(sub_halfcarryUSHORTINT) = BIT*USHORTINT*USHORTINT & sub_halfcarryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**12+1<=w1 mod 2**12-w2 mod 2**12-b1))) & inc_BYTE: BYTE +-> BYTE & dom(inc_BYTE) = BYTE & inc_BYTE = %w1.(w1: BYTE | UCHAR_TO_BYTE((BYTE_TO_UCHAR(w1)+1) mod 256)) & dec_BYTE: BYTE +-> BYTE & dom(dec_BYTE) = BYTE & dec_BYTE = %w1.(w1: BYTE | UCHAR_TO_BYTE((BYTE_TO_UCHAR(w1)-1) mod 256)) & inc_BV16: BV16 +-> BV16 & dom(inc_BV16) = BV16 & inc_BV16 = %w1.(w1: BV16 | USHORTINT_TO_BV16((BV16_TO_USHORTINT(w1)+1) mod 65536)) & dec_BV16: BYTE +-> BYTE & dom(dec_BV16) = BYTE & dec_BV16 = %w1.(w1: BV16 | USHORTINT_TO_BV16((BV16_TO_USHORTINT(w1)-1) mod 65536)) & parity_even_BYTE: BIT_VECTOR +-> BIT & dom(parity_even_BYTE) = BIT_VECTOR & parity_even_BYTE = %bv.(bv: BIT_VECTOR | 1-SIGMA(idx).(idx: dom(bv) | bv(idx)) mod 2) & and: BYTE*BYTE +-> BYTE & dom(and) = BYTE*BYTE & and = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_and(bt1,bt2)) & ior: BYTE*BYTE +-> BYTE & dom(ior) = BYTE*BYTE & ior = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_or(bt1,bt2)) & xor: BYTE*BYTE +-> BYTE & dom(xor) = BYTE*BYTE & xor = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_xor(bt1,bt2)) & bitget: BYTE*BYTE_INDEX +-> BIT & dom(bitget) = BYTE*BYTE_INDEX & bitget = %(bt1,ii).(bt1: BYTE & ii: BYTE_INDEX | bt1(ii)) & bitset: BYTE*BYTE_INDEX +-> BYTE & dom(bitset) = BYTE*BYTE_INDEX & !(ww,ii).(ww: BYTE & ii: BYTE_INDEX => bitset(ww,ii) = bv_set(ww,ii)) & bitclear: BYTE*BYTE_INDEX +-> BYTE & dom(bitclear) = BYTE*BYTE_INDEX & !(ww,ii,bb).(ww: BYTE & ii: BYTE_INDEX & bb: BIT => bitclear(ww,ii) = bv_clear(ww,ii)) & complement: BYTE +-> BYTE & dom(complement) = BYTE & complement = %bt.(bt: BYTE | bv_not(bt)) & swap: BYTE +-> BYTE & dom(swap) = BYTE & swap = %bt.(bt: BYTE | {0|->bt(4)}\/{1|->bt(5)}\/{2|->bt(6)}\/{3|->bt(7)}\/{4|->bt(0)}\/{5|->bt(1)}\/{6|->bt(2)}\/{7|->bt(3)}) & rotateleft: BYTE +-> BYTE & dom(rotateleft) = BYTE & rotateleft = %bv.(bv: BYTE | {0|->bv(7)}\/{1|->bv(0)}\/{2|->bv(1)}\/{3|->bv(2)}\/{4|->bv(3)}\/{5|->bv(4)}\/{6|->bv(5)}\/{7|->bv(6)}) & rotateright: BYTE +-> BYTE & dom(rotateright) = BYTE & rotateright = %bv.(bv: BYTE | {0|->bv(1)}\/{1|->bv(2)}\/{2|->bv(3)}\/{3|->bv(4)}\/{4|->bv(5)}\/{5|->bv(6)}\/{6|->bv(7)}\/{7|->bv(0)}) & "`Component properties'" & get_bv_reg16: BV16*((1..18)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & dom(get_bv_reg16) = BV16*((1..18)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) & !(sp_,rgs8_,r1).(sp_: BV16 & (rgs8_: (1..18)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..18)*{id_reg_8}) & r1: (1..5)*{id_reg_16} => (r1 = 1|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = BYTE_TO_BV16(rgs8_(5|->id_reg_8),rgs8_(6|->id_reg_8))) & (r1 = 2|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = BYTE_TO_BV16(rgs8_(9|->id_reg_8),rgs8_(10|->id_reg_8))) & (r1 = 3|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = BYTE_TO_BV16(rgs8_(13|->id_reg_8),rgs8_(14|->id_reg_8))) & (r1 = 4|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = sp_) & (r1 = 5|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = BYTE_TO_BV16(rgs8_(1|->id_reg_8),rgs8_(2|->id_reg_8)))) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..18)*{id_reg_8}*((1..18)*{id_reg_8}) & dom(REG16_TO_REG8) = (1..5)*{id_reg_16} & !r1.(r1: (1..5)*{id_reg_16} => (r1 = 1|->id_reg_16 => REG16_TO_REG8(r1) = 5|->id_reg_8|->(6|->id_reg_8)) & (r1 = 2|->id_reg_16 => REG16_TO_REG8(r1) = 9|->id_reg_8|->(10|->id_reg_8)) & (r1 = 3|->id_reg_16 => REG16_TO_REG8(r1) = 13|->id_reg_8|->(14|->id_reg_8)) & (r1 = 5|->id_reg_16 => REG16_TO_REG8(r1) = 1|->id_reg_8|->(2|->id_reg_8))) & REG8_TO_REG16 = REG16_TO_REG8~ & update_flag_register_SZ_H_PvNC = %(rgs8_$0,s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(rgs8_$0: (1..18)*{id_reg_8} +-> BYTE & dom(rgs8_$0) = (1..18)*{id_reg_8} & s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | rgs8_$0<+{2|->id_reg_8|->({7|->s7$0}\/{6|->z6$0}\/{4|->h4$0}\/{2|->pv2$0}\/{1|->n_add_sub$0}\/{0|->c0$0})}) & get_new_flag_register_SZ_H_PvNC = %(rgs8_$0,s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(rgs8_$0: (1..18)*{id_reg_8} +-> BYTE & dom(rgs8_$0) = (1..18)*{id_reg_8} & s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->({7|->s7$0}\/{6|->z6$0}\/{4|->h4$0}\/{2|->pv2$0}\/{1|->n_add_sub$0}\/{0|->c0$0})) & bv_IX_plus_d = %(ix,desloc).(ix: BV16 & desloc: SCHAR | USHORTINT_TO_BV16(BV16_TO_USHORTINT(ix)+desloc)) & bv_IY_plus_d = %(iy,desloc).(iy: BV16 & desloc: SCHAR | USHORTINT_TO_BV16(BV16_TO_USHORTINT(iy)+desloc)) & bv_9IX_plus_d0 = %(mem,ix,desloc).(mem: BV16 +-> BYTE & dom(mem) = BV16 & ix: BV16 & desloc: SCHAR | mem(USHORTINT_TO_BV16((BV16_TO_USHORTINT(ix)+desloc) mod 65536))) & bv_9IY_plus_d0 = %(mem,iy,desloc).(mem: BV16 +-> BYTE & dom(mem) = BV16 & iy: BV16 & desloc: SCHAR | mem(USHORTINT_TO_BV16((BV16_TO_USHORTINT(iy)+desloc) mod 65536))) & (1..18)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..18)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}));
  ("`Included,imported and extended machines invariants'" & stack: BV16 +-> BYTE & stack~: BYTE +-> BV16 & dom(stack) = BV16 & mem: BV16 +-> BYTE & mem~: BYTE +-> BV16 & dom(mem) = BV16 & "`Included,imported and extended machines assertions'" & ran(stack): POW(BYTE) & ran(mem): POW(BYTE) & "`Seen and used machines assertions'" & NB_SCHARS = 256 & !n0.(n0: SCHAR => 0<=n0) & !n0.(n0: SCHAR => n0<=255) & 2**16 = 65536 & INSTRUCTION_NEXT: USHORTINT +-> USHORTINT & dom(INSTRUCTION_NEXT) = USHORTINT & 0 = SCHAR_TO_SSHORTINT(0,0) & !xx.(xx: BYTE => BYTE_TO_UCHAR(xx): UCHAR) & !xx.(xx: UCHAR => UCHAR_TO_BYTE(xx): BYTE) & !xx.(xx: BYTE => BYTE_TO_SCHAR(xx): SCHAR) & !xx.(xx: SCHAR => SCHAR_TO_BYTE(xx): BYTE) & !(xx,yy).(xx: BYTE & yy: BYTE => BYTE_TO_BV16(xx,yy): BV16) & !(xx,yy).(xx: BYTE & yy: BYTE => #zz.(zz: BV16 & BYTE_TO_BV16(xx,yy) = zz)) & !xx.(xx: BV16 => BV16_TO_USHORTINT(xx): USHORTINT) & !xx.(xx: USHORTINT => USHORTINT_TO_BV16(xx): BV16) & bit_not(0) = 1 & bit_not(1) = 0 & !bb.(bb: BIT => bit_not(bit_not(bb)) = bb) & bit_and(0,0) = 0 & bit_and(0,1) = 0 & bit_and(1,0) = 0 & bit_and(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 1 => bit_and(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 0 => bit_and(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3)) & !b1.(b1: BIT => bit_and(b1,1) = b1) & !b1.(b1: BIT => bit_and(b1,0) = 0) & bit_or(0,0) = 0 & bit_or(0,1) = 1 & bit_or(1,0) = 1 & bit_or(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 1 => bit_or(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 0 => bit_or(b2,b1) = 0) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 1 => b1 = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 0 => b1 = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3)) & !b1.(b1: BIT => bit_or(b1,1) = 1) & !b1.(b1: BIT => bit_or(b1,0) = b1) & !b1.(b1: BIT => bit_or(1,b1) = 1) & !b1.(b1: BIT => bit_or(0,b1) = b1) & bit_xor(0,0) = 0 & bit_xor(0,1) = 1 & bit_xor(1,0) = 1 & bit_xor(1,1) = 0 & !(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 1 => bit_xor(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 0 => bit_xor(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3)) & !bb.(bb: BIT => bit_xor(bb,bb) = 0) & bool_to_bit(TRUE) = 1 & bool_to_bit(FALSE) = 0 & !bb.(bb: BIT => bb = 0 or bb = 1) & !bb.(bb: BIT & not(bb = 0) => bb = 1) & !bb.(bb: BIT & not(bb = 1) => bb = 0) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_xor(bv,bv)(indx) = bv_zero(bv_size(bv))(indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: BV_INDX(v1) => bv_xor(v1,v2)(indx) = bv_xor(v2,v1)(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v2)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_or(bv,bv_zero(bv_size(bv)))(indx) = bv(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_or(bv,bv_one(bv_size(bv)))(indx) = bv_one(bv_size(bv))(indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: BV_INDX(v1) => bv_or(v1,bv_or(v2,v3))(indx) = bv_or(bv_or(v1,v2),v3)(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v2)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: BV_INDX(v1) => bv_or(v1,v2)(indx) = bv_or(v2,v1)(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_and(bv,bv_one(bv_size(bv)))(indx) = bv(indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_and(bv,bv_zero(bv_size(bv)))(indx) = bv_zero(bv_size(bv))(indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: BV_INDX(v1) => bv_and(v1,bv_and(v2,v3))(indx) = bv_and(bv_and(v1,v2),v3)(indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: BV_INDX(v1) => bv_and(v1,v2)(indx) = bv_and(v2,v1)(indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_and(v1,v2)) = bv_size(v2)) & !(bv,low,high).(bv: BIT_VECTOR & low: BV_INDX(bv) & high: BV_INDX(bv) & low<=high => bv_size(bv_sub(bv,low,high)) = high-low) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR => bv_size(bv_catenate(v1,v2)) = bv_size(v1)+bv_size(v2)) & !(bv,indx).(bv: BIT_VECTOR & indx: BV_INDX(bv) => bv_not(bv_not(bv))(indx) = bv(indx)) & !bv.(bv: BIT_VECTOR => bv_size(bv_not(bv)) = bv_size(bv)) & !bt.(bt: BYTE => size(bt) = 8) & size(BYTE_ZERO) = 8 & BYTE: POW(BIT_VECTOR) & BYTE_ZERO: BIT_VECTOR & first(BYTE_ZERO) = 0 & dom(add8SCHAR) = BIT*SCHAR*SCHAR & ran(add8SCHAR): POW(SCHAR*BIT*BIT*BIT*BIT) & dom(substract8SCHAR) = BIT*SCHAR*SCHAR & ran(substract8SCHAR): POW(SCHAR*BIT*BIT*BIT*BIT) & dom(and) = BYTE*BYTE & ran(and): POW(BYTE) & dom(ior) = BYTE*BYTE & ran(ior): POW(BYTE) & dom(xor) = BYTE*BYTE & ran(xor): POW(BYTE) & dom(complement) = BYTE & ran(complement): POW(BYTE) & dom(swap) = BYTE & ran(swap): POW(BYTE) & dom(rotateleft) = BYTE & ran(rotateleft): POW(BYTE) & dom(rotateright) = BYTE & ran(rotateright): POW(BYTE) & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(vec,in0) = vec(in0)) & !(xx,yy).(xx: INTEGER & yy: INTEGER => xx mod yy+1<=yy & 0<=xx mod yy) & 2**15 = 32768 & 2**14 = 16384 & 2**13 = 8192 & 2**12 = 4096 & 2**11 = 2048 & 2**10 = 1024 & 2**9 = 512 & 2**8 = 256 & 2**7 = 128 & 2**6 = 64 & 2**5 = 32 & 2**4 = 16 & 2**3 = 8 & 2**2 = 4 & 2**1 = 2 & 2**0 = 1);
  ("`Component invariant'" & stack: BV16 +-> BYTE & dom(stack) = BV16 & rgs8: (1..18)*{id_reg_8} +-> BYTE & dom(rgs8) = (1..18)*{id_reg_8} & pc: INSTRUCTION & sp: BV16 & ix: BV16 & iy: BV16 & i_o_ports: BYTE +-> BYTE & dom(i_o_ports) = BYTE);
  ("`Local hypotheses'" & mmm: BV16 +-> BYTE & mmm~: BYTE +-> BV16 & dom(mmm) = BV16 & ii: BV16 & des: SCHAR);
  "`Check assertion (!(mmm,ii,des).(mmm: BV16 >-> BYTE & ii: BV16 & des: SCHAR => bv_9IY_plus_d0(mmm,ii,des): BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_9IY_plus_d0(mmm,ii,des): BYTE);
  "`Check assertion (!(mmm,ii,des).(mmm: BV16 >-> BYTE & ii: BV16 & des: SCHAR => bv_9IX_plus_d0(mmm,ii,des): BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_9IX_plus_d0(mmm,ii,des): BYTE);
  ("`Local hypotheses'" & ii: BV16 & des: SCHAR);
  "`Check assertion (!(ii,des).(ii: BV16 & des: SCHAR => bv_IY_plus_d(ii,des): BV16)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_IY_plus_d(ii,des): BV16);
  "`Check assertion (!(ii,des).(ii: BV16 & des: SCHAR => bv_IX_plus_d(ii,des): BV16)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_IX_plus_d(ii,des): BV16);
  "`Check assertion (mem(iy): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(iy): BYTE);
  "`Check assertion (mem(ix): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(ix): BYTE);
  "`Check assertion (mem(sp): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(sp): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(a0),rgs8(f0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(rgs8(a0),rgs8(f0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(h0),rgs8(l0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(rgs8(h0),rgs8(l0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(d0),rgs8(e0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(rgs8(d0),rgs8(e0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(b0),rgs8(c0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE);
  "`Check assertion (mem(BYTE_TO_BV16(rgs8(b0),rgs8(c0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
  "`Check assertion (INSTRUCTION_NEXT(13) = 14) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(13) = 14);
  "`Check assertion (INSTRUCTION_NEXT(12) = 13) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(12) = 13);
  "`Check assertion (INSTRUCTION_NEXT(11) = 12) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(11) = 12);
  "`Check assertion (INSTRUCTION_NEXT(10) = 11) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(10) = 11);
  "`Check assertion (INSTRUCTION_NEXT(9) = 10) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(9) = 10);
  "`Check assertion (INSTRUCTION_NEXT(8) = 9) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(8) = 9);
  "`Check assertion (INSTRUCTION_NEXT(7) = 8) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(7) = 8);
  "`Check assertion (INSTRUCTION_NEXT(6) = 7) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(6) = 7);
  "`Check assertion (INSTRUCTION_NEXT(5) = 6) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(5) = 6);
  "`Check assertion (INSTRUCTION_NEXT(4) = 5) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(4) = 5);
  "`Check assertion (INSTRUCTION_NEXT(3) = 4) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(3) = 4);
  "`Check assertion (INSTRUCTION_NEXT(2) = 3) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(2) = 3);
  "`Check assertion (INSTRUCTION_NEXT(1) = 2) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(1) = 2);
  "`Check assertion (INSTRUCTION_NEXT(0) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (INSTRUCTION_NEXT(0) = 1);
  "`Check assertion (ran(rgs8) <: BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (ran(rgs8): POW(BYTE));
  ("`Component assertions'" & dom(stack) = BV16 & ran(stack): POW(BYTE) & ran(mem): POW(BYTE) & dom(mem) = BV16 & ran(rgs8): POW(BYTE) & dom(rgs8) = (1..18)*{id_reg_8} & INSTRUCTION_NEXT(0) = 1 & INSTRUCTION_NEXT(1) = 2 & INSTRUCTION_NEXT(2) = 3 & INSTRUCTION_NEXT(3) = 4 & INSTRUCTION_NEXT(4) = 5 & INSTRUCTION_NEXT(5) = 6 & INSTRUCTION_NEXT(6) = 7 & INSTRUCTION_NEXT(7) = 8 & INSTRUCTION_NEXT(8) = 9 & INSTRUCTION_NEXT(9) = 10 & INSTRUCTION_NEXT(10) = 11 & INSTRUCTION_NEXT(11) = 12 & INSTRUCTION_NEXT(12) = 13 & INSTRUCTION_NEXT(13) = 14 & mem(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(BYTE_TO_BV16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(BYTE_TO_BV16(SCHAR_TO_BYTE(0),mem(BYTE_TO_BV16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & !(ii,des).(ii: BV16 & des: SCHAR => bv_IX_plus_d(ii,des): BV16) & !(ii,des).(ii: BV16 & des: SCHAR => bv_IY_plus_d(ii,des): BV16) & !(mmm,ii,des).(mmm: BV16 +-> BYTE & mmm~: BYTE +-> BV16 & dom(mmm) = BV16 & ii: BV16 & des: SCHAR => bv_9IX_plus_d0(mmm,ii,des): BYTE) & !(mmm,ii,des).(mmm: BV16 +-> BYTE & mmm~: BYTE +-> BV16 & dom(mmm) = BV16 & ii: BV16 & des: SCHAR => bv_9IY_plus_d0(mmm,ii,des): BYTE));
  ("`LD_r_r_ preconditions in this component'" & rr: (1..18)*{id_reg_8} & rr_: (1..18)*{id_reg_8});
  "`Check that the invariant (rgs8: id_reg_8 --> BYTE) is preserved by the operation - ref 3.4'";
  (rgs8<+{rr|->rgs8(rr_)}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->rgs8(rr_)}) = (1..18)*{id_reg_8});
  "`Check that the invariant (pc: INSTRUCTION) is preserved by the operation - ref 3.4'";
  (INSTRUCTION_NEXT(pc): INSTRUCTION);
  ("`LD_r_n_ preconditions in this component'" & rr: (1..18)*{id_reg_8} & n0: SCHAR);
  (rgs8<+{rr|->SCHAR_TO_BYTE(n0)}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->SCHAR_TO_BYTE(n0)}) = (1..18)*{id_reg_8});
  ("`LD_r_9HL0 preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & address: BV16 & address = BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)));
  (rgs8<+{rr|->mem(address)}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->mem(address)}) = (1..18)*{id_reg_8});
  ("`LD_r_9IX_d0 preconditions in this component'" & rr: (1..18)*{id_reg_8} & desloc: SCHAR);
  (rgs8<+{rr|->bv_9IX_plus_d0(mem,ix,desloc)}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->bv_9IX_plus_d0(mem,ix,desloc)}) = (1..18)*{id_reg_8});
  ("`LD_r_9IY_d0 preconditions in this component'" & rr: (1..18)*{id_reg_8} & desloc: SCHAR);
  (rgs8<+{rr|->bv_9IY_plus_d0(mem,iy,desloc)}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->bv_9IY_plus_d0(mem,iy,desloc)}) = (1..18)*{id_reg_8});
  ("`LD_9HL0_r preconditions in this component'" & rr: (1..18)*{id_reg_8} & not(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): dom(stack)));
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16);
  (rgs8(rr): BYTE);
  (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr)}: BV16 +-> BYTE);
  ((mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr)})~: BYTE +-> BV16);
  (dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr)}) = BV16);
  ("`Local hypotheses'" & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr)}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr)})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr)}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->rgs8(rr)}): POW(BYTE));
  ("`LD_9IX_d0_r preconditions in this component'" & desloc: SCHAR & rr: (1..18)*{id_reg_8} & not(bv_IX_plus_d(ix,desloc): dom(stack)));
  (bv_IX_plus_d(ix,desloc): BV16);
  (mem<+{bv_IX_plus_d(ix,desloc)|->rgs8(rr)}: BV16 +-> BYTE);
  ((mem<+{bv_IX_plus_d(ix,desloc)|->rgs8(rr)})~: BYTE +-> BV16);
  (dom(mem<+{bv_IX_plus_d(ix,desloc)|->rgs8(rr)}) = BV16);
  ("`Local hypotheses'" & mem<+{bv_IX_plus_d(ix,desloc)|->rgs8(rr)}: BV16 +-> BYTE & (mem<+{bv_IX_plus_d(ix,desloc)|->rgs8(rr)})~: BYTE +-> BV16 & dom(mem<+{bv_IX_plus_d(ix,desloc)|->rgs8(rr)}) = BV16 & ran(mem<+{bv_IX_plus_d(ix,desloc)|->rgs8(rr)}): POW(BYTE));
  ("`LD_9IY_d0_r preconditions in this component'" & desloc: SCHAR & rr: (1..18)*{id_reg_8} & not(bv_IY_plus_d(iy,desloc): dom(stack)));
  (bv_IY_plus_d(iy,desloc): BV16);
  (mem<+{bv_IY_plus_d(iy,desloc)|->rgs8(rr)}: BV16 +-> BYTE);
  ((mem<+{bv_IY_plus_d(iy,desloc)|->rgs8(rr)})~: BYTE +-> BV16);
  (dom(mem<+{bv_IY_plus_d(iy,desloc)|->rgs8(rr)}) = BV16);
  ("`Local hypotheses'" & mem<+{bv_IY_plus_d(iy,desloc)|->rgs8(rr)}: BV16 +-> BYTE & (mem<+{bv_IY_plus_d(iy,desloc)|->rgs8(rr)})~: BYTE +-> BV16 & dom(mem<+{bv_IY_plus_d(iy,desloc)|->rgs8(rr)}) = BV16 & ran(mem<+{bv_IY_plus_d(iy,desloc)|->rgs8(rr)}): POW(BYTE));
  ("`LD_9HL0_n preconditions in this component'" & n0: SCHAR & not(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): dom(stack)));
  (SCHAR_TO_BYTE(n0): BYTE);
  (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->SCHAR_TO_BYTE(n0)}: BV16 +-> BYTE);
  ((mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->SCHAR_TO_BYTE(n0)})~: BYTE +-> BV16);
  (dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->SCHAR_TO_BYTE(n0)}) = BV16);
  ("`Local hypotheses'" & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->SCHAR_TO_BYTE(n0)}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->SCHAR_TO_BYTE(n0)})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->SCHAR_TO_BYTE(n0)}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->SCHAR_TO_BYTE(n0)}): POW(BYTE));
  ("`LD_9IX_d0_n preconditions in this component'" & desloc: SCHAR & n0: SCHAR & not(bv_IX_plus_d(ix,desloc): dom(stack)));
  (mem<+{bv_IX_plus_d(ix,desloc)|->SCHAR_TO_BYTE(n0)}: BV16 +-> BYTE);
  ((mem<+{bv_IX_plus_d(ix,desloc)|->SCHAR_TO_BYTE(n0)})~: BYTE +-> BV16);
  (dom(mem<+{bv_IX_plus_d(ix,desloc)|->SCHAR_TO_BYTE(n0)}) = BV16);
  ("`Local hypotheses'" & mem<+{bv_IX_plus_d(ix,desloc)|->SCHAR_TO_BYTE(n0)}: BV16 +-> BYTE & (mem<+{bv_IX_plus_d(ix,desloc)|->SCHAR_TO_BYTE(n0)})~: BYTE +-> BV16 & dom(mem<+{bv_IX_plus_d(ix,desloc)|->SCHAR_TO_BYTE(n0)}) = BV16 & ran(mem<+{bv_IX_plus_d(ix,desloc)|->SCHAR_TO_BYTE(n0)}): POW(BYTE));
  ("`LD_9IY_d0_n preconditions in this component'" & desloc: SCHAR & n0: SCHAR & not(bv_IY_plus_d(iy,desloc): dom(stack)));
  (mem<+{bv_IY_plus_d(iy,desloc)|->SCHAR_TO_BYTE(n0)}: BV16 +-> BYTE);
  ((mem<+{bv_IY_plus_d(iy,desloc)|->SCHAR_TO_BYTE(n0)})~: BYTE +-> BV16);
  (dom(mem<+{bv_IY_plus_d(iy,desloc)|->SCHAR_TO_BYTE(n0)}) = BV16);
  ("`Local hypotheses'" & mem<+{bv_IY_plus_d(iy,desloc)|->SCHAR_TO_BYTE(n0)}: BV16 +-> BYTE & (mem<+{bv_IY_plus_d(iy,desloc)|->SCHAR_TO_BYTE(n0)})~: BYTE +-> BV16 & dom(mem<+{bv_IY_plus_d(iy,desloc)|->SCHAR_TO_BYTE(n0)}) = BV16 & ran(mem<+{bv_IY_plus_d(iy,desloc)|->SCHAR_TO_BYTE(n0)}): POW(BYTE));
  (rgs8<+{1|->id_reg_8|->mem(mem(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{1|->id_reg_8|->mem(mem(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))}) = (1..18)*{id_reg_8});
  (rgs8<+{1|->id_reg_8|->mem(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{1|->id_reg_8|->mem(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))}) = (1..18)*{id_reg_8});
  ("`LD_A_9nn0 preconditions in this component'" & nn: USHORTINT);
  (rgs8<+{1|->id_reg_8|->mem(USHORTINT_TO_BV16(nn))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{1|->id_reg_8|->mem(USHORTINT_TO_BV16(nn))}) = (1..18)*{id_reg_8});
  ("`LD_9BC0_A preconditions in this component'" & not(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): dom(stack)));
  (BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16);
  (rgs8(1|->id_reg_8): BYTE);
  (mem<+{BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8)}: BV16 +-> BYTE);
  ((mem<+{BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8)})~: BYTE +-> BV16);
  (dom(mem<+{BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8)}) = BV16);
  ("`Local hypotheses'" & mem<+{BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8)}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8)})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8)}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))|->rgs8(1|->id_reg_8)}): POW(BYTE));
  ("`LD_9DE0_A preconditions in this component'" & not(mem(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): dom(stack)));
  (BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16);
  (mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8)}: BV16 +-> BYTE);
  ((mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8)})~: BYTE +-> BV16);
  (dom(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8)}) = BV16);
  ("`Local hypotheses'" & mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8)}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8)})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8)}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->rgs8(1|->id_reg_8)}): POW(BYTE));
  ("`LD_9nn0_A preconditions in this component'" & nn: USHORTINT & not(USHORTINT_TO_BV16(nn): dom(stack)));
  (USHORTINT_TO_BV16(nn): BV16);
  (mem<+{USHORTINT_TO_BV16(nn)|->rgs8(1|->id_reg_8)}: BV16 +-> BYTE);
  ((mem<+{USHORTINT_TO_BV16(nn)|->rgs8(1|->id_reg_8)})~: BYTE +-> BV16);
  (dom(mem<+{USHORTINT_TO_BV16(nn)|->rgs8(1|->id_reg_8)}) = BV16);
  ("`Local hypotheses'" & mem<+{USHORTINT_TO_BV16(nn)|->rgs8(1|->id_reg_8)}: BV16 +-> BYTE & (mem<+{USHORTINT_TO_BV16(nn)|->rgs8(1|->id_reg_8)})~: BYTE +-> BV16 & dom(mem<+{USHORTINT_TO_BV16(nn)|->rgs8(1|->id_reg_8)}) = BV16 & ran(mem<+{USHORTINT_TO_BV16(nn)|->rgs8(1|->id_reg_8)}): POW(BYTE));
  ("`LD_dd_nn preconditions in this component'" & dd: (1..5)*{id_reg_16} & nn: USHORTINT & not(dd = 5|->id_reg_16));
  ("`Local hypotheses'" & dd = 4|->id_reg_16);
  "`Check that the invariant (sp: BV16) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & not(dd = 4|->id_reg_16) & rh: (1..18)*{id_reg_8} & rl: (1..18)*{id_reg_8} & w1: BYTE & w2: BYTE & rh,rl = REG16_TO_REG8(dd) & BV16_TO_BYTE(USHORTINT_TO_BV16(nn)) = w1|->w2);
  (rgs8<+({rh|->w1}\/{rl|->w2}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rh|->w1}\/{rl|->w2})) = (1..18)*{id_reg_8});
  ("`LD_IX_nn preconditions in this component'" & nn: USHORTINT);
  "`Check that the invariant (ix: BV16) is preserved by the operation - ref 3.4'";
  ("`LD_IY_nn preconditions in this component'" & nn: USHORTINT);
  "`Check that the invariant (iy: BV16) is preserved by the operation - ref 3.4'";
  ("`LD_HL_9nn0 preconditions in this component'" & nn: USHORTINT);
  (rgs8<+({13|->id_reg_8|->mem(USHORTINT_TO_BV16(add16USHORTINT(0,nn,1)))}\/{14|->id_reg_8|->mem(USHORTINT_TO_BV16(nn))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->mem(USHORTINT_TO_BV16(add16USHORTINT(0,nn,1)))}\/{14|->id_reg_8|->mem(USHORTINT_TO_BV16(nn))})) = (1..18)*{id_reg_8});
  ("`LD_dd_9nn0 preconditions in this component'" & dd: (1..5)*{id_reg_16} & nn: USHORTINT & not(dd = 5|->id_reg_16));
  (BYTE_TO_BV16(mem(USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))),mem(USHORTINT_TO_BV16(nn))): BV16);
  ("`Local hypotheses'" & not(dd = 4|->id_reg_16) & rh: (1..18)*{id_reg_8} & rl: (1..18)*{id_reg_8} & w1: BYTE & w2: BYTE & rh,rl = REG16_TO_REG8(dd) & w1 = mem(USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))) & w2 = mem(USHORTINT_TO_BV16(nn)));
  ("`LD_IX_9nn0 preconditions in this component'" & nn: USHORTINT);
  ("`LD_IY_9nn0 preconditions in this component'" & nn: USHORTINT);
  ("`LD_9nn0_HL preconditions in this component'" & nn: USHORTINT & not(USHORTINT_TO_BV16(nn): dom(stack)) & not(USHORTINT_TO_BV16(add16USHORTINT(0,nn,1)): dom(stack)));
  ({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{USHORTINT_TO_BV16(nn)|->rgs8(14|->id_reg_8)}: BV16 +-> BYTE);
  (({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{USHORTINT_TO_BV16(nn)|->rgs8(14|->id_reg_8)})~: BYTE +-> BV16);
  (dom({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{USHORTINT_TO_BV16(nn)|->rgs8(14|->id_reg_8)}) = BV16);
  ("`Local hypotheses'" & mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{USHORTINT_TO_BV16(nn)|->rgs8(14|->id_reg_8)}): BV16 +-> BYTE & (mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{USHORTINT_TO_BV16(nn)|->rgs8(14|->id_reg_8)}))~: BYTE +-> BV16 & dom(mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{USHORTINT_TO_BV16(nn)|->rgs8(14|->id_reg_8)})) = BV16 & ran(mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->rgs8(13|->id_reg_8)}\/{USHORTINT_TO_BV16(nn)|->rgs8(14|->id_reg_8)})): POW(BYTE));
  ("`LD_9nn0_dd preconditions in this component'" & dd: (1..5)*{id_reg_16} & not(dd = 5|->id_reg_16) & nn: USHORTINT & not(SCHAR_TO_BYTE(nn): dom(stack)));
  ("`Local hypotheses'" & not(dd = 4|->id_reg_16) & rh: (1..18)*{id_reg_8} & rl: (1..18)*{id_reg_8} & w1: SCHAR & w2: BYTE & rh,rl = REG16_TO_REG8(dd) & {USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->rgs8(rh)}\/{USHORTINT_TO_BV16(nn)|->rgs8(rl)}: BV16 +-> BYTE & ({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->rgs8(rh)}\/{USHORTINT_TO_BV16(nn)|->rgs8(rl)})~: BYTE +-> BV16 & dom({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->rgs8(rh)}\/{USHORTINT_TO_BV16(nn)|->rgs8(rl)}) = BV16 & mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->rgs8(rh)}\/{USHORTINT_TO_BV16(nn)|->rgs8(rl)}): BV16 +-> BYTE & (mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->rgs8(rh)}\/{USHORTINT_TO_BV16(nn)|->rgs8(rl)}))~: BYTE +-> BV16 & dom(mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->rgs8(rh)}\/{USHORTINT_TO_BV16(nn)|->rgs8(rl)})) = BV16 & ran(mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->rgs8(rh)}\/{USHORTINT_TO_BV16(nn)|->rgs8(rl)})): POW(BYTE));
  ("`LD_9nn0_IX preconditions in this component'" & nn: USHORTINT);
  ("`Local hypotheses'" & h_ix: BYTE & l_ix: BYTE & h_ix,l_ix = BV16_TO_BYTE(ix) & not(USHORTINT_TO_BV16(nn): dom(stack)) & not(USHORTINT_TO_BV16(add16USHORTINT(0,nn,1)): dom(stack)));
  ({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->h_ix}\/{USHORTINT_TO_BV16(nn)|->l_ix}: BV16 +-> BYTE);
  (({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->h_ix}\/{USHORTINT_TO_BV16(nn)|->l_ix})~: BYTE +-> BV16);
  (dom({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->h_ix}\/{USHORTINT_TO_BV16(nn)|->l_ix}) = BV16);
  ("`Local hypotheses'" & h_ix: BYTE & l_ix: BYTE & h_ix,l_ix = BV16_TO_BYTE(ix) & not(USHORTINT_TO_BV16(nn): dom(stack)) & not(USHORTINT_TO_BV16(add16USHORTINT(0,nn,1)): dom(stack)) & mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->h_ix}\/{USHORTINT_TO_BV16(nn)|->l_ix}): BV16 +-> BYTE & (mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->h_ix}\/{USHORTINT_TO_BV16(nn)|->l_ix}))~: BYTE +-> BV16 & dom(mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->h_ix}\/{USHORTINT_TO_BV16(nn)|->l_ix})) = BV16 & ran(mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->h_ix}\/{USHORTINT_TO_BV16(nn)|->l_ix})): POW(BYTE));
  ("`LD_9nn0_IY preconditions in this component'" & nn: USHORTINT);
  ("`Local hypotheses'" & h_iy: BYTE & l_iy: BYTE & h_iy,l_iy = BV16_TO_BYTE(iy) & not(USHORTINT_TO_BV16(nn): dom(stack)) & not(USHORTINT_TO_BV16(add16USHORTINT(0,nn,1)): dom(stack)));
  ({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->h_iy}\/{USHORTINT_TO_BV16(nn)|->l_iy}: BV16 +-> BYTE);
  (({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->h_iy}\/{USHORTINT_TO_BV16(nn)|->l_iy})~: BYTE +-> BV16);
  (dom({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->h_iy}\/{USHORTINT_TO_BV16(nn)|->l_iy}) = BV16);
  ("`Local hypotheses'" & h_iy: BYTE & l_iy: BYTE & h_iy,l_iy = BV16_TO_BYTE(iy) & not(USHORTINT_TO_BV16(nn): dom(stack)) & not(USHORTINT_TO_BV16(add16USHORTINT(0,nn,1)): dom(stack)) & mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->h_iy}\/{USHORTINT_TO_BV16(nn)|->l_iy}): BV16 +-> BYTE & (mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->h_iy}\/{USHORTINT_TO_BV16(nn)|->l_iy}))~: BYTE +-> BV16 & dom(mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->h_iy}\/{USHORTINT_TO_BV16(nn)|->l_iy})) = BV16 & ran(mem<+({USHORTINT_TO_BV16(add16USHORTINT(0,nn,1))|->h_iy}\/{USHORTINT_TO_BV16(nn)|->l_iy})): POW(BYTE));
  ("`PUSH_qq preconditions in this component'" & qq: (1..5)*{id_reg_16} & not(qq = 4|->id_reg_16));
  ("`Local hypotheses'" & qqh: (1..18)*{id_reg_8} & qql: (1..18)*{id_reg_8} & REG16_TO_REG8(qq) = qqh|->qql & {USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->rgs8(qql)}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->rgs8(qqh)}: BV16 +-> BYTE & dom({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->rgs8(qql)}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->rgs8(qqh)}) = BV16);
  (({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->rgs8(qql)}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->rgs8(qqh)})~: BYTE +-> BV16);
  ("`Local hypotheses'" & qqh: (1..18)*{id_reg_8} & qql: (1..18)*{id_reg_8} & REG16_TO_REG8(qq) = qqh|->qql & {USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->rgs8(qql)}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->rgs8(qqh)}: BV16 +-> BYTE & dom({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->rgs8(qql)}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->rgs8(qqh)}) = BV16 & stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->rgs8(qql)}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->rgs8(qqh)}): BV16 +-> BYTE & (stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->rgs8(qql)}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->rgs8(qqh)}))~: BYTE +-> BV16 & dom(stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->rgs8(qql)}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->rgs8(qqh)})) = BV16 & ran(stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->rgs8(qql)}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->rgs8(qqh)})): POW(BYTE));
  (USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2)): BV16);
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & BV16_TO_BYTE(ix) = wh|->wl & {USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh}: BV16 +-> BYTE & dom({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh}) = BV16);
  (({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh})~: BYTE +-> BV16);
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & BV16_TO_BYTE(ix) = wh|->wl & {USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh}: BV16 +-> BYTE & dom({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh}) = BV16 & stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh}): BV16 +-> BYTE & (stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh}))~: BYTE +-> BV16 & dom(stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh})) = BV16 & ran(stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh})): POW(BYTE));
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & BV16_TO_BYTE(iy) = wh|->wl & {USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh}: BV16 +-> BYTE & dom({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh}) = BV16);
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & BV16_TO_BYTE(iy) = wh|->wl & {USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh}: BV16 +-> BYTE & dom({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh}) = BV16 & stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh}): BV16 +-> BYTE & (stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh}))~: BYTE +-> BV16 & dom(stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh})) = BV16 & ran(stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -2))|->wl}\/{USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp), -1))|->wh})): POW(BYTE));
  ("`POP_qq preconditions in this component'" & qq: (1..5)*{id_reg_16} & not(qq = 4|->id_reg_16));
  ("`Local hypotheses'" & qqh: (1..18)*{id_reg_8} & qql: (1..18)*{id_reg_8} & REG16_TO_REG8(qq) = qqh|->qql & {qql|->mem(USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),2)))}\/{qqh|->mem(USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1)))}: (1..18)*{id_reg_8} +-> BYTE & dom({qql|->mem(USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),2)))}\/{qqh|->mem(USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1)))}) = (1..18)*{id_reg_8});
  (rgs8<+({qql|->mem(USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),2)))}\/{qqh|->mem(USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1)))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({qql|->mem(USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),2)))}\/{qqh|->mem(USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1)))})) = (1..18)*{id_reg_8});
  (USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),2)): BV16);
  ("`POP_IX preconditions in this component'" & sp: BV16);
  ("`Local hypotheses'" & nw8: BYTE & BYTE_TO_BV16(mem(USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))),mem(USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),2)))) = nw8);
  (nw8: BV16);
  ("`POP_IY preconditions in this component'" & sp: BV16);
  (rgs8<+({9|->id_reg_8|->rgs8(13|->id_reg_8)}\/{10|->id_reg_8|->rgs8(14|->id_reg_8)}\/{13|->id_reg_8|->rgs8(9|->id_reg_8)}\/{14|->id_reg_8|->rgs8(10|->id_reg_8)}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({9|->id_reg_8|->rgs8(13|->id_reg_8)}\/{10|->id_reg_8|->rgs8(14|->id_reg_8)}\/{13|->id_reg_8|->rgs8(9|->id_reg_8)}\/{14|->id_reg_8|->rgs8(10|->id_reg_8)})) = (1..18)*{id_reg_8});
  (rgs8<+({1|->id_reg_8|->rgs8(4|->id_reg_8)}\/{2|->id_reg_8|->rgs8(3|->id_reg_8)}\/{4|->id_reg_8|->rgs8(1|->id_reg_8)}\/{3|->id_reg_8|->rgs8(2|->id_reg_8)}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->rgs8(4|->id_reg_8)}\/{2|->id_reg_8|->rgs8(3|->id_reg_8)}\/{4|->id_reg_8|->rgs8(1|->id_reg_8)}\/{3|->id_reg_8|->rgs8(2|->id_reg_8)})) = (1..18)*{id_reg_8});
  (rgs8<+({5|->id_reg_8|->rgs8(7|->id_reg_8)}\/{6|->id_reg_8|->rgs8(8|->id_reg_8)}\/{9|->id_reg_8|->rgs8(11|->id_reg_8)}\/{10|->id_reg_8|->rgs8(12|->id_reg_8)}\/{13|->id_reg_8|->rgs8(15|->id_reg_8)}\/{14|->id_reg_8|->rgs8(16|->id_reg_8)}\/{7|->id_reg_8|->rgs8(5|->id_reg_8)}\/{8|->id_reg_8|->rgs8(6|->id_reg_8)}\/{11|->id_reg_8|->rgs8(9|->id_reg_8)}\/{12|->id_reg_8|->rgs8(10|->id_reg_8)}\/{15|->id_reg_8|->rgs8(13|->id_reg_8)}\/{16|->id_reg_8|->rgs8(14|->id_reg_8)}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({5|->id_reg_8|->rgs8(7|->id_reg_8)}\/{6|->id_reg_8|->rgs8(8|->id_reg_8)}\/{9|->id_reg_8|->rgs8(11|->id_reg_8)}\/{10|->id_reg_8|->rgs8(12|->id_reg_8)}\/{13|->id_reg_8|->rgs8(15|->id_reg_8)}\/{14|->id_reg_8|->rgs8(16|->id_reg_8)}\/{7|->id_reg_8|->rgs8(5|->id_reg_8)}\/{8|->id_reg_8|->rgs8(6|->id_reg_8)}\/{11|->id_reg_8|->rgs8(9|->id_reg_8)}\/{12|->id_reg_8|->rgs8(10|->id_reg_8)}\/{15|->id_reg_8|->rgs8(13|->id_reg_8)}\/{16|->id_reg_8|->rgs8(14|->id_reg_8)})) = (1..18)*{id_reg_8});
  ("`EX_9SP0_HL preconditions in this component'" & stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}): POW(mem));
  ({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}: BV16 +-> BYTE);
  (({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})~: BYTE +-> BV16);
  (dom({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}) = BV16);
  ("`Local hypotheses'" & stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}): BV16 +-> BYTE & (stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)}))~: BYTE +-> BV16 & dom(stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})) = BV16 & ran(stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->rgs8(13|->id_reg_8)}\/{sp|->rgs8(14|->id_reg_8)})): POW(BYTE));
  (rgs8<+({13|->id_reg_8|->stack(USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1)))}\/{14|->id_reg_8|->stack(sp)}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->stack(USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1)))}\/{14|->id_reg_8|->stack(sp)})) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & BV16_TO_BYTE(ix) = wh|->wl & {USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}: BV16 +-> BYTE & dom({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}) = BV16 & stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}): POW(mem));
  (({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl})~: BYTE +-> BV16);
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & BV16_TO_BYTE(ix) = wh|->wl & {USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}: BV16 +-> BYTE & dom({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}) = BV16 & stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}): POW(mem) & stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}): BV16 +-> BYTE & (stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}))~: BYTE +-> BV16 & dom(stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl})) = BV16 & ran(stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl})): POW(BYTE));
  (BYTE_TO_BV16(stack(USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))),stack(sp)): BV16);
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & BV16_TO_BYTE(iy) = wh|->wl & {USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}: BV16 +-> BYTE & dom({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}) = BV16 & stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}): POW(mem));
  ("`Local hypotheses'" & wh: BYTE & wl: BYTE & BV16_TO_BYTE(iy) = wh|->wl & {USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}: BV16 +-> BYTE & dom({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}) = BV16 & stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}): POW(mem) & stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}): BV16 +-> BYTE & (stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl}))~: BYTE +-> BV16 & dom(stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl})) = BV16 & ran(stack<+({USHORTINT_TO_BV16(add16USHORTINT(0,BV16_TO_USHORTINT(sp),1))|->wh}\/{sp|->wl})): POW(BYTE));
  ("`Local hypotheses'" & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))));
  (mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE);
  ((mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))})~: BYTE +-> BV16);
  (dom(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16);
  ("`Local hypotheses'" & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE));
  (rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{9|->id_reg_8|->dvn}\/{10|->id_reg_8|->evn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bit_not(is_zeroUSHORTINT(BV16_TO_USHORTINT(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1)),0,bitget(rgs8(2|->id_reg_8),0))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{9|->id_reg_8|->dvn}\/{10|->id_reg_8|->evn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bit_not(is_zeroUSHORTINT(BV16_TO_USHORTINT(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1)),0,bitget(rgs8(2|->id_reg_8),0))})) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zeroUSHORTINT(BV16_TO_USHORTINT(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0 & mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE));
  (rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{9|->id_reg_8|->dvn}\/{10|->id_reg_8|->evn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,0,0,bitget(rgs8(2|->id_reg_8),0))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{9|->id_reg_8|->dvn}\/{10|->id_reg_8|->evn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,0,0,bitget(rgs8(2|->id_reg_8),0))})) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & not(is_zeroUSHORTINT(BV16_TO_USHORTINT(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0) & mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE));
  ("`Local hypotheses'" & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))));
  ("`Local hypotheses'" & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE));
  ("`Local hypotheses'" & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zeroUSHORTINT(BV16_TO_USHORTINT(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0 & mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE));
  ("`Local hypotheses'" & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & dvn,evn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & not(is_zeroUSHORTINT(BV16_TO_USHORTINT(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0) & mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}): POW(BYTE));
  ("`Local hypotheses'" & sum: SCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8SCHAR(0,BYTE_TO_SCHAR(rgs8(1|->id_reg_8)),BYTE_TO_SCHAR(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & zero = 1);
  ({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,bit_not(is_zeroUSHORTINT(BV16_TO_USHORTINT(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1)),1,bitget(rgs8(2|->id_reg_8),0))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->bvn}\/{6|->id_reg_8|->cvn}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,bit_not(is_zeroUSHORTINT(BV16_TO_USHORTINT(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1)),1,bitget(rgs8(2|->id_reg_8),0))}) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & sum: SCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8SCHAR(0,BYTE_TO_SCHAR(rgs8(1|->id_reg_8)),BYTE_TO_SCHAR(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & not(zero = 1));
  ("`Local hypotheses'" & sum: SCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8SCHAR(0,BYTE_TO_SCHAR(rgs8(1|->id_reg_8)),BYTE_TO_SCHAR(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zeroUSHORTINT(BV16_TO_USHORTINT(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0 & zero = 1);
  ("`Local hypotheses'" & sum: SCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8SCHAR(0,BYTE_TO_SCHAR(rgs8(1|->id_reg_8)),BYTE_TO_SCHAR(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zeroUSHORTINT(BV16_TO_USHORTINT(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0 & not(zero = 1));
  ("`Local hypotheses'" & sum: SCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8SCHAR(0,BYTE_TO_SCHAR(rgs8(1|->id_reg_8)),BYTE_TO_SCHAR(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & zero = 1);
  ("`Local hypotheses'" & sum: SCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8SCHAR(0,BYTE_TO_SCHAR(rgs8(1|->id_reg_8)),BYTE_TO_SCHAR(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & not(zero = 1));
  ("`Local hypotheses'" & sum: SCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8SCHAR(0,BYTE_TO_SCHAR(rgs8(1|->id_reg_8)),BYTE_TO_SCHAR(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zeroUSHORTINT(BV16_TO_USHORTINT(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0 & zero = 1);
  ("`Local hypotheses'" & sum: SCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & substract8SCHAR(0,BYTE_TO_SCHAR(rgs8(1|->id_reg_8)),BYTE_TO_SCHAR(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))) = (sum,negative,carry,half_carry)|->zero & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & bvn,cvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))) & is_zeroUSHORTINT(BV16_TO_USHORTINT(BYTE_TO_BV16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))-1) = 0 & not(zero = 1));
  (rgs8<+{1|->id_reg_8|->rgs8(1|->id_reg_8)}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{1|->id_reg_8|->rgs8(1|->id_reg_8)}) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & result: BYTE & result = complement(rgs8(1|->id_reg_8)));
  (rgs8<+({1|->id_reg_8|->result}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),1,bitget(rgs8(2|->id_reg_8),2),1,bitget(rgs8(2|->id_reg_8),0))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->result}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),1,bitget(rgs8(2|->id_reg_8),2),1,bitget(rgs8(2|->id_reg_8),0))})) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & sum: SCHAR & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & sum,negative,carry,half_carry,zero = substract8SCHAR(0,0,BYTE_TO_SCHAR(rgs8(1|->id_reg_8))));
  (rgs8<+({1|->id_reg_8|->SCHAR_TO_BYTE(sum)}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,carry,1,carry)}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->SCHAR_TO_BYTE(sum)}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,carry,1,carry)})) = (1..18)*{id_reg_8});
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),bitget(rgs8(2|->id_reg_8),4),bitget(rgs8(2|->id_reg_8),2),0,bit_not(bitget(rgs8(2|->id_reg_8),0)))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),bitget(rgs8(2|->id_reg_8),4),bitget(rgs8(2|->id_reg_8),2),0,bit_not(bitget(rgs8(2|->id_reg_8),0)))}) = (1..18)*{id_reg_8});
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),bitget(rgs8(2|->id_reg_8),4),bitget(rgs8(2|->id_reg_8),2),0,1)}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),bitget(rgs8(2|->id_reg_8),4),bitget(rgs8(2|->id_reg_8),2),0,1)}) = (1..18)*{id_reg_8});
  ("`IN_A_9n0 preconditions in this component'" & nn: UCHAR);
  ("`Local hypotheses'" & data_in: SCHAR);
  (rgs8<+{1|->id_reg_8|->SCHAR_TO_BYTE(data_in)}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{1|->id_reg_8|->SCHAR_TO_BYTE(data_in)}) = (1..18)*{id_reg_8});
  "`Check that the invariant (i_o_ports: BYTE --> BYTE) is preserved by the operation - ref 3.4'";
  (i_o_ports<+{UCHAR_TO_BYTE(nn)|->SCHAR_TO_BYTE(data_in)}: BYTE +-> BYTE);
  (dom(i_o_ports<+{UCHAR_TO_BYTE(nn)|->SCHAR_TO_BYTE(data_in)}) = BYTE);
  ("`IN_r_9C0 preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & negative = is_negative(data_in) & zero = is_zero(data_in) & half_carry = 0 & pv = parity_even_BYTE(data_in) & add_sub = 0 & carry = bitget(rgs8(2|->id_reg_8),0));
  (rgs8<+({rr|->data_in}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,pv,add_sub,carry)}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rr|->data_in}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,pv,add_sub,carry)})) = (1..18)*{id_reg_8});
  (i_o_ports<+{rgs8(6|->id_reg_8)|->data_in}: BYTE +-> BYTE);
  (dom(i_o_ports<+{rgs8(6|->id_reg_8)|->data_in}) = BYTE);
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  (i_o_ports(rgs8(6|->id_reg_8)): BYTE);
  (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE);
  ((mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))})~: BYTE +-> BV16);
  (dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) = BV16);
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}): POW(BYTE));
  (rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec_BYTE(rgs8(5|->id_reg_8))}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,pv,add_sub,carry)}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec_BYTE(rgs8(5|->id_reg_8))}\/{get_new_flag_register_SZ_H_PvNC(rgs8,negative,zero,half_carry,pv,add_sub,carry)})) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = 1 & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}: BV16 +-> BYTE);
  ((mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in})~: BYTE +-> BV16);
  (dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) = BV16);
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = 1 & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1 & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}): POW(BYTE));
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = 1 & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}): POW(BYTE));
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}): POW(BYTE));
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1 & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}): POW(BYTE));
  ("`Local hypotheses'" & data_in: BYTE & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(data_in) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(data_in) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->data_in}): POW(BYTE));
  ("`OUT_9n0_A preconditions in this component'" & nn: UCHAR);
  (i_o_ports<+{UCHAR_TO_BYTE(nn)|->rgs8(1|->id_reg_8)}: BYTE +-> BYTE);
  (dom(i_o_ports<+{UCHAR_TO_BYTE(nn)|->rgs8(1|->id_reg_8)}) = BYTE);
  ("`OUT_9C0_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  (i_o_ports<+{rgs8(rr)|->rgs8(6|->id_reg_8)}: BYTE +-> BYTE);
  (dom(i_o_ports<+{rgs8(rr)|->rgs8(6|->id_reg_8)}) = BYTE);
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}): POW(BYTE));
  (i_o_ports<+{rgs8(6|->id_reg_8)|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BYTE +-> BYTE);
  (dom(i_o_ports<+{rgs8(6|->id_reg_8)|->mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BYTE);
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1 & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}): POW(BYTE));
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(inc_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}): POW(BYTE));
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0));
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}): POW(BYTE));
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1 & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}): POW(BYTE));
  ("`Local hypotheses'" & negative: BIT & carry: BIT & half_carry: BIT & zero: BIT & hvn,lvn = BV16_TO_BYTE(dec_BV16(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & negative = is_negative(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & zero = is_zero(dec_BYTE(rgs8(5|->id_reg_8))) & half_carry = bitget(rgs8(2|->id_reg_8),4) & pv = parity_even_BYTE(mem(BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & add_sub = 1 & carry = bitget(rgs8(2|->id_reg_8),0) & not(is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1) & mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}: BV16 +-> BYTE & (mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))})~: BYTE +-> BV16 & dom(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}) = BV16 & ran(mem<+{BYTE_TO_BV16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->i_o_ports(rgs8(6|->id_reg_8))}): POW(BYTE))
END
&
THEORY EnumerateX IS
  id_reg_8 == {a0,f0,f_0,a_0,b0,c0,b_0,c_0,d0,e0,d_0,e_0,h0,l0,h_0,l_0,i0,r0};
  id_reg_16 == {BC,DE,HL,SP,AF}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
