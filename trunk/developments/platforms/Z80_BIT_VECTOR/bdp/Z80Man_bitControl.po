THEORY ProofList IS
  _f(1) & _f(2) & _f(3) & _f(65) & _f(257) & CALL_nn.4,(_f(259) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(257) & CALL_nn.3,(_f(259) & _f(260) => _f(261));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(257) & CALL_nn.2,(_f(259) & _f(69) => _f(231));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(257) & CALL_nn.1,(_f(84) => _f(258));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(252) & DJNZ_e.8,(_f(256) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(252) & DJNZ_e.7,(_f(256) & _f(69) => _f(236));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(252) & DJNZ_e.6,(_f(256) & _f(66) => _f(255));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(252) & DJNZ_e.5,(_f(256) & _f(66) => _f(254));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(252) & DJNZ_e.4,(_f(253) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(252) & DJNZ_e.3,(_f(253) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(252) & DJNZ_e.2,(_f(253) & _f(66) => _f(255));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(252) & DJNZ_e.1,(_f(253) & _f(66) => _f(254));
  _f(1) & _f(2) & _f(3) & _f(65) & JP_IY.2,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & JP_IY.1,(_f(69) => _f(251));
  _f(1) & _f(2) & _f(3) & _f(65) & JP_IX.2,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & JP_IX.1,(_f(69) => _f(250));
  _f(1) & _f(2) & _f(3) & _f(65) & JP_HL.2,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & JP_HL.1,(_f(69) => _f(249));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(246) & JR_NZ_e.4,(_f(248) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(246) & JR_NZ_e.3,(_f(248) & _f(69) => _f(236));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(246) & JR_NZ_e.2,(_f(247) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(246) & JR_NZ_e.1,(_f(247) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(243) & JR_Z_e.4,(_f(245) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(243) & JR_Z_e.3,(_f(245) & _f(69) => _f(236));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(243) & JR_Z_e.2,(_f(244) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(243) & JR_Z_e.1,(_f(244) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(240) & JR_NC_e.4,(_f(242) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(240) & JR_NC_e.3,(_f(242) & _f(69) => _f(236));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(240) & JR_NC_e.2,(_f(241) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(240) & JR_NC_e.1,(_f(241) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(237) & JR_C_e.4,(_f(239) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(237) & JR_C_e.3,(_f(239) & _f(69) => _f(236));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(237) & JR_C_e.2,(_f(238) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(237) & JR_C_e.1,(_f(238) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(235) & JR_e.2,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(235) & JR_e.1,(_f(69) => _f(236));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(232) & JP_cc_nn.4,(_f(234) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(232) & JP_cc_nn.3,(_f(234) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(232) & JP_cc_nn.2,(_f(233) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(232) & JP_cc_nn.1,(_f(233) & _f(69) => _f(231));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(230) & JP_nn.2,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(230) & JP_nn.1,(_f(69) => _f(231));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(225) & RES_b_9IY_d0.6,(_f(229) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(225) & RES_b_9IY_d0.5,(_f(229) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(225) & RES_b_9IY_d0.4,(_f(84) => _f(228));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(225) & RES_b_9IY_d0.3,(_f(84) => _f(227));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(225) & RES_b_9IY_d0.2,(_f(84) => _f(226));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(225) & RES_b_9IY_d0.1,(_f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(220) & RES_b_9IX_d0.6,(_f(224) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(220) & RES_b_9IX_d0.5,(_f(224) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(220) & RES_b_9IX_d0.4,(_f(84) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(220) & RES_b_9IX_d0.3,(_f(84) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(220) & RES_b_9IX_d0.2,(_f(84) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(220) & RES_b_9IX_d0.1,(_f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(215) & RES_b_9HL0.6,(_f(219) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(215) & RES_b_9HL0.5,(_f(219) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(215) & RES_b_9HL0.4,(_f(84) => _f(218));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(215) & RES_b_9HL0.3,(_f(84) => _f(217));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(215) & RES_b_9HL0.2,(_f(84) => _f(216));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(215) & RES_b_9HL0.1,(_f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(212) & RES_b_r.4,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(212) & RES_b_r.3,(_f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(212) & RES_b_r.2,(_f(66) => _f(214));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(212) & RES_b_r.1,(_f(66) => _f(213));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(207) & SET_b_9IY_d0.6,(_f(211) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(207) & SET_b_9IY_d0.5,(_f(211) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(207) & SET_b_9IY_d0.4,(_f(84) => _f(210));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(207) & SET_b_9IY_d0.3,(_f(84) => _f(209));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(207) & SET_b_9IY_d0.2,(_f(84) => _f(208));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(207) & SET_b_9IY_d0.1,(_f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(202) & SET_b_9IX_d0.6,(_f(206) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(202) & SET_b_9IX_d0.5,(_f(206) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(202) & SET_b_9IX_d0.4,(_f(84) => _f(205));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(202) & SET_b_9IX_d0.3,(_f(84) => _f(204));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(202) & SET_b_9IX_d0.2,(_f(84) => _f(203));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(202) & SET_b_9IX_d0.1,(_f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(197) & SET_b_9HL0.6,(_f(201) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(197) & SET_b_9HL0.5,(_f(201) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(197) & SET_b_9HL0.4,(_f(84) => _f(200));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(197) & SET_b_9HL0.3,(_f(84) => _f(199));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(197) & SET_b_9HL0.2,(_f(84) => _f(198));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(197) & SET_b_9HL0.1,(_f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(194) & SET_b_r.4,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(194) & SET_b_r.3,(_f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(194) & SET_b_r.2,(_f(66) => _f(196));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(194) & SET_b_r.1,(_f(66) => _f(195));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(191) & BIT_b_9IY_d0.4,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(191) & BIT_b_9IY_d0.3,(_f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(191) & BIT_b_9IY_d0.2,(_f(66) => _f(193));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(191) & BIT_b_9IY_d0.1,(_f(66) => _f(192));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(188) & BIT_b_9IX_d0.4,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(188) & BIT_b_9IX_d0.3,(_f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(188) & BIT_b_9IX_d0.2,(_f(66) => _f(190));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(188) & BIT_b_9IX_d0.1,(_f(66) => _f(189));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(185) & BIT_b_9HL0.4,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(185) & BIT_b_9HL0.3,(_f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(185) & BIT_b_9HL0.2,(_f(66) => _f(187));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(185) & BIT_b_9HL0.1,(_f(66) => _f(186));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(182) & BIT_b_rr.4,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(182) & BIT_b_rr.3,(_f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(182) & BIT_b_rr.2,(_f(66) => _f(184));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(182) & BIT_b_rr.1,(_f(66) => _f(183));
  _f(1) & _f(2) & _f(3) & _f(65) & RRD.7,(_f(181) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & RRD.6,(_f(181) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & RRD.5,(_f(181) & _f(66) => _f(179));
  _f(1) & _f(2) & _f(3) & _f(65) & RRD.4,(_f(181) & _f(66) => _f(178));
  _f(1) & _f(2) & _f(3) & _f(65) & RRD.3,(_f(180) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & RRD.2,(_f(180) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & RRD.1,(_f(180) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & RLD.7,(_f(177) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & RLD.6,(_f(177) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & RLD.5,(_f(177) & _f(66) => _f(179));
  _f(1) & _f(2) & _f(3) & _f(65) & RLD.4,(_f(177) & _f(66) => _f(178));
  _f(1) & _f(2) & _f(3) & _f(65) & RLD.3,(_f(176) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & RLD.2,(_f(176) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & RLD.1,(_f(176) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(171) & SRL_9IY_d9.7,(_f(173) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(171) & SRL_9IY_d9.6,(_f(173) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(171) & SRL_9IY_d9.5,(_f(173) & _f(66) => _f(175));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(171) & SRL_9IY_d9.4,(_f(173) & _f(66) => _f(174));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(171) & SRL_9IY_d9.3,(_f(172) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(171) & SRL_9IY_d9.2,(_f(172) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(171) & SRL_9IY_d9.1,(_f(172) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(166) & SRL_9IX_d9.7,(_f(168) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(166) & SRL_9IX_d9.6,(_f(168) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(166) & SRL_9IX_d9.5,(_f(168) & _f(66) => _f(170));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(166) & SRL_9IX_d9.4,(_f(168) & _f(66) => _f(169));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(166) & SRL_9IX_d9.3,(_f(167) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(166) & SRL_9IX_d9.2,(_f(167) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(166) & SRL_9IX_d9.1,(_f(167) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & SRL_9HL0.7,(_f(163) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & SRL_9HL0.6,(_f(163) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & SRL_9HL0.5,(_f(163) & _f(66) => _f(165));
  _f(1) & _f(2) & _f(3) & _f(65) & SRL_9HL0.4,(_f(163) & _f(66) => _f(164));
  _f(1) & _f(2) & _f(3) & _f(65) & SRL_9HL0.3,(_f(162) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & SRL_9HL0.2,(_f(162) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & SRL_9HL0.1,(_f(162) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(158) & SRL_r.4,(_f(159) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(158) & SRL_r.3,(_f(159) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(158) & SRL_r.2,(_f(159) & _f(66) => _f(161));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(158) & SRL_r.1,(_f(159) & _f(66) => _f(160));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(155) & SRA_9IY_d9.7,(_f(157) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(155) & SRA_9IY_d9.6,(_f(157) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(155) & SRA_9IY_d9.5,(_f(157) & _f(66) => _f(134));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(155) & SRA_9IY_d9.4,(_f(157) & _f(66) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(155) & SRA_9IY_d9.3,(_f(156) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(155) & SRA_9IY_d9.2,(_f(156) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(155) & SRA_9IY_d9.1,(_f(156) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(152) & SRA_9IX_d9.7,(_f(154) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(152) & SRA_9IX_d9.6,(_f(154) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(152) & SRA_9IX_d9.5,(_f(154) & _f(66) => _f(129));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(152) & SRA_9IX_d9.4,(_f(154) & _f(66) => _f(128));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(152) & SRA_9IX_d9.3,(_f(153) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(152) & SRA_9IX_d9.2,(_f(153) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(152) & SRA_9IX_d9.1,(_f(153) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & SRA_9HL0.7,(_f(151) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & SRA_9HL0.6,(_f(151) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & SRA_9HL0.5,(_f(151) & _f(66) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(65) & SRA_9HL0.4,(_f(151) & _f(66) => _f(123));
  _f(1) & _f(2) & _f(3) & _f(65) & SRA_9HL0.3,(_f(150) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & SRA_9HL0.2,(_f(150) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & SRA_9HL0.1,(_f(150) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(148) & SRA_r.4,(_f(149) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(148) & SRA_r.3,(_f(149) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(148) & SRA_r.2,(_f(149) & _f(66) => _f(120));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(148) & SRA_r.1,(_f(149) & _f(66) => _f(119));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(147) & SLA_9IY_d9.7,(_f(144) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(147) & SLA_9IY_d9.6,(_f(144) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(147) & SLA_9IY_d9.5,(_f(144) & _f(66) => _f(100));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(147) & SLA_9IY_d9.4,(_f(144) & _f(66) => _f(99));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(147) & SLA_9IY_d9.3,(_f(143) & _f(84) => _f(115));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(147) & SLA_9IY_d9.2,(_f(143) & _f(84) => _f(114));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(147) & SLA_9IY_d9.1,(_f(143) & _f(84) => _f(113));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(146) & SLA_9IX_d9.7,(_f(141) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(146) & SLA_9IX_d9.6,(_f(141) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(146) & SLA_9IX_d9.5,(_f(141) & _f(66) => _f(95));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(146) & SLA_9IX_d9.4,(_f(141) & _f(66) => _f(94));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(146) & SLA_9IX_d9.3,(_f(140) & _f(84) => _f(109));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(146) & SLA_9IX_d9.2,(_f(140) & _f(84) => _f(108));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(146) & SLA_9IX_d9.1,(_f(140) & _f(84) => _f(107));
  _f(1) & _f(2) & _f(3) & _f(65) & SLA_9HL.7,(_f(138) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & SLA_9HL.6,(_f(138) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & SLA_9HL.5,(_f(138) & _f(66) => _f(90));
  _f(1) & _f(2) & _f(3) & _f(65) & SLA_9HL.4,(_f(138) & _f(66) => _f(89));
  _f(1) & _f(2) & _f(3) & _f(65) & SLA_9HL.3,(_f(137) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & SLA_9HL.2,(_f(137) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & SLA_9HL.1,(_f(137) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(145) & SLA_r.4,(_f(136) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(145) & SLA_r.3,(_f(136) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(145) & SLA_r.2,(_f(136) & _f(66) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(145) & SLA_r.1,(_f(136) & _f(66) => _f(81));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(142) & RR_9IY_d9.7,(_f(144) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(142) & RR_9IY_d9.6,(_f(144) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(142) & RR_9IY_d9.5,(_f(144) & _f(66) => _f(134));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(142) & RR_9IY_d9.4,(_f(144) & _f(66) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(142) & RR_9IY_d9.3,(_f(143) & _f(84) => _f(115));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(142) & RR_9IY_d9.2,(_f(143) & _f(84) => _f(114));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(142) & RR_9IY_d9.1,(_f(143) & _f(84) => _f(113));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(139) & RR_9IX_d9.7,(_f(141) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(139) & RR_9IX_d9.6,(_f(141) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(139) & RR_9IX_d9.5,(_f(141) & _f(66) => _f(129));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(139) & RR_9IX_d9.4,(_f(141) & _f(66) => _f(128));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(139) & RR_9IX_d9.3,(_f(140) & _f(84) => _f(109));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(139) & RR_9IX_d9.2,(_f(140) & _f(84) => _f(108));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(139) & RR_9IX_d9.1,(_f(140) & _f(84) => _f(107));
  _f(1) & _f(2) & _f(3) & _f(65) & RR_9HL.7,(_f(138) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & RR_9HL.6,(_f(138) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & RR_9HL.5,(_f(138) & _f(66) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(65) & RR_9HL.4,(_f(138) & _f(66) => _f(123));
  _f(1) & _f(2) & _f(3) & _f(65) & RR_9HL.3,(_f(137) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & RR_9HL.2,(_f(137) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & RR_9HL.1,(_f(137) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(135) & RR_r.4,(_f(136) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(135) & RR_r.3,(_f(136) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(135) & RR_r.2,(_f(136) & _f(66) => _f(120));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(135) & RR_r.1,(_f(136) & _f(66) => _f(119));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(130) & RRC_9IY_d9.7,(_f(132) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(130) & RRC_9IY_d9.6,(_f(132) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(130) & RRC_9IY_d9.5,(_f(132) & _f(66) => _f(134));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(130) & RRC_9IY_d9.4,(_f(132) & _f(66) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(130) & RRC_9IY_d9.3,(_f(131) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(130) & RRC_9IY_d9.2,(_f(131) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(130) & RRC_9IY_d9.1,(_f(131) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(125) & RRC_9IX_d9.7,(_f(127) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(125) & RRC_9IX_d9.6,(_f(127) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(125) & RRC_9IX_d9.5,(_f(127) & _f(66) => _f(129));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(125) & RRC_9IX_d9.4,(_f(127) & _f(66) => _f(128));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(125) & RRC_9IX_d9.3,(_f(126) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(125) & RRC_9IX_d9.2,(_f(126) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(125) & RRC_9IX_d9.1,(_f(126) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & RRC_9HL0.7,(_f(122) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & RRC_9HL0.6,(_f(122) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & RRC_9HL0.5,(_f(122) & _f(66) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(65) & RRC_9HL0.4,(_f(122) & _f(66) => _f(123));
  _f(1) & _f(2) & _f(3) & _f(65) & RRC_9HL0.3,(_f(121) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & RRC_9HL0.2,(_f(121) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & RRC_9HL0.1,(_f(121) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(117) & RRC_r.4,(_f(118) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(117) & RRC_r.3,(_f(118) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(117) & RRC_r.2,(_f(118) & _f(66) => _f(120));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(117) & RRC_r.1,(_f(118) & _f(66) => _f(119));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(111) & RL_9IY_d9.7,(_f(116) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(111) & RL_9IY_d9.6,(_f(116) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(111) & RL_9IY_d9.5,(_f(116) & _f(66) => _f(100));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(111) & RL_9IY_d9.4,(_f(116) & _f(66) => _f(99));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(111) & RL_9IY_d9.3,(_f(112) & _f(84) => _f(115));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(111) & RL_9IY_d9.2,(_f(112) & _f(84) => _f(114));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(111) & RL_9IY_d9.1,(_f(112) & _f(84) => _f(113));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(105) & RL_9IX_d9.7,(_f(110) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(105) & RL_9IX_d9.6,(_f(110) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(105) & RL_9IX_d9.5,(_f(110) & _f(66) => _f(95));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(105) & RL_9IX_d9.4,(_f(110) & _f(66) => _f(94));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(105) & RL_9IX_d9.3,(_f(106) & _f(84) => _f(109));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(105) & RL_9IX_d9.2,(_f(106) & _f(84) => _f(108));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(105) & RL_9IX_d9.1,(_f(106) & _f(84) => _f(107));
  _f(1) & _f(2) & _f(3) & _f(65) & RL_9HL.7,(_f(104) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & RL_9HL.6,(_f(104) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & RL_9HL.5,(_f(104) & _f(66) => _f(90));
  _f(1) & _f(2) & _f(3) & _f(65) & RL_9HL.4,(_f(104) & _f(66) => _f(89));
  _f(1) & _f(2) & _f(3) & _f(65) & RL_9HL.3,(_f(103) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & RL_9HL.2,(_f(103) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & RL_9HL.1,(_f(103) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(101) & RL_r.4,(_f(102) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(101) & RL_r.3,(_f(102) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(101) & RL_r.2,(_f(102) & _f(66) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(101) & RL_r.1,(_f(102) & _f(66) => _f(81));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(96) & RLC_9IY_d9.7,(_f(98) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(96) & RLC_9IY_d9.6,(_f(98) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(96) & RLC_9IY_d9.5,(_f(98) & _f(66) => _f(100));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(96) & RLC_9IY_d9.4,(_f(98) & _f(66) => _f(99));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(96) & RLC_9IY_d9.3,(_f(97) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(96) & RLC_9IY_d9.2,(_f(97) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(96) & RLC_9IY_d9.1,(_f(97) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(91) & RLC_9IX_d9.7,(_f(93) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(91) & RLC_9IX_d9.6,(_f(93) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(91) & RLC_9IX_d9.5,(_f(93) & _f(66) => _f(95));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(91) & RLC_9IX_d9.4,(_f(93) & _f(66) => _f(94));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(91) & RLC_9IX_d9.3,(_f(92) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(91) & RLC_9IX_d9.2,(_f(92) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(91) & RLC_9IX_d9.1,(_f(92) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & RLC_9HL0.7,(_f(88) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & RLC_9HL0.6,(_f(88) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & RLC_9HL0.5,(_f(88) & _f(66) => _f(90));
  _f(1) & _f(2) & _f(3) & _f(65) & RLC_9HL0.4,(_f(88) & _f(66) => _f(89));
  _f(1) & _f(2) & _f(3) & _f(65) & RLC_9HL0.3,(_f(83) & _f(84) => _f(87));
  _f(1) & _f(2) & _f(3) & _f(65) & RLC_9HL0.2,(_f(83) & _f(84) => _f(86));
  _f(1) & _f(2) & _f(3) & _f(65) & RLC_9HL0.1,(_f(83) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(79) & RLC_r.4,(_f(80) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(79) & RLC_r.3,(_f(80) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(79) & RLC_r.2,(_f(80) & _f(66) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(65) & _f(79) & RLC_r.1,(_f(80) & _f(66) => _f(81));
  _f(1) & _f(2) & _f(3) & _f(65) & RRA.4,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & RRA.3,(_f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & RRA.2,(_f(66) => _f(78));
  _f(1) & _f(2) & _f(3) & _f(65) & RRA.1,(_f(66) => _f(77));
  _f(1) & _f(2) & _f(3) & _f(65) & RRCA.4,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & RRCA.3,(_f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & RRCA.2,(_f(66) => _f(76));
  _f(1) & _f(2) & _f(3) & _f(65) & RRCA.1,(_f(66) => _f(75));
  _f(1) & _f(2) & _f(3) & _f(65) & RLA.4,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & RLA.3,(_f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & RLA.2,(_f(66) => _f(74));
  _f(1) & _f(2) & _f(3) & _f(65) & RLA.1,(_f(66) => _f(73));
  _f(1) & _f(2) & _f(3) & _f(65) & RLCA.4,(_f(71) => _f(72));
  _f(1) & _f(2) & _f(3) & _f(65) & RLCA.3,(_f(69) => _f(70));
  _f(1) & _f(2) & _f(3) & _f(65) & RLCA.2,(_f(66) => _f(68));
  _f(1) & _f(2) & _f(3) & _f(65) & RLCA.1,(_f(66) => _f(67));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.29,(_f(63) => _f(64));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.28,(_f(61) => _f(62));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.27,(_f(59) => _f(60));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.26,(_f(57) => _f(58));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.25,(_f(55) => _f(56));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.24,(_f(53) => _f(54));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.23,(_f(51) => _f(52));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.22,(_f(49) => _f(50));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.21,(_f(47) => _f(48));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.20,(_f(45) => _f(46));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.19,(_f(43) => _f(44));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.18,(_f(41) => _f(42));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.17,(_f(39) => _f(40));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.16,(_f(37) => _f(38));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.15,(_f(35) => _f(36));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.14,(_f(33) => _f(34));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.13,(_f(31) => _f(32));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.12,(_f(29) => _f(30));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.11,(_f(27) => _f(28));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.10,(_f(25) => _f(26));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.9,(_f(23) => _f(24));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.8,(_f(21) => _f(22));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.7,(_f(19) => _f(20));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.6,(_f(17) => _f(18));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.5,(_f(15) => _f(16));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.4,(_f(13) => _f(14));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.3,(_f(10) & _f(11) => _f(12));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.2,(_f(7) & _f(8) => _f(9));
  _f(1) & _f(2) & _f(3) & AssertionLemmas.1,(_f(4) & _f(5) => _f(6))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & SCHAR_MAX: INTEGER & SCHAR_MIN: INTEGER & SCHAR_MAX = 2**7-1 & SCHAR_MIN = (-2)**7 & SCHAR = (-2)**7..2**7-1 & UCHAR = 0..2**8-1 & UCHAR_MAX: INTEGER & UCHAR_MIN: INTEGER & UCHAR_MAX = 2**8 & UCHAR_MIN = 0 & uchar_schar: UCHAR +-> SCHAR & dom(uchar_schar) = UCHAR & uchar_schar = %v1.(v1: UCHAR & v1<=SCHAR_MAX | v1) & uchar_schar = %v1.(v1: UCHAR & not(v1<=SCHAR_MAX) | v1-UCHAR_MAX+1) & schar_uchar: SCHAR +-> UCHAR & dom(schar_uchar) = SCHAR & schar_uchar = uchar_schar~ & SSHORTINT = (-2)**15..2**15-1 & byte_to_uchar: BYTE +-> UCHAR & dom(byte_to_uchar) = BYTE & byte_to_uchar = %v0.(v0: BYTE | 2**7*v0(7)+2**6*v0(6)+2**5*v0(5)+2**4*v0(4)+2**3*v0(3)+2**2*v0(2)+2*v0(1)+v0(0)) & uchar_to_byte: UCHAR +-> BYTE & dom(uchar_to_byte) = UCHAR & uchar_to_byte = byte_to_uchar~ & update_refresh_reg: BYTE +-> BYTE & dom(update_refresh_reg) = BYTE & update_refresh_reg = %v0.(v0: BYTE | uchar_to_byte(2**7*v0(7)+(2**6*v0(6)+2**5*v0(5)+2**4*v0(4)+2**3*v0(3)+2**2*v0(2)+2*v0(1)+v0(0)) mod 64)) & USHORTINT = 0..2**16-1 & USHORTINT_MAX = 2**16-1 & USHORTINT_MIN = 0 & NB_INSTRUCTIONS: INTEGER & 0<=NB_INSTRUCTIONS & INST_SZ: INTEGER & 0<=INST_SZ & INST_SZ = 16 & NB_INSTRUCTIONS = 2**INST_SZ & INSTRUCTION_MAX = NB_INSTRUCTIONS-1 & INSTRUCTION = USHORTINT & instruction_next: USHORTINT +-> USHORTINT & dom(instruction_next) = USHORTINT & instruction_next = %w1.(w1: USHORTINT | (w1+1) mod 65535) & instruction_jump = %(p0,e0).(p0: INSTRUCTION & e0: -126..129 | (p0+e0) mod 65535) & byte_to_schar: BYTE +-> SCHAR & dom(byte_to_schar) = BYTE & byte_to_schar = %v0.(v0: BYTE | (-2)**7*v0(7)+2**6*v0(6)+2**5*v0(5)+2**4*v0(4)+2**3*v0(3)+2**2*v0(2)+2*v0(1)+v0(0)) & schar_to_byte: SCHAR +-> BYTE & dom(schar_to_byte) = SCHAR & schar_to_byte = byte_to_schar~ & bv16_to_sshortint: BV16 +-> SSHORTINT & dom(bv16_to_sshortint) = BV16 & bv16_to_sshortint = %v0.(v0: BV16 | (-2)**15*v0(15)+2**14*v0(14)+2**13*v0(13)+2**12*v0(12)+2**11*v0(11)+2**10*v0(10)+2**9*v0(9)+2**8*v0(8)+2**7*v0(7)+2**6*v0(6)+2**5*v0(5)+2**4*v0(4)+2**3*v0(3)+2**2*v0(2)+2*v0(1)+v0(0)) & sshortint_to_bv16: SSHORTINT +-> BV16 & dom(sshortint_to_bv16) = SSHORTINT & sshortint_to_bv16 = bv16_to_sshortint~ & byte_to_bv16: BYTE*BYTE +-> BV16 & dom(byte_to_bv16) = BYTE*BYTE & byte_to_bv16 = %(v1,v2).(v1: BV16 & v2: BV16 | {0|->v2(0)}\/{1|->v2(1)}\/{2|->v2(2)}\/{3|->v2(3)}\/{4|->v2(4)}\/{5|->v2(5)}\/{6|->v2(6)}\/{7|->v2(7)}\/{8|->v1(0)}\/{9|->v1(1)}\/{10|->v1(2)}\/{11|->v1(3)}\/{12|->v1(4)}\/{13|->v1(5)}\/{14|->v1(6)}\/{15|->v1(7)}) & bv16_to_byte: BV16 +-> BYTE*BYTE & dom(bv16_to_byte) = BV16 & bv16_to_byte = byte_to_bv16~ & schar_to_sshortint: SCHAR*SCHAR +-> SSHORTINT & dom(schar_to_sshortint) = SCHAR*SCHAR & schar_to_sshortint = %(w1,w2).(w1: SCHAR & w2: SCHAR | bv16_to_sshortint(byte_to_bv16(schar_to_byte(w1),schar_to_byte(w2)))) & sshortint_to_schar: SSHORTINT +-> SCHAR*SCHAR & dom(sshortint_to_schar) = SSHORTINT & sshortint_to_schar = schar_to_sshortint~ & bv16_to_ushortint: BV16 +-> USHORTINT & dom(bv16_to_ushortint) = BV16 & bv16_to_ushortint = %v0.(v0: BV16 | 2**15*v0(15)+2**14*v0(14)+2**13*v0(13)+2**12*v0(12)+2**11*v0(11)+2**10*v0(10)+2**9*v0(9)+2**8*v0(8)+2**7*v0(7)+2**6*v0(6)+2**5*v0(5)+2**4*v0(4)+2**3*v0(3)+2**2*v0(2)+2*v0(1)+v0(0)) & ushortint_to_bv16: USHORTINT +-> BV16 & dom(ushortint_to_bv16) = USHORTINT & ushortint_to_bv16 = bv16_to_ushortint~ & sshortint_to_ushortint: SSHORTINT +-> USHORTINT & dom(sshortint_to_ushortint) = SSHORTINT & sshortint_to_ushortint = %v0.(v0: SSHORTINT | v0-32768) & ushortint_to_sshortint: USHORTINT +-> SSHORTINT & dom(ushortint_to_sshortint) = USHORTINT & ushortint_to_sshortint = sshortint_to_ushortint~ & get_upper_digit = %by.(by: BYTE | 2**3*by(7)+2**2*by(6)+2*by(5)+by(4)) & get_lower_digit = %by.(by: BYTE | 2**3*by(3)+2**2*by(2)+2*by(1)+by(0)) & BIT = 0..1 & bit_not: BIT +-> BIT & dom(bit_not) = BIT & bit_not = %bb.(bb: BIT | 1-bb) & bit_and: BIT*BIT +-> BIT & dom(bit_and) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_and(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_and(b1,b2) = 1) & b2 = 1) & bit_or: BIT*BIT +-> BIT & dom(bit_or) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_or(b1,b2) = 1 => b1 = 1) & (b1 = 1 => bit_or(b1,b2) = 1) or b2 = 1) & bit_xor: BIT*BIT +-> BIT & dom(bit_xor) = BIT*BIT & !(b1,b2).(b1: BIT & b2: BIT => (bit_xor(b1,b2) = 1 => not(b1 = b2)) & (not(b1 = b2) => bit_xor(b1,b2) = 1)) & bool_to_bit: BOOL +-> BIT & dom(bool_to_bit) = BOOL & bool_to_bit = {TRUE|->1}\/{FALSE|->0} & BIT_VECTOR = seq(BIT)-{{}} & bv_size: BIT_VECTOR +-> NATURAL-{0} & dom(bv_size) = BIT_VECTOR & bv_size = %bv.(bv: BIT_VECTOR | size(bv)) & bv_catenate: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_catenate) = BIT_VECTOR*BIT_VECTOR & bv_catenate = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR | v1^v2) & bv_index: BIT_VECTOR +-> POW(NATURAL) & dom(bv_index) = BIT_VECTOR & bv_index = %v1.(v1: BIT_VECTOR | 0..bv_size(v1)-1) & bv_sub: BIT_VECTOR*NATURAL*NATURAL +-> BIT_VECTOR & dom(bv_sub) = BIT_VECTOR*NATURAL*NATURAL & bv_sub = %(bv,low,high).(bv: BIT_VECTOR & low: 0..bv_size(bv)-1 & high: low..bv_size(bv)-1 | %i0.(i0: 1..high-low+1 | bv(i0+low))) & bv_zero: NATURAL-{0} +-> BIT_VECTOR & dom(bv_zero) = NATURAL-{0} & bv_zero = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{0}) & bv_one: NATURAL-{0} +-> BIT_VECTOR & dom(bv_one) = NATURAL-{0} & bv_one = %sz.(sz: INTEGER & 0<=sz & not(sz = 0) | (1..sz)*{1}) & bv_not: BIT_VECTOR +-> BIT_VECTOR & dom(bv_not) = BIT_VECTOR & bv_not = %v1.(v1: BIT_VECTOR | %idx.(idx: 1..bv_size(v1) | bit_not(v1(idx)))) & bv_and: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_and) = BIT_VECTOR*BIT_VECTOR & bv_and = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_and(v1(idx),v2(idx)))) & bv_or: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_or) = BIT_VECTOR*BIT_VECTOR & bv_or = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_or(v1(idx),v2(idx)))) & bv_xor: BIT_VECTOR*BIT_VECTOR +-> BIT_VECTOR & dom(bv_xor) = BIT_VECTOR*BIT_VECTOR & bv_xor = %(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) | %idx.(idx: 1..bv_size(v1) | bit_xor(v1(idx),v2(idx)))) & bv_get: BIT_VECTOR*NATURAL +-> BIT & dom(bv_get) = BIT_VECTOR*NATURAL & bv_get = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1(idx+1)) & bv_set: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_set) = BIT_VECTOR*NATURAL & bv_set = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1<+{idx+1|->1}) & bv_clear: BIT_VECTOR*NATURAL +-> BIT_VECTOR & dom(bv_clear) = BIT_VECTOR*NATURAL & bv_clear = %(v1,idx).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 | v1<+{idx+1|->0}) & bv_put: BIT_VECTOR*NATURAL*BIT +-> BIT_VECTOR & dom(bv_put) = BIT_VECTOR*NATURAL*BIT & bv_put = %(v1,idx,bit).(v1: BIT_VECTOR & idx: 0..bv_size(v1)-1 & bit: BIT | v1<+{idx+1|->bit}) & BYTE_WIDTH = 8 & BYTE_INDEX = 1..BYTE_WIDTH & REAL_BYTE_INDEX = 0..BYTE_WIDTH-1 & BYTE = SET(bt).(bt: BIT_VECTOR & bv_size(bt) = BYTE_WIDTH) & BYTE_ZERO: BYTE & BYTE_ZERO = BYTE_INDEX*{0} & byte_bit_get: BYTE*REAL_BYTE_INDEX +-> BIT & dom(byte_bit_get) = BYTE*REAL_BYTE_INDEX & byte_bit_get = %(bt,ind).(bt: BYTE & ind: REAL_BYTE_INDEX | bt(ind+1)) & BV16_INDX = 1..16 & REAL_BV16_INDX = 0..15 & BV16 = SET(bt).(bt: BIT_VECTOR & bv_size(bt) = 16) & BV16_ZERO = BV16_INDX*{0} & bv16_byte: BV16 +-> BYTE*BYTE & dom(bv16_byte) = BV16 & bv16_byte = %bv.(bv: BV16 | {0|->bv(8)}\/{1|->bv(9)}\/{2|->bv(10)}\/{3|->bv(11)}\/{4|->bv(12)}\/{5|->bv(13)}\/{6|->bv(14)}\/{7|->bv(15)},{0|->bv(0)}\/{1|->bv(1)}\/{2|->bv(2)}\/{3|->bv(3)}\/{4|->bv(4)}\/{5|->bv(5)}\/{6|->bv(6)}\/{7|->bv(7)}) & byte_bv16 = bv16_byte~ & bv16_bit_get: BYTE*BV16_INDX +-> BIT & dom(bv16_bit_get) = BYTE*BV16_INDX & is_zero: BYTE +-> BIT & dom(is_zero) = BYTE & is_zero = %w1.(w1: BYTE | bool_to_bit(bool(w1(0)+w1(1)+w1(2)+w1(3)+w1(4)+w1(5)+w1(6)+w1(7) = 0))) & is_zeroUSHORTINT: USHORTINT +-> BIT & dom(is_zeroUSHORTINT) = USHORTINT & is_zeroUSHORTINT = %nat1.(nat1: USHORTINT | bool_to_bit(bool(nat1 = 0))) & is_negative: BYTE +-> BIT & dom(is_negative) = BYTE & is_negative = %w1.(w1: BYTE | w1(7)) & half: UCHAR +-> UCHAR & dom(half) = UCHAR & half = %ww.(ww: UCHAR | ww mod 2**4) & simple_add8UCHAR: UCHAR*UCHAR +-> UCHAR & dom(simple_add8UCHAR) = UCHAR*UCHAR & simple_add8UCHAR = %(w1,w2).(w1: UCHAR & w2: UCHAR | (w1+w2) mod 2**8) & add8UCHAR: BIT*UCHAR*UCHAR +-> UCHAR*BIT*BIT*BIT*BIT & dom(add8UCHAR) = BIT*UCHAR*UCHAR & add8UCHAR = %(carry,w1,w2).(carry: BIT & w1: UCHAR & w2: UCHAR | (carry+w1+w2) mod 256,bool_to_bit(bool(carry+uchar_schar(w1)+uchar_schar(w2)+1<=0)),bool_to_bit(bool(UCHAR_MAX+1<=carry+w1+w2)),bool_to_bit(bool(2**4<=carry+half(w1)+half(w2))),bool_to_bit(bool((carry+w1+w2) mod UCHAR_MAX-1 = 0))) & substract8UCHAR: BIT*UCHAR*UCHAR +-> UCHAR*BIT*BIT*BIT*BIT & dom(substract8UCHAR) = BIT*UCHAR*UCHAR & substract8UCHAR = %(carry,w1,w2).(carry: BIT & w1: UCHAR & w2: UCHAR | (carry+w1-w2) mod 256,bool_to_bit(bool(carry+uchar_schar(w1)-uchar_schar(w2)+1<=0)),bool_to_bit(bool(UCHAR_MAX+1<=carry+w1-w2)),bool_to_bit(bool(2**4<=carry+half(w1)-half(w2))),bool_to_bit(bool((carry+w1-w2) mod UCHAR_MAX-1 = 0))) & add16USHORTINT: BIT*USHORTINT*USHORTINT +-> USHORTINT & dom(add16USHORTINT) = BIT*USHORTINT*USHORTINT & add16USHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | (b1+w1+w2) mod 65536) & add_carryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(add_carryUSHORTINT) = BIT*USHORTINT*USHORTINT & add_carryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**16+1<=b1+w1+w2))) & add_halfcarryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(add_halfcarryUSHORTINT) = BIT*USHORTINT*USHORTINT & add_halfcarryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**12+1<=b1+w1 mod 2**12+w2 mod 2**12))) & sub16USHORTINT: BIT*USHORTINT*USHORTINT +-> USHORTINT & dom(sub16USHORTINT) = BIT*USHORTINT*USHORTINT & sub16USHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | (w1-w2-b1) mod 65536) & sub_carryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(sub_carryUSHORTINT) = BIT*USHORTINT*USHORTINT & sub_carryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**16+1<=w1-w2-b1))) & sub_halfcarryUSHORTINT: BIT*USHORTINT*USHORTINT +-> BIT & dom(sub_halfcarryUSHORTINT) = BIT*USHORTINT*USHORTINT & sub_halfcarryUSHORTINT = %(b1,w1,w2).(b1: BIT & w1: USHORTINT & w2: USHORTINT | bool_to_bit(bool(2**12+1<=w1 mod 2**12-w2 mod 2**12-b1))) & inc_BYTE: BYTE +-> BYTE & dom(inc_BYTE) = BYTE & inc_BYTE = %w1.(w1: BYTE | uchar_to_byte((byte_to_uchar(w1)+1) mod 256)) & dec_BYTE: BYTE +-> BYTE & dom(dec_BYTE) = BYTE & dec_BYTE = %w1.(w1: BYTE | uchar_to_byte((byte_to_uchar(w1)-1) mod 256)) & inc_BV16: BV16 +-> BV16 & dom(inc_BV16) = BV16 & inc_BV16 = %w1.(w1: BV16 | ushortint_to_bv16((bv16_to_ushortint(w1)+1) mod 65536)) & dec_BV16: BYTE +-> BYTE & dom(dec_BV16) = BYTE & dec_BV16 = %w1.(w1: BV16 | ushortint_to_bv16((bv16_to_ushortint(w1)-1) mod 65536)) & parity_even_BYTE: BIT_VECTOR +-> BIT & dom(parity_even_BYTE) = BIT_VECTOR & parity_even_BYTE = %bv.(bv: BIT_VECTOR | 1-SIGMA(idx).(idx: dom(bv) | bv(idx)) mod 2) & and: BYTE*BYTE +-> BYTE & dom(and) = BYTE*BYTE & and = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_and(bt1,bt2)) & ior: BYTE*BYTE +-> BYTE & dom(ior) = BYTE*BYTE & ior = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_or(bt1,bt2)) & xor: BYTE*BYTE +-> BYTE & dom(xor) = BYTE*BYTE & xor = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | bv_xor(bt1,bt2)) & bitget: BYTE*BYTE_INDEX +-> BIT & dom(bitget) = BYTE*BYTE_INDEX & bitget = %(bt1,ii).(bt1: BYTE & ii: BYTE_INDEX | bt1(ii)) & bitset: BYTE*BYTE_INDEX +-> BYTE & dom(bitset) = BYTE*BYTE_INDEX & !(ww,ii).(ww: BYTE & ii: BYTE_INDEX => bitset(ww,ii) = bv_set(ww,ii)) & bitclear: BYTE*BYTE_INDEX +-> BYTE & dom(bitclear) = BYTE*BYTE_INDEX & !(ww,ii,bb).(ww: BYTE & ii: BYTE_INDEX & bb: BIT => bitclear(ww,ii) = bv_clear(ww,ii)) & complement: BYTE +-> BYTE & dom(complement) = BYTE & complement = %bt.(bt: BYTE | bv_not(bt)) & swap: BYTE +-> BYTE & dom(swap) = BYTE & swap = %bt.(bt: BYTE | {0|->bt(4)}\/{1|->bt(5)}\/{2|->bt(6)}\/{3|->bt(7)}\/{4|->bt(0)}\/{5|->bt(1)}\/{6|->bt(2)}\/{7|->bt(3)}) & rotateleft: BYTE +-> BYTE & dom(rotateleft) = BYTE & rotateleft = %bv.(bv: BYTE | {0|->bv(7)}\/{1|->bv(0)}\/{2|->bv(1)}\/{3|->bv(2)}\/{4|->bv(3)}\/{5|->bv(4)}\/{6|->bv(5)}\/{7|->bv(6)}) & rotateright: BYTE +-> BYTE & dom(rotateright) = BYTE & rotateright = %bv.(bv: BYTE | {0|->bv(1)}\/{1|->bv(2)}\/{2|->bv(3)}\/{3|->bv(4)}\/{4|->bv(5)}\/{5|->bv(6)}\/{6|->bv(7)}\/{7|->bv(0)}) & "`Component properties'" & get_bv_reg16: BV16*((1..18)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & dom(get_bv_reg16) = BV16*((1..18)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) & !(sp_,rgs8_,r1).(sp_: BV16 & (rgs8_: (1..18)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..18)*{id_reg_8}) & r1: (1..5)*{id_reg_16} => (r1 = 1|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_to_bv16(rgs8_(5|->id_reg_8),rgs8_(6|->id_reg_8))) & (r1 = 2|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_to_bv16(rgs8_(9|->id_reg_8),rgs8_(10|->id_reg_8))) & (r1 = 3|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_to_bv16(rgs8_(13|->id_reg_8),rgs8_(14|->id_reg_8))) & (r1 = 4|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = sp_) & (r1 = 5|->id_reg_16 => get_bv_reg16(sp_,rgs8_,r1) = byte_to_bv16(rgs8_(1|->id_reg_8),rgs8_(2|->id_reg_8)))) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..18)*{id_reg_8}*((1..18)*{id_reg_8}) & dom(REG16_TO_REG8) = (1..5)*{id_reg_16} & !r1.(r1: (1..5)*{id_reg_16} => (r1 = 1|->id_reg_16 => REG16_TO_REG8(r1) = 5|->id_reg_8|->(6|->id_reg_8)) & (r1 = 2|->id_reg_16 => REG16_TO_REG8(r1) = 9|->id_reg_8|->(10|->id_reg_8)) & (r1 = 3|->id_reg_16 => REG16_TO_REG8(r1) = 13|->id_reg_8|->(14|->id_reg_8)) & (r1 = 5|->id_reg_16 => REG16_TO_REG8(r1) = 1|->id_reg_8|->(2|->id_reg_8))) & REG8_TO_REG16 = REG16_TO_REG8~ & update_flag_register_SZ_H_PvNC = %(rgs8_$0,s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(rgs8_$0: (1..18)*{id_reg_8} +-> BYTE & dom(rgs8_$0) = (1..18)*{id_reg_8} & s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | rgs8_$0<+{2|->id_reg_8|->({7|->s7$0}\/{6|->z6$0}\/{4|->h4$0}\/{2|->pv2$0}\/{1|->n_add_sub$0}\/{0|->c0$0})}) & get_new_flag_register_SZ_H_PvNC = %(rgs8_$0,s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(rgs8_$0: (1..18)*{id_reg_8} +-> BYTE & dom(rgs8_$0) = (1..18)*{id_reg_8} & s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->({7|->s7$0}\/{6|->z6$0}\/{4|->h4$0}\/{2|->pv2$0}\/{1|->n_add_sub$0}\/{0|->c0$0})) & bv_ireg_plus_d = %(ix_iy,desloc).(ix_iy: BV16 & desloc: SCHAR | ushortint_to_bv16((bv16_to_ushortint(ix_iy)+desloc) mod 65536)) & bv_9ireg_plus_d0 = %(mem,ix_iy,desloc).(mem: BV16 +-> BYTE & dom(mem) = BV16 & ix_iy: BV16 & desloc: SCHAR | mem(ushortint_to_bv16((bv16_to_ushortint(ix_iy)+desloc) mod 65536))) & daa_function: BIT*BIT*BYTE*BIT +-> BYTE*BIT*BIT & dom(daa_function) = BIT*BIT*BYTE*BIT & !(zn,c0,value,h0).(zn: BIT & c0: BIT & value: BYTE & h0: BIT => (zn = 0 & c0 = 0 & get_upper_digit(value): 0..9 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,value,h0) = (value,0)|->0) & (zn = 0 & c0 = 0 & get_upper_digit(value): 0..8 & h0 = 0 & get_lower_digit(value): 10..15 => daa_function(zn,c0,value,h0) = (uchar_to_byte(simple_add8UCHAR(byte_to_uchar(value),6)),0)|->bool_to_bit(bool(2**4<=half(byte_to_uchar(value))+half(6)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 0..9 & h0 = 1 & get_lower_digit(value): 0..3 => daa_function(zn,c0,value,h0) = (uchar_to_byte(simple_add8UCHAR(byte_to_uchar(value),6)),0)|->bool_to_bit(bool(2**4<=half(byte_to_uchar(value))+half(6)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 10..15 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,value,h0) = (uchar_to_byte(simple_add8UCHAR(byte_to_uchar(value),96)),1)|->bool_to_bit(bool(2**4<=half(byte_to_uchar(value))+half(96)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 9..15 & h0 = 0 & get_lower_digit(value): 10..15 => daa_function(zn,c0,value,h0) = (uchar_to_byte(simple_add8UCHAR(byte_to_uchar(value),102)),1)|->bool_to_bit(bool(2**4<=half(byte_to_uchar(value))+half(102)))) & (zn = 0 & c0 = 0 & get_upper_digit(value): 10..15 & h0 = 1 & get_lower_digit(value): 0..3 => daa_function(zn,c0,value,h0) = (uchar_to_byte(simple_add8UCHAR(byte_to_uchar(value),102)),1)|->bool_to_bit(bool(2**4<=half(byte_to_uchar(value))+half(102)))) & (zn = 0 & c0 = 1 & get_upper_digit(value): 0..2 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,value,h0) = (uchar_to_byte(simple_add8UCHAR(byte_to_uchar(value),96)),1)|->bool_to_bit(bool(2**4<=half(byte_to_uchar(value))+half(96)))) & (zn = 0 & c0 = 1 & get_upper_digit(value): 0..2 & h0 = 0 & get_lower_digit(value): 10..15 => daa_function(zn,c0,value,h0) = (uchar_to_byte(simple_add8UCHAR(byte_to_uchar(value),102)),1)|->bool_to_bit(bool(2**4<=half(byte_to_uchar(value))+half(102)))) & (zn = 0 & c0 = 1 & get_upper_digit(value): 0..3 & h0 = 1 & get_lower_digit(value): 0..3 => daa_function(zn,c0,value,h0) = (uchar_to_byte(simple_add8UCHAR(byte_to_uchar(value),102)),1)|->bool_to_bit(bool(2**4<=half(byte_to_uchar(value))+half(102)))) & (zn = 1 & c0 = 0 & get_upper_digit(value): 0..9 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,value,h0) = (value,0)|->0) & (zn = 1 & c0 = 0 & get_upper_digit(value): 0..8 & h0 = 1 & get_lower_digit(value): 6..15 => daa_function(zn,c0,value,h0) = (uchar_to_byte(simple_add8UCHAR(byte_to_uchar(value),250)),0)|->bool_to_bit(bool(2**4<=half(byte_to_uchar(value))+half(250)))) & (zn = 1 & c0 = 1 & get_upper_digit(value): 7..15 & h0 = 0 & get_lower_digit(value): 0..9 => daa_function(zn,c0,value,h0) = (uchar_to_byte(simple_add8UCHAR(byte_to_uchar(value),160)),1)|->bool_to_bit(bool(2**4<=half(byte_to_uchar(value))+half(160)))) & (zn = 1 & c0 = 1 & get_upper_digit(value): 6..7 & h0 = 1 & get_lower_digit(value): 6..15 => daa_function(zn,c0,value,h0) = (uchar_to_byte(simple_add8UCHAR(byte_to_uchar(value),154)),1)|->bool_to_bit(bool(2**4<=half(byte_to_uchar(value))+half(154))))) & (1..18)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..18)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}));
  ("`Included,imported and extended machines properties'" & RESERVED_ADDRESS = 0..16384 & "`Included,imported and extended machines invariants'" & mem: BV16 +-> BYTE & dom(mem) = BV16 & stack: BV16 +-> BYTE & dom(stack) = BV16 & stack: POW(mem) & not(stack = mem) & "`Included,imported and extended machines assertions'" & ran(stack): POW(BYTE) & ran(mem): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{address|->value}: BV16 +-> BYTE & dom(mem<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+{address|->value}: BV16 +-> BYTE & dom(stack<+{address|->value}) = BV16) & "`Seen and used machines assertions'" & 0 = schar_to_sshortint(0,0) & !n0.(n0: UCHAR => 0<=n0) & !n0.(n0: UCHAR => n0<=255) & instruction_next: USHORTINT +-> USHORTINT & dom(instruction_next) = USHORTINT & !xx.(xx: BYTE => byte_to_uchar(xx): UCHAR) & !xx.(xx: UCHAR => uchar_to_byte(xx): BYTE) & !xx.(xx: BYTE => update_refresh_reg(xx): BYTE) & !xx.(xx: BYTE => byte_to_schar(xx): SCHAR) & !xx.(xx: SCHAR => schar_to_byte(xx): BYTE) & !(xx,yy).(xx: BYTE & yy: BYTE => byte_to_bv16(xx,yy): BV16) & !(xx,yy).(xx: BYTE & yy: BYTE => #zz.(zz: BV16 & byte_to_bv16(xx,yy) = zz)) & !xx.(xx: BV16 => bv16_to_ushortint(xx): USHORTINT) & !xx.(xx: USHORTINT => ushortint_to_bv16(xx): BV16) & !xx.(xx: BYTE => get_upper_digit(xx): 0..16) & !xx.(xx: BYTE => get_lower_digit(xx): 0..16) & !bb.(bb: BIT => bit_not(bb) = 1-bb) & bit_not(0) = 1 & bit_not(1) = 0 & !bb.(bb: BIT => bit_not(bit_not(bb)) = bb) & bit_and(0,0) = 0 & bit_and(0,1) = 0 & bit_and(1,0) = 0 & bit_and(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 1 => bit_and(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 0 => bit_and(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3)) & !b1.(b1: BIT => bit_and(b1,1) = b1) & !b1.(b1: BIT => bit_and(b1,0) = 0) & bit_or(0,0) = 0 & bit_or(0,1) = 1 & bit_or(1,0) = 1 & bit_or(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 1 => bit_or(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 0 => bit_or(b2,b1) = 0) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 1 => b1 = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 0 => b1 = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3)) & !b1.(b1: BIT => bit_or(b1,1) = 1) & !b1.(b1: BIT => bit_or(b1,0) = b1) & !b1.(b1: BIT => bit_or(1,b1) = 1) & !b1.(b1: BIT => bit_or(0,b1) = b1) & bit_xor(0,0) = 0 & bit_xor(0,1) = 1 & bit_xor(1,0) = 1 & bit_xor(1,1) = 0 & !(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 1 => bit_xor(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 0 => bit_xor(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3)) & !bb.(bb: BIT => bit_xor(bb,bb) = 0) & bool_to_bit(TRUE) = 1 & bool_to_bit(FALSE) = 0 & !bb.(bb: BIT => bb = 0 or bb = 1) & !bb.(bb: BIT & not(bb = 0) => bb = 1) & !bb.(bb: BIT & not(bb = 1) => bb = 0) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_xor(bv,bv),indx) = bv_get(bv_zero(bv_size(bv)),indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 0..bv_size(v1)-1 => bv_get(bv_xor(v1,v2),indx) = bv_get(bv_xor(v2,v1),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v2)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_xor(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_or(bv,bv_zero(bv_size(bv))),indx) = bv_get(bv,indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_or(bv,bv_one(bv_size(bv))),indx) = bv_get(bv_one(bv_size(bv)),indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: 0..bv_size(v1)-1 => bv_get(bv_or(v1,bv_or(v2,v3)),indx) = bv_get(bv_or(bv_or(v1,v2),v3),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v2)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 0..bv_size(v1)-1 => bv_get(bv_or(v1,v2),indx) = bv_get(bv_or(v2,v1),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_or(v1,v2)) = bv_size(v1)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_and(bv,bv_one(bv_size(bv))),indx) = bv_get(bv,indx)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_and(bv,bv_zero(bv_size(bv))),indx) = bv_get(bv_zero(bv_size(bv)),indx)) & !(v1,v2,v3,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & v3: BIT_VECTOR & bv_size(v1) = bv_size(v2) & bv_size(v1) = bv_size(v3) & indx: 0..bv_size(v1)-1 => bv_get(bv_and(v1,bv_and(v2,v3)),indx) = bv_get(bv_and(bv_and(v1,v2),v3),indx)) & !(v1,v2,indx).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) & indx: 0..bv_size(v1)-1 => bv_get(bv_and(v1,v2),indx) = bv_get(bv_and(v2,v1),indx)) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR & bv_size(v1) = bv_size(v2) => bv_size(bv_and(v1,v2)) = bv_size(v2)) & !(bv,low,high).(bv: BIT_VECTOR & low: 0..bv_size(bv)-1 & high: 0..bv_size(bv)-1 & low<=high => bv_size(bv_sub(bv,low,high)) = high-low) & !(v1,v2).(v1: BIT_VECTOR & v2: BIT_VECTOR => bv_size(bv_catenate(v1,v2)) = bv_size(v1)+bv_size(v2)) & !(bv,indx).(bv: BIT_VECTOR & indx: 0..bv_size(bv)-1 => bv_get(bv_not(bv_not(bv)),indx) = bv_get(bv,indx)) & !bv.(bv: BIT_VECTOR => bv_size(bv_not(bv)) = bv_size(bv)) & !bt.(bt: BYTE => size(bt) = 8) & size(BYTE_ZERO) = 8 & BYTE: POW(BIT_VECTOR) & BYTE_ZERO: BIT_VECTOR & first(BYTE_ZERO) = 0 & BV16_ZERO: BV16 & BV16: POW(BIT_VECTOR) & BV16_ZERO: BIT_VECTOR & dom(add8UCHAR) = BIT*UCHAR*UCHAR & ran(add8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT) & dom(substract8UCHAR) = BIT*UCHAR*UCHAR & ran(substract8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT) & dom(and) = BYTE*BYTE & ran(and): POW(BYTE) & dom(ior) = BYTE*BYTE & ran(ior): POW(BYTE) & dom(xor) = BYTE*BYTE & ran(xor): POW(BYTE) & dom(complement) = BYTE & ran(complement): POW(BYTE) & dom(swap) = BYTE & ran(swap): POW(BYTE) & dom(rotateleft) = BYTE & ran(rotateleft): POW(BYTE) & dom(rotateright) = BYTE & ran(rotateright): POW(BYTE) & !(vec,in0).(vec: BYTE & in0: 0..7 => bitget(vec,in0) = vec(in0)) & !(x0,x1).(x0: UCHAR & x1: UCHAR => simple_add8UCHAR(x0,x1): UCHAR) & 2**16 = 65536 & 2**15 = 32768 & 2**14 = 16384 & 2**13 = 8192 & 2**12 = 4096 & 2**11 = 2048 & 2**10 = 1024 & 2**9 = 512 & 2**8 = 256 & 2**7 = 128 & 2**6 = 64 & 2**5 = 32 & 2**4 = 16 & 2**3 = 8 & 2**2 = 4 & 2**1 = 2 & 2**0 = 1);
  ("`Component invariant'" & rgs8: (1..18)*{id_reg_8} +-> BYTE & dom(rgs8) = (1..18)*{id_reg_8} & pc: INSTRUCTION & sp: BV16 & ix: BV16 & iy: BV16 & i_: BYTE & r_: BYTE & iff1: BIT & iff2: BIT & im: BIT*BIT & i_o_ports: BYTE +-> BYTE & dom(i_o_ports) = BYTE);
  ("`Local hypotheses'" & zn$0: BIT & c0$0: BIT & value$0: BYTE & h0$0: BIT);
  "`Check assertion (!(zn,c0,value,h0).(zn: BIT & c0: BIT & value: BYTE & h0: BIT => daa_function(zn,c0,value,h0): BYTE*BIT*BIT)) deduction - ref 3.2, 4.2, 5.3'";
  (daa_function(zn$0,c0$0,value$0,h0$0): BYTE*BIT*BIT);
  ("`Local hypotheses'" & mmm: BV16 +-> BYTE & mmm~: BYTE +-> BV16 & dom(mmm) = BV16 & ii: BV16 & des: SCHAR);
  "`Check assertion (!(mmm,ii,des).(mmm: BV16 >-> BYTE & ii: BV16 & des: SCHAR => bv_9ireg_plus_d0(mmm,ii,des): BYTE)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_9ireg_plus_d0(mmm,ii,des): BYTE);
  ("`Local hypotheses'" & ii: BV16 & des: SCHAR);
  "`Check assertion (!(ii,des).(ii: BV16 & des: SCHAR => bv_ireg_plus_d(ii,des): BV16)) deduction - ref 3.2, 4.2, 5.3'";
  (bv_ireg_plus_d(ii,des): BV16);
  "`Check assertion (mem(iy): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(iy): BYTE);
  "`Check assertion (mem(ix): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(ix): BYTE);
  "`Check assertion (mem(sp): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(sp): BYTE);
  "`Check assertion (mem(byte_to_bv16(schar_to_byte(0),mem(byte_to_bv16(rgs8(a0),rgs8(f0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_to_bv16(schar_to_byte(0),mem(byte_to_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE);
  "`Check assertion (mem(byte_to_bv16(rgs8(a0),rgs8(f0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_to_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
  "`Check assertion (mem(byte_to_bv16(schar_to_byte(0),mem(byte_to_bv16(rgs8(h0),rgs8(l0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_to_bv16(schar_to_byte(0),mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE);
  "`Check assertion (mem(byte_to_bv16(rgs8(h0),rgs8(l0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
  "`Check assertion (mem(byte_to_bv16(schar_to_byte(0),mem(byte_to_bv16(rgs8(d0),rgs8(e0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_to_bv16(schar_to_byte(0),mem(byte_to_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE);
  "`Check assertion (mem(byte_to_bv16(rgs8(d0),rgs8(e0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_to_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
  "`Check assertion (mem(byte_to_bv16(schar_to_byte(0),mem(byte_to_bv16(rgs8(b0),rgs8(c0))))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_to_bv16(schar_to_byte(0),mem(byte_to_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE);
  "`Check assertion (mem(byte_to_bv16(rgs8(b0),rgs8(c0))): BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (mem(byte_to_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
  "`Check assertion (instruction_next(13) = 14) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(13) = 14);
  "`Check assertion (instruction_next(12) = 13) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(12) = 13);
  "`Check assertion (instruction_next(11) = 12) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(11) = 12);
  "`Check assertion (instruction_next(10) = 11) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(10) = 11);
  "`Check assertion (instruction_next(9) = 10) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(9) = 10);
  "`Check assertion (instruction_next(8) = 9) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(8) = 9);
  "`Check assertion (instruction_next(7) = 8) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(7) = 8);
  "`Check assertion (instruction_next(6) = 7) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(6) = 7);
  "`Check assertion (instruction_next(5) = 6) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(5) = 6);
  "`Check assertion (instruction_next(4) = 5) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(4) = 5);
  "`Check assertion (instruction_next(3) = 4) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(3) = 4);
  "`Check assertion (instruction_next(2) = 3) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(2) = 3);
  "`Check assertion (instruction_next(1) = 2) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(1) = 2);
  "`Check assertion (instruction_next(0) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (instruction_next(0) = 1);
  "`Check assertion (ran(rgs8) <: BYTE) deduction - ref 3.2, 4.2, 5.3'";
  (ran(rgs8): POW(BYTE));
  ("`Component assertions'" & dom(stack) = BV16 & ran(stack): POW(BYTE) & ran(mem): POW(BYTE) & dom(mem) = BV16 & ran(rgs8): POW(BYTE) & dom(rgs8) = (1..18)*{id_reg_8} & instruction_next(0) = 1 & instruction_next(1) = 2 & instruction_next(2) = 3 & instruction_next(3) = 4 & instruction_next(4) = 5 & instruction_next(5) = 6 & instruction_next(6) = 7 & instruction_next(7) = 8 & instruction_next(8) = 9 & instruction_next(9) = 10 & instruction_next(10) = 11 & instruction_next(11) = 12 & instruction_next(12) = 13 & instruction_next(13) = 14 & mem(byte_to_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_to_bv16(schar_to_byte(0),mem(byte_to_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_to_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_to_bv16(schar_to_byte(0),mem(byte_to_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_to_bv16(schar_to_byte(0),mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_to_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_to_bv16(schar_to_byte(0),mem(byte_to_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & !(ii,des).(ii: BV16 & des: SCHAR => bv_ireg_plus_d(ii,des): BV16) & !(mmm,ii,des).(mmm: BV16 +-> BYTE & mmm~: BYTE +-> BV16 & dom(mmm) = BV16 & ii: BV16 & des: SCHAR => bv_9ireg_plus_d0(mmm,ii,des): BYTE) & !(zn,c0,value,h0).(zn: BIT & c0: BIT & value: BYTE & h0: BIT => daa_function(zn,c0,value,h0): BYTE*BIT*BIT));
  "`Check that the invariant (rgs8: id_reg_8 --> BYTE) is preserved by the operation - ref 3.4'";
  (rgs8<+({1|->id_reg_8|->rotateleft(rgs8(1|->id_reg_8))}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),7))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->rotateleft(rgs8(1|->id_reg_8))}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),7))})) = (1..18)*{id_reg_8});
  "`Check that the invariant (pc: INSTRUCTION) is preserved by the operation - ref 3.4'";
  (instruction_next(pc): INSTRUCTION);
  "`Check that the invariant (r_: BYTE) is preserved by the operation - ref 3.4'";
  (update_refresh_reg(r_): BYTE);
  (rgs8<+({1|->id_reg_8|->(rotateleft(rgs8(1|->id_reg_8))<+{0|->bitget(rgs8(2|->id_reg_8),0)})}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),7))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->(rotateleft(rgs8(1|->id_reg_8))<+{0|->bitget(rgs8(2|->id_reg_8),0)})}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),7))})) = (1..18)*{id_reg_8});
  (rgs8<+({1|->id_reg_8|->rotateright(rgs8(1|->id_reg_8))}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),0))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->rotateright(rgs8(1|->id_reg_8))}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),0))})) = (1..18)*{id_reg_8});
  (rgs8<+({1|->id_reg_8|->(rotateright(rgs8(1|->id_reg_8))<+{0|->bitget(rgs8(2|->id_reg_8),0)})}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),0))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({1|->id_reg_8|->(rotateright(rgs8(1|->id_reg_8))<+{0|->bitget(rgs8(2|->id_reg_8),0)})}\/{get_new_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bitget(rgs8(2|->id_reg_8),6),0,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(1|->id_reg_8),0))})) = (1..18)*{id_reg_8});
  ("`RLC_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(rgs8(rr)));
  (rgs8<+({rr|->res}\/{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(rgs8(rr),7))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rr|->res}\/{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(rgs8(rr),7))})) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16);
  (dom({byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res})/\dom(stack) = {});
  (not(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res: stack));
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7))}) = (1..18)*{id_reg_8});
  ("`RLC_9IX_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,ix,desloc)));
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,ix,desloc)) & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9ireg_plus_d0(mem,ix,desloc),7))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9ireg_plus_d0(mem,ix,desloc),7))}) = (1..18)*{id_reg_8});
  ("`RLC_9IY_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,iy,desloc)));
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,iy,desloc)) & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9ireg_plus_d0(mem,iy,desloc),7))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9ireg_plus_d0(mem,iy,desloc),7))}) = (1..18)*{id_reg_8});
  ("`RL_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(rgs8(rr))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  ("`RL_9IX_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,ix,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  (bv_ireg_plus_d(ix,desloc): BV16);
  (dom({bv_ireg_plus_d(ix,desloc)|->res})/\dom(stack) = {});
  (not(bv_ireg_plus_d(ix,desloc)|->res: stack));
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,ix,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{bv_ireg_plus_d(ix,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}) = BV16 & stack: POW(mem<+{bv_ireg_plus_d(ix,desloc)|->res}) & not(stack = mem<+{bv_ireg_plus_d(ix,desloc)|->res}) & ran(mem<+{bv_ireg_plus_d(ix,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}) = BV16));
  ("`RL_9IY_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,iy,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  (bv_ireg_plus_d(iy,desloc): BV16);
  (dom({bv_ireg_plus_d(iy,desloc)|->res})/\dom(stack) = {});
  (not(bv_ireg_plus_d(iy,desloc)|->res: stack));
  ("`Local hypotheses'" & res: BYTE & res = rotateleft(bv_9ireg_plus_d0(mem,iy,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{bv_ireg_plus_d(iy,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->res}) = BV16 & stack: POW(mem<+{bv_ireg_plus_d(iy,desloc)|->res}) & not(stack = mem<+{bv_ireg_plus_d(iy,desloc)|->res}) & ran(mem<+{bv_ireg_plus_d(iy,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(iy,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->res}<+{address|->value}) = BV16));
  ("`RRC_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr)));
  (rgs8<+({rr|->res}\/{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(rgs8(rr),0))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rr|->res}\/{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(rgs8(rr),0))})) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0))}) = (1..18)*{id_reg_8});
  ("`RRC_9IX_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,ix,desloc)));
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,ix,desloc)) & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9ireg_plus_d0(mem,ix,desloc),0))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9ireg_plus_d0(mem,ix,desloc),0))}) = (1..18)*{id_reg_8});
  ("`RRC_9IY_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,iy,desloc)));
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,iy,desloc)) & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9ireg_plus_d0(mem,iy,desloc),0))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(res),is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9ireg_plus_d0(mem,iy,desloc),0))}) = (1..18)*{id_reg_8});
  ("`RR_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  ("`RR_9IX_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,ix,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,ix,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{bv_ireg_plus_d(ix,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}) = BV16 & stack: POW(mem<+{bv_ireg_plus_d(ix,desloc)|->res}) & not(stack = mem<+{bv_ireg_plus_d(ix,desloc)|->res}) & ran(mem<+{bv_ireg_plus_d(ix,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(ix,desloc)|->res}<+{address|->value}) = BV16));
  ("`RR_9IY_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,iy,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,iy,desloc))<+{0|->bitget(rgs8(2|->id_reg_8),0)} & mem<+{bv_ireg_plus_d(iy,desloc)|->res}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->res}) = BV16 & stack: POW(mem<+{bv_ireg_plus_d(iy,desloc)|->res}) & not(stack = mem<+{bv_ireg_plus_d(iy,desloc)|->res}) & ran(mem<+{bv_ireg_plus_d(iy,desloc)|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{bv_ireg_plus_d(iy,desloc)|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{bv_ireg_plus_d(iy,desloc)|->res}<+{address|->value}) = BV16));
  ("`SLA_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`SLA_9IX_d9 preconditions in this component'" & desloc: SCHAR);
  ("`SLA_9IY_d9 preconditions in this component'" & desloc: SCHAR);
  ("`SRA_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr))<+{7|->bitget(rgs8(rr),7)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{7|->mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{7|->mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)} & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  ("`SRA_9IX_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,ix,desloc))<+{7|->bitget(bv_9ireg_plus_d0(mem,ix,desloc),7)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,ix,desloc))<+{7|->bitget(bv_9ireg_plus_d0(mem,ix,desloc),7)} & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  ("`SRA_9IY_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,iy,desloc))<+{7|->bv_9ireg_plus_d0(mem,iy,desloc)(7)});
  ("`Local hypotheses'" & res: BYTE & res = rotateright(bv_9ireg_plus_d0(mem,iy,desloc))<+{7|->bv_9ireg_plus_d0(mem,iy,desloc)(7)} & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  ("`SRL_r preconditions in this component'" & rr: (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(rgs8(rr)),7));
  (rgs8<+({rr|->res}\/{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(rgs8(rr),0))}): (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+({rr|->res}\/{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(rgs8(rr),0))})) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7));
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7) & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0))}) = (1..18)*{id_reg_8});
  ("`SRL_9IX_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(bv_9ireg_plus_d0(mem,ix,desloc)),7));
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(bv_9ireg_plus_d0(mem,ix,desloc)),7) & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9ireg_plus_d0(mem,ix,desloc),0))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9ireg_plus_d0(mem,ix,desloc),0))}) = (1..18)*{id_reg_8});
  ("`SRL_9IY_d9 preconditions in this component'" & desloc: SCHAR);
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(bv_9ireg_plus_d0(mem,iy,desloc)),7));
  ("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(bv_9ireg_plus_d0(mem,iy,desloc)),7) & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9ireg_plus_d0(mem,iy,desloc),0))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,0,is_zero(res),0,parity_even_BYTE(res),0,bitget(bv_9ireg_plus_d0(mem,iy,desloc),0))}) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {7|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{6|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{5|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{4|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{3|->bitget(rgs8(1|->id_reg_8),3)}\/{2|->bitget(rgs8(1|->id_reg_8),2)}\/{1|->bitget(rgs8(1|->id_reg_8),1)}\/{0|->bitget(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({3|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{2|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{1|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{0|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}));
  ("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {7|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{6|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{5|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{4|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{3|->bitget(rgs8(1|->id_reg_8),3)}\/{2|->bitget(rgs8(1|->id_reg_8),2)}\/{1|->bitget(rgs8(1|->id_reg_8),1)}\/{0|->bitget(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({3|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{2|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{1|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{0|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}) & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  (rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(acc),is_zero(acc),0,parity_even_BYTE(acc),0,bitget(rgs8(2|->id_reg_8),0))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{get_new_flag_register_SZ_H_PvNC(rgs8,is_negative(acc),is_zero(acc),0,parity_even_BYTE(acc),0,bitget(rgs8(2|->id_reg_8),0))}) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {7|->bitget(rgs8(1|->id_reg_8),3)}\/{6|->bitget(rgs8(1|->id_reg_8),2)}\/{5|->bitget(rgs8(1|->id_reg_8),1)}\/{4|->bitget(rgs8(1|->id_reg_8),0)}\/{3|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{2|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{1|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{0|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({3|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{2|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{1|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{0|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}));
  ("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {7|->bitget(rgs8(1|->id_reg_8),3)}\/{6|->bitget(rgs8(1|->id_reg_8),2)}\/{5|->bitget(rgs8(1|->id_reg_8),1)}\/{4|->bitget(rgs8(1|->id_reg_8),0)}\/{3|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{2|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{1|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{0|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({3|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{2|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{1|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{0|->bitget(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}) & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->res}<+{address|->value}) = BV16));
  ("`BIT_b_rr preconditions in this component'" & bb: 0..7 & rr: (1..18)*{id_reg_8});
  (update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(bitget(rgs8(rr),bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0)): (1..18)*{id_reg_8} +-> BYTE);
  (dom(update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(bitget(rgs8(rr),bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))) = (1..18)*{id_reg_8});
  ("`BIT_b_9HL0 preconditions in this component'" & bb: 0..7);
  (update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0)): (1..18)*{id_reg_8} +-> BYTE);
  (dom(update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))) = (1..18)*{id_reg_8});
  ("`BIT_b_9IX_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR);
  (update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(bv_9ireg_plus_d0(mem,ix,desloc)(bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0)): (1..18)*{id_reg_8} +-> BYTE);
  (dom(update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(bv_9ireg_plus_d0(mem,ix,desloc)(bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))) = (1..18)*{id_reg_8});
  ("`BIT_b_9IY_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR);
  (update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(bv_9ireg_plus_d0(mem,iy,desloc)(bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0)): (1..18)*{id_reg_8} +-> BYTE);
  (dom(update_flag_register_SZ_H_PvNC(rgs8,bitget(rgs8(2|->id_reg_8),7),bit_not(bv_9ireg_plus_d0(mem,iy,desloc)(bb)),1,bitget(rgs8(2|->id_reg_8),2),0,bitget(rgs8(2|->id_reg_8),0))) = (1..18)*{id_reg_8});
  ("`SET_b_r preconditions in this component'" & bb: 0..7 & rr: (1..18)*{id_reg_8});
  (rgs8<+{rr|->bitset(rgs8(rr),bb)}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->bitset(rgs8(rr),bb)}) = (1..18)*{id_reg_8});
  ("`SET_b_9HL0 preconditions in this component'" & bb: 0..7);
  (bv_set(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
  (dom({byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)})/\dom(stack) = {});
  (not(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): stack));
  ("`Local hypotheses'" & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}<+{address|->value}) = BV16));
  ("`SET_b_9IX_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR);
  (bv_set(bv_9ireg_plus_d0(mem,ix,desloc),bb): BYTE);
  (dom({byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,ix,desloc),bb)})/\dom(stack) = {});
  (not(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,ix,desloc),bb): stack));
  ("`Local hypotheses'" & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,ix,desloc),bb)}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,ix,desloc),bb)}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,ix,desloc),bb)}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,ix,desloc),bb)}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,ix,desloc),bb)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,ix,desloc),bb)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,ix,desloc),bb)}<+{address|->value}) = BV16));
  ("`SET_b_9IY_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR);
  (bv_set(bv_9ireg_plus_d0(mem,iy,desloc),bb): BYTE);
  (dom({byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,iy,desloc),bb)})/\dom(stack) = {});
  (not(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,iy,desloc),bb): stack));
  ("`Local hypotheses'" & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,iy,desloc),bb)}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,iy,desloc),bb)}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,iy,desloc),bb)}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,iy,desloc),bb)}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,iy,desloc),bb)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,iy,desloc),bb)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_set(bv_9ireg_plus_d0(mem,iy,desloc),bb)}<+{address|->value}) = BV16));
  ("`RES_b_r preconditions in this component'" & bb: 0..7 & rr: (1..18)*{id_reg_8});
  (rgs8<+{rr|->bv_clear(rgs8(rr),bb)}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{rr|->bv_clear(rgs8(rr),bb)}) = (1..18)*{id_reg_8});
  ("`RES_b_9HL0 preconditions in this component'" & bb: 0..7);
  (bv_clear(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
  (dom({byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)})/\dom(stack) = {});
  (not(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): stack));
  ("`Local hypotheses'" & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(mem(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)}<+{address|->value}) = BV16));
  ("`RES_b_9IX_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR);
  (bv_clear(bv_9ireg_plus_d0(mem,ix,desloc),bb): BYTE);
  (dom({byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,ix,desloc),bb)})/\dom(stack) = {});
  (not(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,ix,desloc),bb): stack));
  ("`Local hypotheses'" & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,ix,desloc),bb)}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,ix,desloc),bb)}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,ix,desloc),bb)}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,ix,desloc),bb)}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,ix,desloc),bb)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,ix,desloc),bb)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,ix,desloc),bb)}<+{address|->value}) = BV16));
  ("`RES_b_9IY_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR);
  (bv_clear(bv_9ireg_plus_d0(mem,iy,desloc),bb): BYTE);
  (dom({byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,iy,desloc),bb)})/\dom(stack) = {});
  (not(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,iy,desloc),bb): stack));
  ("`Local hypotheses'" & mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,iy,desloc),bb)}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,iy,desloc),bb)}) = BV16 & stack: POW(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,iy,desloc),bb)}) & not(stack = mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,iy,desloc),bb)}) & ran(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,iy,desloc),bb)}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,iy,desloc),bb)}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))|->bv_clear(bv_9ireg_plus_d0(mem,iy,desloc),bb)}<+{address|->value}) = BV16));
  ("`JP_nn preconditions in this component'" & nn: USHORTINT);
  (nn: INSTRUCTION);
  ("`JP_cc_nn preconditions in this component'" & cc: BOOL & nn: USHORTINT);
  ("`Local hypotheses'" & cc = TRUE);
  ("`Local hypotheses'" & not(cc = TRUE));
  ("`JR_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ((pc+ee) mod 2**16: INSTRUCTION);
  ("`JR_C_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ("`Local hypotheses'" & bitget(rgs8(2|->id_reg_8),0) = 0);
  ("`Local hypotheses'" & not(bitget(rgs8(2|->id_reg_8),0) = 0));
  ("`JR_NC_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ("`Local hypotheses'" & bitget(rgs8(2|->id_reg_8),0) = 1);
  ("`Local hypotheses'" & not(bitget(rgs8(2|->id_reg_8),0) = 1));
  ("`JR_Z_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ("`Local hypotheses'" & bitget(rgs8(2|->id_reg_8),6) = 0);
  ("`Local hypotheses'" & not(bitget(rgs8(2|->id_reg_8),6) = 0));
  ("`JR_NZ_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ("`Local hypotheses'" & bitget(rgs8(2|->id_reg_8),6) = 1);
  ("`Local hypotheses'" & not(bitget(rgs8(2|->id_reg_8),6) = 1));
  (bv16_to_ushortint(byte_to_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): INSTRUCTION);
  (bv16_to_ushortint(ix): INSTRUCTION);
  (bv16_to_ushortint(iy): INSTRUCTION);
  ("`DJNZ_e preconditions in this component'" & ee: SCHAR & ee-2: SCHAR);
  ("`Local hypotheses'" & is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1);
  (rgs8<+{5|->id_reg_8|->dec_BYTE(rgs8(5|->id_reg_8))}: (1..18)*{id_reg_8} +-> BYTE);
  (dom(rgs8<+{5|->id_reg_8|->dec_BYTE(rgs8(5|->id_reg_8))}) = (1..18)*{id_reg_8});
  ("`Local hypotheses'" & not(is_zero(dec_BYTE(rgs8(5|->id_reg_8))) = 1));
  ("`CALL_nn preconditions in this component'" & nn: USHORTINT);
  (ushortint_to_bv16(instruction_next(pc)): BYTE);
  ("`Local hypotheses'" & mem<+{sp|->ushortint_to_bv16(instruction_next(pc))}: BV16 +-> BYTE & dom(mem<+{sp|->ushortint_to_bv16(instruction_next(pc))}) = BV16 & stack<+{sp|->ushortint_to_bv16(instruction_next(pc))}: BV16 +-> BYTE & dom(stack<+{sp|->ushortint_to_bv16(instruction_next(pc))}) = BV16 & stack<+{sp|->ushortint_to_bv16(instruction_next(pc))}: POW(mem<+{sp|->ushortint_to_bv16(instruction_next(pc))}) & not(stack<+{sp|->ushortint_to_bv16(instruction_next(pc))} = mem<+{sp|->ushortint_to_bv16(instruction_next(pc))}) & ran(stack<+{sp|->ushortint_to_bv16(instruction_next(pc))}): POW(BYTE) & ran(mem<+{sp|->ushortint_to_bv16(instruction_next(pc))}): POW(BYTE) & !(address,value).(address: BV16 & value: BYTE => mem<+{sp|->ushortint_to_bv16(instruction_next(pc))}<+{address|->value}: BV16 +-> BYTE & dom(mem<+{sp|->ushortint_to_bv16(instruction_next(pc))}<+{address|->value}) = BV16) & !(address,value).(address: BV16 & value: BYTE => stack<+{sp|->ushortint_to_bv16(instruction_next(pc))}<+{address|->value}: BV16 +-> BYTE & dom(stack<+{sp|->ushortint_to_bv16(instruction_next(pc))}<+{address|->value}) = BV16));
  "`Check that the invariant (sp: BV16) is preserved by the operation - ref 3.4'";
  (inc_BV16(sp): BV16)
END
&
THEORY EnumerateX IS
  id_reg_8 == {a0,f0,f_0,a_0,b0,c0,b_0,c_0,d0,e0,d_0,e_0,h0,l0,h_0,l_0,i0,r0};
  id_reg_16 == {BC,DE,HL,SP,AF}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
