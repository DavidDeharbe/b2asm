THEORY ProofList IS
  _f(1) & AssertionLemmas.16,(_f(46) & _f(47) => _f(48));
  _f(1) & AssertionLemmas.15,(_f(43) & _f(44) => _f(45));
  _f(1) & AssertionLemmas.14,(_f(40) & _f(41) => _f(42));
  _f(1) & AssertionLemmas.13,(_f(37) & _f(38) => _f(39));
  _f(1) & AssertionLemmas.12,(_f(34) & _f(35) => _f(36));
  _f(1) & AssertionLemmas.11,(_f(31) & _f(32) => _f(33));
  _f(1) & AssertionLemmas.10,(_f(28) & _f(29) => _f(30));
  _f(1) & AssertionLemmas.9,(_f(25) & _f(26) => _f(27));
  _f(1) & AssertionLemmas.8,(_f(22) & _f(23) => _f(24));
  _f(1) & AssertionLemmas.7,(_f(19) & _f(20) => _f(21));
  _f(1) & AssertionLemmas.6,(_f(16) & _f(17) => _f(18));
  _f(1) & AssertionLemmas.5,(_f(13) & _f(14) => _f(15));
  _f(1) & AssertionLemmas.4,(_f(10) & _f(11) => _f(12));
  _f(1) & AssertionLemmas.3,(_f(7) & _f(8) => _f(9));
  _f(1) & AssertionLemmas.2,(_f(4) & _f(5) => _f(6));
  _f(1) & AssertionLemmas.1,(_f(2) => _f(3))
END
&
THEORY Formulas IS
  ("`Component properties'" & BIT_CARRIER = 0..1 & BIT_NOT: BIT_CARRIER +-> BIT_CARRIER & dom(BIT_NOT) = BIT_CARRIER & !bb.(bb: BIT_CARRIER => BIT_NOT(bb) = 1-bb) & BIT_AND: BIT_CARRIER*BIT_CARRIER +-> BIT_CARRIER & dom(BIT_AND) = BIT_CARRIER*BIT_CARRIER & !(b1,b2).(b1: BIT_CARRIER & b2: BIT_CARRIER => (BIT_AND(b1,b2) = 1 => b1 = 1) & (b1 = 1 => BIT_AND(b1,b2) = 1) & b2 = 1) & BIT_IOR: BIT_CARRIER*BIT_CARRIER +-> BIT_CARRIER & dom(BIT_IOR) = BIT_CARRIER*BIT_CARRIER & !(b1,b2).(b1: BIT_CARRIER & b2: BIT_CARRIER => (BIT_IOR(b1,b2) = 1 => b1 = 1) & (b1 = 1 => BIT_IOR(b1,b2) = 1) or b2 = 1) & BIT_XOR: BIT_CARRIER*BIT_CARRIER +-> BIT_CARRIER & dom(BIT_XOR) = BIT_CARRIER*BIT_CARRIER & !(b1,b2).(b1: BIT_CARRIER & b2: BIT_CARRIER => (BIT_XOR(b1,b2) = 1 => not(b1 = b2)) & (not(b1 = b2) => BIT_XOR(b1,b2) = 1)) & BOOL_TO_BIT: BOOL +-> BIT_CARRIER & dom(BOOL_TO_BIT) = BOOL & BOOL_TO_BIT = {TRUE|->1}\/{FALSE|->0});
  "`Check assertion (BIT_NOT(0) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (BIT_NOT(0) = 1);
  ("`Local hypotheses'" & BIT_NOT(0) = 1);
  "`Check assertion (BIT_NOT(1) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (BIT_NOT(1) = 0);
  ("`Local hypotheses'" & BIT_NOT(0) = 1 & BIT_NOT(1) = 0);
  "`Check assertion (BIT_AND(0,0) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (BIT_AND(0,0) = 0);
  ("`Local hypotheses'" & BIT_NOT(0) = 1 & BIT_NOT(1) = 0 & BIT_AND(0,0) = 0);
  "`Check assertion (BIT_AND(0,1) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (BIT_AND(0,1) = 0);
  ("`Local hypotheses'" & BIT_NOT(0) = 1 & BIT_NOT(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0);
  "`Check assertion (BIT_AND(1,0) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (BIT_AND(1,0) = 0);
  ("`Local hypotheses'" & BIT_NOT(0) = 1 & BIT_NOT(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0);
  "`Check assertion (BIT_AND(1,1) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (BIT_AND(1,1) = 1);
  ("`Local hypotheses'" & BIT_NOT(0) = 1 & BIT_NOT(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1);
  "`Check assertion (BIT_IOR(0,0) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (BIT_IOR(0,0) = 0);
  ("`Local hypotheses'" & BIT_NOT(0) = 1 & BIT_NOT(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1 & BIT_IOR(0,0) = 0);
  "`Check assertion (BIT_IOR(0,1) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (BIT_IOR(0,1) = 0);
  ("`Local hypotheses'" & BIT_NOT(0) = 1 & BIT_NOT(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1 & BIT_IOR(0,0) = 0 & BIT_IOR(0,1) = 0);
  "`Check assertion (BIT_IOR(1,0) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (BIT_IOR(1,0) = 0);
  ("`Local hypotheses'" & BIT_NOT(0) = 1 & BIT_NOT(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1 & BIT_IOR(0,0) = 0 & BIT_IOR(0,1) = 0 & BIT_IOR(1,0) = 0);
  "`Check assertion (BIT_IOR(1,1) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (BIT_IOR(1,1) = 1);
  ("`Local hypotheses'" & BIT_NOT(0) = 1 & BIT_NOT(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1 & BIT_IOR(0,0) = 0 & BIT_IOR(0,1) = 0 & BIT_IOR(1,0) = 0 & BIT_IOR(1,1) = 1);
  "`Check assertion (BIT_XOR(0,0) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (BIT_XOR(0,0) = 0);
  ("`Local hypotheses'" & BIT_NOT(0) = 1 & BIT_NOT(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1 & BIT_IOR(0,0) = 0 & BIT_IOR(0,1) = 0 & BIT_IOR(1,0) = 0 & BIT_IOR(1,1) = 1 & BIT_XOR(0,0) = 0);
  "`Check assertion (BIT_XOR(0,1) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (BIT_XOR(0,1) = 1);
  ("`Local hypotheses'" & BIT_NOT(0) = 1 & BIT_NOT(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1 & BIT_IOR(0,0) = 0 & BIT_IOR(0,1) = 0 & BIT_IOR(1,0) = 0 & BIT_IOR(1,1) = 1 & BIT_XOR(0,0) = 0 & BIT_XOR(0,1) = 1);
  "`Check assertion (BIT_XOR(1,0) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (BIT_XOR(1,0) = 1);
  ("`Local hypotheses'" & BIT_NOT(0) = 1 & BIT_NOT(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1 & BIT_IOR(0,0) = 0 & BIT_IOR(0,1) = 0 & BIT_IOR(1,0) = 0 & BIT_IOR(1,1) = 1 & BIT_XOR(0,0) = 0 & BIT_XOR(0,1) = 1 & BIT_XOR(1,0) = 1);
  "`Check assertion (BIT_XOR(1,1) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (BIT_XOR(1,1) = 0);
  ("`Local hypotheses'" & BIT_NOT(0) = 1 & BIT_NOT(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1 & BIT_IOR(0,0) = 0 & BIT_IOR(0,1) = 0 & BIT_IOR(1,0) = 0 & BIT_IOR(1,1) = 1 & BIT_XOR(0,0) = 0 & BIT_XOR(0,1) = 1 & BIT_XOR(1,0) = 1 & BIT_XOR(1,1) = 0);
  "`Check assertion (BOOL_TO_BIT(TRUE) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (BOOL_TO_BIT(TRUE) = 1);
  ("`Local hypotheses'" & BIT_NOT(0) = 1 & BIT_NOT(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1 & BIT_IOR(0,0) = 0 & BIT_IOR(0,1) = 0 & BIT_IOR(1,0) = 0 & BIT_IOR(1,1) = 1 & BIT_XOR(0,0) = 0 & BIT_XOR(0,1) = 1 & BIT_XOR(1,0) = 1 & BIT_XOR(1,1) = 0 & BOOL_TO_BIT(TRUE) = 1);
  "`Check assertion (BOOL_TO_BIT(FALSE) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (BOOL_TO_BIT(FALSE) = 0);
  ("`Component assertions'" & BIT_NOT(0) = 1 & BIT_NOT(1) = 0 & BIT_AND(0,0) = 0 & BIT_AND(0,1) = 0 & BIT_AND(1,0) = 0 & BIT_AND(1,1) = 1 & BIT_IOR(0,0) = 0 & BIT_IOR(0,1) = 0 & BIT_IOR(1,0) = 0 & BIT_IOR(1,1) = 1 & BIT_XOR(0,0) = 0 & BIT_XOR(0,1) = 1 & BIT_XOR(1,0) = 1 & BIT_XOR(1,1) = 0 & BOOL_TO_BIT(TRUE) = 1 & BOOL_TO_BIT(FALSE) = 0)
END
&
THEORY EnumerateX 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, local_op == OK)
END
